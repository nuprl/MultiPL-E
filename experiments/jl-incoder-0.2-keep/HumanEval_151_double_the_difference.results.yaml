name: HumanEval_151_double_the_difference
language: julia
results:
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n@assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1mhkj98.jl:25\nin expression starting at\
    \ /tmp/tmpc1mhkj98.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if typeof(i) == Int\n                sum +=\
    \ i\n            else\n                sum += i*i\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list\
    \ of numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqwqy_q4.jl:26\nin expression starting at\
    \ /tmp/tmpsqwqy_q4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ a new list containing only the numbers \n    that are evenly divisible by 3\
    \ in the original list. \n    \n    even_divisible_by_3([3, 6, 9, 12, 15]) ==\
    \ [6, 12]\n    even_divisible_by_3([3, 6, 9, 12, 15, 18]) == [9, 18]\n    even_divisible_by_3([])\
    \ == []\n    even_divisible_by_3([3]) == [3]\n    even_divisible_by_3([3, 3])\
    \ == [3]\n    even_divisible_by_3([3, 3, 3]) == [3]\n    even_divisible_by_3([3,\
    \ 3, 3, 3]) == [3]\n    even_divisible_by_3([3, 3, 3, 3, 3]) == [3]\n    even_divisible_by_3([3,\
    \ 3, 3, 3, 3, 3]) == [3]\n    even_divisible_by_3([3, 3, 3, 3, 3, 3, 3]) == [3]\n\
    \    \n    If the input list is empty, return an empty list.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxd45c6u.jl:23\nin expression starting at\
    \ /tmp/tmpkxd45c6u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbzwhz0a.jl:27\nin expression starting at\
    \ /tmp/tmpfbzwhz0a.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst\n            if n >= 0\n                sum += n * n\n \
    \           else \n                sum += n\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8gqvwi2.jl:25\nin expression starting at\
    \ /tmp/tmp_8gqvwi2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdoc4e2h.jl:26\nin expression starting at\
    \ /tmp/tmpxdoc4e2h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ \n            else \n                sum += i*i \n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1aaa93z7.jl:25\nin expression starting at\
    \ /tmp/tmp1aaa93z7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31kuqii2.jl:23\nin expression starting at\
    \ /tmp/tmp31kuqii2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63ksjwyp.jl:27\nin expression starting at\
    \ /tmp/tmp63ksjwyp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaai1_j4s.jl:26\nin expression starting at\
    \ /tmp/tmpaai1_j4s.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnws7sdum.jl:26\nin expression starting at\
    \ /tmp/tmpnws7sdum.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvnt52zt.jl:24\nin expression starting at\
    \ /tmp/tmpuvnt52zt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeg2f63is.jl:23\nin expression starting at\
    \ /tmp/tmpeg2f63is.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkra1tq75.jl:26\nin expression starting at\
    \ /tmp/tmpkra1tq75.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzncdv64j.jl:25\nin expression starting at\
    \ /tmp/tmpzncdv64j.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ product of the numbers in the list that are odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15ak37lh.jl:26\nin expression starting at\
    \ /tmp/tmp15ak37lh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtvi31ue.jl:21\nin expression starting at\
    \ /tmp/tmpvtvi31ue.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wmbgbo1.jl:24\nin expression starting at\
    \ /tmp/tmp8wmbgbo1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for i in lst \n        if isodd(i) \n            sum += i \n        else \n\
    \            sum -= i \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3petc_e.jl:26\nin expression starting at\
    \ /tmp/tmpl3petc_e.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g7t373b.jl:21\nin expression starting at\
    \ /tmp/tmp8g7t373b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum -= n * n\n            end\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifbsjwrk.jl:27\nin expression starting at\
    \ /tmp/tmpifbsjwrk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvp_asa2.jl:22\nin expression starting at\
    \ /tmp/tmplvp_asa2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i .> 0 \n                sum += i * i \n\
    \            else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46pv327f.jl:25\nin expression starting at\
    \ /tmp/tmp46pv327f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhj9_9_d.jl:26\nin expression starting at\
    \ /tmp/tmpyhj9_9_d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sdcj9aw.jl:27\nin expression starting at\
    \ /tmp/tmp7sdcj9aw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of the numbers in the list that are odd.\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvy9hadbq.jl:25\nin expression starting at\
    \ /tmp/tmpvy9hadbq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of a list\
    \ of numbers. \nThe product of any list of numbers is equal to the product of\
    \ its elements.\nThe product of empty list is 1.\nThe product of one number is\
    \ 1.\nThe product of multiple numbers is their product.\nThe product of negative\
    \ numbers is 0.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimals is their\
    \ product.\nThe product of numbers with decimals is their product.\nThe product\
    \ of numbers with decimals is their product.\nThe product of numbers with decimals\
    \ is their product.\nThe product of numbers with decimals is their product.\n\
    The product of numbers with decimals is their product.\nThe product of numbers\
    \ with decimals is their product.\nThe product of numbers with decimal\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo44b6dm4.jl:23\nin expression starting at\
    \ /tmp/tmpo44b6dm4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst \n            if n >= 0 \n                sum += n*n \n\
    \            else \n                sum += n*n \n                sum -= n \n \
    \           end \n        end \n        return sum \n    end \nend \n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2mfq153.jl:28\nin expression starting at\
    \ /tmp/tmpp2mfq153.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of numbers and returns the product of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80sdafiy.jl:27\nin expression starting at\
    \ /tmp/tmp80sdafiy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i*i \n\
    \            end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that takes a list of numbers and returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj3kc06t.jl:25\nin expression starting at\
    \ /tmp/tmphj3kc06t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ list of numbers, return the sum of squares of the numbers\n    in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax83huqg.jl:25\nin expression starting at\
    \ /tmp/tmpax83huqg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x7d6h94.jl:25\nin expression starting at\
    \ /tmp/tmp5x7d6h94.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for n in lst\n        if n >= 0\n            sum += n\n        else\n     \
    \       sum += -n \n        end\n    end\n    \n    return sum * sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the number\
    \ of elements that are not equal to zero. \nFor example the vector [1,2,3] should\
    \ return 2 because 1 and 3 are not equal to zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnb1kvck.jl:28\nin expression starting at\
    \ /tmp/tmpvnb1kvck.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ numbers in the list that are odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_1xgt_n.jl:23\nin expression starting at\
    \ /tmp/tmpp_1xgt_n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpjxv0ba.jl:27\nin expression starting at\
    \ /tmp/tmpnpjxv0ba.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ double_the_difference([1, 3, 2, 0]) == 10\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqhvk117.jl:27\nin expression starting at\
    \ /tmp/tmpvqhvk117.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0noq8tqa.jl:24\nin expression starting at\
    \ /tmp/tmp0noq8tqa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else \n                sum -= i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgg1nr_rl.jl:25\nin expression starting at\
    \ /tmp/tmpgg1nr_rl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38irwiv5.jl:26\nin expression starting at\
    \ /tmp/tmp38irwiv5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x^2\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ a new list containing only the\n    numbers that are odd numbers. \n    \n \
    \   odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([1, 2, -3, 4]) == [1,\
    \ -3]\n    odd_numbers([]) == []\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1,\
    \ 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2,\
    \ -3]) == [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1,\
    \ 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1,\
    \ 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2,\
    \ -3]) == [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1,\
    \ 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 2, -3]) == [1, -3]\n    odd_numbers([1,\
    \ 3, -4]) == [1, 3]\n    odd_numbers([1, 2, 3, 4]) == [1, 3]\n    odd_numbers([-2,\
    \ -3]) == [-2, -3]\n    odd_numbers([1, -3]) == [1, -3]\n    odd_numbers([1, 2,\
    \ -3]) == [1, -3]\n    odd_numbers([1, 3, -4]) == [1, 3]\n    odd_numbers([1,\
    \ 2, 3, 4]) == [1, 3]\n    odd_numbers([-2, -3]) == [-2, -3]\n    odd_numbers([1,\
    \ -3]) == [1, \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps96avqm0.jl:23\nin expression starting at\
    \ /tmp/tmps96avqm0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isa(i::Int64)\n            sum += i\n        elseif\
    \ isa(i::Float64)\n            sum += i*i\n        else\n            println(\"\
    ERROR: input must be a list of numbers\")\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hvq7p7d.jl:29\nin expression starting at\
    \ /tmp/tmp1hvq7p7d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnfw1s53.jl:27\nin expression starting at\
    \ /tmp/tmpwnfw1s53.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i)\n                sum += i\n\
    \            else \n                sum += i * i\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    Given a list of numbers,\
    \ return a new list that is the same length and\n    contains only the numbers\
    \ that are even. \n    \n    even_numbers([1, 2, 3, 4]) == [1, 3]\n    even_numbers([1,\
    \ 2, -3, 4]) == [1, -3]\n    even_numbers([-2, 1, 2, -3, 4]) == [-2, 1]\n    even_numbers([-2,\
    \ -1, 2, -3, 4]) == [-2, -1]\n    even_numbers([-2, -1, -2, -3, 4]) == [-2, -1]\n\
    \    even_numbers([-2, -1, -2, -3, 4])\n    even_numbers([-2, -1, -2, -3, 4, 5])\
    \ == [-2, -1, -2, -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6]) == [-2,\
    \ -1, -2, -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7]) == [-2, -1, -2,\
    \ -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8]) == [-2, -1, -2, -3,\
    \ 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9]) == [-2, -1, -2, -3,\
    \ 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10]) == [-2, -1, -2,\
    \ -3, 4]\n    even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11])\n    even_numbers([-2,\
    \ -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    even_numbers([-2, -1, -2, -3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    even_numbers([-2, -1, -2, -3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    even_numbers([-2, -1, -2, -3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    even_numbers([-2, -1, -2, -3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    even_numbers([-2, -1, -2, -3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    even_numbers([-2, -1, -2,\
    \ -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    even_numbers([-2,\
    \ -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n   \
    \ even_numbers([-2, -1, -2, -3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20])\n    even_numbers([-2, -1, -2, \nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygiq9_59.jl:25\nin expression starting at\
    \ /tmp/tmpygiq9_59.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the numbers in the list that are even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_reeg_c.jl:27\nin expression starting at\
    \ /tmp/tmpg_reeg_c.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvm8mq0nr.jl:26\nin expression starting at\
    \ /tmp/tmpvm8mq0nr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gss3b0f.jl:23\nin expression starting at\
    \ /tmp/tmp0gss3b0f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3qqukq6.jl:27\nin expression starting at\
    \ /tmp/tmpq3qqukq6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return a new list containing only the numbers\n\
    \    that are evenly divisible by 3 in the original list. \n    \n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4,\
    \ 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n\
    \    even_divisible_by_3([]) == []\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n \
    \   even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n \
    \   even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15])\
    \ == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9,\
    \ 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n \
    \   even_divisible_by_3([4, 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4,\
    \ 6, 9, 12, 15]) == [4, 6, 9, 12, 15]\n    even_divisible_by_3([4, 6, 9, 12, \n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf93pln6p.jl:26\nin expression starting at\
    \ /tmp/tmpf93pln6p.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    else \n        \n \
    \       odd_sum = 0 \n        for n in lst \n            if n >= 0 \n        \
    \        odd_sum += n \n            end\n        end\n        \n        return\
    \ odd_sum * odd_sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6fkrtbd.jl:28\nin expression starting at\
    \ /tmp/tmpi6fkrtbd.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrm7tbo6.jl:26\nin expression starting at\
    \ /tmp/tmpmrm7tbo6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i*i \n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ of numbers and returns the product of all the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_25g_gs.jl:25\nin expression starting at\
    \ /tmp/tmpu_25g_gs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i) \n                sum += i\n\
    \            else \n                sum += i*i\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the product of\
    \ the numbers in the list that are even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8jby78k.jl:25\nin expression starting at\
    \ /tmp/tmpl8jby78k.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5zdm373.jl:26\nin expression starting at\
    \ /tmp/tmpv5zdm373.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for n in lst\n        if n >= 0\n            sum += n\n        else\n     \
    \       sum -= n\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp604ph4a6.jl:28\nin expression starting at\
    \ /tmp/tmp604ph4a6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvw3xqz1.jl:26\nin expression starting at\
    \ /tmp/tmpwvw3xqz1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the product of the numbers in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc489zc5d.jl:21\nin expression starting at\
    \ /tmp/tmpc489zc5d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv016r1nb.jl:25\nin expression starting at\
    \ /tmp/tmpv016r1nb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n >= 0\n                sum += n * n\n    \
    \        else\n                sum += n\n        end\n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmcjjaoo.jl:26\nin expression starting at\
    \ /tmp/tmpvmcjjaoo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnirzrdv.jl:26\nin expression starting at\
    \ /tmp/tmptnirzrdv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 != 0\n            sum += x\n        end\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxpaj6i1.jl:26\nin expression starting at\
    \ /tmp/tmpkxpaj6i1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst \n            if n >= 0 \n                sum += n*n \n\
    \            else \n                sum -= n*n \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02k63ijk.jl:25\nin expression starting at\
    \ /tmp/tmp02k63ijk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8q5ix3u.jl:25\nin expression starting at\
    \ /tmp/tmpz8q5ix3u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom_5vr8p.jl:27\nin expression starting at\
    \ /tmp/tmpom_5vr8p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for i in lst\n        if i > 0\n            sum += i * i\n        else\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0alcvlw3.jl:27\nin expression starting at\
    \ /tmp/tmp0alcvlw3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalpn96a1.jl:26\nin expression starting at\
    \ /tmp/tmpalpn96a1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgujs44jc.jl:21\nin expression starting at\
    \ /tmp/tmpgujs44jc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the product of the numbers in the list\n    that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9iv5v3or.jl:23\nin expression starting at\
    \ /tmp/tmp9iv5v3or.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n    for x\
    \ in lst \n        if x % 2 != 0 \n            sum += x \n        else \n    \
    \        sum -= x \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf07gmxk.jl:25\nin expression starting at\
    \ /tmp/tmpuf07gmxk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the product of the numbers in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumu3b9z1.jl:22\nin expression starting at\
    \ /tmp/tmpumu3b9z1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_owga4x.jl:21\nin expression starting at\
    \ /tmp/tmpi_owga4x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvorqffxj.jl:23\nin expression starting at\
    \ /tmp/tmpvorqffxj.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa908spb_.jl:21\nin expression starting at\
    \ /tmp/tmpa908spb_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx103ap8a.jl:26\nin expression starting at\
    \ /tmp/tmpx103ap8a.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ a new list containing only the numbers \n    that are evenly divisible by 7.\
    \ \n    \n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3,\
    \ 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == [7, 3, 5]\n    even_divisible([7, 3, 5]) == [7, 3, 5]\n    even_divisible([7,\
    \ 3, 5]) == \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbeglamjl.jl:23\nin expression starting at\
    \ /tmp/tmpbeglamjl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpe3w353.jl:25\nin expression starting at\
    \ /tmp/tmpzpe3w353.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        odd_sum =\
    \ 0 \n        for i in lst \n            if i .% 2 == 1 \n                odd_sum\
    \ = odd_sum + i \n            end \n        end \n        return odd_sum * odd_sum\
    \ \n    end \nend \n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the product of the numbers in a given list.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nxcq0a9.jl:25\nin expression starting at\
    \ /tmp/tmp0nxcq0a9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst\n            if n >= 0\n                sum += n * n\n \
    \           else\n                sum -= n * n\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn0cd4o1.jl:26\nin expression starting at\
    \ /tmp/tmpnn0cd4o1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93znr0oa.jl:25\nin expression starting at\
    \ /tmp/tmp93znr0oa.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpns37aqaq.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpns37aqaq.jl:1\n\
    in expression starting at /tmp/tmpns37aqaq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for i in lst \n        if i %% 2 == 1 \n            sum += i \n        end \n\
    \    end \n    \n    return sum\nend \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppekzdj45.jl:19\nin expression starting at\
    \ /tmp/tmppekzdj45.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    double_the_difference([-1, -2, 0])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpympnf67g.jl:21\nin expression starting at\
    \ /tmp/tmpympnf67g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6_coene.jl:26\nin expression starting at\
    \ /tmp/tmpk6_coene.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hqk7la4.jl:26\nin expression starting at\
    \ /tmp/tmp8hqk7la4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyv2057c.jl:23\nin expression starting at\
    \ /tmp/tmpwyv2057c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_q62gsn.jl:26\nin expression starting at\
    \ /tmp/tmp3_q62gsn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          end\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf97ymse.jl:25\nin expression starting at\
    \ /tmp/tmpmf97ymse.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i\n         \
    \   else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return a new list containing only the\n    even numbers in the original list.\
    \ \n    \n    even_numbers([1, 2, 3, 4]) == [2, 4]\n    even_numbers([1, -2, 3])\
    \ == [-2, 3]\n    even_numbers([]) == []\n    \n    If the input list is empty,\
    \ return an empty list.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy944w892.jl:26\nin expression starting at\
    \ /tmp/tmpy944w892.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1oka0d3.jl:26\nin expression starting at\
    \ /tmp/tmpa1oka0d3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i^2\n       \
    \     else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list. Ignore numbers that are\
    \ negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzryryw42.jl:26\nin expression starting at\
    \ /tmp/tmpzryryw42.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplznrs_gp.jl:27\nin expression starting at\
    \ /tmp/tmplznrs_gp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dgqd3v2.jl:26\nin expression starting at\
    \ /tmp/tmp1dgqd3v2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([-1,\
    \ -2, 0]) == 0\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([0])\
    \ == 0\n@assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert\
    \ double_the_difference([9, -2]) == 81\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jdz1qyj.jl:26\nin expression starting at\
    \ /tmp/tmp_jdz1qyj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n  \
    \  for i in lst \n        if isodd(i) \n            sum += i \n        else \n\
    \            sum += i*i \n    \n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgo7js_dw.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgo7js_dw.jl:1\n\
    in expression starting at /tmp/tmpgo7js_dw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum += 0\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw4vgxtm.jl:23\nin expression starting at\
    \ /tmp/tmptw4vgxtm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzoxiesa.jl:26\nin expression starting at\
    \ /tmp/tmpqzoxiesa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else\n                sum -= i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucekar1f.jl:26\nin expression starting at\
    \ /tmp/tmpucekar1f.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers in the list that are even.\nIf the input list is empty, return 0.\n\
    If the input list contains only even numbers, return that number.\nIf the input\
    \ list contains both even and odd numbers, return the sum of those numbers.\n\
    If the input list contains both odd and even numbers, return the sum of those\
    \ numbers.\nIf there are multiple even numbers in the list, return the sum of\
    \ the even numbers.\nIf there are multiple odd numbers in the list, return the\
    \ sum of the odd numbers.\nIf there are multiple even and odd numbers in the list,\
    \ return the sum of the even numbers.\nIf there are multiple even numbers and\
    \ multiple odd numbers in the list, return the sum of the odd numbers.\nIf there\
    \ are multiple even numbers and multiple odd numbers in the list, return the sum\
    \ of the even numbers.\nIf there are multiple even numbers and multiple odd numbers\
    \ in the list, return the sum of the odd numbers.\nIf there are multiple even\
    \ numbers and multiple odd numbers in the list, return the sum of the even numbers.\n\
    If there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the odd numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the even numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the odd\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the even numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the odd numbers.\nIf\
    \ there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the even numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the odd numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the even\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the odd numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the even numbers.\n\
    If there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the odd numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the even numbers.\nIf there are multiple\
    \ even numbers and multiple odd numbers in the list, return the sum of the odd\
    \ numbers.\nIf there are multiple even numbers and multiple odd numbers in the\
    \ list, return the sum of the even numbers.\nIf there are multiple even numbers\
    \ and multiple odd numbers in the list, return the sum of the odd numbers.\nIf\
    \ there are multiple even numbers and multiple odd numbers in the list, return\
    \ the sum of the even numbers.\nIf there are multiple even numbers and multiple\
    \ odd numbers in the list, return the sum of the odd numbers.\n\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpz5h9q8.jl:26\nin expression starting at\
    \ /tmp/tmprpz5h9q8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7whuy4ku.jl:25\nin expression starting at\
    \ /tmp/tmp7whuy4ku.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the product of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaa0hgbp2.jl:23\nin expression starting at\
    \ /tmp/tmpaa0hgbp2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n       \
    \ else\n            sum += i * i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_5jrm8x.jl:28\nin expression starting at\
    \ /tmp/tmp0_5jrm8x.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time double_the_difference([1,3,2,0])\n\
    </cell>\n<code language=julia-1.5>\n@time double_the_difference([-1,-2,0])\n</cell>\n\
    <code language=julia-1.5>\n@time double_the_difference([9,-2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time double_the_difference([0])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_w0vccmb.jl:26\nin expression starting at\
    \ /tmp/tmp_w0vccmb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4u0x48m.jl:23\nin expression starting at\
    \ /tmp/tmph4u0x48m.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfd0531xu.jl:27\nin expression starting at\
    \ /tmp/tmpfd0531xu.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77r24u_r.jl:25\nin expression starting at\
    \ /tmp/tmp77r24u_r.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          end\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) ==\
    \ 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6q7488up.jl:25\nin expression starting at\
    \ /tmp/tmp6q7488up.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1e2ml7q.jl:21\nin expression starting at\
    \ /tmp/tmpb1e2ml7q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia4n1lpj.jl:21\nin expression starting at\
    \ /tmp/tmpia4n1lpj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb_dl9hs.jl:27\nin expression starting at\
    \ /tmp/tmpvb_dl9hs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 10\n@assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndz5gk0f.jl:26\nin expression starting at\
    \ /tmp/tmpndz5gk0f.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the numbers in a list. \nIf the list is empty, return\
    \ 0.\nIf the list has only one element, return that element.\nIf the list has\
    \ more than one element, return the product of the elements in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7enugg0.jl:26\nin expression starting at\
    \ /tmp/tmpy7enugg0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x^2\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([-1, -2, 0])\n</cell>\n\
    <code language=julia-1.5>\ndouble_the_difference([9, -2])\n</cell>\n<code language=julia-1.5>\n\
    double_the_difference([0])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp419sr4qx.jl:23\nin expression starting at\
    \ /tmp/tmp419sr4qx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in a list. \nIf the list is empty, return 1.\nIf the list has\
    \ one number, return that number.\nIf the list has two numbers, return the product\
    \ of the numbers.\nIf the list has three numbers, return the product of the numbers.\
    \ \nIf the list has four numbers, return the product of the numbers. \nIf the\
    \ list has five numbers, return the product of the numbers. \nIf the list has\
    \ six numbers, return the product of the numbers. \nIf the list has seven numbers,\
    \ return the product of the numbers. \nIf the list has eight numbers, return the\
    \ product of the numbers. \nIf the list has nine numbers, return the product of\
    \ the numbers. \nIf the list has ten numbers, return the product of the numbers.\
    \ \nIf the list has eleven numbers, return the product of the numbers. \nIf the\
    \ list has twelve numbers, return the product of the numbers. \nIf the list has\
    \ thirteen numbers, return the product of the numbers. \nIf the list has fourteen\
    \ numbers, return the product of the numbers. \nIf the list has fifteen numbers,\
    \ return the product of the numbers. \nIf the list has sixteen numbers, return\
    \ the product of the numbers. \nIf the list has seventeen numbers, return the\
    \ product of the numbers. \nIf the list has eighteen numbers, return the product\
    \ of the numbers. \nIf the list has nineteen numbers, return the product of the\
    \ numbers. \nIf the list has twenty numbers, return the product of the numbers.\
    \ \nIf the list has thirty numbers, return the product of the numbers. \nIf the\
    \ list has fourty numbers, return the product of the numbers. \nIf the list has\
    \ fifty numbers, return the product of the numbers. \nIf the list has sixty numbers,\
    \ return the product of the numbers. \nIf the list has seventy numbers, return\
    \ the product of the numbers. \nIf the list has eighty numbers, return the product\
    \ of the numbers. \nIf the list has ninety numbers, return the product of the\
    \ numbers. \nIf the list has hundred numbers, return the product of the numbers.\
    \ \nIf the list has thousand numbers, return the product of the numbers. \nIf\
    \ the list has million numbers, return the product of the numbers. \nIf the list\
    \ has billion numbers, return the product of the numbers. \nIf the list has trillion\
    \ numbers, return the product of the numbers. \nIf the list has quadrillion numbers,\
    \ return the product of the numbers. \nIf the list has quintillion number\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zpdz5ij.jl:24\nin expression starting at\
    \ /tmp/tmp1zpdz5ij.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvd7lrthi.jl:26\nin expression starting at\
    \ /tmp/tmpvd7lrthi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isinteger(i)\n            sum += i\n        else\n\
    \            sum += i * i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert double_the_difference([1, 3, 2, 0]) == 10\n\
    @assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the list that are\
    \ even.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t\
    @test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\
    \t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0, -30.0])\
    \ == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0,\
    \ 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmz6mul6.jl:27\nin expression starting at\
    \ /tmp/tmpjmz6mul6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqworkxu3.jl:25\nin expression starting at\
    \ /tmp/tmpqworkxu3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjljcm2j.jl:26\nin expression starting at\
    \ /tmp/tmpkjljcm2j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for i in lst \n        if isodd(i) \n            sum += i \n        else \n\
    \            sum -= i \n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfv6edem.jl:27\nin expression starting at\
    \ /tmp/tmptfv6edem.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5myfgpfa.jl:27\nin expression starting at\
    \ /tmp/tmp5myfgpfa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i .> 0 \n                sum += i * i \n\
    \            else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbis_0ehh.jl:25\nin expression starting at\
    \ /tmp/tmpbis_0ehh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n  \
    \  for i in lst \n        if isodd(i) \n            sum += i \n        else \n\
    \            sum += i*i \n    return sum \nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of numbers and returns the product of all the\
    \ numbers in the list. Ignore numbers that are negative or not integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4m5izdaz.jl:25\nin expression starting at\
    \ /tmp/tmp4m5izdaz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i*i \n\
    \            else \n                sum += 0 \n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfjw7r_6.jl:25\nin expression starting at\
    \ /tmp/tmpxfjw7r_6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88qrbtcz.jl:26\nin expression starting at\
    \ /tmp/tmp88qrbtcz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh2vx07w.jl:26\nin expression starting at\
    \ /tmp/tmpxh2vx07w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouwlpylj.jl:23\nin expression starting at\
    \ /tmp/tmpouwlpylj.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i .% 2 == 1 \n                sum += i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyz32x5ks.jl:25\nin expression starting at\
    \ /tmp/tmpyz32x5ks.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for x in lst\n        if x % 2 == 1 \n            sum += x \n        else \n\
    \            sum -= x \n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayzir5ol.jl:27\nin expression starting at\
    \ /tmp/tmpayzir5ol.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i*i \n\
    \            end \n        end \n        return sum\n    end \nend \n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehvwuaoq.jl:25\nin expression starting at\
    \ /tmp/tmpehvwuaoq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe_lphh6.jl:27\nin expression starting at\
    \ /tmp/tmpbe_lphh6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv97bnzs6.jl:27\nin expression starting at\
    \ /tmp/tmpv97bnzs6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n  \
    \  for i in lst \n        if i .% 2 == 1 \n            sum += i \n        end\
    \ \n    end \n    return sum\nend \n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_q6xnuj.jl:25\nin expression starting at\
    \ /tmp/tmps_q6xnuj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else \n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the numbers\
    \ in the list that are even.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogwcmpz5.jl:25\nin expression starting at\
    \ /tmp/tmpogwcmpz5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk9h503n.jl:26\nin expression starting at\
    \ /tmp/tmpdk9h503n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isa(i, Int64)\n            sum += i\n        elseif\
    \ isa(i, Float64)\n            sum += i * i\n        else\n            throw(ArgumentError(\"\
    Input must be a list of integers or floats\"))\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphogyx59o.jl:35\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 41 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphogyx59o.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphogyx59o.jl:33\ntest set: Error\
    \ During Test at /tmp/tmphogyx59o.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmphogyx59o.jl:27\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmphogyx59o.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmphogyx59o.jl:33\ntest set:\
    \ Test Failed at /tmp/tmphogyx59o.jl:37\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: 1400 == 0\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphogyx59o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphogyx59o.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphogyx59o.jl:38\n  Expression: candidate([-1.0, -2.0, 8.0])\
    \ == 0\n   Evaluated: 69 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphogyx59o.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphogyx5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphogyx59o.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n           \
    \ sum += i\n        else\n            sum += i*i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3wgg6l3.jl:23\nin expression starting at\
    \ /tmp/tmpo3wgg6l3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9_3s1jw.jl:25\nin expression starting at\
    \ /tmp/tmpl9_3s1jw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of the numbers in a list. \nIf the list\
    \ is empty, return 0.\nIf the list has one number, return that number.\nIf the\
    \ list has two numbers, return the product of the numbers.\nIf the list has three\
    \ numbers, return the product of the numbers. \nIf the list has four numbers,\
    \ return the product of the numbers. \nIf the list has five numbers, return the\
    \ product of the numbers. \nIf the list has six numbers, return the product of\
    \ the numbers. \nIf the list has seven numbers, return the product of the numbers.\
    \ \nIf the list has eight numbers, return the product of the numbers. \nIf the\
    \ list has nine numbers, return the product of the numbers. \nIf the list has\
    \ ten numbers, return the product of the numbers. \nIf the list has eleven numbers,\
    \ return the product of the numbers. \nIf the list has twelve numbers, return\
    \ the product of the numbers. \nIf the list has thirteen numbers, return the product\
    \ of the numbers. \nIf the list has fourteen numbers, return the product of the\
    \ numbers. \nIf the list has fifteen numbers, return the product of the numbers.\
    \ \nIf the list has sixteen numbers, return the product of the numbers. \nIf the\
    \ list has seventeen numbers, return the product of the numbers. \nIf the list\
    \ has eighteen numbers, return the product of the numbers. \nIf the list has nineteen\
    \ numbers, return the product of the numbers. \nIf the list has twenty numbers,\
    \ return the product of the numbers. \nIf the list has thirty numbers, return\
    \ the product of the numbers. \nIf the list has fourty numbers, return the product\
    \ of the numbers. \nIf the list has fifty numbers, return the product of the numbers.\
    \ \nIf the list has sixty numbers, return the product of the numbers. \nIf the\
    \ list has seventy numbers, return the product of the numbers. \nIf the list has\
    \ eighty numbers, return the product of the numbers. \nIf the list has ninety\
    \ numbers, return the product of the numbers. \nIf the list has twenty numbers,\
    \ return the product of the numbers. \nIf the list has thirty numbers, return\
    \ the product of the numbers. \nIf the list has fourty numbers, return the product\
    \ of the numbers. \nIf the list has fifty numbers, return the product of the numbers.\
    \ \nIf the list has sixty numbers, return the product of the numbers. \nIf the\
    \ list has seventy numbers, return the product of the numbers. \nIf the list has\
    \ e\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxfh0lg3.jl:25\nin expression starting at\
    \ /tmp/tmppxfh0lg3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\n   \
    \ for x in lst\n        if x % 2 == 1 \n            sum += x \n        else \n\
    \            sum -= x \n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvq8ucin.jl:27\nin expression starting at\
    \ /tmp/tmpsvq8ucin.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%2 != 0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the product of all the numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfe5heh7.jl:22\nin expression starting at\
    \ /tmp/tmprfe5heh7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([0]) == 0\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert double_the_difference([9, -2]) == 81\n\
    @assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b_3s01x.jl:22\nin expression starting at\
    \ /tmp/tmp_b_3s01x.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cwmtm7c.jl:26\nin expression starting at\
    \ /tmp/tmp7cwmtm7c.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsl7ne4g.jl:26\nin expression starting at\
    \ /tmp/tmpnsl7ne4g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a list of numbers, return the sum of squares of the numbers\n    in the\
    \ list that are odd. Ignore numbers that are negative or not integers.\n    \n\
    \    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps45x84au.jl:26\nin expression starting at\
    \ /tmp/tmps45x84au.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpug654pcj.jl:27\nin expression starting at\
    \ /tmp/tmpug654pcj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum -= n * n\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ product of the numbers in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x4y139f.jl:26\nin expression starting at\
    \ /tmp/tmp3x4y139f.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5aqfpv2.jl:27\nin expression starting at\
    \ /tmp/tmpj5aqfpv2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42s1uw6c.jl:26\nin expression starting at\
    \ /tmp/tmp42s1uw6c.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n            end\n        end\n       \
    \ return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpou0c3xbd.jl:27\nin expression starting at\
    \ /tmp/tmpou0c3xbd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7c2e6zse.jl:21\nin expression starting at\
    \ /tmp/tmp7c2e6zse.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpre0yv2d4.jl:26\nin expression starting at\
    \ /tmp/tmpre0yv2d4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp827km4_0.jl:25\nin expression starting at\
    \ /tmp/tmp827km4_0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpev7bs1.jl:21\nin expression starting at\
    \ /tmp/tmpcpev7bs1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    else \n        sum\
    \ = 0\n        for i in lst\n            if i > 0\n                sum += i *\
    \ i\n            else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2yxi9cw.jl:27\nin expression starting at\
    \ /tmp/tmpz2yxi9cw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwltaoh2.jl:22\nin expression starting at\
    \ /tmp/tmpzwltaoh2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the number of positive numbers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wuk0g3n.jl:26\nin expression starting at\
    \ /tmp/tmp0wuk0g3n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for i\
    \ in lst \n        if isinteger(i) \n            sum += i \n        else \n  \
    \          sum += i*i \n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzqxbv0l.jl:24\nin expression starting at\
    \ /tmp/tmpyzqxbv0l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfookmmr.jl:23\nin expression starting at\
    \ /tmp/tmpmfookmmr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum += -x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in the list that are odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgszh2g13.jl:23\nin expression starting at\
    \ /tmp/tmpgszh2g13.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum += -x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return a new list\
    \ containing only the\n    numbers from the input list that are not in the sublist\
    \ [3, 4, 5].\n    \n    not_in([1, 2, 3, 4, 5], [3, 4, 5]) == [1, 2]\n    not_in([1,\
    \ 2, 3, 4, 5], [1, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1,\
    \ 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2,\
    \ 3, 4, 5], [1, 4, 5]) == []\n    not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n \
    \   not_in([1, 2, 3, 4, 5], [1, 4, 5]) == []\n    not_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagsygc5w.jl:22\nin expression starting at\
    \ /tmp/tmpagsygc5w.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7onzeg7.jl:26\nin expression starting at\
    \ /tmp/tmpw7onzeg7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqizkyug.jl:26\nin expression starting at\
    \ /tmp/tmpoqizkyug.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a list of numbers, return the sum of squares of the numbers\n    in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv4d2sqd.jl:25\nin expression starting at\
    \ /tmp/tmpxv4d2sqd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i*i \n        end \n      \
    \  return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjup9zutj.jl:26\nin expression starting at\
    \ /tmp/tmpjup9zutj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i > 0\n                sum += i * i\n \
    \           else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9qon211.jl:26\nin expression starting at\
    \ /tmp/tmpp9qon211.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all the numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn8of_8q.jl:21\nin expression starting at\
    \ /tmp/tmpkn8of_8q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndouble_the_difference([-1, -2, 0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the list that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinsx1dwv.jl:23\nin expression starting at\
    \ /tmp/tmpinsx1dwv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else\n                sum -= i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqhvyrn7.jl:26\nin expression starting at\
    \ /tmp/tmpyqhvyrn7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else \n                sum -= i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers and\
    \ returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8lk1poa.jl:25\nin expression starting at\
    \ /tmp/tmpr8lk1poa.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0 \n        return 0 \n    else \n        \n \
    \       sum = 0\n        for n in lst\n            if n >= 0 \n              \
    \  sum += n*n \n            else \n                sum -= n*n \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return the sum of squares of the numbers\n    in\
    \ the list that are odd. Ignore numbers that are negative or not integers.\n \
    \   \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue03o337.jl:28\nin expression starting at\
    \ /tmp/tmpue03o337.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return a new list containing only the numbers\n\
    \    that are even. Ignore numbers that are negative or not integers.\n    \n\
    \    even_the_difference([1, 3, 2, 0]) == [1, 3, 2]\n    even_the_difference([-1,\
    \ -2, 0]) == [-1, -2]\n    even_the_difference([9, -2]) == [9]\n    even_the_difference([0])\
    \ == [0]\n    \n    If the input list is empty, return an empty list.\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqe4tr1x.jl:25\nin expression starting at\
    \ /tmp/tmpkqe4tr1x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the product of the numbers in\
    \ the list that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvepju8z.jl:25\nin expression starting at\
    \ /tmp/tmprvepju8z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum -= n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyb590lg.jl:26\nin expression starting at\
    \ /tmp/tmpxyb590lg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 != 0\n            sum += x\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the product of the numbers in a list.\nIf the list is empty, return\
    \ 1.\nIf the list has one element, return that element.\nIf the list has two or\
    \ more elements, return the first element multiplied by the product of the rest\
    \ of the elements.\nIf the list has more than two elements, raise an error message.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpskhwm3co.jl:25\nin expression starting at\
    \ /tmp/tmpskhwm3co.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8dkl2mg.jl:26\nin expression starting at\
    \ /tmp/tmpl8dkl2mg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8m5wqoq.jl:23\nin expression starting at\
    \ /tmp/tmph8m5wqoq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if i > 0\n            sum += i * i\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bl9qwbe.jl:25\nin expression starting at\
    \ /tmp/tmp6bl9qwbe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for i in lst\n        if isa(i::Int64) || isa(i::Int)\n            sum += i\n\
    \        elseif isa(i::Float64)\n            sum += i^2\n        else\n      \
    \      println(\"Not a number\")\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf70e5815.jl:29\nin expression starting at\
    \ /tmp/tmpf70e5815.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsgr_hzn.jl:23\nin expression starting at\
    \ /tmp/tmpcsgr_hzn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        odd_sum =\
    \ 0 \n        for n in lst \n            if n >= 0 \n                odd_sum +=\
    \ n \n            else \n                odd_sum += -n \n        return odd_sum\
    \ * odd_sum \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector, ignoring any negative numbers. \nFor example, if the input vector\
    \ is [4, -3, 5, -2], then the output should be 19. \nThe function should ignore\
    \ the fact that there are negative numbers in the input vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjwuxvdq.jl:25\nin expression starting at\
    \ /tmp/tmprjwuxvdq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i .> 0 \n                sum += i * i \n\
    \            else \n                sum += i \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return a new list containing only the numbers \n    that are evenly divisible\
    \ by 7. \n    \n    even_divisible([7, 2, 5, 3]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7,\
    \ 2, 5, 3, 1]) == [7, 3]\n    even_divisible([7, 2, 5, 3, 1]) == [7, 3]\n    ev\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ss63l88.jl:25\nin expression starting at\
    \ /tmp/tmp2ss63l88.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the product of the numbers in the list\n    that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpi2gm_3.jl:23\nin expression starting at\
    \ /tmp/tmpgpi2gm_3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    \n    sum = 0 \n    for x\
    \ in lst \n        if x % 2 == 1 \n            sum += x \n        else \n    \
    \        sum -= x \n    \n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n\
    \    in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1,\
    \ -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0])\
    \ == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2i6d2mw.jl:25\nin expression starting at\
    \ /tmp/tmpt2i6d2mw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dsum8ii.jl:26\nin expression starting at\
    \ /tmp/tmp1dsum8ii.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst\n            if n >= 0\n                sum += n\n     \
    \       else\n                sum -= n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfye04sh5.jl:26\nin expression starting at\
    \ /tmp/tmpfye04sh5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i^2\n    \
    \        else\n                sum += i\n        end\n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfaqpvoj.jl:26\nin expression starting at\
    \ /tmp/tmpzfaqpvoj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ double_the_difference([-1, -2, 0]) == 0\n@assert double_the_difference([9, -2])\
    \ == 81\n@assert double_the_difference([0]) == 0\n@assert double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n@assert double_the_difference([9, -2]) == 81\n\
    @assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]) == 81\n@assert double_the_difference([9,\
    \ -2]) == 81\n@assert double_the_difference([9, -2]\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0iaawsdy.jl:27\nin expression starting at\
    \ /tmp/tmp0iaawsdy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the product of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72kmg5xb.jl:26\nin expression starting at\
    \ /tmp/tmp72kmg5xb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvins595.jl:26\nin expression starting at\
    \ /tmp/tmpxvins595.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeh14h1o1.jl:26\nin expression starting at\
    \ /tmp/tmpeh14h1o1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3yy_om0.jl:25\nin expression starting at\
    \ /tmp/tmpl3yy_om0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return the sum\
    \ of squares of the numbers\n    in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0])\
    \ == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpedjw87.jl:25\nin expression starting at\
    \ /tmp/tmpcpedjw87.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ a new vector where each element is the sum of the squares of the numbers in\
    \ the original vector. Ignore numbers that are negative or not integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5dxsp93.jl:26\nin expression starting at\
    \ /tmp/tmpm5dxsp93.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3: Write a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz2p_g2x.jl:24\nin expression starting at\
    \ /tmp/tmppz2p_g2x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n >= 0\n                sum += n * n\n    \
    \        else\n                sum += n\n        end\n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mj6jqz9.jl:26\nin expression starting at\
    \ /tmp/tmp9mj6jqz9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for n in lst\n            if n >= 0\n                sum += n\n     \
    \       else\n                sum -= n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the numbers in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsftkbhg.jl:26\nin expression starting at\
    \ /tmp/tmpqsftkbhg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n  \
    \  for x in lst\n        if x % 2 != 0\n            sum += x\n        end\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a list of numbers, return a new list containing only the numbers\n\
    \    that are both even and odd in the original list. \n    \n    even_odd_both([1,\
    \ 3, 2, 0]) == [1, 3]\n    even_odd_both([-1, -2, 0]) == [-1, -2]\n    even_odd_both([9,\
    \ -2]) == [9, -2]\n    even_odd_both([0]) == [0]\n    \n    If the input list\
    \ is empty, return an empty list.\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vot9xcg.jl:26\nin expression starting at\
    \ /tmp/tmp3vot9xcg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers, return\
    \ the sum of squares of the numbers\n    in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    double_the_difference([1, 3, 2,\
    \ 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n   \
    \ double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\
    \   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3vpssgy.jl:23\nin expression starting at\
    \ /tmp/tmpg3vpssgy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of\
    \ numbers, return the sum of squares of the numbers\n    in the list that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy0_07q3.jl:26\nin expression starting at\
    \ /tmp/tmpsy0_07q3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x > 0\n            sum +=\
    \ x*x\n        else\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a list of numbers,\
    \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    double_the_difference([1,\
    \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n\
    \    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\
    \  \n   \n    If the input list is empty, return 0.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjktxwz2.jl:24\nin expression starting at\
    \ /tmp/tmphjktxwz2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdzvov2i.jl:26\nin expression starting at\
    \ /tmp/tmpxdzvov2i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return the sum of squares of the\
    \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
    \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9,\
    \ -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list\
    \ is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndouble_the_difference([-1,\
    \ -2, 0])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the numbers in the list that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolzrnk32.jl:27\nin expression starting at\
    \ /tmp/tmpolzrnk32.jl:27\n"
  exit_code: 1
  status: SyntaxError
