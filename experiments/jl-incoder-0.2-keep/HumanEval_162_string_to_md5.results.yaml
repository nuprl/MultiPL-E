name: HumanEval_162_string_to_md5
language: julia
results:
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp06uxcg0v.jl:9\nin expression starting at /tmp/tmp06uxcg0v.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9uws50f.jl:9\nin expression starting at /tmp/tmpm9uws50f.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfcdb3h8.jl:14\nin expression starting at\
    \ /tmp/tmpnfcdb3h8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = md5(text) \n        return digest.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni6my12v.jl:14\nin expression starting at\
    \ /tmp/tmpni6my12v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gopyxq2.jl:14\nin expression starting at\
    \ /tmp/tmp6gopyxq2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5(text) \n        md5_hash_string = md5_hash.hexdigest \n  \
    \      return md5_hash_string \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdnkwkkte.jl:9\nin expression starting at /tmp/tmpdnkwkkte.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_p5eag2.jl:14\nin expression starting at\
    \ /tmp/tmpw_p5eag2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu472hwo8.jl:14\nin expression starting at\
    \ /tmp/tmpu472hwo8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpes9x34k3.jl:14\nin expression starting at\
    \ /tmp/tmpes9x34k3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdd_97nfk.jl:9\nin expression starting at /tmp/tmpdd_97nfk.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcinxftkp.jl:9\nin expression starting at /tmp/tmpcinxftkp.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5_hash_to_string(md5hash::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf1wzquj.jl:13\nin expression starting at\
    \ /tmp/tmpkf1wzquj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x6ctztf.jl:14\nin expression starting at\
    \ /tmp/tmp8x6ctztf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp24dv9hzk.jl:9\nin expression starting at /tmp/tmp24dv9hzk.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = md5(text) \n        return md5hash.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise: Write a function that takes a string as input\
    \ and returns the md5 hash of the string converted to lowercase. Test it on several\
    \ strings and print the results.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u0fzc2b.jl:14\nin expression starting at\
    \ /tmp/tmp2u0fzc2b.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphhrgveyt.jl:9\nin expression starting at /tmp/tmphhrgveyt.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the md5 hash equivalent string of the text converted to lowercase. \n\
    If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsir5tggk.jl:15\nin expression starting at\
    \ /tmp/tmpsir5tggk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojsab2u9.jl:14\nin expression starting at\
    \ /tmp/tmpojsab2u9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxk1wingk.jl:9\nin expression starting at /tmp/tmpxk1wingk.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ebj9ic8.jl:9\nin expression starting at /tmp/tmp1ebj9ic8.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzsgvt9xx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzsgvt9xx.jl:1\n\
    in expression starting at /tmp/tmpzsgvt9xx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpusqr9xm8.jl:9\nin expression starting at /tmp/tmpusqr9xm8.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vc424m_.jl:9\nin expression starting at /tmp/tmp1vc424m_.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7m2opcv.jl:14\nin expression starting at\
    \ /tmp/tmpx7m2opcv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ldtrp9b.jl:14\nin expression starting at\
    \ /tmp/tmp_ldtrp9b.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocyw705f.jl:14\nin expression starting at\
    \ /tmp/tmpocyw705f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyllhvwa.jl:14\nin expression starting at\
    \ /tmp/tmpzyllhvwa.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o1ulvrx.jl:14\nin expression starting at\
    \ /tmp/tmp_o1ulvrx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptuf_ui6h.jl:9\nin expression starting at /tmp/tmptuf_ui6h.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kpk3w_i.jl:14\nin expression starting at\
    \ /tmp/tmp1kpk3w_i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp413ugr2v.jl:14\nin expression starting at\
    \ /tmp/tmp413ugr2v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxewveles.jl:14\nin expression starting at\
    \ /tmp/tmpxewveles.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3w1aigai.jl:14\nin expression starting at\
    \ /tmp/tmp3w1aigai.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63ee9d55.jl:14\nin expression starting at\
    \ /tmp/tmp63ee9d55.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ty1wybg.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ty1wybg.jl:1\n\
    in expression starting at /tmp/tmp2ty1wybg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string if it exists or None if it doesn't.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzja06koa.jl:9\nin expression starting at /tmp/tmpzja06koa.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80_6f4so.jl:14\nin expression starting at\
    \ /tmp/tmp80_6f4so.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdwfr0v3u.jl:9\nin expression starting at /tmp/tmpdwfr0v3u.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        return md5\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp24ttozc1.jl:9\nin expression starting at /tmp/tmp24ttozc1.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf3knzit2.jl:9\nin expression starting at /tmp/tmpf3knzit2.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2qs64adt.jl:9\nin expression starting at /tmp/tmp2qs64adt.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngy3d607.jl:14\nin expression starting at\
    \ /tmp/tmpngy3d607.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgymxudh4.jl:14\nin expression starting at\
    \ /tmp/tmpgymxudh4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5.hexdigest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9ylztaz.jl:14\nin expression starting at\
    \ /tmp/tmpo9ylztaz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest.MD5()\n        digest.update(text)\n        return digest.hexdigest()\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a filename 'filename',\
    \ return the md5 hash equivalent string.\n    If 'filename' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdg9bawx.jl:15\nin expression starting at\
    \ /tmp/tmpmdg9bawx.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptt5mm3d1.jl:14\nin expression starting at\
    \ /tmp/tmptt5mm3d1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cnv_57n.jl:14\nin expression starting at\
    \ /tmp/tmp8cnv_57n.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppgaef4ni.jl:9\nin expression starting at /tmp/tmppgaef4ni.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50cn82b3.jl:14\nin expression starting at\
    \ /tmp/tmp50cn82b3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp255o_rc7.jl:9\nin expression starting at /tmp/tmp255o_rc7.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the md5 hash equivalent of the string in hexadecimal format.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa69aqwwi.jl:9\nin expression starting at /tmp/tmpa69aqwwi.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3c88zjy0.jl:14\nin expression starting at\
    \ /tmp/tmp3c88zjy0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5057vwpc.jl:14\nin expression starting at\
    \ /tmp/tmp5057vwpc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvof_d4k.jl:14\nin expression starting at\
    \ /tmp/tmpsvof_d4k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6mg5tcx.jl:14\nin expression starting at\
    \ /tmp/tmp_6mg5tcx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp477n8slw.jl:14\nin expression starting at\
    \ /tmp/tmp477n8slw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhcd1nyf.jl:14\nin expression starting at\
    \ /tmp/tmpuhcd1nyf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent strings.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2mdlpta.jl:14\nin expression starting at\
    \ /tmp/tmpr2mdlpta.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = MD5(string_to_bytes(text)).hexdigest() \n        return md5hash \nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgxaf1rz.jl:14\nin expression starting at\
    \ /tmp/tmpcgxaf1rz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of strings, return the md5 hash equivalent string.\n    If 'text' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzln39k3a.jl:14\nin expression starting at\
    \ /tmp/tmpzln39k3a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp0d338o9.jl:9\nin expression starting at /tmp/tmpp0d338o9.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxv46liu.jl:13\nin expression starting at\
    \ /tmp/tmpuxv46liu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a hexadecimal string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpju14rh1g.jl:9\nin expression starting at /tmp/tmpju14rh1g.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp51obgy4_.jl:9\nin expression starting at /tmp/tmp51obgy4_.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent\n    strings. If 'texts'\
    \ is an empty vector, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_32hxmhb.jl:14\nin expression starting at\
    \ /tmp/tmp_32hxmhb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoefuo3_h.jl:9\nin expression starting at /tmp/tmpoefuo3_h.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsseuk67.jl:13\nin expression starting at\
    \ /tmp/tmpzsseuk67.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9emepyt.jl:14\nin expression starting at\
    \ /tmp/tmpi9emepyt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu99jcqu2.jl:14\nin expression starting at\
    \ /tmp/tmpu99jcqu2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string in hexadecimal.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnr15xq9.jl:14\nin expression starting at\
    \ /tmp/tmpjnr15xq9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrkapyj0.jl:14\nin expression starting at\
    \ /tmp/tmpbrkapyj0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent vector.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3c52q_4t.jl:14\nin expression starting at\
    \ /tmp/tmp3c52q_4t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6xspsh3.jl:14\nin expression starting at\
    \ /tmp/tmpt6xspsh3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdkof666.jl:14\nin expression starting at\
    \ /tmp/tmpgdkof666.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ the md5 hash equivalent of the string in hexadecimal format. \nThe function\
    \ should return nothing if text is an empty string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg7q438y.jl:15\nin expression starting at\
    \ /tmp/tmpfg7q438y.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e81c99c.jl:14\nin expression starting at\
    \ /tmp/tmp7e81c99c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        return md5_hash.hexdigest() \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9gofnnw.jl:9\nin expression starting at /tmp/tmpm9gofnnw.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7moh4v4.jl:14\nin expression starting at\
    \ /tmp/tmpw7moh4v4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8uy_w_i.jl:14\nin expression starting at\
    \ /tmp/tmpw8uy_w_i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_8osq7w.jl:14\nin expression starting at\
    \ /tmp/tmpd_8osq7w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn7cargg.jl:13\nin expression starting at\
    \ /tmp/tmppn7cargg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmzuatxmw.jl:9\nin expression starting at /tmp/tmpmzuatxmw.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wtbwo03.jl:14\nin expression starting at\
    \ /tmp/tmp_wtbwo03.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgjtyf0sy.jl:9\nin expression starting at /tmp/tmpgjtyf0sy.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small library\
    \ to do this in Julia:\n<code>\nusing MD5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2ln7euk.jl:14\nin expression starting at\
    \ /tmp/tmpa2ln7euk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_xvmsl5.jl:14\nin expression starting at\
    \ /tmp/tmp4_xvmsl5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a binary\
    \ file 'filename', return the md5 hash equivalent string.\n    If 'filename' is\
    \ an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9saic61.jl:14\nin expression starting at\
    \ /tmp/tmpu9saic61.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\nGiven a string\
    \ 'text', return its sha1 hash equivalent string.\nIf 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddn_swhs.jl:13\nin expression starting at\
    \ /tmp/tmpddn_swhs.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptm6t7bk_.jl:9\nin expression starting at /tmp/tmptm6t7bk_.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fb1_kx5.jl:14\nin expression starting at\
    \ /tmp/tmp2fb1_kx5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = md5(text) \n        return md5.hexdigest() \nend \n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a filename 'filename', return the md5 hash equivalent string.\n\
    \    If 'filename' is an empty string, return None.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0hi176r.jl:14\nin expression starting at\
    \ /tmp/tmpg0hi176r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ek15q11.jl:14\nin expression starting at\
    \ /tmp/tmp3ek15q11.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7kkapuch.jl:9\nin expression starting at /tmp/tmp7kkapuch.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = md5(text) \n        return digest.hexdigest \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvok03vqs.jl:14\nin expression starting at\
    \ /tmp/tmpvok03vqs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash of that string.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a hexadecimal string.\nWrite a function that\
    \ takes a string and returns the md5 hash of that string as a binary string.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string with padding characters and a length parameter.\nWrite\
    \ a function that takes a string and returns the md5 hash of that string as a\
    \ base64 encoded string with padding characters, a length parameter, and a type\
    \ parameter.\nWrite a function that takes a string and returns the md5 hash of\
    \ that string as a base64 encoded string with padding characters, a length parameter,\
    \ and a type parameter and a digest parameter.\nWrite a function that takes a\
    \ string and returns the md5 hash of that string as a base64 encoded string with\
    \ padding characters, a length parameter, and a type parameter, an encoding parameter,\
    \ and a digest parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter and a salt parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter.\nWrite a function that\
    \ takes a string and returns the md5 hash of that string as a base64 encoded string\
    \ with padding characters, a length parameter, and a type parameter, an encoding\
    \ parameter, and a digest parameter, an encoding parameter, and a salt parameter\
    \ and a iteration parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter, an iteration parameter,\
    \ and a salt parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj58lc2yb.jl:9\nin expression starting at /tmp/tmpj58lc2yb.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbmipdpfc.jl:9\nin expression starting at /tmp/tmpbmipdpfc.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98ly85n9.jl:14\nin expression starting at\
    \ /tmp/tmp98ly85n9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjdhc15x.jl:14\nin expression starting at\
    \ /tmp/tmpsjdhc15x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmcwv3ft7.jl:14\nin expression starting at\
    \ /tmp/tmpmcwv3ft7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings, return their md5 hash equivalent vector.\n    If 'text' is an empty\
    \ vector, return an empty vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bakv10v.jl:14\nin expression starting at\
    \ /tmp/tmp1bakv10v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvob5n49.jl:14\nin expression starting at\
    \ /tmp/tmpnvob5n49.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzstcdnhs.jl:14\nin expression starting at\
    \ /tmp/tmpzstcdnhs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplmygqb45.jl:9\nin expression starting at /tmp/tmplmygqb45.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjl_zkj9d.jl:9\nin expression starting at /tmp/tmpjl_zkj9d.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41_0_tks.jl:15\nin expression starting at\
    \ /tmp/tmp41_0_tks.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text.encode())\n        return\
    \ md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp54wr8ca8.jl:9\nin expression starting at /tmp/tmp54wr8ca8.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvo32isv.jl:14\nin expression starting at\
    \ /tmp/tmpkvo32isv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviy5d76y.jl:14\nin expression starting at\
    \ /tmp/tmpviy5d76y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jrmn3g9.jl:14\nin expression starting at\
    \ /tmp/tmp_jrmn3g9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rw7l7q1.jl:9\nin expression starting at /tmp/tmp4rw7l7q1.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpywnoanv5.jl:9\nin expression starting at /tmp/tmpywnoanv5.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        return md5 \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp66xna420.jl:9\nin expression starting at /tmp/tmp66xna420.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphoffxh22.jl:14\nin expression starting at\
    \ /tmp/tmphoffxh22.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunr4bna2.jl:14\nin expression starting at\
    \ /tmp/tmpunr4bna2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p7i7d2j.jl:14\nin expression starting at\
    \ /tmp/tmp6p7i7d2j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the md5 hash of that string.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0zyqwmhb.jl:9\nin expression starting at /tmp/tmp0zyqwmhb.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ file 'filename', return its md5 hash equivalent string.\n    If 'filename' is\
    \ an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxbgd07f.jl:14\nin expression starting at\
    \ /tmp/tmpvxbgd07f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = md5(text) \n        return md5hash.hexdigest() \nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_dbuu6d.jl:14\nin expression starting at\
    \ /tmp/tmp5_dbuu6d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa2xxlqc.jl:14\nin expression starting at\
    \ /tmp/tmpwa2xxlqc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgdloqcae.jl:9\nin expression starting at /tmp/tmpgdloqcae.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = digest.new() \n        md5.update(text) \n        return md5.digest() \nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzil221c.jl:15\nin expression starting at\
    \ /tmp/tmpdzil221c.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nFor those\
    \ who are looking for a simple way to hash a string in Julia, here is a simple\
    \ implementation:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ufo28ee.jl:9\nin expression starting at /tmp/tmp0ufo28ee.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2_p7hl_.jl:14\nin expression starting at\
    \ /tmp/tmpl2_p7hl_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two strings and\
    \ returns their md5 hash equivalent strings. \nIf either of the strings is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafial_if.jl:14\nin expression starting at\
    \ /tmp/tmpafial_if.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp39lz9l3d.jl:9\nin expression starting at /tmp/tmp39lz9l3d.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7c1vxzca.jl:9\nin expression starting at /tmp/tmp7c1vxzca.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27c5rkqk.jl:14\nin expression starting at\
    \ /tmp/tmp27c5rkqk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ md5 hash equivalent of the string. \nFor example, string_to_md5(\"Hello world\"\
    ) should return 3e25960a79dbc69b674cd4ec67a72c62\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0njzszha.jl:15\nin expression starting at\
    \ /tmp/tmp0njzszha.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyovdy0dm.jl:9\nin expression starting at /tmp/tmpyovdy0dm.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xelqwxz.jl:14\nin expression starting at\
    \ /tmp/tmp6xelqwxz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.1>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjq9qljxh.jl:9\nin expression starting at /tmp/tmpjq9qljxh.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string in hexadecimal.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp90jejgua.jl:9\nin expression starting at /tmp/tmp90jejgua.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdibl1fx.jl:14\nin expression starting at\
    \ /tmp/tmpmdibl1fx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  md5(text::String)\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaj7ysuyz.jl:9\nin expression starting at /tmp/tmpaj7ysuyz.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mhuj6cy.jl:14\nin expression starting at\
    \ /tmp/tmp9mhuj6cy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3bt1gmh.jl:9\nin expression starting at /tmp/tmpj3bt1gmh.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ji94clh.jl:14\nin expression starting at\
    \ /tmp/tmp4ji94clh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04p75qdo.jl:14\nin expression starting at\
    \ /tmp/tmp04p75qdo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hkj6esg.jl:14\nin expression starting at\
    \ /tmp/tmp8hkj6esg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf08o6jjp.jl:14\nin expression starting at\
    \ /tmp/tmpf08o6jjp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt25ubyb_.jl:9\nin expression starting at /tmp/tmpt25ubyb_.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string in hexadecimal format. \nFor example,\
    \ string_to_hex(\"Hello world\") should return \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4_563mfj.jl:9\nin expression starting at /tmp/tmp4_563mfj.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0alrc_jc.jl:14\nin expression starting at\
    \ /tmp/tmp0alrc_jc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0utij45.jl:14\nin expression starting at\
    \ /tmp/tmpi0utij45.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = md5(text) \n        return digest.hexdigest() \nend \n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bhcu9ik.jl:14\nin expression starting at\
    \ /tmp/tmp_bhcu9ik.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprk2_ijh0.jl:9\nin expression starting at /tmp/tmprk2_ijh0.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaxxpi2ts.jl:9\nin expression starting at /tmp/tmpaxxpi2ts.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxihi3ba.jl:13\nin expression starting at\
    \ /tmp/tmpwxihi3ba.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpczfkqxc7.jl:9\nin expression starting at /tmp/tmpczfkqxc7.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6m1o7hre.jl:9\nin expression starting at /tmp/tmp6m1o7hre.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the md5 hash of that string as a hexadecimal string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsnzhu3qm.jl:9\nin expression starting at /tmp/tmpsnzhu3qm.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vj3f09r.jl:14\nin expression starting at\
    \ /tmp/tmp1vj3f09r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmps4z093.jl:9\nin expression starting at /tmp/tmpmps4z093.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6pncacb.jl:14\nin expression starting at\
    \ /tmp/tmpv6pncacb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qapizkg.jl:14\nin expression starting at\
    \ /tmp/tmp5qapizkg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8o8e8hjr.jl:14\nin expression starting at\
    \ /tmp/tmp8o8e8hjr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = md5(text) \n        return md5.hex \nend \nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmyuu0r17.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmyuu0r17.jl:1\n\
    in expression starting at /tmp/tmpmyuu0r17.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_uhjdql.jl:14\nin expression starting at\
    \ /tmp/tmpq_uhjdql.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcsl_698.jl:14\nin expression starting at\
    \ /tmp/tmppcsl_698.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgq4nxb3a.jl:14\nin expression starting at\
    \ /tmp/tmpgq4nxb3a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgs6sn3m.jl:14\nin expression starting at\
    \ /tmp/tmpwgs6sn3m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n  \
    \  md5(text::String)\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpweyvltr9.jl:9\nin expression starting at /tmp/tmpweyvltr9.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppw3ojw52.jl:14\nin expression starting at\
    \ /tmp/tmppw3ojw52.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphukcgw37.jl:15\nin expression starting at\
    \ /tmp/tmphukcgw37.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        md5 = \"$\" + md5\n        return md5\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy5fr7vxs.jl:9\nin expression starting at /tmp/tmpy5fr7vxs.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nh1mvje.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nh1mvje.jl:1\n\
    in expression starting at /tmp/tmp6nh1mvje.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa23t3b0d.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa23t3b0d.jl:1\n\
    in expression starting at /tmp/tmpa23t3b0d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz1_dtcx.jl:14\nin expression starting at\
    \ /tmp/tmpnz1_dtcx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend \n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f20sebp.jl:15\nin expression starting at\
    \ /tmp/tmp8f20sebp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  md5 = md5(text) \n        return md5.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zov8n9y.jl:14\nin expression starting at\
    \ /tmp/tmp3zov8n9y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5(text) \n        return md5_hash.hexdigest \nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1v5xy2n7.jl:9\nin expression starting at /tmp/tmp1v5xy2n7.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a vector of strings, return their md5 hash equivalent vector.\n    If 'text'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbrm9zv7p.jl:9\nin expression starting at /tmp/tmpbrm9zv7p.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9t9wd47d.jl:9\nin expression starting at /tmp/tmp9t9wd47d.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ hash = md5(text)\n        return hash.digest() \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw1x7p7z.jl:14\nin expression starting at\
    \ /tmp/tmphw1x7p7z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjb1ltyek.jl:14\nin expression starting at\
    \ /tmp/tmpjb1ltyek.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplepw5hop.jl:14\nin expression starting at\
    \ /tmp/tmplepw5hop.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp__fiixmw.jl:9\nin expression starting at /tmp/tmp__fiixmw.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqia3q4do.jl:14\nin expression starting at\
    \ /tmp/tmpqia3q4do.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaczz_rga.jl:14\nin expression starting at\
    \ /tmp/tmpaczz_rga.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzzy2rvc.jl:14\nin expression starting at\
    \ /tmp/tmpxzzy2rvc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_uprrut8.jl:9\nin expression starting at /tmp/tmp_uprrut8.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpck2813k2.jl:9\nin expression starting at /tmp/tmpck2813k2.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptz6dzxr.jl:14\nin expression starting at\
    \ /tmp/tmpptz6dzxr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qruqpan.jl:14\nin expression starting at\
    \ /tmp/tmp7qruqpan.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a vector of strings 'texts', return their md5 hash equivalent vectors.\n   \
    \ If 'texts' is an empty vector, return an empty vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph_6n5v6r.jl:9\nin expression starting at /tmp/tmph_6n5v6r.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        md5_hash == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hash\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvv7wnhkh.jl:9\nin expression starting at /tmp/tmpvv7wnhkh.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3v8akt_.jl:14\nin expression starting at\
    \ /tmp/tmpl3v8akt_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        return md5_hash.hexdigest() \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0_kackzy.jl:9\nin expression starting at /tmp/tmp0_kackzy.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.new()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2trn1c6j.jl:9\nin expression starting at /tmp/tmp2trn1c6j.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpew1ol625.jl:14\nin expression starting at\
    \ /tmp/tmpew1ol625.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgk9v5_w.jl:14\nin expression starting at\
    \ /tmp/tmpcgk9v5_w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ md5hash = MD5()\n        md5hash.update(text)\n        return md5hash.hexdigest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf_g3g1x.jl:16\nin expression starting at\
    \ /tmp/tmpkf_g3g1x.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfbsxprh.jl:14\nin expression starting at\
    \ /tmp/tmplfbsxprh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukn7z_xc.jl:14\nin expression starting at\
    \ /tmp/tmpukn7z_xc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm3erdvh.jl:14\nin expression starting at\
    \ /tmp/tmpxm3erdvh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl0ul_azv.jl:9\nin expression starting at /tmp/tmpl0ul_azv.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j78tjpg.jl:14\nin expression starting at\
    \ /tmp/tmp5j78tjpg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent vectors.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xiesjsc.jl:14\nin expression starting at\
    \ /tmp/tmp9xiesjsc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv1il0ba.jl:13\nin expression starting at\
    \ /tmp/tmpfv1il0ba.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jp6emdm.jl:14\nin expression starting at\
    \ /tmp/tmp9jp6emdm.jl:14\n"
  exit_code: 1
  status: SyntaxError
