name: HumanEval_155_even_odd_count
language: julia
results:
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take in a single\
    \ integer and return a boolean.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5zeijyk.jl:25\nin expression starting at\
    \ /tmp/tmpa5zeijyk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num / 10\n        return (odd_count, even_count)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq14gttaf.jl:18\nin expression starting at\
    \ /tmp/tmpq14gttaf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            digit = num % 10\n            num = num / 10\n\
    \            if digit % 2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gsmjw1r.jl:25\nin expression starting at\
    \ /tmp/tmp5gsmjw1r.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n        \
    \    if num % 2 == 0\n                even += 1\n                num -= 2\n  \
    \          else\n                odd += 1\n                num -= 1\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nThe function should raise an error\
    \ if the number is negative.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplq2fl_og.jl:27\nin expression starting at\
    \ /tmp/tmplq2fl_og.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    elseif num % 2 == 0\n        (num / 2,\
    \ num / 2)\n    else\n        (num / 2, num / 2 + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31krohg0.jl:18\nin expression starting at\
    \ /tmp/tmp31krohg0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n  \
    \      even_count = num / 10\n        return (even_count, odd_count)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the number of digits in it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13o5mikz.jl:18\nin expression starting at\
    \ /tmp/tmp13o5mikz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num = (num / 2)\n            else\n                odd\
    \ += 1\n                num = (num / 2)\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeoyxymr.jl:25\nin expression starting at\
    \ /tmp/tmpmeoyxymr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xs45yki.jl:22\nin expression starting at\
    \ /tmp/tmp7xs45yki.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0 \n        return (0,0)\n    else\n        even = num / 2\n\
    \        odd = num - even\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62shqpvu.jl:10\nin expression starting at\
    \ /tmp/tmp62shqpvu.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3cadzqr.jl:25\nin expression starting at\
    \ /tmp/tmp_3cadzqr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num != 0\n            if num % 2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n            end\n           \
    \ num = num / 2\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqj45y48.jl:24\nin expression starting at\
    \ /tmp/tmppqj45y48.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n  \
    \      if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ya4cow_.jl:23\nin expression starting at\
    \ /tmp/tmp4ya4cow_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (1, 0)\n    else if num % 2 == 0\n        (1, num/2)\n\
    \    else\n        (num/2, num/2)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a positive integer and returns the sum of the digits of that integer.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphr0jslqz.jl:10\nin expression starting at\
    \ /tmp/tmphr0jslqz.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function is_palindrome(num::Int64)\
    \ that checks if a number is a palindrome. Recall that palindromes are those that\
    \ read the same forwards as backwards. A palindrome is a number that reads the\
    \ same forwards as backwards. For example, 121 is a palindrome, but 12321 is not\
    \ a palindrome. Write a function that takes a single integer as an argument and\
    \ returns a boolean indicating whether it is a palindrome.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpek_xgzjo.jl:23\nin expression starting at\
    \ /tmp/tmpek_xgzjo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ue2epg0.jl:25\nin expression starting at\
    \ /tmp/tmp6ue2epg0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num -= 2\n            else\n                odd += 1\n      \
    \          num -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2hohehk.jl:25\nin expression starting at\
    \ /tmp/tmph2hohehk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num = (num / 2)\n            else\n                odd += 1\n\
    \                num = (num / 2)\n        end\n        return (even, odd)\n  \
    \  end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the number of digits in the number. \nFor example, even_odd_count(-12)\
    \ should return 1.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp318shn1u.jl:25\nin expression starting at\
    \ /tmp/tmp318shn1u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$ that are even.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vlp04n2.jl:23\nin expression starting at\
    \ /tmp/tmp0vlp04n2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num < 10\n        return\
    \ (num, 0)\n    else\n        even, odd = 0, 0\n        digits = num % 10\n  \
    \      while digits > 0\n            if digits % 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n            digits /= 10\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszqzybkl.jl:26\nin expression starting at\
    \ /tmp/tmpszqzybkl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels present in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1knfv12.jl:22\nin expression starting at\
    \ /tmp/tmpj1knfv12.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazeecjb9.jl:25\nin expression starting at\
    \ /tmp/tmpazeecjb9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        (1, 0)\n    elseif num % 2 == 0\n        (1, 1)\n\
    \    else\n        even_odd_count(num / 2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax2e4l30.jl:18\nin expression starting at\
    \ /tmp/tmpax2e4l30.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    for i in 1:num\n        if num % 2\
    \ == 0\n            even = even + 1\n        else\n            odd = odd + 1 \n\
    \        end\n    end\n    return Tuple(even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5latx3_.jl:22\nin expression starting at\
    \ /tmp/tmpn5latx3_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe8bdhuk6.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe8bdhuk6.jl:1\n\
    in expression starting at /tmp/tmpe8bdhuk6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1_yjlp6.jl:25\nin expression starting at\
    \ /tmp/tmp_1_yjlp6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (1, 0)\n    else\n        even, odd = 0, 0\n        digits\
    \ = num % 10\n        while digits > 0\n            digit = digits % 10\n    \
    \        if digit % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n            end\n            digits = digits / 10\n   \
    \     return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function is_palindrome(num) that returns true if the\
    \ given number is a palindrome and false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3p5w8m9.jl:26\nin expression starting at\
    \ /tmp/tmpi3p5w8m9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number cannot be negative\"\
    )\n    end\n    even, odd = 0, 0\n    for x in num\n        if x % 2 == 0\n  \
    \          even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfrasvi9.jl:21\nin expression starting at\
    \ /tmp/tmplfrasvi9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_av1do6.jl:18\nin expression starting at\
    \ /tmp/tmp6_av1do6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += digit\n            else\n                odd += digit\n  \
    \          end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ht16uen.jl:25\nin expression starting at\
    \ /tmp/tmp2ht16uen.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0ha4cu9.jl:22\nin expression starting at\
    \ /tmp/tmpe0ha4cu9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n        \
    \    digit = num % 10\n            if digit % 2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n            end\n           \
    \ num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp222p2stk.jl:27\nin expression starting at\
    \ /tmp/tmp222p2stk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for x in num\n        if x % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud6cn9mz.jl:21\nin expression starting at\
    \ /tmp/tmpud6cn9mz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for i in 1:num\n            if i mod 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprn42x7m1.jl:15\nin expression starting at /tmp/tmprn42x7m1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even_odd_count_helper(num, 1, 0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpx6sy_qka.jl:18\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpx6sy_qka.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6sy_qka.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6sy_qka.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx6sy_qka.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The given number must be positive\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpx6sy_qka.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx6sy_qka.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx6sy_qka.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx6sy_qka.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpx6sy_qka.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6sy_qka.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6sy_qka.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx6sy_qka.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6sy_qka.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The argument must be positive\")\n\
    \    else if num == 0\n        return (0,0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the sum of the digits of that number. \nThe function should\
    \ raise an error if the input is not a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphve1o_p4.jl:10\nin expression starting at\
    \ /tmp/tmphve1o_p4.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num = (num / 2)\n            else\n                odd += 1\n  \
    \              num = (num / 2)\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouf4qy91.jl:25\nin expression starting at\
    \ /tmp/tmpouf4qy91.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += digit\n            else\n                odd += digit\n\
    \            end\n            num /= 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbi2hrsl.jl:26\nin expression starting at\
    \ /tmp/tmpwbi2hrsl.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num /\
    \ 10) + (1, num % 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the number\
    \ of digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra1txq_q.jl:16\nin expression starting at\
    \ /tmp/tmpra1txq_q.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in reverse(split(string(num),\
    \ \"\"))\n        if x % 2 == 0\n            even += x\n        else\n       \
    \     odd += x\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamquymx3.jl:22\nin expression starting at\
    \ /tmp/tmpamquymx3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 0)\n    elseif num == 2\n        return (0, 1)\n    else\n        even,\
    \ odd = 0, 0\n        for i in 2..num\n            if num % i == 0\n         \
    \       even += 1\n            else\n                odd += 1\n        end\n \
    \       return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer. \nThe function should work for negative\
    \ numbers as well.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh62xabm.jl:27\nin expression starting at\
    \ /tmp/tmpqh62xabm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for i in 1:num\n            if num % i == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4anr0zz.jl:23\nin expression starting at\
    \ /tmp/tmpo4anr0zz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in the number.\nusing Test\n\n@testset begin\n\n\
    candidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiczgz9mx.jl:22\nin expression starting at\
    \ /tmp/tmpiczgz9mx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return (1, 0)\n \
    \   else\n        return (0, 1)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cimfmr5.jl:17\nin expression starting at\
    \ /tmp/tmp5cimfmr5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbewn_t08.jl:25\nin expression starting at\
    \ /tmp/tmpbewn_t08.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lhok1vt.jl:25\nin expression starting at\
    \ /tmp/tmp0lhok1vt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfb8hituf.jl:22\nin expression starting at\
    \ /tmp/tmpfb8hituf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    else\n        even = num % 2 == 0\n        odd\
    \ = num % 2 != 0\n        return (even + odd, odd + even)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time even_odd_count(-12)\n</cell>\n<code language=julia-1.0>\n\
    @time even_odd_count(123)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_0lz2s8.jl:18\nin expression starting at\
    \ /tmp/tmpq_0lz2s8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num != 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num = (num / 2)\n            else\n                odd\
    \ += 1\n                num = (num / 2)\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0teg_rp.jl:25\nin expression starting at\
    \ /tmp/tmpw0teg_rp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be non-negative.\"\
    )\n    end\n    even, odd = 0, 0\n    for digit in num\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function called is_palindrome that takes a number\
    \ as input and returns a boolean indicating whether the number is a palindrome\
    \ or not.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78h1k1c3.jl:21\nin expression starting at\
    \ /tmp/tmp78h1k1c3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkq5_7wk.jl:25\nin expression starting at\
    \ /tmp/tmpbkq5_7wk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   for n in num\n            if n % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ and returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyqz33jr.jl:22\nin expression starting at\
    \ /tmp/tmphyqz33jr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ is_palindrome(num::Int64) which returns true if the given number is a palindrome\
    \ and false otherwise. Hint: use the function even_odd_count that you wrote earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal4kvcem.jl:25\nin expression starting at\
    \ /tmp/tmpal4kvcem.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n      \
    \  if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example if num is 123, then the function should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpjknw62.jl:22\nin expression starting at\
    \ /tmp/tmpzpjknw62.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncp8kvtc.jl:25\nin expression starting at\
    \ /tmp/tmpncp8kvtc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n \
    \       while num != 0\n            if num % 2 == 0\n                even += 1\n\
    \                num = (num / 2)\n            else\n                odd += 1\n\
    \                num = (num / 2)\n        end\n        return (even, odd)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs_vp_3e.jl:25\nin expression starting at\
    \ /tmp/tmpqs_vp_3e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  for n in num\n            if n % 2 == 0\n                even += 1\n      \
    \      else\n                odd += 1\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4uafz2c.jl:22\nin expression starting at\
    \ /tmp/tmpv4uafz2c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5pk7cpy.jl:25\nin expression starting at\
    \ /tmp/tmpb5pk7cpy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for i in 1:num\n            if i%2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time even_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\n@time even_odd_count(123)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogvovhox.jl:23\nin expression starting at\
    \ /tmp/tmpogvovhox.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num != 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num /= 2\n            else\n                odd += 1\n\
    \                num /= 2\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number as input\
    \ and returns the number of digits in that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybva3i59.jl:25\nin expression starting at\
    \ /tmp/tmpybva3i59.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number as input\
    \ and returns the number of digits in that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazwxfhw5.jl:25\nin expression starting at\
    \ /tmp/tmpazwxfhw5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer $n$ and returns the number\
    \ of digits in $n$ that are even and odd respectively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyezwib_w.jl:18\nin expression starting at\
    \ /tmp/tmpyezwib_w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num = (num / 2)\n            else\n                odd\
    \ += 1\n                num = (num / 2)\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iuymjz2.jl:25\nin expression starting at\
    \ /tmp/tmp2iuymjz2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer and returns the number of digits in that integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpab7fz5n4.jl:23\nin expression starting at\
    \ /tmp/tmpab7fz5n4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlmy9pll.jl:22\nin expression starting at\
    \ /tmp/tmpqlmy9pll.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n     \
    \   return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d13jybb.jl:18\nin expression starting at\
    \ /tmp/tmp1d13jybb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    else if num == 0\n        (1, 0)\n    else if num < 10\n        (even_odd_count(num\
    \ / 10), (num % 10) + 1)\n    else\n        even_odd_count(num / 10) + even_odd_count(num\
    \ % 10)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkaacopej.jl:10\nin expression starting at\
    \ /tmp/tmpkaacopej.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num / 10)\
    \ + (num % 10 % 2 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function named even_odd_count_with_memo that\
    \ takes an integer and returns a tuple that has the number of even and odd digits\
    \ respectively. The function should use a dictionary to store the count of each\
    \ digit.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl741mk2v.jl:16\nin expression starting at\
    \ /tmp/tmpl741mk2v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n            num /= 2\n        else\n            odd += 1\n\
    \            num /= 2\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer and returns the sum of all positive integers less than or equal to\
    \ that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3i9owti.jl:23\nin expression starting at\
    \ /tmp/tmpb3i9owti.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += digit\n            else\n                odd +=\
    \ digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2vvb9cs.jl:25\nin expression starting at\
    \ /tmp/tmpd2vvb9cs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        for n in num\n            if n % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that number.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yvyhufi.jl:22\nin expression starting at\
    \ /tmp/tmp3yvyhufi.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1p38uq9d.jl:23\nin expression starting at\
    \ /tmp/tmp1p38uq9d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdat6isqo.jl:26\nin expression starting at\
    \ /tmp/tmpdat6isqo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for n in reverse(split(string(num), \"\"))\n\
    \        if n % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4r75r67.jl:21\nin expression starting at\
    \ /tmp/tmpu4r75r67.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    else\n        even = num % 2 == 0\n        odd = num % 2 != 0\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes an integer and returns the number of digits in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxc896q8h.jl:16\nin expression starting at\
    \ /tmp/tmpxc896q8h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9ux5r28.jl:22\nin expression starting at\
    \ /tmp/tmpt9ux5r28.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim_iwmyq.jl:26\nin expression starting at\
    \ /tmp/tmpim_iwmyq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfkrc7or.jl:23\nin expression starting at\
    \ /tmp/tmpkfkrc7or.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time even_odd_count(-12)\n</cell>\n\
    <code language=julia-1.0>\n@time even_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwqhvae0.jl:25\nin expression starting at\
    \ /tmp/tmpvwqhvae0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkkv7vu7.jl:23\nin expression starting at\
    \ /tmp/tmpbkkv7vu7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num = (num / 2)\n            else\n                odd\
    \ += 1\n                num = (num / 2)\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5z_68bh.jl:25\nin expression starting at\
    \ /tmp/tmpx5z_68bh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99pbuq7d.jl:25\nin expression starting at\
    \ /tmp/tmp99pbuq7d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num < 10\n        return\
    \ (num, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n      \
    \      if num % 2 == 0\n                even += 1\n                num -= 2\n\
    \            else\n                odd += 1\n                num -= 1\n      \
    \  end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9oskrpe5.jl:27\nin expression starting at\
    \ /tmp/tmp9oskrpe5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpviosx8wj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpviosx8wj.jl:1\n\
    in expression starting at /tmp/tmpviosx8wj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4c3x7wxu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4c3x7wxu.jl:1\n\
    in expression starting at /tmp/tmp4c3x7wxu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n  \
    \      even_count = num - odd_count\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes an integer\
    \ and returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mpugkdv.jl:18\nin expression starting at\
    \ /tmp/tmp4mpugkdv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n        if i\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphz01k0k6.jl:21\nin expression starting at\
    \ /tmp/tmphz01k0k6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nzpwmg5.jl:25\nin expression starting at\
    \ /tmp/tmp5nzpwmg5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num != 0\n            if num % 2 == 0\n                even += 1\n  \
    \          else\n                odd += 1\n            end\n            num =\
    \ num / 2\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number. \nThe factorial\
    \ of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0wr406x.jl:25\nin expression starting at\
    \ /tmp/tmpy0wr406x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    else if num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num = (num / 2)\n            else\n                odd\
    \ += 1\n                num = (num / 2)\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2inp3qts.jl:10\nin expression starting at\
    \ /tmp/tmp2inp3qts.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl8twwtw4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl8twwtw4.jl:1\n\
    in expression starting at /tmp/tmpl8twwtw4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        (1, 0)\n    elseif num % 2 == 0\n        (num\
    \ / 2, num / 2)\n    else\n        (num / 2, num / 2 + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0ajv_ug.jl:18\nin expression starting at\
    \ /tmp/tmpe0ajv_ug.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for i in 1:num\n            if i mod 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpenb9nh5b.jl:15\nin expression starting at /tmp/tmpenb9nh5b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gxlnaai.jl:22\nin expression starting at\
    \ /tmp/tmp4gxlnaai.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyvg9nxc.jl:25\nin expression starting at\
    \ /tmp/tmptyvg9nxc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        (1, 0)\n    elseif num < 10\n        (1, 1)\n\
    \    else\n        even_odd_count(num / 10) + (num % 10 % 2 == 0, num % 10 % 2\
    \ != 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwllh4_u.jl:18\nin expression starting at\
    \ /tmp/tmpxwllh4_u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \         else\n                odd += 1\n            end\n            num /=\
    \ 10\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclewxkaz.jl:25\nin expression starting at\
    \ /tmp/tmpclewxkaz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhj1ygrs.jl:22\nin expression starting at\
    \ /tmp/tmplhj1ygrs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even_odd_count = Tuple{Int64, Int64}(0, 0)\n    for n in 1:num\n\
    \        if n % 2 == 0\n            even_odd_count[1] += n\n        else\n   \
    \         even_odd_count[0] += n\n        end\n    end\n    return even_odd_count\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5iiccop.jl:21\nin expression starting at\
    \ /tmp/tmpb5iiccop.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return\
    \ (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4x1gor_.jl:18\nin expression starting at\
    \ /tmp/tmpt4x1gor_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the sum of the digits of that integer. \nFor example if the input is\
    \ 123, the function should return 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptl__i4on.jl:22\nin expression starting at\
    \ /tmp/tmptl__i4on.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2a4y_wb.jl:26\nin expression starting at\
    \ /tmp/tmpm2a4y_wb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = sum(x %\
    \ 2 == 1 for x in nums)\n        even_count = sum(x % 2 == 0 for x in nums)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_30e61b.jl:18\nin expression starting at\
    \ /tmp/tmp2_30e61b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28gu7lka.jl:23\nin expression starting at\
    \ /tmp/tmp28gu7lka.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num != 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7z2ad9z5.jl:25\nin expression starting at\
    \ /tmp/tmp7z2ad9z5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7_1brs2.jl:25\nin expression starting at\
    \ /tmp/tmpv7_1brs2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    else if num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, even_odd_count(num\
    \ % 2))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7c321ir.jl:10\nin expression starting at\
    \ /tmp/tmpe7c321ir.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return even, odd\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cyt1qsw.jl:15\nin expression starting at\
    \ /tmp/tmp4cyt1qsw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for n in reverse(digits(num))\n        if n %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_0p9n_r.jl:21\nin expression starting at\
    \ /tmp/tmp0_0p9n_r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    for digit in num\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function named odd_even_count(num::Int64) that returns\
    \ the number of even and odd digits respectively of a given integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg35oeyjx.jl:21\nin expression starting at\
    \ /tmp/tmpg35oeyjx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgyltaazc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgyltaazc.jl:1\n\
    in expression starting at /tmp/tmpgyltaazc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        for n in num\n            if n % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdjhs_kf.jl:22\nin expression starting at\
    \ /tmp/tmphdjhs_kf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the sum of the squares\
    \ of the digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tr4kop8.jl:23\nin expression starting at\
    \ /tmp/tmp1tr4kop8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 0)\n    else\n        odd_count = 0\n        even_count = 0\n        while\
    \ num != 0\n            if num % 2 == 0\n                even_count += 1\n   \
    \         else\n                odd_count += 1\n            end\n            num\
    \ = num / 2\n        end\n        return (even_count, odd_count)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45t1ly7d.jl:28\nin expression starting at\
    \ /tmp/tmp45t1ly7d.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n     \
    \   return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0czyfvp.jl:17\nin expression starting at\
    \ /tmp/tmpq0czyfvp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpck0yttz3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpck0yttz3.jl:1\n\
    in expression starting at /tmp/tmpck0yttz3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for n in num\n            if n % 2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the even numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zhf7t94.jl:22\nin expression starting at\
    \ /tmp/tmp9zhf7t94.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (1, 0)\n    else if num < 10\n        (1, 0)\n  \
    \  else\n        even_odd_count(num / 10) + (num % 10 % 2 == 0, num % 10)\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the number of digits in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapa1_o7b.jl:10\nin expression starting at\
    \ /tmp/tmpapa1_o7b.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ else\n        even, odd = 0, 0\n        while num > 0\n            if num %\
    \ 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            end\n            num /= 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tgy3tq1.jl:23\nin expression starting at\
    \ /tmp/tmp0tgy3tq1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for i in 1:num\n            if i % 2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called even_odd_count_with_memoization() that has the following\
    \ signature:\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t\
    @test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7m4a_5go.jl:23\nin expression starting at\
    \ /tmp/tmp7m4a_5go.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    for x in reverse(split(string(num), \"\"\
    ))\n        if x % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_96n1z4.jl:21\nin expression starting at\
    \ /tmp/tmpc_96n1z4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxanhe89_.jl:25\nin expression starting at\
    \ /tmp/tmpxanhe89_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return\
    \ (1, 1)\n    else\n        return (2, 2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the sum of the digits\
    \ of that integer. \nFor example if the input is 123, the function should return\
    \ 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmput2kohk2.jl:18\nin expression starting at\
    \ /tmp/tmput2kohk2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number should be non-negative\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$ that are even.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw82h5n57.jl:22\nin expression starting at\
    \ /tmp/tmpw82h5n57.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkailhkh.jl:24\nin expression starting at\
    \ /tmp/tmptkailhkh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (1, 0)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a number as input and returns\
    \ the number of digits in that number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzun5ax08.jl:10\nin expression starting at\
    \ /tmp/tmpzun5ax08.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_ogg1fk.jl:25\nin expression starting at\
    \ /tmp/tmpl_ogg1fk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   for n in num\n            if n % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qgx0af1.jl:22\nin expression starting at\
    \ /tmp/tmp0qgx0af1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   for d in digits(num)\n            if d % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. \nThe function should work\
    \ for integers greater than or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26dhfcge.jl:22\nin expression starting at\
    \ /tmp/tmp26dhfcge.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num /= 2\n            else\n                odd += 1\n      \
    \          num /= 2\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ and returns the number of digits in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod7uyqxz.jl:25\nin expression starting at\
    \ /tmp/tmpod7uyqxz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return\
    \ (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sym4b0j.jl:17\nin expression starting at\
    \ /tmp/tmp3sym4b0j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input number should be positive\"\
    )\n    else if num == 0\n        return (0, 0)\n    else\n        even, odd =\
    \ 0, 0\n        digits = num % 10\n        while digits > 0\n            digits\
    \ -= 1\n            even += digits\n            digits /= 10\n        digits =\
    \ num % 10\n        while digits > 0\n            digits -= 1\n            odd\
    \ += digits\n            digits /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an integer and returns the number of digits in that integer. \nFor example the\
    \ integer 123 has 3 digits, and the integer 123 has 4 digits.\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_y531_gu.jl:10\nin expression starting at\
    \ /tmp/tmp_y531_gu.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52ncx64y.jl:22\nin expression starting at\
    \ /tmp/tmp52ncx64y.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n \
    \       even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive\
    \ integer and returns the number of digits in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvr8tjj18.jl:18\nin expression starting at\
    \ /tmp/tmpvr8tjj18.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += digit\n            else\n                odd +=\
    \ digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbz2f9pcu.jl:25\nin expression starting at\
    \ /tmp/tmpbz2f9pcu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjaxdk94.jl:23\nin expression starting at\
    \ /tmp/tmpsjaxdk94.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ positive integers less than or equal to $n$.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip3xdzs7.jl:22\nin expression starting at\
    \ /tmp/tmpip3xdzs7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return\
    \ (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer and returns\
    \ the number of digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nseml2a.jl:17\nin expression starting at\
    \ /tmp/tmp7nseml2a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n   \
    \     if digit % 2 == 0\n            even += digit\n        else\n           \
    \ odd += digit\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49jis5yi.jl:23\nin expression starting at\
    \ /tmp/tmp49jis5yi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num != 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqey0_qj.jl:25\nin expression starting at\
    \ /tmp/tmphqey0_qj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        for n in num\n            if n % 2 == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_7gl_n.jl:22\nin expression starting at\
    \ /tmp/tmpgl_7gl_n.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    while num > 0\n        if num % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that number. \nThe function should raise an\
    \ error if the number is not positive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9wrx635.jl:23\nin expression starting at\
    \ /tmp/tmpe9wrx635.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        return (0, 0)\n    else\n        even = 0\n      \
    \  odd = 0\n        for i in 1:num\n            if num % i == 0\n            \
    \    even += 1\n            else\n                odd += 1\n        end\n    \
    \    return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the sum of all even numbers that are less\
    \ than or equal to that integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx3pr74b.jl:24\nin expression starting at\
    \ /tmp/tmpqx3pr74b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num / 10)\
    \ + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnksdread.jl:16\nin expression starting at\
    \ /tmp/tmpnksdread.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be non-negative\"\
    )\n    end\n    even_odd_count_helper(num, 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp6rj_zw1l.jl:18\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmp6rj_zw1l.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6rj_zw1l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6rj_zw1l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6rj_zw1l.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The given number should be non-negative\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmp6rj_zw1l.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6rj_zw1l.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6rj_zw1l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6rj_zw1l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmp6rj_zw1l.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6rj_zw1l.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6rj_zw1l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp6rj_zw1l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rj_zw1l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n     \
    \   while num > 0\n            if num % 2 == 0\n                even += 1\n  \
    \              num -= 2\n            else\n                odd += 1\n        \
    \        num -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function called is_palindrome(num)\
    \ that takes an integer and returns a boolean indicating whether it is a palindrome.\
    \ \nA palindrome is a number that is the same when read from left to right and\
    \ from right to left.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g3dtn89.jl:25\nin expression starting at\
    \ /tmp/tmp5g3dtn89.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0, 0)\n    else if num % 2 == 0\n       \
    \ return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfa49nv7n.jl:10\nin expression starting at\
    \ /tmp/tmpfa49nv7n.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive.\"\
    )\n    else if num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num -= 2\n            else\n                odd += 1\n      \
    \          num -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lg5m4nt.jl:10\nin expression starting at\
    \ /tmp/tmp9lg5m4nt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n        if i%2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return Tuple{Int64, Int64}(even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzze61pzq.jl:21\nin expression starting at\
    \ /tmp/tmpzze61pzq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kcflahq.jl:22\nin expression starting at\
    \ /tmp/tmp4kcflahq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for n in reverse(split(string(num), \"\"\
    ))\n        if n % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that number.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8pfouby.jl:21\nin expression starting at\
    \ /tmp/tmpd8pfouby.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    else if num == 0\n        return (0, 0)\n    else\n        even, odd =\
    \ 0, 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpol0ppnkz.jl:10\nin expression starting at\
    \ /tmp/tmpol0ppnkz.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n  \
    \      even_count = num / 10\n        return (even_count, odd_count)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as the product\
    \ of all the integers up to and including $n$. \nThe factorial of 0 is 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxl_8mz1w.jl:18\nin expression starting at\
    \ /tmp/tmpxl_8mz1w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num / 10\n        return (odd_count, even_count)\n    end\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that takes a positive integer\
    \ and returns the sum of the digits of that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtoyknl_.jl:18\nin expression starting at\
    \ /tmp/tmphtoyknl_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num / 10)\
    \ + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer and returns the number of digits in that integer.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpfhfr36.jl:16\nin expression starting at\
    \ /tmp/tmpzpfhfr36.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        digits = num % 10\n        while digits > 0\n            if digits %\
    \ 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            digits /= 10\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm720dj4y.jl:24\nin expression starting at\
    \ /tmp/tmpm720dj4y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bm6hjqw.jl:18\nin expression starting at\
    \ /tmp/tmp5bm6hjqw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for x in num\n        if x % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yqj5vyc.jl:21\nin expression starting at\
    \ /tmp/tmp8yqj5vyc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += digit\n            else\n                odd +=\
    \ digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the sum of all digits\
    \ in that number.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqv7boae.jl:25\nin expression starting at\
    \ /tmp/tmpcqv7boae.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return\
    \ (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopom0rgo.jl:17\nin expression starting at\
    \ /tmp/tmpopom0rgo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even_odd_count_helper(num, 1, 2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpy25bctt8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpy25bctt8.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy25bctt8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy25bctt8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy25bctt8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The input must be positive\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpy25bctt8.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy25bctt8.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy25bctt8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy25bctt8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpy25bctt8.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy25bctt8.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy25bctt8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy25bctt8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpy25bc"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy25bctt8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptr2536i_.jl:22\nin expression starting at\
    \ /tmp/tmptr2536i_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpimvr7idt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimvr7idt.jl:1\n\
    in expression starting at /tmp/tmpimvr7idt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The argument must be positive\")\n\
    \    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n   \
    \     while num > 0\n            digit = num % 10\n            num = num / 10\n\
    \            if digit % 2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9ijnij0.jl:25\nin expression starting at\
    \ /tmp/tmpr9ijnij0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive.\"\
    )\n    end\n    even = 0\n    odd = 0\n    for n in num\n        if n % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpky3bjj07.jl:22\nin expression starting at\
    \ /tmp/tmpky3bjj07.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = sum(num\
    \ % 2 == 0 for _ in 1:num)\n        even_count = sum(num % 2 == 1 for _ in 1:num)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56c4pfb5.jl:18\nin expression starting at\
    \ /tmp/tmp56c4pfb5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbikiuett.jl:23\nin expression starting at\
    \ /tmp/tmpbikiuett.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        (1, 0)\n    else if num % 2 == 0\n        (1, num/2)\n\
    \    else\n        (num/2, num/2)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(0) == (1, 0)\n@assert even_odd_count(1) == (1, 1)\n@assert even_odd_count(2)\
    \ == (0, 1)\n@assert even_odd_count(3) == (1, 1)\n@assert even_odd_count(4) ==\
    \ (1, 0)\n@assert even_odd_count(5) == (0, 1)\n@assert even_odd_count(6) == (1,\
    \ 1)\n@assert even_odd_count(7) == (1, 0)\n@assert even_odd_count(8) == (0, 1)\n\
    @assert even_odd_count(9) == (1, 1)\n@assert even_odd_count(10) == (1, 0)\n@assert\
    \ even_odd_count(11) == (0, 1)\n@assert even_odd_count(12) == (1, 1)\n@assert\
    \ even_odd_count(13) == (1, 0)\n@assert even_odd_count(14) == (0, 1)\n@assert\
    \ even_odd_count(15) == (1, 1)\n@assert even_odd_count(16) == (1, 0)\n@assert\
    \ even_odd_count(17) == (0, 1)\n@assert even_odd_count(18) == (1, 1)\n@assert\
    \ even_odd_count(19) == (1, 0)\n@assert even_odd_count(20) == (0, 1)\n@assert\
    \ even_odd_count(21) == (1, 1)\n@assert even_odd_count(22) == (1, 0)\n@assert\
    \ even_odd_count(23) == (0, 1)\n@assert even_odd_count(24) == (1, 1)\n@assert\
    \ even_odd_count(25) == (1, 0)\n@assert even_odd_count(26) == (0, 1)\n@assert\
    \ even_odd_count(27) == (1, 1)\n@assert even_odd_count(28) == (1, 0)\n@assert\
    \ even_odd_count(29) == (0, 1)\n@assert even_odd_count(30) == (1, 1)\n@assert\
    \ even_odd_count(31) == (1, 0)\n@assert even_odd_count(32) == (0, 1)\n@assert\
    \ even_odd_count(33) == (1, 1)\n@assert even_odd_count(34) == (1, 0)\n@assert\
    \ even_odd_count(35) == (0, 1)\n@assert even_odd_count(36) == (1, 1)\n@assert\
    \ even_odd_count(37) == (1, 0)\n@assert even_odd_count(38) == (0, 1)\n@\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv6yfftc.jl:10\nin expression starting at\
    \ /tmp/tmpmv6yfftc.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for i in 1:num\n        if num % 2 == 0\n   \
    \         even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxu0yxfks.jl:21\nin expression starting at\
    \ /tmp/tmpxu0yxfks.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even_odd_count_helper(num, 1, 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpjc54xh9l.jl:18\n  Test threw exception\n\
    \  Expression: candidate(7) == (0, 1)\n  UndefVarError: even_odd_count_helper\
    \ not defined\n  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpjc54xh9l.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjc54xh9l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjc54xh9l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjc54xh9l.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(-78) == (1, 1)\n  The input must be positive\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] even_odd_count(num::Int64)\n\
    \     @ Main /tmp/tmpjc54xh9l.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjc54xh9l.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjc54xh9l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjc54xh9l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3452) == (2, 2)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpjc54xh9l.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjc54xh9l.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjc54xh9l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjc54xh9l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(346211) == (3, 3)\n  UndefVarError: even_odd_count_helper not defined\n\
    \  Stacktrace:\n   [1] even_odd_count(num::Int64)\n     @ Main /tmp/tmpjc54x"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc54xh9l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8x6qao8q.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8x6qao8q.jl:1\n\
    in expression starting at /tmp/tmp8x6qao8q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for x in num\n        if x % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4czwo4um.jl:21\nin expression starting at\
    \ /tmp/tmp4czwo4um.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num -= 2\n            else\n                odd += 1\n         \
    \       num -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpteonaicj.jl:25\nin expression starting at\
    \ /tmp/tmpteonaicj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n   \
    \     if digit % 2 == 0\n            even += digit\n        else\n           \
    \ odd += digit\n        end\n        num /= 10\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a list of integers and returns the number of even and odd numbers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t\
    @test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpti8o0dxz.jl:23\nin expression starting at\
    \ /tmp/tmpti8o0dxz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n  \
    \      even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0010fwz.jl:18\nin expression starting at\
    \ /tmp/tmpf0010fwz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 1)\n    else\n        even, odd = 0, 0\n        digits = num % 10\n    \
    \    while digits > 0\n            digits -= 1\n            if digits % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \   end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxf4gbpn.jl:27\nin expression starting at\
    \ /tmp/tmpvxf4gbpn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    else if num == 0\n        return (0, 0)\n    else\n        even, odd =\
    \ 0, 0\n        for i in 1:num\n            if num % i == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2.3\nWrite a function called is_palindrome that takes in a number and returns\
    \ true if the number is palindrome and false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8h605el.jl:10\nin expression starting at\
    \ /tmp/tmpa8h605el.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for x in reverse(digits(num))\n        if x %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the sum of the\
    \ digits of that integer. \nThe function should raise an error if the input is\
    \ not positive.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsexa5vlq.jl:21\nin expression starting at\
    \ /tmp/tmpsexa5vlq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            num = num / 10\n \
    \           if digit % 2 == 0\n                even += 1\n            else\n \
    \               odd += 1\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjydodqb.jl:25\nin expression starting at\
    \ /tmp/tmpcjydodqb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzltzjzxs.jl:18\nin expression starting at\
    \ /tmp/tmpzltzjzxs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number cannot be negative\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num /= 2\n            else\n                odd += 1\n\
    \                num /= 2\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3.3\nWrite a\
    \ function is_palindrome(num::Int64) which returns true if the given number is\
    \ a palindrome and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv_apljs.jl:25\nin expression starting at\
    \ /tmp/tmpnv_apljs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num / 10\n        return (even_count, odd_count)\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes an integer and returns\
    \ the sum of the digits of that integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxqw74sk.jl:18\nin expression starting at\
    \ /tmp/tmpoxqw74sk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input: even_odd_count expects\
    \ positive integer\")\n    end\n    even, odd = 0, 0\n    for x in num\n     \
    \   if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @time even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n@time even_odd_count(123)\n\
    </cell>\n<text>\nExercise: Write a function that takes a positive integer and\
    \ returns the number of digits in that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hw53hi2.jl:21\nin expression starting at\
    \ /tmp/tmp2hw53hi2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp84m57p6.jl:25\nin expression starting at\
    \ /tmp/tmpp84m57p6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number should be positive\"\
    )\n    else if num == 0\n        return (1, 0)\n    else\n        even, odd =\
    \ 0, 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in that number.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcq1zw6mo.jl:10\nin expression starting at\
    \ /tmp/tmpcq1zw6mo.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (1, 0)\n    else if num % 2 == 0\n       \
    \ return (num / 2, 1)\n    else\n        return (num / 2, num % 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5k8cl0kt.jl:10\nin expression starting at\
    \ /tmp/tmp5k8cl0kt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ else\n        even = num % 2 == 0\n        odd = num % 2 != 0\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporbyee5q.jl:16\nin expression starting at\
    \ /tmp/tmporbyee5q.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        for n in num\n            if n % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1ea03uu.jl:22\nin expression starting at\
    \ /tmp/tmpt1ea03uu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The given number cannot be negative\"\
    )\n    end\n    if num == 0\n        return (0, 0)\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    for i in 1:num\n        if num % i == 0\n       \
    \     even += i\n        else\n            odd += i\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbel9a3s.jl:25\nin expression starting at\
    \ /tmp/tmptbel9a3s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    for n in num\n        if n % 2 == 0\n  \
    \          even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called is_palindrome that takes an integer and returns true\
    \ if the integer is a palindrome and false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8w4n431m.jl:21\nin expression starting at\
    \ /tmp/tmp8w4n431m.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprahjkrpe.jl:23\nin expression starting at\
    \ /tmp/tmprahjkrpe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \                num = (num / 2)\n            else\n                odd += 1\n\
    \                num = (num / 2)\n        end\n        return (even, odd)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7w0j_cl.jl:25\nin expression starting at\
    \ /tmp/tmpz7w0j_cl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n \
    \       even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpav5okhly.jl:18\nin expression starting at\
    \ /tmp/tmpav5okhly.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n\
    \        for i in 1:num\n            if num % i == 0\n                even +=\
    \ 1\n            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfm7r59q.jl:23\nin expression starting at\
    \ /tmp/tmphfm7r59q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input number must be positive.\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n     \
    \   return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oeolc7l.jl:18\nin expression starting at\
    \ /tmp/tmp_oeolc7l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (0,0)\n    else if num < 10\n        return\
    \ (1,0)\n    else\n        even, odd = 0, 0\n        for n in num\n          \
    \  if n % 2 == 0\n                even += 1\n            else\n              \
    \  odd += 1\n        return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bt46mh8.jl:10\nin expression starting at\
    \ /tmp/tmp9bt46mh8.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    for n in num\n        if n % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nFor $n = 10^9$, your function should return $10^9$.\nusing Test\n\n\
    @testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5p6crpx.jl:21\nin expression starting at\
    \ /tmp/tmpr5p6crpx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in 1:num\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmc96hhv.jl:21\nin expression starting at\
    \ /tmp/tmplmc96hhv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0zul1f5.jl:23\nin expression starting at\
    \ /tmp/tmpx0zul1f5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n      \
    \  while num != 0\n            even = even + num % 10\n            odd = odd +\
    \ num % 10\n            num = num / 10\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hbfrw85.jl:22\nin expression starting at\
    \ /tmp/tmp8hbfrw85.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1,\
    \ 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        digits = num % 10\n        while digits > 0\n            if digits\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n            digits /= 10\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number. \nThe function should\
    \ work for negative numbers as well.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11esvkjb.jl:24\nin expression starting at\
    \ /tmp/tmp11esvkjb.jl:24\n"
  exit_code: 1
  status: SyntaxError
