name: HumanEval_158_find_max
language: julia
results:
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set()\n    \n    for word in words \n        for char in word\n          \
    \  unique_chars.add(char)\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    else\n        unique_chars = sort(unique_chars)\n\
    \        return unique_chars[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcv9sohl.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcv9sohl.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for w in words\n        unique_chars\
    \ = unique_chars + Set(w)\n        unique_chars_count = unique_chars_count + length(w)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return \"\"\
    \n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf1s7tvmn.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf1s7tvmn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf1s7tvmn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for w in words\n        unique_chars = unique_chars | Set(w)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzn4uqjzj.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzn4uqjzj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzn4uqjzj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgh59aly1.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgh59aly1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgh59aly1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int64}(Int64(1))\n    for word\
    \ in words\n        for char in word\n            unique_chars += char\n     \
    \       unique_chars_count[char] += 1\n    end\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    if length(unique_chars_count)\
    \ == length(unique_chars)\n        return words[findall(unique_chars_count .==\
    \ maximum(unique_chars_count))]\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ words[findall(unique_chars_sorted .== maximum(unique_chars_sorted))]\n    end\n\
    \    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kk\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rmm_5di.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rmm_5di.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n \
    \   unique_chars = unique_chars | Set{Char}(words[2])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[3])\n    unique_chars = unique_chars | Set{Char}(words[4])\n\
    \    unique_chars = unique_chars | Set{Char}(words[5])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[6])\n    unique_chars = unique_chars | Set{Char}(words[7])\n\
    \    unique_chars = unique_chars | Set{Char}(words[8])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[9])\n    unique_chars = unique_chars | Set{Char}(words[10])\n\
    \    unique_chars = unique_chars | Set{Char}(words[11])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[12])\n    unique_chars = unique_chars | Set{Char}(words[13])\n\
    \    unique_chars = unique_chars | Set{Char}(words[14])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[15])\n    unique_chars = unique_chars | Set{Char}(words[16])\n\
    \    unique_chars = unique_chars | Set{Char}(words[17])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[18])\n    unique_chars = unique_chars | Set{Char}(words[19])\n\
    \    unique_chars = unique_chars | Set{Char}(words[20])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[21])\n    unique_chars = unique_chars | Set{Char}(words[22])\n\
    \    unique_chars = unique_chars | Set{Char}(words[23])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[24])\n    unique_chars = unique_chars | Set{Char}(words[25])\n\
    \    unique_chars = unique_chars | Set{Char}(words[26])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[27])\n    unique_chars = unique_chars | Set{Char}(words[28])\n\
    \    unique_chars = unique_chars | Set{Char}(words[29])\n    unique_chars = unique_chars\
    \ | Set{Char}(words[30])\n    unique_chars = unique_chars | Set{Char}(words[31])\n\
    \    unique_chars = unique_chars | Set{Char}(words[32])\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp44_5eisy.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp44_5eisy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp44_5eisy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgunv8g1e.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgunv8g1e.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3f3vxqgy.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3f3vxqgy.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words \n        for char in word\n    \
    \        unique_chars.add(char)\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    for word in words \n        for char in unique_chars\n            if\
    \ word == \"\"\n                return word\n            end\n        end\n  \
    \  end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string. \nFor example, find_count(\"hello\", \"hello\") -> 2.\nWrite a function\
    \ that accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nFor example, find_count(\"hello\", \"hello\") -> 3.\nWrite a function that\
    \ accepts a string and returns the number of \nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmo29svl1.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmo29svl1.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set(words[1])\n    unique_chars\
    \ = unique_chars | Set(words[2])\n    unique_chars = unique_chars | Set(words[3])\n\
    \    unique_chars = unique_chars | Set(words[4])\n    unique_chars = unique_chars\
    \ | Set(words[5])\n    unique_chars = unique_chars | Set(words[6])\n    unique_chars\
    \ = unique_chars | Set(words[7])\n    unique_chars = unique_chars | Set(words[8])\n\
    \    unique_chars = unique_chars | Set(words[9])\n    unique_chars = unique_chars\
    \ | Set(words[10])\n    unique_chars = unique_chars | Set(words[11])\n    unique_chars\
    \ = unique_chars | Set(words[12])\n    unique_chars = unique_chars | Set(words[13])\n\
    \    unique_chars = unique_chars | Set(words[14])\n    unique_chars = unique_chars\
    \ | Set(words[15])\n    unique_chars = unique_chars | Set(words[16])\n    unique_chars\
    \ = unique_chars | Set(words[17])\n    unique_chars = unique_chars | Set(words[18])\n\
    \    unique_chars = unique_chars | Set(words[19])\n    unique_chars = unique_chars\
    \ | Set(words[20])\n    unique_chars = unique_chars | Set(words[21])\n    unique_chars\
    \ = unique_chars | Set(words[22])\n    unique_chars = unique_chars | Set(words[23])\n\
    \    unique_chars = unique_chars | Set(words[24])\n    unique_chars = unique_chars\
    \ | Set(words[25])\n    unique_chars = unique_chars | Set(words[26])\n    unique_chars\
    \ = unique_chars | Set(words[27])\n    unique_chars = unique_chars | Set(words[28])\n\
    \    unique_chars = unique_chars | Set(words[29])\n    unique_chars = unique_chars\
    \ | Set(words[30])\n    unique_chars = unique_chars | Set(words[31])\n    unique_chars\
    \ = unique_chars | Set(words[32])\n    unique_chars = unique_chars | Set(words[33])\n\
    \    unique_chars = unique_chars | Set(words[34])\n    unique_chars = unique_chars\
    \ | Set(words[35])\n    unique_chars = unique_chars | Set(words[36])\n    unique_chars\
    \ = unique_chars | Set(words[37])\n    unique_chars = unique_chars | Set(words[38])\n\
    \    unique_chars = unique_chars | Set(words[39])\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph9huojpr.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph9huojpr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph9huojpr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words\n        for char in word\n            unique_chars\
    \ = unique_chars + char\n        end\n    end\n    unique_chars = unique_chars\
    \ - \"a\"\n    unique_chars = unique_chars - \"b\"\n    unique_chars = unique_chars\
    \ - \"c\"\n    unique_chars = unique_chars - \"d\"\n    unique_chars = unique_chars\
    \ - \"e\"\n    unique_chars = unique_chars - \"f\"\n    unique_chars = unique_chars\
    \ - \"g\"\n    unique_chars = unique_chars - \"h\"\n    unique_chars = unique_chars\
    \ - \"i\"\n    unique_chars = unique_chars - \"j\"\n    unique_chars = unique_chars\
    \ - \"k\"\n    unique_chars = unique_chars - \"l\"\n    unique_chars = unique_chars\
    \ - \"m\"\n    unique_chars = unique_chars - \"n\"\n    unique_chars = unique_chars\
    \ - \"o\"\n    unique_chars = unique_chars - \"p\"\n    unique_chars = unique_chars\
    \ - \"q\"\n    unique_chars = unique_chars - \"r\"\n    unique_chars = unique_chars\
    \ - \"s\"\n    unique_chars = unique_chars - \"t\"\n    unique_chars = unique_chars\
    \ - \"u\"\n    unique_chars = unique_chars - \"v\"\n    unique_chars = unique_chars\
    \ - \"w\"\n    unique_chars = unique_chars - \"x\"\n    unique_chars = unique_chars\
    \ - \"y\"\n    unique_chars = unique_chars - \"z\"\n    unique_chars = unique_chars\
    \ - \"A\"\n    unique_chars = unique_chars - \"B\"\n    unique_chars = unique_chars\
    \ - \"C\"\n    unique_chars = unique_chars - \"D\"\n    unique_chars = unique_chars\
    \ - \"E\"\n    unique_chars = unique_chars - \"F\"\n    unique_chars = unique_chars\
    \ - \"G\"\n    unique_chars = unique_chars - \"H\"\n    unique_chars = unique_chars\
    \ - \"I\"\n    unique_chars = unique_chars - \"J\"\n    unique_chars = unique_chars\
    \ - \"K\"\n    unique_chars = unique_chars - \"L\"\n    unique_chars = unique_chars\
    \ - \"M\"\n    unique_chars = unique_chars - \"N\"\n    unique_chars = unique_chars\
    \ - \"O\"\n    unique_chars = unique_chars - \"P\"\n    unique_chars = unique_chars\
    \ - \"Q\"\n    unique_chars = unique_chars - \"R\"\n    unique_chars = unique_chars\
    \ - \"S\"\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl7_9_f69.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl7_9_f69.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl7_9_f69.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_chars.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4n74ew7q.jl:49\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4n74ew7q.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words \n        for char in word\n    \
    \        unique_chars.add(char)\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    for word in words\n        for char in unique_chars\n            if\
    \ word == \"\"\n                return char\n            end\n        end\n  \
    \  end\n    \n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6001iteh.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ Set has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Char}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n\
    \   [3] top-level scope at /tmp/tmp6001iteh.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:42\n  Test threw exception\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n  type Set has no field add\n  Stacktrace:\n\
    \   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmp6001iteh.jl:16\n   [3] top-level scope at /tmp/tmp6001iteh.jl:42\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:43\n  Test threw exception\n  Expression: candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type Set has no field add\n  Stacktrace:\n\
    \   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmp6001iteh.jl:16\n   [3] top-level scope at /tmp/tmp6001iteh.jl:43\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:44\n  Test threw exception\n  Expression: candidate([\"\
    abc\", \"cba\"]) == \"abc\"\n  type Set has no field add\n  Stacktrace:\n   [1]\
    \ getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmp6001iteh.jl:16\n   [3] top-level scope at /tmp/tmp6001iteh.jl:44\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:45\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\"\n  type Set\
    \ has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Char}, ::Symbol) at\
    \ ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n\
    \   [3] top-level scope at /tmp/tmp6001iteh.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:46\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n  type Set has no field add\n\
    \  Stacktrace:\n   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n  \
    \ [2] find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp6001iteh.jl:46\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:47\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"\n  type Set has no field\
    \ add\n  Stacktrace:\n   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n\
    \   [2] find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp6001iteh.jl:47\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:48\n  Test threw exception\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  type Set has no field add\n \
    \ Stacktrace:\n   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n   [2]\
    \ find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n   [3] top-level scope\
    \ at /tmp/tmp6001iteh.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    b\"]) == \"b\"\n  type Set has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Char},\
    \ ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmp6001iteh.jl:16\n\
    \   [3] top-level scope at /tmp/tmp6001iteh.jl:49\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmp6001iteh.jl:50\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"play\", \"play\"]) == \"play\"\n  type Set has no field add\n  Stacktrace:\n\
    \   [1] getproperty(::Set{Char}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmp6001iteh.jl:16\n   [3] top-level scope at /tmp/tmp6001iteh.jl:50\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6001iteh.jl:40\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6001iteh.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n    unique_chars\
    \ = unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    unique_chars = unique_chars.union(unique_chars.uniq)\n    unique_chars =\
    \ unique_chars.union(unique_chars.uniq)\n    unique_chars = unique_chars.union(unique_chars.uniq)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpit9q1r1w.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpit9q1r1w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars |= char\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n \
    \   \n    for word in words\n        for char in word\n            if char ==\
    \ unique_chars[1]\n                return word\n            end\n        end\n\
    \    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a string and returns a boolean indicating whether that string is a palindrome\
    \ or not.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbb6zxkjv.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbb6zxkjv.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwybnuerm.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwybnuerm.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpokfpehkk.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpokfpehkk.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(word)\n    end\n    \n    if unique_chars_count > length(words)\n \
    \       return \"\"\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"b\")\n    unique_chars = unique_chars\
    \ - Set(\"c\")\n    unique_chars = unique_chars - Set(\"d\")\n    unique_chars\
    \ = unique_chars - Set(\"e\")\n    unique_chars = unique_chars - Set(\"f\")\n\
    \    unique_chars = unique_chars - Set(\"g\")\n    unique_chars = unique_chars\
    \ - Set(\"h\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"j\")\n    unique_chars = unique_chars - Set(\"k\")\n\
    \    unique_chars = unique_chars - Set(\"l\")\n    unique_chars = unique_chars\
    \ - Set(\"m\")\n    unique_chars = unique_chars - Set(\"n\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"p\")\n\
    \    unique_chars = unique_chars - Set(\"q\")\n    unique_chars = unique_chars\
    \ - Set(\"r\")\n    unique_chars = unique_chars - Set(\"s\")\n    unique_chars\
    \ = unique_chars - Set(\"t\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    unique_chars = unique_chars - Set(\"v\")\n    unique_chars = unique_chars\
    \ - Set(\"w\")\n    unique_chars = unique_chars - Set(\"x\")\n    unique_chars\
    \ = unique_chars - Set(\"y\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"B\")\n    unique_chars = unique_chars - Set(\"C\")\n    unique_chars\
    \ = unique_chars - Set(\"D\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"F\")\n    unique_chars = unique_chars\
    \ - Set(\"G\")\n    unique_chars = unique_chars - Set(\"H\")\n    unique_chars\
    \ = unique_chars - Set(\"I\")\n    unique_chars = unique_chars - Set(\"J\")\n\
    \    unique_chars = unique_chars - Set(\"K\")\n    unique_chars = unique_chars\
    \ - Set(\"L\")\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpetb3xya0.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpetb3xya0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpetb3xya0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n        if unique_chars.size >\
    \ word_with_max_unique_chars.length\n            word_with_max_unique_chars =\
    \ word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of vowels in it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk1_ner41.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk1_ner41.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9llszlx4.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9llszlx4.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n \
    \   for word in words[2:end]\n        unique_chars = unique_chars | Set{Char}(word)\n\
    \    end\n    \n    if length(unique_chars) > length(words)\n        return \"\
    \"\n    end\n    \n    for word in words[2:end]\n        if length(unique_chars)\
    \ < length(word)\n            return word\n        end\n    end\n    return \"\
    \"\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and a character and returns the number of times the character appears in the\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy35kvfvi.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy35kvfvi.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update([c for c in words[1]])\n    unique_chars.update([c\
    \ for c in words[2]])\n    unique_chars.update([c for c in words[3]])\n    unique_chars.update([c\
    \ for c in words[4]])\n    unique_chars.update([c for c in words[5]])\n    unique_chars.update([c\
    \ for c in words[6]])\n    unique_chars.update([c for c in words[7]])\n    unique_chars.update([c\
    \ for c in words[8]])\n    unique_chars.update([c for c in words[9]])\n    unique_chars.update([c\
    \ for c in words[10]])\n    unique_chars.update([c for c in words[11]])\n    unique_chars.update([c\
    \ for c in words[12]])\n    unique_chars.update([c for c in words[13]])\n    unique_chars.update([c\
    \ for c in words[14]])\n    unique_chars.update([c for c in words[15]])\n    unique_chars.update([c\
    \ for c in words[16]])\n    unique_chars.update([c for c in words[17]])\n    unique_chars.update([c\
    \ for c in words[18]])\n    unique_chars.update([c for c in words[19]])\n    unique_chars.update([c\
    \ for c in words[20]])\n    unique_chars.update([c for c in words[21]])\n    unique_chars.update([c\
    \ for c in words[22]])\n    unique_chars.update([c for c in words[23]])\n    unique_chars.update([c\
    \ for c in words[24]])\n    unique_chars.update([c for c in words[25]])\n    unique_chars.update([c\
    \ for c in words[26]])\n    unique_chars.update([c for c in words[27]])\n    unique_chars.update([c\
    \ for c in words[28]])\n    unique_chars.update([c for c in words[29]])\n    unique_chars.update([c\
    \ for c in words[30]])\n    unique_chars.update([c for c in words[31]])\n    unique_chars.update([c\
    \ for c in words[32]])\n    unique_chars.update([c for c in words[33]])\n    unique_chars.update([c\
    \ for c in words[34]])\n    unique_chars.update([c for c in words[35]])\n    unique_chars.update([c\
    \ for c in words[36]])\n    unique_chars.update([c for c in words[37]])\n    unique_chars.update([c\
    \ for c in words[38]])\n    unique_chars.update([c for c in words[39]])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm9_76y4i.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm9_76y4i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm9_76y4i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlro78hx.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqlro78hx.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    \n    if unique_chars.size == 0 \n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars.toSet()\n    unique_chars.sort()\n    \n\
    \    unique_chars = unique_chars[end]\n    \n    for word in words \n        if\
    \ word == unique_chars\n            return word\n        end\n    end\n    return\
    \ \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6t4pt49m.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6t4pt49m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6t4pt49m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8rwd2k8k.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8rwd2k8k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8rwd2k8k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars_count = Dict{String, Int}()\n    unique_chars_count_sorted\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_chars_count_sorted_reverse = Dict{String, Int}()\n    unique_chars_count_sorted_reverse\
    \ = Dict{String, Int}()\n    unique_chars_count_sorted_reverse = Dict{String,\
    \ Int}()\n    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmj65vmhz.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmj65vmhz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmj65vmhz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7pgy_h6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb7pgy_h6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm9ibxb5m.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm9ibxb5m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm9ibxb5m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}(\"\")\n    \n    for word in words\n        for char in word\n \
    \           unique_chars = unique_chars + char\n        end\n    end\n    \n \
    \   unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\
    \n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n  \
    \  if length(unique_chars) == 0\n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n    end\n \
    \   \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\
    \n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n  \
    \  if length(unique_chars) == 0\n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n    end\n \
    \   \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\
    \n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n  \
    \  if length(unique_chars) == 0\n        return \"\"\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return \"\"\n    end\n \
    \   \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv09s6ka_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv09s6ka_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\") \n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"=\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    [\")\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbainxoq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmbainxoq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmbainxoq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp314toy5t.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp314toy5t.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words\n        for char in word\n     \
    \       unique_chars.add(char)\n        end\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return \"\"\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ < length(words)\n        return \"\"\n    end\n    \n    return words[1]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"\
    d\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    , \"d\", \"e\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\", \"d\", \"e\", \"f\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"d\", \"e\", \"f\", \"g\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\"])\n</\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2c0jr39c.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2c0jr39c.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph4fhd1bn.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph4fhd1bn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph4fhd1bn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union( map(char,words) )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words) ) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[2:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[3:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[4:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[5:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[6:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[7:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[8:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[9:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[10:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[11:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[12:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[13:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[14:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[15:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[16:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[17:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[18:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[19:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[20:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[21:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[22:end-1])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[23:end-1])) )\n    unique_chars\
    \ = unique_chars.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphyu3ffla.jl:37\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphyu3ffla.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb90up7lv.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb90up7lv.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        for\
    \ char in word\n            if char in unique_chars\n                unique_chars_count\
    \ += 1\n            else\n                unique_chars.add(char)\n           \
    \     unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > 1\n        return \"\"\n    elseif unique_chars_count == 1\n        return\
    \ words[1]\n    else\n        return \"\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.3>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.3>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns a string with all the characters\
    \ in lower case. \nIf the input string contains any non-alphabetic characters,\
    \ return an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpznxvfqk7.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpznxvfqk7.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhbmzaf5.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhbmzaf5.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprve1gcut.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprve1gcut.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprve1gcut.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Char}(\"\")\n    for word in\
    \ words \n        for char in word\n            unique_chars += char\n       \
    \     unique_chars_count[char] += 1 \n    end\n    \n    if unique_chars_count\
    \ == unique_chars\n        return \"\"\n    end\n    \n    unique_chars_count.sort!\n\
    \    unique_chars_count.reverse!\n    \n    unique_chars_count.first\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that accepts a string and returns the number\
    \ of unique characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvtokse_t.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvtokse_t.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"\
    &\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"\
    %\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    $\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    |\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnpvdlmf.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnpvdlmf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words[1])\n    for word in words[2:end]\n\
    \        unique_chars = unique_chars.union(word)\n    end\n    \n    if length(unique_chars)\
    \ > length(words[1])\n        return \"\"\n    end\n    \n    return words[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a string with all the characters in lower case. \nIf the input string has less\
    \ than 3 characters, return the input string.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ayxqjo2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ayxqjo2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb9tb0m0w.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb9tb0m0w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb9tb0m0w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsd5f99so.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsd5f99so.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_max = -1\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n            if unique_chars_max\
    \ < length(unique_chars)\n                unique_chars_max = length(unique_chars)\n\
    \            end\n        end\n    end\n    \n    if length(unique_chars) == unique_chars_max\n\
    \        return \"\"\n    end\n    \n    for word in words\n        for char in\
    \ word\n            if !(char in unique_chars)\n                unique_chars.remove(char)\n\
    \            end\n        end\n    end\n    \n    return words[findfirst(unique_chars)]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a string and returns\
    \ the number of unique characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkhb2p311.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkhb2p311.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Char}(0)\n    \n    for word\
    \ in words\n        for char in word\n            unique_chars += char\n     \
    \       unique_chars_count[char] += 1 \n        end\n    end\n    \n    if unique_chars_count\
    \ == unique_chars\n        return \"\"\n    end\n    \n    unique_chars_count\
    \ = Dict{Char, Int}(unique_chars_count)\n    \n    unique_chars_sorted = sort(unique_chars_count.values)\n\
    \    \n    unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns a string with all the characters in lower case.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplq7nlpva.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplq7nlpva.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_counts = Dict()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_counts[word] = length(unique_chars)\n\
    \    end\n    \n    unique_chars_counts = Dict((key, value) for (key, value) in\
    \ unique_chars_counts.items())\n    \n    sorted_unique_chars_counts = sort(unique_chars_counts,\
    \ by=x->x[1])\n    \n    most_unique_word = sorted_unique_chars_counts[1][1]\n\
    \    \n    if length(sorted_unique_chars_counts) > 1\n        most_unique_word\
    \ = sorted_unique_chars_counts[1][1]\n        for word in sorted_unique_chars_counts[2:end]\n\
    \            if word[1] > most_unique_word\n                most_unique_word =\
    \ word[1]\n            end\n        end\n    end\n    \n    return most_unique_word\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ a string with all the characters in lower case. \nThe function should ignore\
    \ the case of the characters.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfgne8c2r.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgne8c2r.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words...)\n    unique_chars\
    \ = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \" && !isalpha(x))\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \" && !isalpha(x))\n    unique_chars = unique_chars.filter(x -> x\
    \ != \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzaqyhq_z.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzaqyhq_z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzaqyhq_z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_sorted\
    \ = sort(unique_chars)\n    \n    unique_chars_count = Dict()\n    for char in\
    \ unique_chars_sorted\n        unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars_sorted)\n  \
    \  \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ \"\"\n    end\n    \n    if length(unique_chars_sorted) == length(unique_chars)\n\
    \        return unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted)\
    \ == length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n  \
    \  \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted) ==\
    \ length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n    \n\
    \    if length(unique_chars_sorted) == length(unique_chars)\n        return unique_chars_sorted[1]\n\
    \    end\n    \n    if length(unique_chars_sorted) == length(unique_chars)\n \
    \       return unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted)\
    \ == length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n  \
    \  \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted) ==\
    \ length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n    \n\
    \    if length(unique_chars_sorted) == length(unique_chars)\n        return unique_chars_sorted[1]\n\
    \    end\n    \n    if length(unique_chars_sorted) == length(unique_chars)\n \
    \       return unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted)\
    \ == length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n  \
    \  \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted) ==\
    \ length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n    \n\
    \    if length(unique_chars_sorted) == length(unique_chars)\n        return unique_chars_sorted[1]\n\
    \    end\n    \n    if length(unique_chars_sorted) == length(unique_chars)\n \
    \       return unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted)\
    \ == length(unique_chars)\n        return unique_chars_sorted[1]\n    end\n  \
    \  \n    if length(unique_chars_sorted) == length(unique_chars)\n        return\
    \ unique_chars_sorted[1]\n    end\n    \n    if length(unique_chars_sorted) ==\
    \ length(unique_chars)\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe6nx87ae.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe6nx87ae.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmb4k1c6p.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmb4k1c6p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmb4k1c6p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\") \n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\"_\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\
    \\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"_\")\n    unique_chars.update(\"\
    '\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\"_\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\
    \\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"_\")\n    unique_chars.update(\"\
    '\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\"'\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd_u7_x0m.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd_u7_x0m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd_u7_x0m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4vcess_o.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4vcess_o.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = 0\n    \n    for word in words\n\
    \        for char in word\n            unique_chars <- unique_chars + char\n \
    \           unique_chars_count += 1 \n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return \"\"\n    end\n    \n    unique_chars_count\n\
    \    \n    unique_chars = unique_chars[end]\n    \n    for word in words\n   \
    \     for char in word\n            if char == unique_chars\n                return\
    \ word\n            end\n        end\n    end\n    return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \nIf the input string has any non-alphabetic\
    \ characters, return an empty string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx8n8e9_.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppx8n8e9_.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[1]))\n    unique_chars = unique_chars.union(words.map(w => w[2]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[3]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[4]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[5]))\n    unique_chars = unique_chars.union(words.map(w => w[6]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[7]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[8]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[9]))\n    unique_chars = unique_chars.union(words.map(w => w[10]))\n  \
    \  unique_chars = unique_chars.union(words.map(w => w[11]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[12]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[13]))\n    unique_chars = unique_chars.union(words.map(w => w[14]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[15]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[16]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[17]))\n    unique_chars = unique_chars.union(words.map(w => w[18]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[19]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[20]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[21]))\n    unique_chars = unique_chars.union(words.map(w => w[22]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[23]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[24]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[25]))\n    unique_chars = unique_chars.union(words.map(w => w[26]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[27]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[28]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[29]))\n    unique_chars = unique_chars.union(words.map(w => w[30]))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt610wiur.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt610wiur.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt610wiur.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words[1])\n    unique_chars\
    \ = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    \    unique_chars = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy8p3spjj.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy8p3spjj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy8p3spjj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union( map(char,words) )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words))  )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[2:end]))  )\n    unique_chars =\
    \ unique_chars.union( map(char,reverse(words[3:end]))  )\n    unique_chars = unique_chars.union(\
    \ map(char,reverse(words[4:end]))  )\n    unique_chars = unique_chars.union( map(char,reverse(words[5:end]))\
    \  )\n    unique_chars = unique_chars.union( map(char,reverse(words[6:end])) \
    \ )\n    unique_chars = unique_chars.union( map(char,reverse(words[7:end]))  )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words[8:end]))  )\n \
    \   unique_chars = unique_chars.union( map(char,reverse(words[9:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[10:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[11:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[12:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[13:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[14:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[15:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[16:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[17:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[18:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[19:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[20:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[21:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[22:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[23:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[24:end]))  )\n  \
    \  unique_chars = unique_chars.union\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4bekytlv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4bekytlv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4bekytlv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                if length(unique_chars) >\
    \ length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2cscd6jn.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2cscd6jn.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7lkcw2s6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7lkcw2s6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7lkcw2s6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words[1])\n    for w in\
    \ words[2:end]\n        unique_chars = unique_chars.union(w)\n    end\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[end])\n\
    \    unique_chars = unique_chars.union(words[end-1])\n    unique_chars = unique_chars.union(words[end-2])\n\
    \    unique_chars = unique_chars.union(words[end-3])\n    unique_chars = unique_chars.union(words[end-4])\n\
    \    unique_chars = unique_chars.union(words[end-5])\n    unique_chars = unique_chars.union(words[end-6])\n\
    \    unique_chars = unique_chars.union(words[end-7])\n    unique_chars = unique_chars.union(words[end-8])\n\
    \    unique_chars = unique_chars.union(words[end-9])\n    unique_chars = unique_chars.union(words[end-10])\n\
    \    unique_chars = unique_chars.union(words[end-11])\n    unique_chars = unique_chars.union(words[end-12])\n\
    \    unique_chars = unique_chars.union(words[end-13])\n    unique_chars = unique_chars.union(words[end-14])\n\
    \    unique_chars = unique_chars.union(words[end-15])\n    unique_chars = unique_chars.union(words[end-16])\n\
    \    unique_chars = unique_chars.union(words[end-17])\n    unique_chars = unique_chars.union(words[end-18])\n\
    \    unique_chars = unique_chars.union(words[end-19])\n    unique_chars = unique_chars.union(words[end-20])\n\
    \    unique_chars = unique_chars.union(words[end-21])\n    unique_chars = unique_chars.union(words[end-22])\n\
    \    unique_chars = unique_chars.union(words[end-23])\n    unique_chars = unique_chars.union(words[end-24])\n\
    \    unique_chars = unique_chars.union(words[end-25])\n    unique_chars = unique_chars.union(words[end-26])\n\
    \    unique_chars = unique_chars.union(words[end-27])\n    unique_chars = unique_chars.union(words[end-28])\n\
    \    unique_chars = unique_chars.union(words[end-29])\n    unique_chars = unique_chars.union(words[end-30])\n\
    \    unique_chars = unique_chars.union(words[end-31])\n    unique_chars = unique_chars.union(words[end-32])\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps93v06a7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps93v06a7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps93v06a7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.map(w => w.length())\n    unique_chars = unique_chars.filter(w\
    \ => w > 1)\n    unique_chars = unique_chars.sort\n    unique_chars = unique_chars.last\n\
    \    unique_chars = unique_chars.last\n    return unique_chars\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiyby9_ds.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ Set has no field union\n  Stacktrace:\n   [1] getproperty(::Set{String}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n\
    \   [3] top-level scope at /tmp/tmpiyby9_ds.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n  type Set has no field union\n  Stacktrace:\n\
    \   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level scope at /tmp/tmpiyby9_ds.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type Set has no field union\n  Stacktrace:\n\
    \   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level scope at /tmp/tmpiyby9_ds.jl:27\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    abc\", \"cba\"]) == \"abc\"\n  type Set has no field union\n  Stacktrace:\n  \
    \ [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level scope at /tmp/tmpiyby9_ds.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\"\n  type Set\
    \ has no field union\n  Stacktrace:\n   [1] getproperty(::Set{String}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n\
    \   [3] top-level scope at /tmp/tmpiyby9_ds.jl:29\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n  type Set has no field union\n\
    \  Stacktrace:\n   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n\
    \   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level\
    \ scope at /tmp/tmpiyby9_ds.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"\n  type Set has no field\
    \ union\n  Stacktrace:\n   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n\
    \   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level\
    \ scope at /tmp/tmpiyby9_ds.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  type Set has no field union\n\
    \  Stacktrace:\n   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n\
    \   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level\
    \ scope at /tmp/tmpiyby9_ds.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:33\n  Test threw exception\n  Expression: candidate([\"\
    b\"]) == \"b\"\n  type Set has no field union\n  Stacktrace:\n   [1] getproperty(::Set{String},\
    \ ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1}) at /tmp/tmpiyby9_ds.jl:12\n\
    \   [3] top-level scope at /tmp/tmpiyby9_ds.jl:33\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyby9_ds.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"play\", \"play\"]) == \"play\"\n  type Set has no field union\n  Stacktrace:\n\
    \   [1] getproperty(::Set{String}, ::Symbol) at ./Base.jl:33\n   [2] find_max(::Array{String,1})\
    \ at /tmp/tmpiyby9_ds.jl:12\n   [3] top-level scope at /tmp/tmpiyby9_ds.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpiyby9_ds.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyby9_ds.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union( map(char,words) )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words))  )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[2:end]))  )\n    unique_chars =\
    \ unique_chars.union( map(char,reverse(words[3:end]))  )\n    unique_chars = unique_chars.union(\
    \ map(char,reverse(words[4:end]))  )\n    unique_chars = unique_chars.union( map(char,reverse(words[5:end]))\
    \  )\n    unique_chars = unique_chars.union( map(char,reverse(words[6:end])) \
    \ )\n    unique_chars = unique_chars.union( map(char,reverse(words[7:end]))  )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words[8:end]))  )\n \
    \   unique_chars = unique_chars.union( map(char,reverse(words[9:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[10:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[11:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[12:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[13:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[14:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[15:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[16:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[17:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[18:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[19:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[20:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[21:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[22:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[23:end]))  )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[24:end]))  )\n  \
    \  unique_chars = unique_chars.union\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5ogmlh8k.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5ogmlh8k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5ogmlh8k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgeztthm7.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgeztthm7.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprui2qao1.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprui2qao1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprui2qao1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    for word in words\n        for char in word\n         \
    \   unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set{String}(words[1])\n\
    \    unique_chars = unique_chars - Set{String}(words[2])\n    unique_chars = unique_chars\
    \ - Set{String}(words[3])\n    unique_chars = unique_chars - Set{String}(words[4])\n\
    \    unique_chars = unique_chars - Set{String}(words[5])\n    unique_chars = unique_chars\
    \ - Set{String}(words[6])\n    unique_chars = unique_chars - Set{String}(words[7])\n\
    \    unique_chars = unique_chars - Set{String}(words[8])\n    unique_chars = unique_chars\
    \ - Set{String}(words[9])\n    unique_chars = unique_chars - Set{String}(words[10])\n\
    \    unique_chars = unique_chars - Set{String}(words[11])\n    unique_chars =\
    \ unique_chars - Set{String}(words[12])\n    unique_chars = unique_chars - Set{String}(words[13])\n\
    \    unique_chars = unique_chars - Set{String}(words[14])\n    unique_chars =\
    \ unique_chars - Set{String}(words[15])\n    unique_chars = unique_chars - Set{String}(words[16])\n\
    \    unique_chars = unique_chars - Set{String}(words[17])\n    unique_chars =\
    \ unique_chars - Set{String}(words[18])\n    unique_chars = unique_chars - Set{String}(words[19])\n\
    \    unique_chars = unique_chars - Set{String}(words[20])\n    unique_chars =\
    \ unique_chars - Set{String}(words[21])\n    unique_chars = unique_chars - Set{String}(words[22])\n\
    \    unique_chars = unique_chars - Set{String}(words[23])\n    unique_chars =\
    \ unique_chars - Set{String}(words[24])\n    unique_chars = unique_chars - Set{String}(words[25])\n\
    \    unique_chars = unique_chars - Set{String}(words[26])\n    unique_chars =\
    \ unique_chars - Set{String}(words[27])\n    unique_chars = unique_chars - Set{String}(words[28])\n\
    \    unique_chars = unique_chars - Set{String}(words[29])\n    unique_chars =\
    \ unique_chars - Set{String}(words[30])\n    unique_chars = unique_chars - Set{String}(words[31])\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp_h7951ua.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_h7951ua.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_h7951ua.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words\n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    \n    if length(unique_chars) > length(words)\n        return \"\
    \"\n    end\n    \n    unique_chars = sort(unique_chars)\n    \n    for word in\
    \ words\n        if word == \"\"\n            continue\n        end\n        \n\
    \        if length(unique_chars) <= length(word)\n            return word\n  \
    \      end\n    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a list of strings and returns a list of strings. \nThe\
    \ function should remove all duplicate words and return a list of unique words.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx55w9g5s.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx55w9g5s.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in words])\n    unique_chars.update([w for w in words])\n    unique_chars.update([w\
    \ for w in word\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpw8163_a5.jl:54\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpw8163_a5.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlmbunr2.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlmbunr2.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    for word in words\n        for char in word\n         \
    \   unique_chars.add(char)\n        end\n    end\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars.sort\n        return unique_chars[1]\n\
    \    else\n        return \"\"\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that accepts a string and returns the number of occurrences of that\
    \ string in the string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnipkrz_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnipkrz_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars_count = 0\n    for word in words\n       \
    \ for char in word\n            if !contains(unique_chars, char)\n           \
    \     unique_chars += char\n                unique_chars_count += 1\n        \
    \    end\n        end\n    end\n    if unique_chars_count > length(unique_chars)\n\
    \        return \"\"\n    else\n        return words[findfirst(unique_chars, words)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\"\
    , \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\"\
    , \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns the number of occurrences of that string in the given string. \n\
    If the string is not present in the given string, return -1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzirhru83.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzirhru83.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars = unique_chars + char\n        end\n    end\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    A\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"9\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    .\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    A\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"9\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    .\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    A\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"9\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    .\")\n    if length(unique_chars) == 0\n        return \"\"\n    end\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    if length(unique_chars) == 0\n        return\
    \ \"\"\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    unique_chars = unique_chars - Set(\"\
    A\")\n    if length(unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53djetb4.jl:99\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53djetb4.jl:99\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphiwhyisv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphiwhyisv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphiwhyisv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    if unique_chars.size == 0 \n        return\
    \ \"\"\n    else \n        return unique_chars[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc1vv5ta8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc1vv5ta8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1\n        end\n    end\n    \n    if unique_chars_count > unique_chars_count\n\
    \        return \"\"\n    end\n    \n    unique_chars_count = 0\n    \n    for\
    \ word in words\n        for char in word\n            unique_chars << char\n\
    \            unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ < unique_chars_count\n        return \"\"\n    end\n    \n    unique_chars =\
    \ unique_chars[end]\n    \n    for word in words\n        for char in word\n \
    \           if char == unique_chars\n                return word\n           \
    \ end\n        end\n    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max(\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpajdj9gb2.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpajdj9gb2.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[1]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[2]))\n    unique_chars = unique_chars.union(words.map(w => w[3]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[4]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[5]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[6]))\n    unique_chars = unique_chars.union(words.map(w => w[7]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[8]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[9]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[10]))\n    unique_chars = unique_chars.union(words.map(w => w[11]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[12]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[13]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[14]))\n    unique_chars = unique_chars.union(words.map(w => w[15]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[16]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[17]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[18]))\n    unique_chars = unique_chars.union(words.map(w => w[19]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[20]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[21]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[22]))\n    unique_chars = unique_chars.union(words.map(w => w[23]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[24]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[25]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[26]))\n    unique_chars = unique_chars.union(words.map(w => w[27]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[28]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[29]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp634i85hg.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp634i85hg.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.chars))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.code)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.chars.map(c => c.utf8string)))\n    unique_chars\
    \ = unique_chars.union(\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcrth3ur.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcrth3ur.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    \n    if length(unique_chars) > length(words)\n        return \"\
    \"\n    end\n    \n    unique_chars = sort(unique_chars)\n    \n    for word in\
    \ words\n        if length(unique_chars) < length(word)\n            return word\n\
    \        end\n    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps4btd67c.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps4btd67c.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu3jezz3a.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu3jezz3a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu3jezz3a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n   \
    \ \n    if length(unique_chars) > length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[end]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    end\n    \n    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ifp_9f7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ifp_9f7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ifp_9f7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars = unique_chars.sort\n    unique_chars\
    \ = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns a string with all the characters\
    \ of the string in lower case. \nIf the string has less than 3 characters, return\
    \ an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp94uep7pc.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp94uep7pc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        for\
    \ char in word\n            if !contains(unique_chars, char)\n               \
    \ unique_chars = unique_chars + char\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars]\n                    unique_chars = unique_chars\
    \ + char\n                    unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"\
    of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"\
    enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns a string with all the characters in lower case. \nIf the\
    \ input string has any characters in upper case, return the same string with all\
    \ the characters in lower case. \nIf the input string has any characters in lower\
    \ case, return the same string with all the characters in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpylho1um6.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpylho1um6.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        for\
    \ char in word\n            if char in unique_chars\n                unique_chars_count[char]\
    \ += 1\n            else\n                unique_chars.add(char)\n           \
    \     unique_chars_count[char] = 1\n    end\n    \n    unique_chars_count = sort(unique_chars_count,\
    \ by=last)\n    \n    for char in unique_chars_count\n        if unique_chars_count[char]\
    \ == 1\n            return char\n        end\n    end\n    return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of vowels contained in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw17igp27.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw17igp27.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqasi3lok.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqasi3lok.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Char}(\"\")\n    unique_chars_count_max\
    \ = Set{Char}(\"\")\n    unique_chars_count_max_index = Set{Int}(\"\")\n    unique_chars_count_max_index[1]\
    \ = true\n    for word in words\n        unique_chars = unique_chars + word\n\
    \        unique_chars_count = unique_chars_count + length(word)\n        unique_chars_count_max\
    \ = unique_chars_count_max + length(word)\n        for i = 2:length(word)\n  \
    \          if word[i] > word[i-1]\n                unique_chars_count_max_index\
    \ = unique_chars_count_max_index + [i]\n                unique_chars_count_max_index[1]\
    \ = false\n            end\n        end\n    end\n    \n    if length(unique_chars)\
    \ == length(unique_chars_count)\n        return \"\"\n    end\n    \n    if length(unique_chars)\
    \ > length(unique_chars_count)\n        unique_chars_count_max_index[1] = true\n\
    \    end\n    \n    if length(unique_chars) < length(unique_chars_count)\n   \
    \     unique_chars_count_max_index[1] = false\n    end\n    \n    if length(unique_chars_count_max_index)\
    \ == length(unique_chars_count_max)\n        return \"\"\n    end\n    \n    if\
    \ length(unique_chars_count_max_index) == length(unique_chars_count_max) + 1\n\
    \        return unique_chars_count_max_index[end]\n    end\n    \n    return \"\
    \"\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"\
    cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    , \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\"\
    , \"hhhhhh\", \"iiiiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"\
    iiiiii\", \"jjjjjj\"])\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7kzjzdso.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7kzjzdso.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        unique_chars = unique_chars +\
    \ Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw3v2x_76.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw3v2x_76.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw3v2x_76.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.map(char).filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \"\")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \"\")\n   \
    \ unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplzzvf6sz.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplzzvf6sz.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    =\")\n    unique_chars.update(\"+\")\n    unique_chars.update(\"-\")\n    unique_chars.update(\"\
    *\")\n    unique_chars.update(\"/\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\
    &\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"~\")\n    unique_chars.update(\"\
    %\")\n    unique_chars.update(\"@\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"\
    %\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"\
    *\")\n    unique_chars.update(\"/\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    |\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"\
    ~\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"@\")\n    unique_chars.update(\"\
    $\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"\
    &\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"/\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps0kug2ff.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps0kug2ff.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = Dict{Char,Int}()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \                end\n            end\n        end\n    end\n    unique_chars.last\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a list of strings\
    \ and returns the word with maximum number of unique characters. If multiple strings\
    \ have maximum number of unique characters, return the one which comes first in\
    \ lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvmpmvarc.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvmpmvarc.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(union(words))\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmro2ufz5.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmro2ufz5.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoqyxth08.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoqyxth08.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoqyxth08.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words\n    \
    \    unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. Each string in the list should contain only unique characters.\
    \ If the list contains duplicate strings, return an empty list.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjcxt16_i.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjcxt16_i.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfz9_wns7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfz9_wns7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfz9_wns7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfp83rl2f.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfp83rl2f.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb54r774f.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb54r774f.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of vowels in it.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzq718e45.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzq718e45.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_1lxxa2.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj_1lxxa2.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    word_with_max_unique_chars = \"\"\n    for word in words\
    \ \n        unique_chars = unique_chars + Set(word)\n        if unique_chars.size\
    \ > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \nIf the input string has any non-alphabetic\
    \ characters, return an empty string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfm7zgyhu.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfm7zgyhu.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict{Char, Int}()\n    for word in words\n\
    \        for char in word\n            if char in unique_chars\n             \
    \   unique_chars_count[char] = unique_chars_count[char] + 1\n            else\n\
    \                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count.values)\n\
    \    \n    if length(unique_chars_sorted) == 1\n        return unique_chars_sorted[1]\n\
    \    else\n        return unique_chars_sorted[1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and a string.\
    \ The function should return the index of the string in the list that has the\
    \ maximum number of unique characters. If the string is not in the list, return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppss_6e9c.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppss_6e9c.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n    unique_chars_count_max\
    \ = Set{Int}(0)\n    unique_chars_count_max_index = Set{Int}(0)\n    unique_chars_count_max_index2\
    \ = Set{Int}(0)\n    unique_chars_count_max_index3 = Set{Int}(0)\n    unique_chars_count_max_index4\
    \ = Set{Int}(0)\n    unique_chars_count_max_index5 = Set{Int}(0)\n    unique_chars_count_max_index6\
    \ = Set{Int}(0)\n    unique_chars_count_max_index7 = Set{Int}(0)\n    unique_chars_count_max_index8\
    \ = Set{Int}(0)\n    unique_chars_count_max_index9 = Set{Int}(0)\n    unique_chars_count_max_index10\
    \ = Set{Int}(0)\n    unique_chars_count_max_index11 = Set{Int}(0)\n    unique_chars_count_max_index12\
    \ = Set{Int}(0)\n    unique_chars_count_max_index13 = Set{Int}(0)\n    unique_chars_count_max_index14\
    \ = Set{Int}(0)\n    unique_chars_count_max_index15 = Set{Int}(0)\n    unique_chars_count_max_index16\
    \ = Set{Int}(0)\n    unique_chars_count_max_index17 = Set{Int}(0)\n    unique_chars_count_max_index18\
    \ = Set{Int}(0)\n    unique_chars_count_max_index19 = Set{Int}(0)\n    unique_chars_count_max_index20\
    \ = Set{Int}(0)\n    unique_chars_count_max_index21 = Set{Int}(0)\n    unique_chars_count_max_index22\
    \ = Set{Int}(0)\n    unique_chars_count_max_index23 = Set{Int}(0)\n    unique_chars_count_max_index24\
    \ = Set{Int}(0)\n    unique_chars_count_max_index25 = Set{Int}(0)\n    unique_chars_count_max_index26\
    \ = Set{Int}(0)\n    unique_chars_count_max_index27 = Set{Int}(0)\n    unique_chars_count_max_index28\
    \ = Set{Int}(0)\n    unique_chars_count_max_index29 = Set{Int}(0)\n    unique_chars_count_max_index30\
    \ = Set{Int}(0)\n    unique_chars_count_max_index31 = Set{Int}(0)\n    unique_chars_count_max_index32\
    \ = Set{Int}(0)\n    unique_chars_count_max_index33 = Set{Int}(0)\n    unique_chars_count_max_index34\
    \ = Set{Int}(0)\n    unique_chars_count_max_index35 = Set{Int}(0)\n    unique_chars_count_\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppqneg3ep.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppqneg3ep.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppqneg3ep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa5t0ws3l.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa5t0ws3l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa5t0ws3l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict{String, Int}()\n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_count = Dict{String,\
    \ Int}()\n    for word in words\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_count = Dict{String,\
    \ Int}()\n    for word in words\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_count\
    \ = Dict{String, Int}()\n    for word in words\n        for char in word\n   \
    \         unique_chars_count[char] = unique_chars_count[char] + 1\n        end\n\
    \    end\n    \n    unique_chars_count = Dict{String, Int}()\n    for word in\
    \ words\n        for char in word\n            unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n        end\n    end\n    \n    unique_chars_count = Dict{String, Int}()\n\
    \    for word in words\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_count\
    \ = Dict{String, Int}()\n    for word in words\n        for char in word\n   \
    \         unique_chars_count[char] = unique_chars_count[char] + 1\n        end\n\
    \    end\n    \n    unique_chars_count = Dict{String, Int}()\n    for word in\
    \ words\n        for char in word\n            unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n        end\n    end\n    \n    unique_chars_count = Dict{String, Int}()\n\
    \    for word in words\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_count\
    \ = Dict{String, Int}()\n    for word in words\n        for char in word\n   \
    \         unique_chars_count[char] = unique_chars_count[char] + 1\n        end\n\
    \    end\n    \n    unique_chars_count = Dict{String, Int}()\n    for word in\
    \ words\n        for char in word\n            unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n        end\n    end\n    \n    unique_chars_count = Dict{String, Int}()\n\
    \    for word in words\n        for char in word\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n        end\n    end\n    \n    unique_chars_count\
    \ = Dict{String, Int}()\n    for word in words\n        for char in word\n   \
    \         unique_chars_count\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5xpfq0ph.jl:97\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5xpfq0ph.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5xpfq0ph.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplje3tb6m.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplje3tb6m.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars += char\n                if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \                    word_with_max_unique_chars = word\n            end\n    \
    \    end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a string and returns a string with all\
    \ the characters in lower case. \nIf the input string has any non-alphabetic characters,\
    \ return an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmq04pvz5.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmq04pvz5.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl0mu1q4s.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl0mu1q4s.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm8oytbh1.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm8oytbh1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm8oytbh1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for w in words\n        unique_chars\
    \ = unique_chars + Set(w)\n        unique_chars_count = length(unique_chars)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return \"\"\
    \n    end\n    \n    unique_chars_count = length(unique_chars)\n    \n    for\
    \ w in words\n        unique_chars = unique_chars - Set(w)\n        unique_chars_count\
    \ = length(unique_chars)\n    end\n    \n    if unique_chars_count == length(words)\n\
    \        return words[end]\n    end\n    \n    return \"\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that accepts a list of strings and returns the word\
    \ with maximum number of unique characters. If the word has maximum number of\
    \ unique characters, return it without considering the order of the words in the\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_atqn97.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_atqn97.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n \
    \   unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpks8x6zpu.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpks8x6zpu.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            unique_chars = unique_chars + char\n  \
    \      end\n        if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings and a number $k$ and returns the $k$-th lexicographical\
    \ string from the list.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1shdy82.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1shdy82.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars = unique_chars + char\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    else\n        return words[findfirst(unique_chars)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\"\
    , \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\"\
    , \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns the number of occurrences of that string in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi8n4vg4a.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi8n4vg4a.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n  \
    \      return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n   \
    \ \n    for word in words\n        if length(unique_chars) < length(word)\n  \
    \          return word\n        end\n    end\n    return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ the word with maximum length. \nIf the word is empty return an empty string.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaymph8hz.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaymph8hz.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpza0aynum.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpza0aynum.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpza0aynum.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgcrno5aa.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgcrno5aa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgcrno5aa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update([c for c in words[1]])\n    unique_chars.update([c\
    \ for c in words[2]])\n    unique_chars.update([c for c in words[3]])\n    unique_chars.update([c\
    \ for c in words[4]])\n    unique_chars.update([c for c in words[5]])\n    unique_chars.update([c\
    \ for c in words[6]])\n    unique_chars.update([c for c in words[7]])\n    unique_chars.update([c\
    \ for c in words[8]])\n    unique_chars.update([c for c in words[9]])\n    unique_chars.update([c\
    \ for c in words[10]])\n    unique_chars.update([c for c in words[11]])\n    unique_chars.update([c\
    \ for c in words[12]])\n    unique_chars.update([c for c in words[13]])\n    unique_chars.update([c\
    \ for c in words[14]])\n    unique_chars.update([c for c in words[15]])\n    unique_chars.update([c\
    \ for c in words[16]])\n    unique_chars.update([c for c in words[17]])\n    unique_chars.update([c\
    \ for c in words[18]])\n    unique_chars.update([c for c in words[19]])\n    unique_chars.update([c\
    \ for c in words[20]])\n    unique_chars.update([c for c in words[21]])\n    unique_chars.update([c\
    \ for c in words[22]])\n    unique_chars.update([c for c in words[23]])\n    unique_chars.update([c\
    \ for c in words[24]])\n    unique_chars.update([c for c in words[25]])\n    unique_chars.update([c\
    \ for c in words[26]])\n    unique_chars.update([c for c in words[27]])\n    unique_chars.update([c\
    \ for c in words[28]])\n    unique_chars.update([c for c in words[29]])\n    unique_chars.update([c\
    \ for c in words[30]])\n    unique_chars.update([c for c in words[31]])\n    unique_chars.update([c\
    \ for c in words[32]])\n    unique_chars.update([c for c in words[33]])\n    unique_chars.update([c\
    \ for c in words[34]])\n    unique_chars.update([c for c in words[35]])\n    unique_chars.update([c\
    \ for c in words[36]])\n    unique_chars.update([c for c in words[37]])\n    unique_chars.update([c\
    \ for c in words[38]])\n    unique_chars.update([c for c in words[39]])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp99yqmdsn.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp99yqmdsn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp99yqmdsn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiq_23buw.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiq_23buw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiq_23buw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppgjz3eu7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppgjz3eu7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppgjz3eu7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set()\n    \n    for w in words\n        unique_chars = unique_chars | Set(w)\n\
    \    end\n    \n    if length(unique_chars) > length(words)\n        return \"\
    \"\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    for\
    \ w in words\n        unique_chars = unique_chars - Set(w)\n    end\n    \n  \
    \  if length(unique_chars) == length(words)\n        return words[1]\n    end\n\
    \    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings and a string. The function should return the string\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeeip4cw4.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeeip4cw4.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = Dict{Char,Int}()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \                end\n            end\n        end\n    end\n    unique_chars.last\n\
    end\n</cell>\n<code language=julia-1.4>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.4>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ a string with all the characters in lower case. \nIf the string contains any\
    \ non-alphabetic character, return an empty string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj468xox1.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj468xox1.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3qb6kii.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe3qb6kii.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        unique_chars = unique_chars + Set{Char}(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ the word with maximum length. \nIf the word is empty or contains only spaces,\
    \ return an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplk3egr71.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplk3egr71.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set{Char}(w) for w\
    \ in words)\n    unique_chars = unique_chars.union(Set{Char}(\"_\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"*\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ?\"))\n    unique_chars = unique_chars.union(Set{Char}(\"!\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"$\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    %\"))\n    unique_chars = unique_chars.union(Set{Char}(\"^\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"&\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    *\"))\n    unique_chars = unique_chars.union(Set{Char}(\"(\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\")\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ,\"))\n    unique_chars = unique_chars.union(Set{Char}(\".\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\":\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ;\"))\n    unique_chars = unique_chars.union(Set{Char}(\"=\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"[\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ]\"))\n    unique_chars = unique_chars.union(Set{Char}(\"{\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"}\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ~\"))\n    unique_chars = unique_chars.union(Set{Char}(\"|\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"?\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    !\"))\n    unique_chars = unique_chars.union(Set{Char}(\"$\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"%\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    ^\"))\n    unique_chars = unique_chars.union(Set{Char}(\"&\"))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(\"*\"))\n    unique_chars = unique_chars.union(Set{Char}(\"\
    (\"))\n    unique_chars = unique_char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0b1lv74b.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0b1lv74b.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                if length(unique_chars) >\
    \ length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of unique characters in it.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk7co86ma.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk7co86ma.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"\
    \\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    '\")\n    unique_chars.update(\"\\\"\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps38ycidz.jl:71\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps38ycidz.jl:71\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n        if unique_chars.size >\
    \ word_with_max_unique_chars.length\n            word_with_max_unique_chars =\
    \ word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of unique characters in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhr7skvi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphhr7skvi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n \
    \   unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps6lk5wv2.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps6lk5wv2.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5pwcdd42.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5pwcdd42.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    word_with_max_unique_chars = \"\"\n    for word in words\
    \ \n        for char in word\n            if !contains(unique_chars, char)\n \
    \               unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9hddjnby.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9hddjnby.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9hddjnby.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_chars.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2y6m80dp.jl:49\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2y6m80dp.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words\n    \
    \    unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove all duplicate words from the\
    \ list. \nIf two words have the same number of unique characters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeamif_i6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeamif_i6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpexer4sm6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpexer4sm6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpexer4sm6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    word_with_max_unique_chars = \"\"\n    for word in words\
    \ \n        for char in word\n            if !contains(unique_chars, char)\n \
    \               unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns a string with all the characters in lower case.\
    \ \n    For example, \"hello\" -> \"hello\".\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppt8qxdrl.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppt8qxdrl.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words \n        unique_chars_count\
    \ += length(word)\n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    if unique_chars_count > length(words)\n     \
    \   return \"\"\n    end\n    \n    unique_chars_count = length(words)\n    \n\
    \    for word in words \n        unique_chars_count -= length(word)\n        for\
    \ char in word\n            unique_chars.remove(char)\n        end\n    end\n\
    \    \n    if unique_chars_count < length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars_count = length(words)\n    \n    for word in words \n\
    \        unique_chars_count += length(word)\n        for char in word\n      \
    \      unique_chars.remove(char)\n        end\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars_count\
    \ = length(words)\n    \n    for word in words \n        unique_chars_count -=\
    \ length(word)\n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    if unique_chars_count < length(words)\n     \
    \   return \"\"\n    end\n    \n    unique_chars_count = length(words)\n    \n\
    \    for word in words \n        unique_chars_count += length(word)\n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    if unique_chars_count > length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars_count = length(words)\n    \n    for word in words \n\
    \        unique_chars_count -= length(word)\n        for char in word\n      \
    \      unique_chars.remove(char)\n        end\n    end\n    \n    if unique_chars_count\
    \ < length(words)\n        return \"\"\n    end\n    \n    unique_chars_count\
    \ = length(words)\n    \n    for word in words \n        unique_chars_count +=\
    \ length(word)\n        for char in word\n            unique_chars.remove(char)\n\
    \        end\n    end\n    \n    if unique_chars_count > length(words)\n     \
    \   return \"\"\n    end\n    \n    unique_chars_count = length(words)\n    \n\
    \    for word in words \n        unique_chars_count -= length(word)\n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    if unique_chars_count < length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars_count = length(words)\n    \n    for word in words \n\
    \        unique_chars_count += length(word)\n        for char in word\n      \
    \      unique_chars.add(char)\n        end\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars_count\
    \ = length(words)\n    \n    for word in words \n        unique_chars_count -=\
    \ length(word)\n        for char in word\n            unique_chars.remove(char)\n\
    \        end\n    end\n    \n    if unique_\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8u_1tbl.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8u_1tbl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse()\n    \n    if unique_chars.size == 0\n        return\
    \ \"\"\n    end\n    \n    unique_chars.last()\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8rr81f7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8rr81f7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = Dict{Char, Int}()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars += char\n                unique_chars_count[char] =\
    \ unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars]\n                    unique_chars = unique_chars\n\
    \                    unique_chars_count = unique_chars_count\n               \
    \ end\n            end\n        end\n    end\n    if length(unique_chars) == 0\n\
    \        return \"\"\n    end\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a list of strings and a number $k$ and returns the $k$-th\
    \ lexicographical element of the list. For example, find_k([\"a\", \"b\", \"c\"\
    , \"d\"], 2) should return \"c\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzzm2xy84.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzzm2xy84.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\") \n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\",\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\":\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    <\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\"\
    >\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\",\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\":\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    <\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\".\")\n    unique_char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m2vedy.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp89m2vedy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp89m2vedy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update([c for c in words[1]])\n    unique_chars.update([c\
    \ for c in words[2]])\n    unique_chars.update([c for c in words[3]])\n    unique_chars.update([c\
    \ for c in words[4]])\n    unique_chars.update([c for c in words[5]])\n    unique_chars.update([c\
    \ for c in words[6]])\n    unique_chars.update([c for c in words[7]])\n    unique_chars.update([c\
    \ for c in words[8]])\n    unique_chars.update([c for c in words[9]])\n    unique_chars.update([c\
    \ for c in words[10]])\n    unique_chars.update([c for c in words[11]])\n    unique_chars.update([c\
    \ for c in words[12]])\n    unique_chars.update([c for c in words[13]])\n    unique_chars.update([c\
    \ for c in words[14]])\n    unique_chars.update([c for c in words[15]])\n    unique_chars.update([c\
    \ for c in words[16]])\n    unique_chars.update([c for c in words[17]])\n    unique_chars.update([c\
    \ for c in words[18]])\n    unique_chars.update([c for c in words[19]])\n    unique_chars.update([c\
    \ for c in words[20]])\n    unique_chars.update([c for c in words[21]])\n    unique_chars.update([c\
    \ for c in words[22]])\n    unique_chars.update([c for c in words[23]])\n    unique_chars.update([c\
    \ for c in words[24]])\n    unique_chars.update([c for c in words[25]])\n    unique_chars.update([c\
    \ for c in words[26]])\n    unique_chars.update([c for c in words[27]])\n    unique_chars.update([c\
    \ for c in words[28]])\n    unique_chars.update([c for c in words[29]])\n    unique_chars.update([c\
    \ for c in words[30]])\n    unique_chars.update([c for c in words[31]])\n    unique_chars.update([c\
    \ for c in words[32]])\n    unique_chars.update([c for c in words[33]])\n    unique_chars.update([c\
    \ for c in words[34]])\n    unique_chars.update([c for c in words[35]])\n    unique_chars.update([c\
    \ for c in words[36]])\n    unique_chars.update([c for c in words[37]])\n    unique_chars.update([c\
    \ for c in words[38]])\n    unique_chars.update([c for c in words[39]])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmped19utfy.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmped19utfy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmped19utfy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_max = -1\n    unique_chars_max_index = -1\n    \n\
    \    for w in words\n        unique_chars = unique_chars + Set(w)\n        if\
    \ length(unique_chars) > unique_chars_max\n            unique_chars_max = length(unique_chars)\n\
    \            unique_chars_max_index = length(unique_chars)\n        end\n    end\n\
    \    \n    if unique_chars_max > 1\n        unique_chars = unique_chars[unique_chars_max_index:]\n\
    \    end\n    \n    if length(unique_chars) == unique_chars_max\n        return\
    \ words[unique_chars_max_index]\n    else\n        return \"\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of unique characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"unique_chars_max_index:\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp0_cy6ven.jl:24\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0_cy6ven.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union([char for word in words\
    \ for char in word])\n    unique_chars = unique_chars.union([char for word in\
    \ words for char in word])\n    unique_chars = unique_chars.union([char for word\
    \ in words for char in word])\n    unique_chars = unique_chars.union([char for\
    \ word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word])\n    unique_chars = unique_chars.union([char\
    \ for word in words for char in word\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp3wmfivk8.jl:40\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3wmfivk8.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for w in words\n        unique_chars\
    \ = unique_chars + Set(w)\n        unique_chars_count = unique_chars_count + length(w)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return \"\"\
    \n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    \n    unique_chars_count =\
    \ length(unique_chars)\n    \n    if unique_chars_count > length(words)\n    \
    \    return \"\"\n    end\n    \n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"1\")\n    unique_chars = unique_chars\
    \ - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n    unique_chars\
    \ = unique_chars - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n\
    \    unique_chars = unique_chars - Set(\"6\")\n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    \n    unique_chars_count = length(unique_chars)\n\
    \    \n    if unique_chars_count > length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"/\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplvfhc5zj.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplvfhc5zj.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = 0\n    \n    for word in words\n   \
    \     for char in word\n            unique_chars = unique_chars + char\n     \
    \       unique_chars_count = unique_chars_count + 1\n        end\n    end\n  \
    \  \n    if unique_chars_count > 1\n        return \"\"\n    end\n    \n    unique_chars_count\n\
    \    \n    if unique_chars_count == 1\n        return unique_chars[1]\n    end\n\
    \    \n    unique_chars[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings and returns a new list containing only unique strings.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopgyracu.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopgyracu.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp042x_hay.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp042x_hay.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp042x_hay.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n \
    \   for word in words[2:end]\n        unique_chars = unique_chars | Set{Char}(word)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars - Set{Char}(words[1])\n    unique_chars = unique_chars - Set{Char}(words[2])\n\
    \    unique_chars = unique_chars - Set{Char}(words[3])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[4])\n    unique_chars = unique_chars - Set{Char}(words[5])\n\
    \    unique_chars = unique_chars - Set{Char}(words[6])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[7])\n    unique_chars = unique_chars - Set{Char}(words[8])\n\
    \    unique_chars = unique_chars - Set{Char}(words[9])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[10])\n    unique_chars = unique_chars - Set{Char}(words[11])\n\
    \    unique_chars = unique_chars - Set{Char}(words[12])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[13])\n    unique_chars = unique_chars - Set{Char}(words[14])\n\
    \    unique_chars = unique_chars - Set{Char}(words[15])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[16])\n    unique_chars = unique_chars - Set{Char}(words[17])\n\
    \    unique_chars = unique_chars - Set{Char}(words[18])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[19])\n    unique_chars = unique_chars - Set{Char}(words[20])\n\
    \    unique_chars = unique_chars - Set{Char}(words[21])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[22])\n    unique_chars = unique_chars - Set{Char}(words[23])\n\
    \    unique_chars = unique_chars - Set{Char}(words[24])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[25])\n    unique_chars = unique_chars - Set{Char}(words[26])\n\
    \    unique_chars = unique_chars - Set{Char}(words[27])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[28])\n    unique_chars = unique_chars - Set{Char}(words[29\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrsy9bh2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrsy9bh2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiz0qagok.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiz0qagok.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiz0qagok.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words...)\n    unique_chars =\
    \ unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbl40fuek.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbl40fuek.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbl40fuek.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = Dict{Char, Int}()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \                end\n            end\n        end\n    end\n    unique_chars.last\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ a string with all the characters in lower case. \n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    For example, \"hello\"\
    \ => \"hello\"\n    For example, \"hello\" => \"hello\"\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4sxx9occ.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4sxx9occ.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set(words[1])\n    for\
    \ word in words[2:end]\n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l_ssac2.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2l_ssac2.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqv8lddyh.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqv8lddyh.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words) \n    unique_chars\
    \ = unique_chars.union(words) \n    unique_chars = unique_chars.union(words) \n\
    \    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7850f41w.jl:58\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7850f41w.jl:58\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse()\n    \n    unique_chars.max() \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfw29n66e.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfw29n66e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.filter(x -> !isempty(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isascii(x))\n    unique_chars = unique_chars.filter(x -> !isblank(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isspace(x))\n    unique_chars =\
    \ unique_chars.filter(x -> !islower(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isupper(x))\n    unique_chars = unique_chars.filter(x -> !isdigit(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isalnum(x))\n    unique_chars =\
    \ unique_chars.filter(x -> !issymbol(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciilower(x))\n    unique_chars = unique_chars.filter(x -> !isasciiupper(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isasciidigit(x))\n    unique_chars\
    \ = unique_chars.filter(x -> !isasciisymbol(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciispace(x))\n    unique_chars = unique_chars.filter(x -> !isasciiblank(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isasciilower(x))\n    unique_chars\
    \ = unique_chars.filter(x -> !isasciiupper(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciidigit(x))\n    unique_chars = unique_chars.filter(x -> !isasciisymbol(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isasciispace(x))\n    unique_chars\
    \ = unique_chars.filter(x -> !isasciiblank(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciilower(x))\n    unique_chars = unique_chars.filter(x -> !isasciiupper(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isasciidigit(x))\n    unique_chars\
    \ = unique_chars.filter(x -> !isasciisymbol(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciispace(x))\n    unique_chars = unique_chars.filter(x -> !isasciiblank(x))\n\
    \    unique_chars = unique_chars.filter(x -> !isasciilower(x))\n    unique_chars\
    \ = unique_chars.filter(x -> !isasciiupper(x))\n    unique_chars = unique_chars.filter(x\
    \ -> !isasciidigit(x))\n    unique_chars = unique_chars.filter(x -> !isasciisymbol(x))\n\
    \    unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdncif7dk.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdncif7dk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdncif7dk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    for word in words\n        for char\
    \ in word\n            if char in unique_chars\n                unique_chars_count\
    \ += 1\n            else\n                unique_chars.add(char)\n        end\n\
    \    end\n    if unique_chars_count > 1\n        return \"\"\n    else\n     \
    \   return words[words.index(words[words.index(word) .- 1])]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"\
    dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8h7d5q7a.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8h7d5q7a.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7mv0s85.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7mv0s85.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars_count = Dict{Char,Int}()\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars += char\n                unique_chars_count[char] =\
    \ unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars]\n                    unique_chars = unique_chars\n\
    \                end\n            end\n        end\n    end\n    return unique_chars\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the given string.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx8ezsypd.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx8ezsypd.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            unique_chars = unique_chars + char\n  \
    \      end\n        if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of vowels present in the string. \n\
    If the string contains no vowels, return 0.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8r78u3g.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8r78u3g.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjiszua6j.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjiszua6j.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6n8wykf7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6n8wykf7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6n8wykf7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Char}(0)\n    unique_chars_count_max\
    \ = Set{Char}(0)\n    unique_chars_count_max_index = Set{Int}(0)\n    for word\
    \ in words \n        for char in word\n            unique_chars.add(char)\n  \
    \          unique_chars_count.add(char)\n            unique_chars_count_max.add(char)\n\
    \            unique_chars_count_max_index.add(0)\n        end\n    end\n    for\
    \ char in unique_chars\n        unique_chars_count_max[char] = length(unique_chars_count_max)\n\
    \    end\n    unique_chars_count_max_index = length(unique_chars_count_max_index)\n\
    \    \n    for word in words \n        for char in word\n            if unique_chars_count_max[char]\
    \ > unique_chars_count_max_index\n                unique_chars_count_max_index\
    \ = unique_chars_count_max[char]\n            end\n        end\n    end\n    \n\
    \    for word in words \n        for char in word\n            if unique_chars_count_max[char]\
    \ == unique_chars_count_max_index\n                if unique_chars_count[char]\
    \ > unique_chars_count_max[char]\n                    unique_chars_count_max_index\
    \ = unique_chars_count_max[char]\n                end\n            end\n     \
    \   end\n    end\n    \n    return words[unique_chars_count_max_index]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings and\
    \ a character as input. Return the string with maximum number of occurrences of\
    \ the character in the string. If multiple strings have maximum number of occurrences\
    \ of the character, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmproemfbqg.jl:48\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmproemfbqg.jl:48\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgnz_eoo2.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgnz_eoo2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgnz_eoo2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_char\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiusydb1i.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiusydb1i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiusydb1i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[2:end])\n    unique_chars = unique_chars.union(words[3:end])\n\
    \    unique_chars = unique_chars.union(words[4:end])\n    unique_chars = unique_chars.union(words[5:end])\n\
    \    unique_chars = unique_chars.union(words[6:end])\n    unique_chars = unique_chars.union(words[7:end])\n\
    \    unique_chars = unique_chars.union(words[8:end])\n    unique_chars = unique_chars.union(words[9:end])\n\
    \    unique_chars = unique_chars.union(words[10:end])\n    unique_chars = unique_chars.union(words[11:end])\n\
    \    unique_chars = unique_chars.union(words[12:end])\n    unique_chars = unique_chars.union(words[13:end])\n\
    \    unique_chars = unique_chars.union(words[14:end])\n    unique_chars = unique_chars.union(words[15:end])\n\
    \    unique_chars = unique_chars.union(words[16:end])\n    unique_chars = unique_chars.union(words[17:end])\n\
    \    unique_chars = unique_chars.union(words[18:end])\n    unique_chars = unique_chars.union(words[19:end])\n\
    \    unique_chars = unique_chars.union(words[20:end])\n    unique_chars = unique_chars.union(words[21:end])\n\
    \    unique_chars = unique_chars.union(words[22:end])\n    unique_chars = unique_chars.union(words[23:end])\n\
    \    unique_chars = unique_chars.union(words[24:end])\n    unique_chars = unique_chars.union(words[25:end])\n\
    \    unique_chars = unique_chars.union(words[26:end])\n    unique_chars = unique_chars.union(words[27:end])\n\
    \    unique_chars = unique_chars.union(words[28:end])\n    unique_chars = unique_chars.union(words[29:end])\n\
    \    unique_chars = unique_chars.union(words[31:end])\n    unique_chars = unique_chars.union(words[32:end])\n\
    \    unique_chars = unique_chars.union(words[33:end])\n    unique_chars = unique_chars.union(words[34:end])\n\
    \    unique_chars = unique_chars.union(words[35:end])\n    unique_chars = unique_chars.union(words[36:end])\n\
    \    unique_chars = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgy0iuqde.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgy0iuqde.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgy0iuqde.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuo7qjuwv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuo7qjuwv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuo7qjuwv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update([c for c in words[1]])\n    unique_chars.update([c\
    \ for c in words[2]])\n    unique_chars.update([c for c in words[3]])\n    unique_chars.update([c\
    \ for c in words[4]])\n    unique_chars.update([c for c in words[5]])\n    unique_chars.update([c\
    \ for c in words[6]])\n    unique_chars.update([c for c in words[7]])\n    unique_chars.update([c\
    \ for c in words[8]])\n    unique_chars.update([c for c in words[9]])\n    unique_chars.update([c\
    \ for c in words[10]])\n    unique_chars.update([c for c in words[11]])\n    unique_chars.update([c\
    \ for c in words[12]])\n    unique_chars.update([c for c in words[13]])\n    unique_chars.update([c\
    \ for c in words[14]])\n    unique_chars.update([c for c in words[15]])\n    unique_chars.update([c\
    \ for c in words[16]])\n    unique_chars.update([c for c in words[17]])\n    unique_chars.update([c\
    \ for c in words[18]])\n    unique_chars.update([c for c in words[19]])\n    unique_chars.update([c\
    \ for c in words[20]])\n    unique_chars.update([c for c in words[21]])\n    unique_chars.update([c\
    \ for c in words[22]])\n    unique_chars.update([c for c in words[23]])\n    unique_chars.update([c\
    \ for c in words[24]])\n    unique_chars.update([c for c in words[25]])\n    unique_chars.update([c\
    \ for c in words[26]])\n    unique_chars.update([c for c in words[27]])\n    unique_chars.update([c\
    \ for c in words[28]])\n    unique_chars.update([c for c in words[29]])\n    unique_chars.update([c\
    \ for c in words[30]])\n    unique_chars.update([c for c in words[31]])\n    unique_chars.update([c\
    \ for c in words[32]])\n    unique_chars.update([c for c in words[33]])\n    unique_chars.update([c\
    \ for c in words[34]])\n    unique_chars.update([c for c in words[35]])\n    unique_chars.update([c\
    \ for c in words[36]])\n    unique_chars.update([c for c in words[37]])\n    unique_chars.update([c\
    \ for c in words[38]])\n    unique_chars.update([c for c in words[39]])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp93p4ncku.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp93p4ncku.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp93p4ncku.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words\n        for char in word\n     \
    \       unique_chars.add(char)\n        end\n    end\n    \n    if unique_chars.size\
    \ > 1\n        return \"\"\n    end\n    \n    return words[1]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a string and returns the number\
    \ of vowels in that string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppldhw_sl.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppldhw_sl.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpopg2pjpg.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpopg2pjpg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpopg2pjpg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.keys() \n    unique_chars = unique_chars.sort\n    unique_chars\
    \ = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a list of strings and a string. The function should return\
    \ the string which comes first in lexicographical order among the list of strings.\
    \ If the string is not present in the list, return an empty string.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0t5a4uzb.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0t5a4uzb.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7rju5qe.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7rju5qe.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(union(words))\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqt43f3am.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqt43f3am.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n    unique_chars_count_max\
    \ = Set{Int}(0)\n    for word in words\n        for char in word\n           \
    \ unique_chars += char\n            unique_chars_count += 1 \n            if unique_chars_count\
    \ > unique_chars_count_max\n                unique_chars_count_max = unique_chars_count\n\
    \            end\n        end\n    end\n    \n    if unique_chars_count_max ==\
    \ unique_chars_count\n        return \"\"\n    end\n    \n    unique_chars_count_max.max\
    \ \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that accepts a string and returns a string with all the characters\
    \ in lower case. \nThe function should ignore the case of the characters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxn2vb2g4.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxn2vb2g4.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        unique_chars_count\
    \ += length(word)\n        for char in word\n            unique_chars += char\n\
    \        end\n    end\n    \n    if unique_chars_count > length(words)\n     \
    \   return \"\"\n    end\n    \n    if unique_chars_count == length(words)\n \
    \       return words[1]\n    end\n    \n    if unique_chars_count < length(words)\n\
    \        for word in words\n            unique_chars_count += length(word)\n \
    \       end\n    end\n    \n    if unique_chars_count == length(words)\n     \
    \   return words[1]\n    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoaypzggb.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoaypzggb.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpr_ehjvgo.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr_ehjvgo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr_ehjvgo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.map(w => w.length())\n    unique_chars = unique_chars.filter(w\
    \ => w > 1)\n    unique_chars = unique_chars.map(w => w.sort())\n    unique_chars\
    \ = unique_chars.map(w => w[1])\n    unique_chars = unique_chars.filter(w => w\
    \ != \"\")\n    unique_chars = unique_chars.map(w => w[1])\n    unique_chars =\
    \ unique_chars.sort\n    unique_chars = unique_chars.last\n    unique_chars =\
    \ unique_chars.last\n    return unique_chars\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt3h74_8o.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt3h74_8o.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for w in words\n        for c in w\n            unique_chars.add(c)\n\
    \        end\n    end\n    \n    if unique_chars.size > 1\n        \n        best_word\
    \ = words[1]\n        best_chars = unique_chars[1]\n        \n        for w in\
    \ words\n            \n            unique_chars = Set{Char}()\n            \n\
    \            for c in w\n                unique_chars.add(c)\n            end\n\
    \            \n            if unique_chars.size > best_chars\n               \
    \ best_chars = unique_chars[1]\n                best_word = w\n            end\n\
    \        end\n        \n        return best_word\n    else\n        return \"\"\
    \n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\"\
    , \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\"\
    , \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns a string with all the characters in lower case. \nIf the string\
    \ has any non-alphabetic characters, return an empty string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyhsxg9w5.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyhsxg9w5.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptxkio0y1.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptxkio0y1.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = unique_chars.union(Set(\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7bzt9dxg.jl:51\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7bzt9dxg.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Char}(\"\")\n    for word in\
    \ words \n        for char in word\n            unique_chars += char\n       \
    \     unique_chars_count[char] += 1 \n    end\n    \n    if length(unique_chars)\
    \ == length(unique_chars_count)\n        return \"\"\n    end\n    \n    unique_chars_count\
    \ = sort(unique_chars_count)\n    \n    return unique_chars[end]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \nIf the string contains any non-alphabetic\
    \ characters, return an empty string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprhkwbqs0.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprhkwbqs0.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            unique_chars << char\n        end\n   \
    \     if length(unique_chars) > length(word_with_max_unique_chars)\n         \
    \   word_with_max_unique_chars = word\n        end\n    end\n    word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and a string. Return the string with maximum number of unique characters. If\
    \ multiple strings have maximum number of unique characters, return the one which\
    \ comes first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpza4w892g.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpza4w892g.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjpeq24q.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmjpeq24q.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words) \n    unique_chars\
    \ = unique_chars.union(words[1]) \n    unique_chars = unique_chars.union(words[2])\
    \ \n    unique_chars = unique_chars.union(words[3]) \n    unique_chars = unique_chars.union(words[4])\
    \ \n    unique_chars = unique_chars.union(words[5]) \n    unique_chars = unique_chars.union(words[6])\
    \ \n    unique_chars = unique_chars.union(words[7]) \n    unique_chars = unique_chars.union(words[8])\
    \ \n    unique_chars = unique_chars.union(words[9]) \n    unique_chars = unique_chars.union(words[10])\
    \ \n    unique_chars = unique_chars.union(words[11]) \n    unique_chars = unique_chars.union(words[12])\
    \ \n    unique_chars = unique_chars.union(words[13]) \n    unique_chars = unique_chars.union(words[14])\
    \ \n    unique_chars = unique_chars.union(words[15]) \n    unique_chars = unique_chars.union(words[16])\
    \ \n    unique_chars = unique_chars.union(words[17]) \n    unique_chars = unique_chars.union(words[18])\
    \ \n    unique_chars = unique_chars.union(words[19]) \n    unique_chars = unique_chars.union(words[20])\
    \ \n    unique_chars = unique_chars.union(words[21]) \n    unique_chars = unique_chars.union(words[22])\
    \ \n    unique_chars = unique_chars.union(words[23]) \n    unique_chars = unique_chars.union(words[24])\
    \ \n    unique_chars = unique_chars.union(words[25]) \n    unique_chars = unique_chars.union(words[26])\
    \ \n    unique_chars = unique_chars.union(words[27]) \n    unique_chars = unique_chars.union(words[28])\
    \ \n    unique_chars = unique_chars.union(words[29]) \n    unique_chars = unique_chars.union(words[30])\
    \ \n    unique_chars = unique_chars.union(words[31]) \n    unique_chars = unique_chars.union(words[32])\
    \ \n    unique_chars = unique_chars.union(words[33]) \n    unique_chars = unique_chars.union(words[34])\
    \ \n    unique_chars = unique_chars.union(words[35]) \n    unique_chars = unique_chars.union(words[36])\
    \ \n    unique_chars = unique_chars.union(words[37]) \n    unique_chars = unique_chars.union(words[38])\
    \ \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxesb3qyd.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxesb3qyd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxesb3qyd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        unique_chars = unique_chars +\
    \ Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    unique_chars = unique_chars[end]\n    \n    return unique_chars\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the given string.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvn81n6km.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvn81n6km.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    \n    unique_chars\
    \ = Set{Char}()\n    \n    for word in words\n        for char in word\n     \
    \       unique_chars <- unique_chars + char\n        end\n    end\n    \n    if\
    \ length(unique_chars) > length(words)\n        return \"\"\n    end\n    \n \
    \   unique_chars = sort(unique_chars)\n    \n    return words[end][1]\nend\n</cell>\n\
    <code language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and a string.\
    \ The function should return the string which comes first in lexicographical order\
    \ among all the strings in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpguu14ql1.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpguu14ql1.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc0d64lyu.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc0d64lyu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc0d64lyu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        for\
    \ char in word\n            if !contains(unique_chars, char)\n               \
    \ unique_chars += char\n                unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n            else\n                if unique_chars_count[char] > unique_chars_count[unique_chars]\n\
    \                    unique_chars = unique_chars\n                end\n      \
    \      end\n        end\n    end\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a list of strings and a string. Return\
    \ the string which comes first in lexicographical order among all the strings\
    \ in the list. For example,\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr_ksaf5s.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr_ksaf5s.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words\n    \
    \    unique_chars = unique_chars + Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove duplicates from the input list.\
    \ \nThe function should return an empty list if the input list is empty.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_0iz7g54.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_0iz7g54.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words) \n    unique_chars\
    \ = unique_chars.union(words) \n    unique_chars = unique_chars.union(words) \n\
    \    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.union(words) \n    unique_chars = unique_chars.union(words)\
    \ \n    unique_chars = unique_chars.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdv28yo6u.jl:58\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdv28yo6u.jl:58\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n \
    \   for w in words[2:end]\n        unique_chars = unique_chars | Set{Char}(w)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars - Set{Char}(words[1])\n    unique_chars = unique_chars - Set{Char}(words[2])\n\
    \    unique_chars = unique_chars - Set{Char}(words[3])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[4])\n    unique_chars = unique_chars - Set{Char}(words[5])\n\
    \    unique_chars = unique_chars - Set{Char}(words[6])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[7])\n    unique_chars = unique_chars - Set{Char}(words[8])\n\
    \    unique_chars = unique_chars - Set{Char}(words[9])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[10])\n    unique_chars = unique_chars - Set{Char}(words[11])\n\
    \    unique_chars = unique_chars - Set{Char}(words[12])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[13])\n    unique_chars = unique_chars - Set{Char}(words[14])\n\
    \    unique_chars = unique_chars - Set{Char}(words[15])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[16])\n    unique_chars = unique_chars - Set{Char}(words[17])\n\
    \    unique_chars = unique_chars - Set{Char}(words[18])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[19])\n    unique_chars = unique_chars - Set{Char}(words[20])\n\
    \    unique_chars = unique_chars - Set{Char}(words[21])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[22])\n    unique_chars = unique_chars - Set{Char}(words[23])\n\
    \    unique_chars = unique_chars - Set{Char}(words[24])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[25])\n    unique_chars = unique_chars - Set{Char}(words[26])\n\
    \    unique_chars = unique_chars - Set{Char}(words[27])\n    unique_chars = unique_chars\
    \ - Set{Char}(words[28])\n    unique_chars = unique_chars - Set{Char}(words[29\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplwzcpe68.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplwzcpe68.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv2e1ufss.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv2e1ufss.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv2e1ufss.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words[1])\n    for word\
    \ in words[2:end]\n        unique_chars = unique_chars.union(word)\n    end\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[end])\n\
    \    unique_chars = unique_chars.union(words[end-1])\n    unique_chars = unique_chars.union(words[end-2])\n\
    \    unique_chars = unique_chars.union(words[end-3])\n    unique_chars = unique_chars.union(words[end-4])\n\
    \    unique_chars = unique_chars.union(words[end-5])\n    unique_chars = unique_chars.union(words[end-6])\n\
    \    unique_chars = unique_chars.union(words[end-7])\n    unique_chars = unique_chars.union(words[end-8])\n\
    \    unique_chars = unique_chars.union(words[end-9])\n    unique_chars = unique_chars.union(words[end-10])\n\
    \    unique_chars = unique_chars.union(words[end-11])\n    unique_chars = unique_chars.union(words[end-12])\n\
    \    unique_chars = unique_chars.union(words[end-13])\n    unique_chars = unique_chars.union(words[end-14])\n\
    \    unique_chars = unique_chars.union(words[end-15])\n    unique_chars = unique_chars.union(words[end-16])\n\
    \    unique_chars = unique_chars.union(words[end-17])\n    unique_chars = unique_chars.union(words[end-18])\n\
    \    unique_chars = unique_chars.union(words[end-19])\n    unique_chars = unique_chars.union(words[end-20])\n\
    \    unique_chars = unique_chars.union(words[end-21])\n    unique_chars = unique_chars.union(words[end-22])\n\
    \    unique_chars = unique_chars.union(words[end-23])\n    unique_chars = unique_chars.union(words[end-24])\n\
    \    unique_chars = unique_chars.union(words[end-25])\n    unique_chars = unique_chars.union(words[end-26])\n\
    \    unique_chars = unique_chars.union(words[end-27])\n    unique_chars = unique_chars.union(words[end-28])\n\
    \    unique_chars = unique_chars.union(words[end-29])\n    unique_chars = unique_chars.union(words[end-30])\n\
    \    unique_chars = unique_chars.union(words[end-31])\n    unique_chars = unique_chars.union(words[end-32])\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptw909mok.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptw909mok.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptw909mok.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz4xxggko.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz4xxggko.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz4xxggko.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union( map(char,words) )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words) ) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[2:end])) )\n    unique_chars =\
    \ unique_chars.union( map(char,reverse(words[3:end])) )\n    unique_chars = unique_chars.union(\
    \ map(char,reverse(words[4:end])) )\n    unique_chars = unique_chars.union( map(char,reverse(words[5:end]))\
    \ )\n    unique_chars = unique_chars.union( map(char,reverse(words[6:end])) )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words[7:end])) )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[8:end])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[9:end])) )\n    unique_chars =\
    \ unique_chars.union( map(char,reverse(words[10:end])) )\n    unique_chars = unique_chars.union(\
    \ map(char,reverse(words[11:end])) )\n    unique_chars = unique_chars.union( map(char,reverse(words[12:end]))\
    \ )\n    unique_chars = unique_chars.union( map(char,reverse(words[13:end])) )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words[14:end])) )\n \
    \   unique_chars = unique_chars.union( map(char,reverse(words[15:end])) )\n  \
    \  unique_chars = unique_chars.union( map(char,reverse(words[16:end])) )\n   \
    \ unique_chars = unique_chars.union( map(char,reverse(words[17:end])) )\n    unique_chars\
    \ = unique_chars.union( map(char,reverse(words[18:end])) )\n    unique_chars =\
    \ unique_chars.union( map(char,reverse(words[19:end])) )\n    unique_chars = unique_chars.union(\
    \ map(char,reverse(words[20:end])) )\n    unique_chars = unique_chars.union( map(char,reverse(words[21:end]))\
    \ )\n    unique_chars = unique_chars.union( map(char,reverse(words[22:end])) )\n\
    \    unique_chars = unique_chars.union( map(char,reverse(words[23:end])) )\n \
    \   unique_chars = unique_chars.union( map(char,reverse(words[24:end])) )\n  \
    \  unique_chars = unique_chars.union\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8pqprcec.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8pqprcec.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8pqprcec.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = \n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp67zqa9gl.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp67zqa9gl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp67zqa9gl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars = unique_chars + char\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    for word in words\n        for char in word\n            if char ==\
    \ unique_chars[1]\n                return word\n            end\n        end\n\
    \    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdnf_q4tx.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer,\
    \ ::AbstractChar) at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1})\
    \ at /tmp/tmpdnf_q4tx.jl:14\n   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:39\n  Test threw exception\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method matching +(::Set{Char},\
    \ ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar) at char.jl:224\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:40\n  Test threw exception\n  Expression: candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  MethodError: no method matching\
    \ +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar)\
    \ at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:41\n  Test threw exception\n  Expression: candidate([\"\
    abc\", \"cba\"]) == \"abc\"\n  MethodError: no method matching +(::Set{Char},\
    \ ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar) at char.jl:224\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:42\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\"\n  MethodError:\
    \ no method matching +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer,\
    \ ::AbstractChar) at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1})\
    \ at /tmp/tmpdnf_q4tx.jl:14\n   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:43\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n  MethodError: no method matching\
    \ +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar)\
    \ at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:44\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"\n  MethodError: no method\
    \ matching +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer,\
    \ ::AbstractChar) at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1})\
    \ at /tmp/tmpdnf_q4tx.jl:14\n   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:44\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:45\n  Test threw exception\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  MethodError: no method matching\
    \ +(::Set{Char}, ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar)\
    \ at char.jl:224\n  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:46\n  Test threw exception\n  Expression: candidate([\"\
    b\"]) == \"b\"\n  MethodError: no method matching +(::Set{Char}, ::Char)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    +(!Matched::Integer, ::AbstractChar) at char.jl:224\n  Stacktrace:\n   [1]\
    \ find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n   [2] top-level scope\
    \ at /tmp/tmpdnf_q4tx.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnf_q4tx.jl:47\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"play\", \"play\"]) == \"play\"\n  MethodError: no method matching +(::Set{Char},\
    \ ::Char)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Integer, ::AbstractChar) at char.jl:224\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpdnf_q4tx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdnf_q4tx.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdnf_q4tx.jl:37\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnf_q4tx.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars = unique_chars + char\n        end\n    end\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    return unique_chars[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings.\n    The list contains different words. Return the\
    \ word with maximum number\n    of unique characters. If multiple strings have\
    \ maximum number of unique\n    characters, return the one which comes first in\
    \ lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps4axnaea.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps4axnaea.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    word_with_max_unique_chars = \"\"\n    for word in words\n\
    \        for char in word\n            if !contains(unique_chars, char)\n    \
    \            unique_chars.add(char)\n                if length(unique_chars) >\
    \ length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqkees1ep.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqkees1ep.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqkees1ep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmghc66vd.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmghc66vd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmghc66vd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words\n        for char in word\n       \
    \     unique_chars = unique_chars + char\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return \"\"\n    else\n        return words[findfirst(unique_chars)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\"\
    , \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\"\
    , \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    \ ,\"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that accepts a list of\
    \ strings and returns a vector with all the unique characters in each string.\
    \ \nThe vector should have the same length as the number of strings.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmu05m5rg.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmu05m5rg.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm7gmg1mx.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm7gmg1mx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm7gmg1mx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars.update((word) for word in words)\n    unique_chars.sort\n\
    \    unique_chars.last\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe list contains\
    \ different words. \nThe function should return a list of words with maximum number\
    \ of unique characters. \nIf multiple strings have maximum number of unique characters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl55v3d0p.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl55v3d0p.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars.update([char for word in words for char in word])\n\
    \    unique_chars = unique_chars.toSet()\n    unique_chars = unique_chars.sorted()\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ny2j2f5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ny2j2f5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl_mjpjyq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl_mjpjyq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl_mjpjyq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.filter(x\
    \ -> x > 1)\n    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars\
    \ = unique_chars.sort\n    unique_chars = unique_chars.last\n    unique_chars\
    \ = unique_chars.last\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns the number of vowels in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzfjahgdl.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzfjahgdl.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse()\n    \n    if unique_chars.size == 0 \n        return\
    \ \"\"\n    \n    unique_chars.last\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a list of strings and returns the string with maximum\
    \ length. \nIf multiple strings have maximum length, return the one which comes\
    \ first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7prorpve.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7prorpve.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        unique_chars_count\
    \ += length(word)\n        unique_chars = unique_chars + Set(word)\n    end\n\
    \    \n    if unique_chars_count > length(words)\n        return \"\"\n    end\n\
    \    \n    unique_chars_count = length(words)\n    \n    if unique_chars_count\
    \ == length(words)\n        return words[1]\n    end\n    \n    for word in words\n\
    \        unique_chars_count -= length(word)\n        unique_chars = unique_chars\
    \ - Set(word)\n    end\n    \n    if unique_chars_count == length(words)\n   \
    \     return words[1]\n    end\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a list of strings and returns a new list containing only\
    \ the unique words in the list.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgqul64t_.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgqul64t_.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq_cm4wib.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq_cm4wib.jl:1\n"
  exit_code: 1
  status: Exception
