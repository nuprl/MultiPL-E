name: HumanEval_81_numerical_letter_grade
language: julia
results:
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ < 0\n        grades_sum = 0\n    end\n    grades_sum = round(grades_sum, digits=2)\n\
    \    grades_sum_string = string(grades_sum)\n    grades_sum_string = replace(grades_sum_string,\
    \ \".\", \"\")\n    grades_sum_string = replace(grades_sum_string, \",\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \"-\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \"+\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"E\", \"0\")\n    grades_sum_string = replace(grades_sum_string, \"D\", \"\
    0\")\n    grades_sum_string = replace(grades_sum_string, \"C\", \"0\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \"B\", \"0\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"A\", \"0\")\n    grades_sum_string = replace(grades_sum_string, \"+\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \"-\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \"*\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"/\", \"\")\n    grades_sum_string = replace(grades_sum_string, \"0\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \".\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \",\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"*\", \"\")\n    grades_sum_string = replace(grades_sum_string, \"/\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \"0\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \".\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \",\", \"\")\n    grades_sum_string = replace(grades_sum_string, \"-\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \"+\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \"*\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"/\", \"\")\n    grades_sum_string = replace(grades_sum_string, \"0\", \"\"\
    )\n    grades_sum_string = replace(grades_sum_string, \".\", \"\")\n    grades_sum_string\
    \ = replace(grades_sum_string, \",\", \"\")\n    grades_sum_string = replace(grades_sum_string,\
    \ \"-\", \"\")\n    grades_sum_string = replace(grades_sum_string, \"+\", \"\"\
    )\n    grades_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3vpfa3ik.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3vpfa3ik.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3vpfa3ik.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5q54ynow.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5q54ynow.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5q54ynow.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = 0.0\n    grades_count = 0\n  \
    \  grades_sum = 0.0\n    for grade in grades\n        if grade > grades_sum\n\
    \            grades_sum = grade\n            grades_count = grades_count\n   \
    \     elseif grade == grades_sum\n            grades_count += 1\n        elseif\
    \ grade < grades_sum\n            grades_sum = grade\n            grades_count\
    \ = grades_count\n        end\n    end\n    grades_sum -= grades_count\n    grades_count\
    \ -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum\
    \ -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n   \
    \ grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n \
    \   grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n    grades_sum -= grades_count\n\
    \    grades_count -= 1\n    grades_sum -= grades_count\n    grades_count -= 1\n\
    \    grades_sum -= grades_count\n    grades_count -= 1\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaphnoo2e.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaphnoo2e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaphnoo2e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpts3fc22p.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpts3fc22p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpts3fc22p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8cu0qdm1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8cu0qdm1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8cu0qdm1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiddntmjx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiddntmjx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiddntmjx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbfb0cijd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbfb0cijd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbfb0cijd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq40hdupj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq40hdupj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq40hdupj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptduh8s6p.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptduh8s6p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptduh8s6p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8mhzrs4y.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8mhzrs4y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8mhzrs4y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyv7bo_f7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyv7bo_f7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyv7bo_f7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * length(grades)) -\n        2.0 * length(grades) * (grades_sum / length(grades)))\n\
    \    grades_entropy = - grades_sum * log(grades_sum) - (length(grades) *\n   \
    \     log(length(grades))) - (2.0 * length(grades) * log(grades_avg))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / log(length(grades))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / log(length(grades))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / log(length(grades))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / log(length(grades))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / log(length(grades))\n    grades_entropy_normalized\
    \ = grades_entropy / log(length(grades))\n    grades_entropy_normalized = grades_entropy\
    \ / log(length(grades))\n    grades_entropy_normalized = grades_entropy / log(length(grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz2v3rfz.jl:62\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmz2v3rfz.jl:62\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ < 0\n        grades_sum = 0\n    end\n    grades_avg = grades_sum / length(grades)\n\
    \    grades_std = std(grades)\n    grades_min = minimum(grades)\n    grades_max\
    \ = maximum(grades)\n    grades_range = grades_max - grades_min\n    grades_range_sqr\
    \ = grades_range * grades_range\n    grades_skew = grades_range_sqr / mean(grades)\n\
    \    grades_kurtosis = grades_range_sqr / ((length(grades) - 1) * mean(grades_skew))\n\
    \    grades_entropy = - grades_sum * log(grades_sum) - (grades_sum / length(grades))\
    \ * \n        log(grades_avg) - (grades_avg / length(grades)) * log(grades_std)\n\
    \    grades_entropy_normalized = grades_entropy / -grades_sum\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)-1]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .+ 1e-\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp81wcwf8q.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp81wcwf8q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp81wcwf8q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1nzbsn98.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1nzbsn98.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1nzbsn98.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt9_fpl32.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt9_fpl32.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt9_fpl32.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprip4p7lo.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprip4p7lo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprip4p7lo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * length(grades))\n    grades_entropy = - grades_skew * log(grades_skew)\
    \ - grades_kurtosis * log(grades_kurtosis)\n    grades_entropy_rounded = round(grades_entropy,\
    \ digits=2)\n    grades_pct_below = grades_entropy_rounded / grades_entropy_rounded\
    \ - 1\n    grades_pct_below_rounded = round(grades_pct_below, digits=2)\n    grades_pct_above\
    \ = 1 - grades_pct_below\n    grades_pct_above_rounded = round(grades_pct_above,\
    \ digits=2)\n    grades_pct_below_pct_above = grades_pct_below_rounded / grades_pct_above_rounded\
    \ - 1\n    grades_pct_below_pct_above_rounded = round(grades_pct_below_pct_above,\
    \ digits=2)\n    grades_pct_below_pct_above_pct_below = grades_pct_below_pct_above_rounded\
    \ / grades_pct_below_rounded - 1\n    grades_pct_below_pct_above_pct_below_rounded\
    \ = round(grades_pct_below_pct_above_pct_below, digits=2)\n    grades_pct_below_pct_above_pct_below_pct_above_rounded\
    \ = round(grades_pct_below_pct_above_pct_below_rounded, digits=2)\n    grades_pct_below_pct_above_pct_below_pct_above_rounded_rounded\
    \ = round(grades_pct_below_pct_above_pct_below_pct_above_rounded, digits=2)\n\
    \    grades_pct_below_pct_above_pct_below_pct_above_rounded_rounded_rounded =\
    \ round(grades_pct_below_pct_above_pct_below_pct_above_rounded_rounded, digits=2)\n\
    \    grades_pct_below_pct_above_pct_below_pct_above_roun\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaxzeqrtk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaxzeqrtk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaxzeqrtk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuisu6te0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuisu6te0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuisu6te0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70bsy_ye.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp70bsy_ye.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp70bsy_ye.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpch56cc0l.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpch56cc0l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpch56cc0l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyo06todr.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyo06todr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyo06todr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7bxajvay.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7bxajvay.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7bxajvay.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_percent = grades_range / grades_avg\n    grades_range_percent_floor\
    \ = floor(grades_range_percent)\n    grades_range_percent_ceil = ceil(grades_range_percent)\n\
    \    grades_range_percent_floor_inv = grades_range_percent_floor - 1\n    grades_range_percent_ceil_inv\
    \ = grades_range_percent_ceil - 1\n    grades_range_percent_floor_inv_floor =\
    \ grades_range_percent_floor_inv - 1\n    grades_range_percent_ceil_inv_ceil =\
    \ grades_range_percent_ceil_inv - 1\n    grades_range_percent_floor_inv_floor_inv\
    \ = grades_range_percent_floor_inv_floor - 1\n    grades_range_percent_ceil_inv_ceil_inv\
    \ = grades_range_percent_ceil_inv_ceil_inv - 1\n    grades_range_percent_floor_inv_floor_inv_floor\
    \ = grades_range_percent_floor_inv_floor_inv_floor - 1\n    grades_range_percent_ceil_inv_ceil_inv_ceil\
    \ = grades_range_percent_ceil_inv_ceil_inv_ceil - 1\n    grades_range_percent_floor_inv_floor_inv_floor_inv\
    \ = grades_range_percent_floor_inv_floor_inv_floor_inv - 1\n    grades_range_percent_ceil_inv_ceil_inv_ceil_inv\
    \ = grades_range_percent_ceil_inv_ceil_inv_ceil_inv - 1\n    grades_range_percent_floor_inv_floor_inv_floor_inv_floor\
    \ = grades_range_percent_floor_inv_floor_inv_floor_inv_floor - 1\n    grades_range_percent_ceil_inv_ceil_inv_ceil_inv_ceil\
    \ = grades_range_percent_ceil_inv_ceil_inv_ceil_inv_ceil - 1\n    grades_range_percent_floor_inv_floor_inv_floor_inv_floor_inv\
    \ = grades_range_percent_floor_inv_floor_inv_floor_inv_floor_inv - 1\n    grades_range_percent_ceil_inv_ceil_inv_ceil_inv_ceil_inv\
    \ = grades_range_percent_ceil_inv_ceil_inv_ceil_inv_ceil_inv - 1\n    grades_range_percent_floor_inv_floor_inv_floor_inv_floor_inv_floor\
    \ = grades_range_percent_floor_inv_floor_inv_floor_inv_floor_inv_floor - 1\n \
    \   grades_range_percent_ceil_inv_ceil_inv_ceil_inv_ceil\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzjrzy76b.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzjrzy76b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzjrzy76b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr8ik2b_s.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr8ik2b_s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr8ik2b_s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx7p2_og_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx7p2_og_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx7p2_og_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2vjcjrap.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2vjcjrap.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2vjcjrap.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reversed = reverse(grades_sorted)\n\
    \    grades_sorted_reversed_sorted = sort(grades_sorted_reversed)\n    grades_sorted_reversed_sorted_reversed\
    \ = reverse(sort(grades_sorted_reversed_sorted))\n    grades_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(grades_sorted_reversed_sorted_reversed)))\n    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted)))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)))))))))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))))))))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))))))))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))))))))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(grades_sorted_reversed_sorted_reversed_sorted_reverse\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxtxozwlw.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxtxozwlw.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)*length(grades))\
    \ - length(grades))\n    grades_entropy = - grades_avg + log(grades_std)\n   \
    \ grades_entropy_normalized = grades_entropy / sum(grades_entropy)\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .> 0]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .< 1]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= 0]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_avg]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_std]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_min]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_max]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_range]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_range_sqr]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_skew]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_kurtosis]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplrt3sx2p.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplrt3sx2p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82wfnhpt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp82wfnhpt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp82wfnhpt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppnhn1_2r.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppnhn1_2r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppnhn1_2r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)-1)\
    \ * (length(grades)-2))\n    grades_entropy = grades_sum * log(grades_sum) - (grades_sum\
    \ * grades_sum) / length(grades)\n    grades_entropy_sqr = grades_entropy * grades_entropy\n\
    \    grades_skew_entropy = grades_skew * grades_entropy\n    grades_skew_entropy_sqr\
    \ = grades_skew_entropy * grades_entropy\n    grades_kurtosis_entropy = grades_kurtosis\
    \ * grades_entropy\n    grades_kurtosis_entropy_sqr = grades_kurtosis_entropy\
    \ * grades_entropy\n    grades_var = (grades_sum - grades_avg * grades_avg) /\
    \ length(grades)\n    grades_var_sqr = grades_var * grades_var\n    grades_n =\
    \ length(grades)\n    grades_n2 = grades_n^2\n    grades_n3 = grades_n^3\n   \
    \ grades_n4 = grades_n^4\n    grades_n5 = grades_n^5\n    grades_n6 = grades_n^6\n\
    \    grades_n7 = grades_n^7\n    grades_n8 = grades_n^8\n    grades_n9 = grades_n^9\n\
    \    grades_n10 = grades_n^10\n    grades_n11 = grades_n^11\n    grades_n12 =\
    \ grades_n^12\n    grades_n13 = grades_n^13\n    grades_n14 = grades_n^14\n  \
    \  grades_n15 = grades_n^15\n    grades_n16 = grades_n^16\n    grades_n17 = grades_n^17\n\
    \    grades_n18 = grades_n^18\n    grades_n19 = grades_n^19\n    grades_n20 =\
    \ grades_n^20\n    grades_n21 = grades_n^21\n    grades_n22 = grade\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhwtoeyx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvhwtoeyx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvhwtoeyx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjv6snkoj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjv6snkoj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjv6snkoj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7b70t3ld.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7b70t3ld.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7b70t3ld.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6wodddx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz6wodddx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz6wodddx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe_y0yjc7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe_y0yjc7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe_y0yjc7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz3egjw1a.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz3egjw1a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz3egjw1a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qn15c7f.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6qn15c7f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6qn15c7f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21a5mwyj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp21a5mwyj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp21a5mwyj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwhdfdpc5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwhdfdpc5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwhdfdpc5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfe1js5tl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfe1js5tl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfe1js5tl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvt569c6i.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvt569c6i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvt569c6i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reverse = reverse(grades_sorted)\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n\
    \    grades_sorted_reverse.reverse()\n    grades_sorted_reverse.sort()\n    grades_sorted_reverse.reverse()\n\
    \    grades_sorted_reverse.sort()\n    grades_\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7dt90qis.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7dt90qis.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7dt90qis.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * pow(length(grades) - 1, 2))\n    grades_entropy = - grades_avg + log(grades_std)\n\
    \    grades_entropy_normalized = grades_entropy - grades_avg\n    grades_skewness\
    \ = grades_skew * grades_range_sqr\n    grades_kurtosis_normalized = grades_kurtosis\
    \ * grades_range_sqr\n    grades_excess_entropy = grades_entropy_normalized -\
    \ grades_skewness\n    grades_excess_entropy_normalized = grades_excess_entropy\
    \ / grades_range_sqr\n    grades_excess_entropy_normalized_sorted = sort(grades_excess_entropy_normalized)\n\
    \    grades_excess_entropy_normalized_sorted_reversed = reverse(grades_excess_entropy_normalized_sorted)\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted = sort(grades_excess_entropy_normalized_sorted_reversed)\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed = reverse(sort(grades_excess_entropy_normalized_sorted_reversed_sorted))\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted =\
    \ sort(reverse(grades_excess_entropy_normalized_sorted_reversed_sorted_reversed))\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(sort(reverse(grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted)))\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed)))))\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = sort(reverse(sort(reverse(sort(reverse(grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed)))))\n\
    \    grades_excess_entropy_normalized_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(grades_excess_entropy_normalized_sorted_reversed_\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \")\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp039oxmz8.jl:48\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp039oxmz8.jl:48\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn83x0i5c.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn83x0i5c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn83x0i5c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2nx4_vdg.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2nx4_vdg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2nx4_vdg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpexc3lrlb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpexc3lrlb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpexc3lrlb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65ngagwy.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp65ngagwy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp65ngagwy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplkzebpvq.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplkzebpvq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplkzebpvq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5a1ua9p0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5a1ua9p0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5a1ua9p0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwqwd2o6u.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwqwd2o6u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwqwd2o6u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvdd2ncrf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvdd2ncrf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvdd2ncrf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo27prno6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo27prno6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo27prno6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgxw90_di.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgxw90_di.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgxw90_di.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn0fhbrh0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn0fhbrh0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn0fhbrh0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sorted = sort(grades)\n    grades_sorted_reversed\
    \ = sort(grades, rev=true)\n    grades_sorted_reversed_reversed = sort(grades,\
    \ rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed = sort(grades,\
    \ rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true)\n\
    \    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true,\
    \ rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true,\
    \ rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true,\
    \ rev=true, rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true,\
    \ rev=true, rev=true, rev=true, rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true,\
    \ rev=true, rev=true, rev=true, rev=true, rev=true, rev=true, rev=true)\n    grades_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = sort(grades, rev=true, rev=true, rev=true, rev=\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbi1ynq39.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbi1ynq39.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwfrfcijp.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwfrfcijp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwfrfcijp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_kurtosis_adj = grades_kurtosis\
    \ - 3\n    grades_kurtosis_adj_2 = grades_kurtosis_adj * grades_kurtosis_adj\n\
    \    grades_kurtosis_adj_3 = grades_kurtosis_adj_2 * grades_kurtosis_adj\n   \
    \ grades_kurtosis_adj_4 = grades_kurtosis_adj_3 * grades_kurtosis_adj\n    grades_kurtosis_adj_5\
    \ = grades_kurtosis_adj_4 * grades_kurtosis_adj\n    grades_kurtosis_adj_6 = grades_kurtosis_adj_5\
    \ * grades_kurtosis_adj\n    grades_kurtosis_adj_7 = grades_kurtosis_adj_6 * grades_kurtosis_adj\n\
    \    grades_kurtosis_adj_8 = grades_kurtosis_adj_7 * grades_kurtosis_adj\n   \
    \ grades_kurtosis_adj_9 = grades_kurtosis_adj_8 * grades_kurtosis_adj\n    grades_kurtosis_adj_10\
    \ = grades_kurtosis_adj_9 * grades_kurtosis_adj\n    grades_kurtosis_adj_11 =\
    \ grades_kurtosis_adj_10 * grades_kurtosis_adj\n    grades_kurtosis_adj_12 = grades_kurtosis_adj_11\
    \ * grades_kurtosis_adj\n    grades_kurtosis_adj_13 = grades_kurtosis_adj_12 *\
    \ grades_kurtosis_adj\n    grades_kurtosis_adj_14 = grades_kurtosis_adj_13 * grades_kurtosis_adj\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeaf1ba0i.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeaf1ba0i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeaf1ba0i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk1v0eihn.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk1v0eihn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk1v0eihn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpan5akzuq.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpan5akzuq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpan5akzuq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppj0rivzf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppj0rivzf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppj0rivzf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_len = len(grades)\n    grades_sum =\
    \ 0\n    grades_sum_2 = 0\n    grades_sum_3 = 0\n    grades_sum_4 = 0\n    grades_sum_5\
    \ = 0\n    grades_sum_6 = 0\n    grades_sum_7 = 0\n    grades_sum_8 = 0\n    grades_sum_9\
    \ = 0\n    grades_sum_10 = 0\n    grades_sum_11 = 0\n    grades_sum_12 = 0\n \
    \   grades_sum_13 = 0\n    grades_sum_14 = 0\n    grades_sum_15 = 0\n    grades_sum_16\
    \ = 0\n    grades_sum_17 = 0\n    grades_sum_18 = 0\n    grades_sum_19 = 0\n \
    \   grades_sum_20 = 0\n    grades_sum_21 = 0\n    grades_sum_22 = 0\n    grades_sum_23\
    \ = 0\n    grades_sum_24 = 0\n    grades_sum_25 = 0\n    grades_sum_26 = 0\n \
    \   grades_sum_27 = 0\n    grades_sum_28 = 0\n    grades_sum_29 = 0\n    grades_sum_30\
    \ = 0\n    grades_sum_31 = 0\n    grades_sum_32 = 0\n    grades_sum_33 = 0\n \
    \   grades_sum_34 = 0\n    grades_sum_35 = 0\n    grades_sum_36 = 0\n    grades_sum_37\
    \ = 0\n    grades_sum_38 = 0\n    grades_sum_39 = 0\n    grades_sum_40 = 0\n \
    \   grades_sum_41 = 0\n    grades_sum_42 = 0\n    grades_sum_43 = 0\n    grades_sum_44\
    \ = 0\n    grades_sum_45 = 0\n    grades_sum_46 = 0\n    grades_sum_47 = 0\n \
    \   grades_sum_48 = 0\n    grades_sum_49 = 0\n    grades_sum_50 = 0\n    grades_sum_51\
    \ = 0\n    grades_sum_52 = 0\n    grades_sum_53 = 0\n    grades_sum_54 = 0\n \
    \   grades_sum_55 = 0\n    grades_sum_56 = 0\n    grades_sum_57 = 0\n    grades_sum_58\
    \ = 0\n    grades_sum_59 = 0\n    grades_sum_60 = 0\n    grades_sum_61 = 0\n \
    \   grades_sum_62 = 0\n    grades_sum_63 = 0\n    grades_sum_64 = 0\n    grades_sum_65\
    \ = 0\n    grades_sum_66 = 0\n    grades_sum_67 = 0\n    grades_sum_68 = 0\n \
    \   grades_sum_69 = 0\n    grades_sum_70 = 0\n    grades_sum_71 = 0\n    grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyz1248x0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyz1248x0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyz1248x0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj5a90c53.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj5a90c53.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj5a90c53.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwhy4awrk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwhy4awrk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwhy4awrk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppheosf4t.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppheosf4t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppheosf4t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_mean =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_median\
    \ = median(grades)\n    grades_mode = mode(grades)\n    grades_min = min(grades)\n\
    \    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n  \
    \  grades_range_sqr = grades_range * grades_range\n    grades_skew = skewness(grades)\n\
    \    grades_kurtosis = kurtosis(grades)\n    grades_entropy = entropy(grades)\n\
    \    grades_mean = grades_mean + grades_std\n    grades_median = grades_median\
    \ + grades_std\n    grades_mode = grades_mode + grades_std\n    grades_min = grades_min\
    \ + grades_std\n    grades_max = grades_max + grades_std\n    grades_range = grades_max\
    \ - grades_min\n    grades_range_sqr = grades_range * grades_range\n    grades_skew\
    \ = grades_skew + grades_std\n    grades_kurtosis = grades_kurtosis + grades_std\n\
    \    grades_entropy = grades_entropy + grades_std\n    grades_mean = grades_mean\
    \ - grades_std\n    grades_median = grades_median - grades_std\n    grades_mode\
    \ = grades_mode - grades_std\n    grades_min = grades_min - grades_std\n    grades_max\
    \ = grades_max - grades_std\n    grades_range = grades_max - grades_min\n    grades_range_sqr\
    \ = grades_range * grades_range\n    grades_skew = grades_skew - grades_std\n\
    \    grades_kurtosis = grades_kurtosis - grades_std\n    grades_entropy = grades_entropy\
    \ - grades_std\n    grades_mean = grades_mean / grades_std\n    grades_median\
    \ = grades_median / grades_std\n    grades_mode = grades_mode / grades_std\n \
    \   grades_min = grades_min / grades_std\n    grades_max = grades_max / grades_std\n\
    \    grades_range = grades_max / grades_min\n    grades_range_sqr = grades_range\
    \ * grades_range\n    grades_skew = grades_skew / grades_std\n    grades_kurtosis\
    \ = grades_kurtosis / grades_std\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg1mq78d8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg1mq78d8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg1mq78d8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpne6rvozr.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpne6rvozr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpne6rvozr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv6lk0h_q.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv6lk0h_q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv6lk0h_q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphhjppceu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphhjppceu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphhjppceu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reversed = sort(grades_sorted)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_reversed)\n    grades_sorted_reversed = reverse(grades_sorted_reversed)\n\
    \    grades_sorted_reversed = reverse(grades_sorted_reversed)\n    grades_sorted_reversed\
    \ = reverse(grades_sorted_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rln_jv1.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6rln_jv1.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_index = findfirst(x ->\
    \ x > 0, grades_sorted)\n    grades_sorted_index\n    grades_sorted_index + 1\n\
    \    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index + 1\n    grades_sorted_index - 1\n    grades_sorted_index\
    \ + 1\n    grades_sorted_index - 1\n    grades_sorted_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2aajzx2o.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2aajzx2o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2aajzx2o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp826p8cmf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp826p8cmf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp826p8cmf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo5ysi919.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo5ysi919.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo5ysi919.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_entropy = - grades_sum *\
    \ log(grades_sum) - (grades_sum / length(grades)) * log(grades_avg) - (grades_avg\
    \ / length(grades)) * log(grades_std)\n    grades_entropy_normalized = grades_entropy\
    \ / sum(grades_entropy)\n    grades_skewness = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_kurtosis_normalized = grades_kurtosis\
    \ / sum(grades_kurtosis)\n    grades_var = (grades_max - grades_min) * (grades_max\
    \ - grades_min) / length(grades)\n    grades_var_normalized = grades_var / sum(grades_var)\n\
    \    grades_n = length(grades)\n    grades_n_pdf = grades_n / sum(grades_n)\n\
    \    grades_n_pdf_normalized = grades_n_pdf / sum(grades_n_pdf)\n    grades_n_cdf\
    \ = 0\n    grades_n_cdf_normalized = 1\n    grades_n_icdf = 0\n    grades_n_icdf_normalized\
    \ = 1\n    grades_n_cdf_inv = 0\n    grades_n_cdf_inv_normalized = 1\n    grades_n_icdf_inv\
    \ = 0\n    grades_n_icdf_inv_normalized = 1\n    grades_n_cdf_inv2 = 1\n    grades_n_cdf_inv_normalized2\
    \ = 1\n    grades_n_icdf_inv2 = 1\n    grades_n_icdf_inv_normalized2 = 1\n   \
    \ grades_n_cdf_inv3 = 1\n    grades_n_cdf_inv_normalized3 = 0\n    grades_n_icdf_inv3\
    \ = 1\n    grades_n_icdf_inv_normalized3 = 0\n    grades_n_cdf_inv_normalized4\
    \ = 2\n    grades_n_cdf_inv_normalized4 = 0\n    grades_n_icdf_inv_normalized4\
    \ = 2\n    grades_n_icdf_inv_normalized4\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0iypwvxv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0iypwvxv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0iypwvxv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp45wil5rz.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp45wil5rz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp45wil5rz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3c43ay5z.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3c43ay5z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3c43ay5z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_index = findfirst(x ->\
    \ x > 0, grades_sorted)\n    grades_sorted_index\n    grades_sorted_index + 1\n\
    \    grades_sorted_index - 1\n    grades_sorted_index - 2\n    grades_sorted_index\
    \ - 3\n    grades_sorted_index - 4\n    grades_sorted_index - 5\n    grades_sorted_index\
    \ - 6\n    grades_sorted_index - 7\n    grades_sorted_index - 8\n    grades_sorted_index\
    \ - 9\n    grades_sorted_index - 10\n    grades_sorted_index - 11\n    grades_sorted_index\
    \ - 12\n    grades_sorted_index - 13\n    grades_sorted_index - 14\n    grades_sorted_index\
    \ - 15\n    grades_sorted_index - 16\n    grades_sorted_index - 17\n    grades_sorted_index\
    \ - 18\n    grades_sorted_index - 19\n    grades_sorted_index - 20\n    grades_sorted_index\
    \ - 21\n    grades_sorted_index - 22\n    grades_sorted_index - 23\n    grades_sorted_index\
    \ - 24\n    grades_sorted_index - 25\n    grades_sorted_index - 26\n    grades_sorted_index\
    \ - 27\n    grades_sorted_index - 28\n    grades_sorted_index - 29\n    grades_sorted_index\
    \ - 30\n    grades_sorted_index - 31\n    grades_sorted_index - 32\n    grades_sorted_index\
    \ - 33\n    grades_sorted_index - 34\n    grades_sorted_index - 35\n    grades_sorted_index\
    \ - 36\n    grades_sorted_index - 37\n    grades_sorted_index - 38\n    grades_sorted_index\
    \ - 39\n    grades_sorted_index - 40\n    grades_sorted_index - 41\n    grades_sorted_index\
    \ - 42\n    grades_sorted_index - 43\n    grades_sorted_index - 44\n    grades_sorted_index\
    \ - 45\n    grades_sorted_index - 46\n    grades_sorted_index - 47\n    grades_sorted_index\
    \ - 48\n    grades_sorted_index - 49\n    grades_sorted_index - 50\n    grades_sorted_index\
    \ - 51\n    grades_sorted_index - 52\n    grades_sorted_index - 53\n    grades_sorted_index\
    \ - 54\n    grades_sorted_index - 55\n    grades_sorted_index - 56\n    grades_sorted_index\
    \ - 57\n    grades_sorted_index - 58\n    grades_sorted_index - 59\n    grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9_vb0awc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9_vb0awc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9_vb0awc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeggr8k57.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeggr8k57.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeggr8k57.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kjyadzs.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2kjyadzs.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2kjyadzs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_sum2 =\
    \ sum(grades.^2)\n    grades_sum3 = sum(grades.^3)\n    grades_sum4 = sum(grades.^4)\n\
    \    grades_sum5 = sum(grades.^5)\n    grades_sum6 = sum(grades.^6)\n    grades_sum7\
    \ = sum(grades.^7)\n    grades_sum8 = sum(grades.^8)\n    grades_sum9 = sum(grades.^9)\n\
    \    grades_sum10 = sum(grades.^10)\n    grades_sum11 = sum(grades.^11)\n    grades_sum12\
    \ = sum(grades.^12)\n    grades_sum13 = sum(grades.^13)\n    grades_sum14 = sum(grades.^14)\n\
    \    grades_sum15 = sum(grades.^15)\n    grades_sum16 = sum(grades.^16)\n    grades_sum17\
    \ = sum(grades.^17)\n    grades_sum18 = sum(grades.^18)\n    grades_sum19 = sum(grades.^19)\n\
    \    grades_sum20 = sum(grades.^20)\n    grades_sum21 = sum(grades.^21)\n    grades_sum22\
    \ = sum(grades.^22)\n    grades_sum23 = sum(grades.^23)\n    grades_sum24 = sum(grades.^24)\n\
    \    grades_sum25 = sum(grades.^25)\n    grades_sum26 = sum(grades.^26)\n    grades_sum27\
    \ = sum(grades.^27)\n    grades_sum28 = sum(grades.^28)\n    grades_sum29 = sum(grades.^29)\n\
    \    grades_sum30 = sum(grades.^30)\n    grades_sum31 = sum(grades.^31)\n    grades_sum32\
    \ = sum(grades.^32)\n    grades_sum33 = sum(grades.^33)\n    grades_sum34 = sum(grades.^34)\n\
    \    grades_sum35 = sum(grades.^35)\n    grades_sum36 = sum(grades.^36)\n    grades_sum37\
    \ = sum(grades.^37)\n    grades_sum38 = sum(grades.^38)\n    grades_sum39 = sum(grades.^39)\n\
    \    grades_sum40 = sum(grades.^40)\n    grades_sum41 = sum(grades.^41)\n    grades_sum42\
    \ = sum(grades.^42)\n    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6rjupzm5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6rjupzm5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6rjupzm5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxo09dsb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprxo09dsb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprxo09dsb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpctz1v1cn.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpctz1v1cn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpctz1v1cn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvb4w05jk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvb4w05jk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvb4w05jk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * length(grades)) -\n        (length(grades) * grades_skew))\n    grades_entropy\
    \ = - grades_skew * log(grades_skew) - grades_kurtosis *\n        log(grades_kurtosis)\n\
    \    grades_entropy_rounded = round(grades_entropy, digits=2)\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"-\", \"0\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"0\", \"0\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"1\", \"1\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"2\", \"2\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"3\", \"3\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"4\", \"4\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"5\", \"5\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"6\", \"6\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"7\", \"7\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"8\", \"8\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"9\", \"9\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \".\", \".\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \",\", \",\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"?\", \"?\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"!\", \"!\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"@\", \"@\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"#\", \"#\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"$\", \"$\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"%\", \"%\")\n    grades_entropy_rounded\
    \ = replace(grades_entropy_rounded, \"^\", \"\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtrmbhl1.jl:57\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqtrmbhl1.jl:57\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwk_kbxv4.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwk_kbxv4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwk_kbxv4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6huhtjw2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6huhtjw2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6huhtjw2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4hvzdtte.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4hvzdtte.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4hvzdtte.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4h0b0_6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw4h0b0_6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw4h0b0_6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4jck2mnq.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4jck2mnq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4jck2mnq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk9xie1gh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk9xie1gh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk9xie1gh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplx1z541m.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplx1z541m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplx1z541m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / sum(grades .^ 2)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * sum(grades .^ 4))\n    grades_entropy = - grades_skew * log(grades_skew)\
    \ - grades_kurtosis * log(grades_kurtosis)\n    grades_probs = grades ./ sum(grades)\n\
    \    grades_cumsum = cumsum(grades)\n    grades_cumprob = cumprob(grades)\n  \
    \  grades_cumprob_diff = cumprob(grades .- grades_cumsum)\n    grades_cumprob_diff_sqr\
    \ = cumprob(grades .- grades_cumsum .^ 2)\n    grades_cumprob_diff_sqrt = cumprob(grades\
    \ .- grades_cumsum .^ 3)\n    grades_cumprob_diff_sqrt_log = cumprob(grades .-\
    \ grades_cumsum .^ 4)\n    grades_cumprob_diff_sqrt_log_2 = cumprob(grades .-\
    \ grades_cumsum .^ 5)\n    grades_cumprob_diff_sqrt_log_3 = cumprob(grades .-\
    \ grades_cumsum .^ 6)\n    grades_cumprob_diff_sqrt_log_4 = cumprob(grades .-\
    \ grades_cumsum .^ 7)\n    grades_cumprob_diff_sqrt_log_5 = cumprob(grades .-\
    \ grades_cumsum .^ 8)\n    grades_cumprob_diff_sqrt_log_6 = cumprob(grades .-\
    \ grades_cumsum .^ 9)\n    grades_cumprob_diff_sqrt_log_7 = cumprob(grades .-\
    \ grades_cumsum .^ 10)\n    grades_cumprob_diff_sqrt_log_8 = cumprob(grades .-\
    \ grades_cumsum .^ 11)\n    grades_cumprob_diff_sqrt_log_9 = cumprob(grades .-\
    \ grades_cumsum .^ 12)\n    grades_cumprob_diff_sqrt_log_10 = cump\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpov883try.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpov883try.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpov883try.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp843llckf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp843llckf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp843llckf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphrrzng9w.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphrrzng9w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphrrzng9w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt8ww7dqa.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt8ww7dqa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt8ww7dqa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ut2lu4k.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1ut2lu4k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1ut2lu4k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2xf8dhlh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2xf8dhlh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2xf8dhlh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / sum(grades .^ 2)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * sum(grades .^ 4))\n    grades_entropy = - grades_skew * log(grades_skew)\
    \ - grades_kurtosis * log(grades_kurtosis)\n    grades_probs = grades ./ sum(grades)\n\
    \    grades_exp_norm = grades_probs .* log2(grades_probs)\n    grades_exp_norm\
    \ = grades_exp_norm[grades_exp_norm .> 0]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm\
    \ .<= 1]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm .>= 0]\n    grades_exp_norm\
    \ = grades_exp_norm[grades_exp_norm .<= grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm\
    \ .>= grades_avg - grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm\
    \ .>= grades_avg + grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm\
    \ .>= grades_avg]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm .<= grades_avg\
    \ + grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm .<= grades_avg\
    \ - grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm .<= grades_avg\
    \ + grades_std]\n    grades_exp_norm = grades_exp_norm[grades_exp_norm .<= grades_avg]\n\
    \    grades_exp_norm = grades_exp_norm[grades_exp_norm .>= grades_avg - grades_std]\n\
    \    grades_exp_norm = grades_exp_norm[grades_exp_norm .>= grades_avg + grades_std]\n\
    \    grades_exp_norm = grades_exp_norm[grades_exp_norm .>= grades_avg]\n    grades_exp_norm\
    \ = grades_exp_norm[grades_exp_norm .<= grades_avg + grade\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuxpfhzh0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuxpfhzh0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1ew9gy0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe1ew9gy0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe1ew9gy0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reverse = sort(grades_sorted)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_reverse)\n    grades_sorted_reverse = reverse(grades_sorted_reverse)\n\
    \    grades_sorted_reverse = reverse(grades_sorted_reverse)\n    grades_sorted_reverse\
    \ = reverse(grades_sorted_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3fnycwt.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps3fnycwt.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_entropy = - grades_sum *\
    \ log(grades_sum) - (grades_sum / length(grades)) * log(grades_avg) - (grades_avg\
    \ / length(grades)) * log(grades_std)\n    grades_entropy_normalized = grades_entropy\
    \ / grades_range_sqr\n    grades_entropy_normalized = grades_entropy_normalized\
    \ .+ 1e-5\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n \
    \   grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .> 0]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .< 1]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_avg]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_std]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_min]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_max]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_range]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_skew]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_kurtosis]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_sum]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_avg]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_std]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_min]\n    grades_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo30azfsf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo30azfsf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo30azfsf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmrdnqc8u.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmrdnqc8u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmrdnqc8u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph11y1q9j.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph11y1q9j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph11y1q9j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj4z3fl4j.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj4z3fl4j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj4z3fl4j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiljl8uc2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiljl8uc2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiljl8uc2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)-1)^2)\n\
    \    grades_entropy = - grades_avg + log(grades_std)\n    grades_entropy_normalized\
    \ = grades_entropy / sum(grades_entropy)\n    grades_skewness = grades_skew *\
    \ grades_range_sqr\n    grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n\
    \    grades_skew_normalized = grades_skewness * grades_range_sqr\n    grades_kurtosis_normalized_normalized\
    \ = grades_kurtosis_normalized / sum(grades_kurtosis_normalized)\n    grades_skew_normalized_normalized\
    \ = grades_skew_normalized * grades_range_sqr\n    grades_kurtosis_normalized_normalized_normalized\
    \ = grades_kurtosis_normalized_normalized / sum(grades_kurtosis_normalized_normalized)\n\
    \    grades_skew_normalized_normalized_normalized = grades_skew_normalized_normalized\
    \ * grades_range_sqr\n    grades_kurtosis_normalized_normalized_normalized_normalized\
    \ = grades_kurtosis_normalized_normalized_normalized / sum(grades_kurtosis_normalized_normalized_normalized)\n\
    \    grades_skew_normalized_normalized_normalized_normalized_normalized = grades_skew_normalized_normalized_normalized_normalized\
    \ * grades_range_sqr\n    grades_kurtosis_normalized_normalized_normalized_normalized_normalized\
    \ = grades_kurtosis_normalized_normalized_normalized_normalized / sum(grades_kurtosis_normalized_normalized_normalized_normalized)\n\
    \    grades_skew_normalized_normalized_normalized_normalized_normalized_normalized\
    \ = grades_skew_normalized_normalized_normalized_normalized_normalized * grades_range_sqr\n\
    \    grades_kurtosis_normalized_normalized_normalized_normalized_normalized_normalized_normalized\
    \ = grades_kurtosis_normalized_normalized_normalized_normalized_normalized_normalized\
    \ / sum(grades_kurtosis_normalized_normalized_normalized_normalized_normalized_normalized_normalized)\n\
    \    grades_skew_normalized_normalized_normalized_normalized_normalized_normalized_normalized_normalized_normalized\
    \ = grades_skew_normalized_normalized_normalized_normalized_normalized_normalized_normalized_normalized\
    \ * \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8cgs6ibc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8cgs6ibc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8cgs6ibc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reversed = reverse(grades_sorted)\n\
    \    grades_sorted_reversed_sorted = sort(grades_sorted_reversed)\n    grades_sorted_reversed_sorted_reversed\
    \ = reverse(sort(grades_sorted_reversed_sorted))\n    grades_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(grades_sorted_reversed_sorted_reversed)))\n    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(grades_sorted_reversed_sorted_reversed_sorted))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted)))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(sort(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(sort(sort(sort(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(sort(sort(sort(sort(sort(sort(sort(grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted)))))\n\
    \    grades_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpagubircs.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpagubircs.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprskvasul.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprskvasul.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprskvasul.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpob48wu0e.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpob48wu0e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpob48wu0e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgud1pc8_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgud1pc8_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgud1pc8_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeu16i6d1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeu16i6d1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeu16i6d1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reverse = sort(reverse(grades))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n\
    \    grades_sorted_reverse = sort(reverse(grades_sorted_reverse))\n    grades_sorted_reverse\
    \ = sort(reverse(grades_sorted_reverse))\n    grades_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt4w0zqlr.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt4w0zqlr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt4w0zqlr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_percent = grades_range / grades_avg\n    grades_range_percent_floor\
    \ = floor(grades_range_percent)\n    grades_range_percent_ceil = ceil(grades_range_percent)\n\
    \    grades_range_percent_round = round(grades_range_percent)\n    grades_range_percent_floor\
    \ = grades_range_percent_floor * grades_avg\n    grades_range_percent_ceil = grades_range_percent_ceil\
    \ * grades_avg\n    grades_range_percent_round = grades_range_percent_round *\
    \ grades_avg\n    grades_range_percent_floor = grades_range_percent_floor * grades_std\n\
    \    grades_range_percent_ceil = grades_range_percent_ceil * grades_std\n    grades_range_percent_round\
    \ = grades_range_percent_round * grades_std\n    grades_range_percent_floor =\
    \ grades_range_percent_floor * grades_min\n    grades_range_percent_ceil = grades_range_percent_ceil\
    \ * grades_min\n    grades_range_percent_round = grades_range_percent_round *\
    \ grades_min\n    grades_range_percent_floor = grades_range_percent_floor * grades_max\n\
    \    grades_range_percent_ceil = grades_range_percent_ceil * grades_max\n    grades_range_percent_round\
    \ = grades_range_percent_round * grades_max\n    grades_range_percent_floor =\
    \ grades_range_percent_floor * grades_avg\n    grades_range_percent_ceil = grades_range_percent_ceil\
    \ * grades_avg\n    grades_range_percent_round = grades_range_percent_round *\
    \ grades_avg\n    grades_range_percent_floor = grades_range_percent_floor * grades_std\n\
    \    grades_range_percent_ceil = grades_range_percent_ceil * grades_std\n    grades_range_percent_round\
    \ = grades_range_percent_round * grades_std\n    grades_range_percent_floor =\
    \ grades_range_percent_floor * grades_min\n    grades_range_percent_ceil = grades_range_percent_ceil\
    \ * grades_min\n    grades_range_percent_round = grades_range_percent_round *\
    \ grades_min\n    grades_range_percent_floor = grades_range_percent_floor * grades_max\n\
    \    grades_range_percent_ceil = grades_range_percent_ceil * grades_max\n    grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprojmoc03.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprojmoc03.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprojmoc03.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = 0.0\n    grades_count = 0\n  \
    \  grades_letter = Vector{String}(undef, length(grades))\n    for grade in grades\n\
    \        if grade > grades_sum\n            grades_sum = grade\n            grades_count\
    \ = 0\n        elseif grade == grades_sum\n            grades_count += 1\n   \
    \     else\n            grades_letter[grades_count] = \"+\" if grades_count >\
    \ 0 else \"-\"\n            grades_sum = grade\n            grades_count = 0\n\
    \        end\n    end\n    grades_letter[grades_count] = \"+\" if grades_count\
    \ > 0 else \"-\"\n    return grades_letter\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a vector of grades and returns the letter grade\
    \ for each grade in the vector. \nThe function should return an vector of strings.\
    \ \nThe function should return the same vector if the input vector is empty.\n\
    The function should return an empty vector if the input vector is empty.\nThe\
    \ function should return an empty vector if the input vector is empty.\nThe function\
    \ should return an empty vector if the input vector is empty.\nThe function should\
    \ return an empty vector if the input vector is empty.\nThe function should return\
    \ an empty vector if the input vector is empty.\nThe function should return an\
    \ empty vector if the input vector is empty.\nThe function should return an empty\
    \ vector if the input vector is empty.\nThe function should return an empty vector\
    \ if the input vector is empty.\nThe function should return an empty vector if\
    \ the input vector is empty.\nThe function should return an empty vector if the\
    \ input vector is empty.\nThe function should return an empty vector if the input\
    \ vector is empty.\nThe function should return an empty vector if the input vector\
    \ is empty.\nThe function should return an empty vector if the input vector is\
    \ empty.\nThe function should return an empty vector if the input vector is empty.\n\
    The function should return an empty vector if the input vector is empty.\nThe\
    \ function should return an empty vector if the input vector is empty.\nThe function\
    \ should return an empty vector if the input vector is empty.\nThe function should\
    \ return an empty vector if the input vector is empty.\nThe function should return\
    \ an empty vector if the input vector is empty.\nThe function should return an\
    \ empty vector if the input vector is empty.\nThe function should return an empty\
    \ vector if the input vector is empty.\nThe function should return an empty vector\
    \ if the input vector is empty.\nThe function should return an empty vector if\
    \ the input vector is empty.\nThe function should return an empty vector if the\
    \ input vector is empty.\nThe function should return an empty vector if the input\
    \ vector is empty.\nThe function should return an empty vector if the input vector\
    \ is empty.\nThe function should return an empty vector if the input vector is\
    \ empty.\nThe function should return \nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwmzc392z.jl:37\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwmzc392z.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc2vt8zif.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc2vt8zif.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc2vt8zif.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp80hs6yhm.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp80hs6yhm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp80hs6yhm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted = grades_sorted[grades_sorted\
    \ .!= 0]\n    grades_sorted = grades_sorted[grades_sorted .< 5]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .> 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .<= 5]\n    grades_sorted = grades_sorted[grades_sorted .>= 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .!= 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .< 5]\n    grades_sorted = grades_sorted[grades_sorted .> 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .<= 5]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .>= 0]\n    grades_sorted = grades_sorted[grades_sorted .!= 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .< 5]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .> 0]\n    grades_sorted = grades_sorted[grades_sorted .<= 5]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .>= 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .!= 0]\n    grades_sorted = grades_sorted[grades_sorted .< 5]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .> 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .<= 5]\n    grades_sorted = grades_sorted[grades_sorted .>= 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .!= 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .< 5]\n    grades_sorted = grades_sorted[grades_sorted .> 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .<= 5]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .>= 0]\n    grades_sorted = grades_sorted[grades_sorted .!= 0]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .< 5]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .> 0]\n    grades_sorted = grades_sorted[grades_sorted .<= 5]\n    grades_sorted\
    \ = grades_sorted[grades_sorted .>= 0]\n    grades_sorted = grades_sorted[grades_sorted\
    \ .!= 0]\n    grades_sorted = grades_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprpjojcjt.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprpjojcjt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprpjojcjt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpchd_2k7g.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpchd_2k7g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpchd_2k7g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_entropy = - grades_sum *\
    \ log(grades_sum) - (grades_sum / length(grades)) * log(grades_avg) - (grades_avg\
    \ / length(grades)) * log(grades_std)\n    grades_entropy_normalized = grades_entropy\
    \ / sum(grades_entropy)\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .< 1]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .> 0]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .<= grades_range_sqr]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 2]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 3]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 4]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 5]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 6]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 7]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 8]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 9]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 10]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_sqr / 11]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .>= grades_range_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvk86u2ff.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvk86u2ff.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmputefrw0g.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmputefrw0g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmputefrw0g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9afauv9d.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9afauv9d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9afauv9d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b25mt68.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8b25mt68.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8b25mt68.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwersryi.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppwersryi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppwersryi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8do1t5qm.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8do1t5qm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8do1t5qm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdjm_kixi.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdjm_kixi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdjm_kixi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * length(grades))\n    grades_entropy = - grades_sum * log(grades_sum)\
    \ - (grades_sum / 2) * log(grades_avg) - (grades_avg / 2) * log(length(grades))\n\
    \    grades_entropy_normalized = grades_entropy / sum(grades_entropy)\n    grades_skewness\
    \ = grades_range_sqr / ((length(grades) - 1) * pow(length(grades) - 1, 2))\n \
    \   grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n    grades_n\
    \ = length(grades)\n    grades_mean = grades_sum / grades_n\n    grades_mean_sqr\
    \ = grades_sum / pow(grades_n, 2)\n    grades_var = grades_mean_sqr - pow(grades_mean,\
    \ 2)\n    grades_std = sqrt(grades_var)\n    grades_skew_normalized = grades_skewness\
    \ / sum(grades_skewness)\n    grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n\
    \    grades_skew_normalized = grades_skewness / sum(grades_skewness)\n    grades_kurtosis_normalized\
    \ = grades_kurtosis / sum(grades_kurtosis)\n    grades_skew_normalized = grades_skewness\
    \ / sum(grades_skewness)\n    grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n\
    \    grades_skew_normalized = grades_skewness / sum(grades_skewness)\n    grades_kurtosis_normalized\
    \ = grades_kurtosis / sum(grades_kurtosis)\n    grades_skew_normalized = grades_skewness\
    \ / sum(grades_skewness)\n    grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n\
    \    grades_skew_normalized = grades_skewness / \nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwzpl9yxi.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwzpl9yxi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwzpl9yxi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0f3nvbxv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0f3nvbxv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0f3nvbxv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb17pvr_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyb17pvr_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyb17pvr_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp108as24g.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp108as24g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp108as24g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp73rmaawl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp73rmaawl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp73rmaawl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsupw04p2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsupw04p2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsupw04p2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_reverse = sort(reverse(grades))\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n    grades_sorted_reverse.push(0)\n\
    \    grades_sorted_reverse.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp39trcr72.jl:83\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp39trcr72.jl:83\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqsp08x9v.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqsp08x9v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqsp08x9v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp27c9gn3y.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp27c9gn3y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp27c9gn3y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfymvo4ht.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfymvo4ht.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfymvo4ht.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprjx3fm_q.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprjx3fm_q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprjx3fm_q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdesrqrkl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdesrqrkl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdesrqrkl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_diff = grades_sum - grades_avg\n   \
    \ grades_diff_abs = abs(grades_diff)\n    grades_diff_abs_index = find(grades_diff_abs\
    \ .== grades_diff_abs[end])[1]\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_abs_index\
    \ - 1\n    grades_diff_abs_index = grades_diff_abs_index - 1\n    grades_diff_abs_index\
    \ = grades_diff_abs_index - 1\n    grades_diff_abs_index = grades_diff_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf1_dlbdg.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf1_dlbdg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf1_dlbdg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_entropy = - grades_sum *\
    \ log(grades_sum) - (grades_sum / length(grades)) * log(grades_avg) - (grades_avg\
    \ / length(grades)) * log(grades_std)\n    grades_entropy_normalized = grades_entropy\
    \ / sum(grades_entropy)\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[2:end]\n    grades_entropy_normalized\
    \ = grades_entropy_normalized.^2 ./ sum(grades_entropy_normalized.^2)\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[2:end]\n\
    \    grades_entropy_normalized = grades_entropy_normalized.^2 ./ sum(grades_entropy_normalized.^2)\n\
    \    grades_entropy_normalized = sort(grades_entropy_normalized)\n    grades_entropy_normalized\
    \ = grades_entropy_normalized[2:end]\n    grades_entropy_normalized = grades_entropy_normalized.^2\
    \ ./ sum(grades_entropy_normalized.^2)\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[2:end]\n    grades_entropy_normalized\
    \ = grades_entropy_normalized.^2 ./ sum(grades_entropy_normalized.^2)\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[2:end]\n\
    \    grades_entropy_normalized = grades_entropy_normalized.^2 ./ sum(grades_entropy_normalized.^2)\n\
    \    grades_entropy_normalized = sort(grades_entropy_normalized)\n    grades_entropy_normalized\
    \ = grades_entropy_normalized[2:end]\n    grades_entropy_normalized = grades_entropy_normalized.^2\
    \ ./ sum(grades_entropy_normalized.^2)\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[2:end]\n    grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp862jvlo9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp862jvlo9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp862jvlo9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkf0kahao.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkf0kahao.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkf0kahao.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ < 0.0\n        grades_sum = 0.0\n    end\n    grades_avg = grades_sum / length(grades)\n\
    \    grades_std = std(grades)\n    grades_min = min(grades)\n    grades_max =\
    \ max(grades)\n    grades_range = grades_max - grades_min\n    grades_range_sqr\
    \ = grades_range * grades_range\n    grades_skew = grades_range_sqr / mean(grades_range)\n\
    \    grades_kurtosis = grades_range_sqr / ((length(grades) - 1) * mean(grades_range^2))\n\
    \    grades_coeff = grades_avg - grades_skew\n    grades_intercept = grades_min\
    \ - grades_skew\n    grades_grade = grades_coeff .* grades + grades_intercept\n\
    \    grades_grade = sort(grades_grade)\n    grades_grade = grades_grade[grades_grade\
    \ .< grades_avg + grades_std]\n    grades_grade = grades_grade[grades_grade .>\
    \ grades_avg - grades_std]\n    grades_grade = grades_grade[grades_grade .> grades_avg\
    \ + grades_std]\n    grades_grade = grades_grade[grades_grade .< grades_avg -\
    \ grades_std]\n    grades_grade = grades_grade[grades_grade .> grades_avg + grades_std]\n\
    \    grades_grade = grades_grade[grades_grade .> grades_avg - grades_std]\n  \
    \  grades_grade = grades_grade[grades_grade .> grades_avg + grades_std]\n    grades_grade\
    \ = grades_grade[grades_grade .< grades_avg - grades_std]\n    grades_grade =\
    \ grades_grade[grades_grade .> grades_avg - grades_std]\n    grades_grade = grades_grade[grades_grade\
    \ .> grades_avg + grades_std]\n    grades_grade = grades_grade[grades_grade .<\
    \ grades_avg - grades_std]\n    grades_grade = grades_grade[grades_grade .> grades_avg\
    \ - grades_std]\n    grades_grade = grades_grade[grades_grade .> grades_avg +\
    \ grades_std]\n    grades_grade = grades_grade[grades_gra\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps1thgdet.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps1thgdet.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1yrs91tv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1yrs91tv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1yrs91tv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_diff = grades_sum - grades_avg\n   \
    \ grades_diff_abs = abs(grades_diff)\n    grades_diff_sign = sign(grades_diff)\n\
    \    grades_diff_sign = grades_diff_sign == -1 ? \"-\" : \"\"\n    grades_diff_sign\
    \ = grades_diff_sign == 1 ? \"+\" : \"\"\n    grades_diff_sign = grades_diff_sign\
    \ == 0 ?  \"0\" : grades_diff_sign\n    grades_diff_sign = grades_diff_sign ==\
    \ -1 ? \"-\" : \"\"\n    grades_diff_sign = grades_diff_sign == 1 ? \"+\" : \"\
    \"\n    grades_diff_sign = grades_diff_sign == 0 ?  \"0\" : grades_diff_sign\n\
    \    grades_diff_sign = grades_diff_sign == -1 ? \"-\" : \"\"\n    grades_diff_sign\
    \ = grades_diff_sign == 1 ? \"+\" : \"\"\n    grades_diff_sign = grades_diff_sign\
    \ == 0 ?  \"0\" : grades_diff_sign\n    grades_diff_sign = grades_diff_sign ==\
    \ -1 ? \"-\" : \"\"\n    grades_diff_sign = grades_diff_sign == 1 ? \"+\" : \"\
    \"\n    grades_diff_sign = grades_diff_sign == 0 ?  \"0\" : grades_diff_sign\n\
    \    grades_diff_sign = grades_diff_sign == -1 ? \"-\" : \"\"\n    grades_diff_sign\
    \ = grades_diff_sign == 1 ? \"+\" : \"\"\n    grades_diff_sign = grades_diff_sign\
    \ == 0 ?  \"0\" : grades_diff_sign\n    grades_diff_sign = grades_diff_sign ==\
    \ -1 ? \"-\" : \"\"\n    grades_diff_sign = grades_diff_sign == 1 ? \"+\" : \"\
    \"\n    grades_diff_sign = grades_diff_sign == 0 ?  \"0\" : grades_diff_sign\n\
    \    grades_diff_sign = grades_diff_sign == -1 ? \"-\" : \"\"\n    grades_diff_sign\
    \ = grades_diff_sign == 1 ? \"+\" : \"\"\n    grades_diff_sign = grades_diff_sign\
    \ == 0 ?  \"0\" : grades_diff_sign\n    grades_diff_sign = grades_diff_sign ==\
    \ -1 ? \"-\" : \"\"\n    grades_diff_sign = grades_diff_sign == 1 ? \"+\" : \"\
    \"\n    grades_diff_sign = grades_diff_sign == 0 ?  \"0\" : grades_diff_sign\n\
    \    grades_diff_sign = grades_diff_sign == -1 ? \"-\" : \nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx7gsrytv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx7gsrytv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx7gsrytv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_gvhdywl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_gvhdywl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_gvhdywl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kcuojq7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3kcuojq7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3kcuojq7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb10jlhnf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb10jlhnf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb10jlhnf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx9sl9dqn.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx9sl9dqn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx9sl9dqn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8s4tgtux.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8s4tgtux.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8s4tgtux.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp45jlrx3g.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp45jlrx3g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp45jlrx3g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)-1)^4)\n\
    \    grades_entropy = - grades_avg + log(grades_std)\n    grades_entropy_normalized\
    \ = grades_entropy / sum(grades_entropy)\n    grades_skewness = grades_skew *\
    \ grades_range_sqr\n    grades_kurtosis_normalized = grades_kurtosis / sum(grades_kurtosis)\n\
    \    grades_var = (grades_max - grades_min) * (grades_max - grades_min) / length(grades)\n\
    \    grades_var_normalized = grades_var / sum(grades_var)\n    grades_n = length(grades)\n\
    \    grades_n_pdf = grades_n / sum(grades_n) * sum(grades_n)/2\n    grades_n_pdf_normalized\
    \ = grades_n_pdf / sum(grades_n_pdf)\n    grades_n_cdf = 0\n    grades_n_cdf_normalized\
    \ = grades_n_cdf\n    grades_n_icdf = 0\n    grades_n_icdf_normalized = grades_n_icdf\n\
    \    grades_n_min = 0\n    grades_n_min_normalized = grades_n_min\n    grades_n_max\
    \ = 0\n    grades_n_max_normalized = grades_n_max\n    grades_n_range = 0\n  \
    \  grades_n_range_normalized = grades_n_range\n    grades_n_range_sqr = 0\n  \
    \  grades_n_range_sqr_normalized = grades_n_range_sqr\n    grades_n_skew = 0\n\
    \    grades_n_skew_normalized = grades_n_skew\n    grades_n_kurtosis = 0\n   \
    \ grades_n_kurtosis_normalized = grades_n_kurtosis\n    grades_n_entropy = 0\n\
    \    grades_n_entropy_normalized = grades_n_entropy\n    grades_n_entropy_normalized\n\
    \    grades_n_entropy\n    grades_n_entropy\n    grades_n_entropy\n    grades_n_entropy_normalized\n\
    \    grades_n_entropy_normalized\n    grades_n_entropy_normalized\n    grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp297g4_26.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp297g4_26.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp297g4_26.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl_4yjf58.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl_4yjf58.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl_4yjf58.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv9hs4lav.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv9hs4lav.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv9hs4lav.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpimf2tjtg.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpimf2tjtg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpimf2tjtg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw0x7s_ll.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw0x7s_ll.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw0x7s_ll.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbmekwlyd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbmekwlyd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbmekwlyd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpplrn0mih.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpplrn0mih.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpplrn0mih.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoupb1a6w.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoupb1a6w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoupb1a6w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpznlyf45c.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpznlyf45c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpznlyf45c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted = grades_sorted[grades_sorted\
    \ .!= 0]\n    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[1]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end]]\n   \
    \ grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 1]]\n  \
    \  grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 2]]\n \
    \   grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 3]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 4]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 5]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 6]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 7]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 8]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 9]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 10]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 11]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 12]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 13]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 14]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 15]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 16]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 17]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 18]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 19]]\n\
    \    grades_sorted = grades_sorted[grades_sorted .!= grades_sorted[end - 20]]\n\
    \    grades_sorted = grades_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkapzfyyf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkapzfyyf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkapzfyyf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphnuhxz0r.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphnuhxz0r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphnuhxz0r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpay9k13ow.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpay9k13ow.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpay9k13ow.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0lr2ap2_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0lr2ap2_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0lr2ap2_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3yk46rw4.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3yk46rw4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3yk46rw4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdzjfx1lk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdzjfx1lk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdzjfx1lk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ * grades_skew) * (length(grades) - 1))\n    grades_entropy = - grades_sum *\
    \ log(grades_sum) - (grades_sum / length(grades)) * log(grades_avg) - ((grades_sum\
    \ / length(grades)) * (grades_avg * grades_avg))\n    grades_entropy_normalized\
    \ = grades_entropy / grades_avg\n    grades_entropy_normalized = grades_entropy_normalized\
    \ * grades_avg\n    grades_entropy_normalized = grades_entropy_normalized / grades_std\n\
    \    grades_entropy_normalized = grades_entropy_normalized * grades_std\n    grades_entropy_normalized\
    \ = grades_entropy_normalized / grades_skew\n    grades_entropy_normalized = grades_entropy_normalized\
    \ * grades_skew\n    grades_entropy_normalized = grades_entropy_normalized / grades_kurtosis\n\
    \    grades_entropy_normalized = grades_entropy_normalized * grades_kurtosis\n\
    \    grades_entropy_normalized = grades_entropy_normalized / grades_range\n  \
    \  grades_entropy_normalized = grades_entropy_normalized * grades_range\n    grades_entropy_normalized\
    \ = grades_entropy_normalized / grades_range_sqr\n    grades_entropy_normalized\
    \ = grades_entropy_normalized * grades_range_sqr\n    grades_entropy_normalized\
    \ = grades_entropy_normalized / grades_min\n    grades_entropy_normalized = grades_entropy_normalized\
    \ * grades_min\n    grades_entropy_normalized = grades_entropy_normalized / grades_max\n\
    \    grades_entropy_normalized = grades_entropy_normalized * grades_max\n    grades_entropy_normalized\
    \ = grades_entropy_normalized / grades_sum\n    grades_entropy_normalized = grades_entropy_normalized\
    \ * grades_sum\n    grades_entropy_normalized = grades_entropy_normalized / length(grades)\n\
    \    grades_entropy_normalized = grades_entropy_normalized * length(grades)\n\
    \    grades_entropy_normalized = grades_entropy_normalized / grades_avg\n    grades_entropy_normalized\
    \ = grades_entropy_normalized * grades_avg\n    grades_entropy_normalized = grades_\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpughhw0x_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpughhw0x_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpughhw0x_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpadvi90o9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpadvi90o9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpadvi90o9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcil4gplu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcil4gplu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcil4gplu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ < 0\n        grades_sum = 0\n    end\n    grades_sum = grades_sum / length(grades)\n\
    \    grades_sum2 = sum(grades .* grades)\n    grades_sum3 = sum(grades .^ 2)\n\
    \    grades_sum4 = sum(grades .^ 3)\n    grades_sum5 = sum(grades .^ 4)\n    grades_sum6\
    \ = sum(grades .^ 5)\n    grades_sum7 = sum(grades .^ 6)\n    grades_sum8 = sum(grades\
    \ .^ 7)\n    grades_sum9 = sum(grades .^ 8)\n    grades_sum10 = sum(grades .^\
    \ 9)\n    grades_sum11 = sum(grades .^ 10)\n    grades_sum12 = sum(grades .^ 11)\n\
    \    grades_sum13 = sum(grades .^ 12)\n    grades_sum14 = sum(grades .^ 13)\n\
    \    grades_sum15 = sum(grades .^ 14)\n    grades_sum16 = sum(grades .^ 15)\n\
    \    grades_sum17 = sum(grades .^ 16)\n    grades_sum18 = sum(grades .^ 17)\n\
    \    grades_sum19 = sum(grades .^ 18)\n    grades_sum20 = sum(grades .^ 19)\n\
    \    grades_sum21 = sum(grades .^ 20)\n    grades_sum22 = sum(grades .^ 21)\n\
    \    grades_sum23 = sum(grades .^ 22)\n    grades_sum24 = sum(grades .^ 23)\n\
    \    grades_sum25 = sum(grades .^ 24)\n    grades_sum26 = sum(grades .^ 25)\n\
    \    grades_sum27 = sum(grades .^ 26)\n    grades_sum28 = sum(grades .^ 27)\n\
    \    grades_sum29 = sum(grades .^ 28)\n    grades_sum30 = sum(grades .^ 29)\n\
    \    grades_sum31 = sum(grades .^ 30)\n    grades_sum32 = sum(grades .^ 31)\n\
    \    grades_sum33 = sum(grades .^ 32)\n    grades_sum34 = sum(grades .^ 33)\n\
    \    grades_sum35 = sum(grades .^ 34)\n    grades_sum36 = sum(grades .^ 35)\n\
    \    grades_sum37 = sum(grades .^ 36)\n    grades_sum38 = sum(grades .^ 37)\n\
    \    grades_sum39 = sum(grades .^ 38)\n    grades_sum40 = sum(grades .^ 39\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklcvmmdv.jl:71\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpklcvmmdv.jl:71\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguqlq3m6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpguqlq3m6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpguqlq3m6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpotp1tkct.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpotp1tkct.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpotp1tkct.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1qtg1_hd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1qtg1_hd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1qtg1_hd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    grades_sorted_index = findfirst(x ->\
    \ x > 0.0, grades_sorted)\n    grades_sorted_index = findfirst(x -> x < 0.0, grades_sorted_index)\n\
    \    grades_sorted_index\n    grades_sorted_index + 1\n    grades_sorted_index\
    \ - 1\n    grades_sorted_index - 2\n    grades_sorted_index - 3\n    grades_sorted_index\
    \ - 4\n    grades_sorted_index - 5\n    grades_sorted_index - 6\n    grades_sorted_index\
    \ - 7\n    grades_sorted_index - 8\n    grades_sorted_index - 9\n    grades_sorted_index\
    \ - 10\n    grades_sorted_index - 11\n    grades_sorted_index - 12\n    grades_sorted_index\
    \ - 13\n    grades_sorted_index - 14\n    grades_sorted_index - 15\n    grades_sorted_index\
    \ - 16\n    grades_sorted_index - 17\n    grades_sorted_index - 18\n    grades_sorted_index\
    \ - 19\n    grades_sorted_index - 20\n    grades_sorted_index - 21\n    grades_sorted_index\
    \ - 22\n    grades_sorted_index - 23\n    grades_sorted_index - 24\n    grades_sorted_index\
    \ - 25\n    grades_sorted_index - 26\n    grades_sorted_index - 27\n    grades_sorted_index\
    \ - 28\n    grades_sorted_index - 29\n    grades_sorted_index - 30\n    grades_sorted_index\
    \ - 31\n    grades_sorted_index - 32\n    grades_sorted_index - 33\n    grades_sorted_index\
    \ - 34\n    grades_sorted_index - 35\n    grades_sorted_index - 36\n    grades_sorted_index\
    \ - 37\n    grades_sorted_index - 38\n    grades_sorted_index - 39\n    grades_sorted_index\
    \ - 40\n    grades_sorted_index - 41\n    grades_sorted_index - 42\n    grades_sorted_index\
    \ - 43\n    grades_sorted_index - 44\n    grades_sorted_index - 45\n    grades_sorted_index\
    \ - 46\n    grades_sorted_index - 47\n    grades_sorted_index - 48\n    grades_sorted_index\
    \ - 49\n    grades_sorted_index - 50\n    grades_sorted_index - 51\n    grades_sorted_index\
    \ - 52\n    grades_sorted_index - 53\n    grades_sorted_index - 54\n    grades_sorted_index\
    \ - 55\n    grades_sorted_index - 56\n    grades_sorted_index - 57\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8gb2l_f8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8gb2l_f8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8gb2l_f8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3elt37wy.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3elt37wy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3elt37wy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppp7ysatq.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppp7ysatq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppp7ysatq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_len = len(grades)\n    \n    if grades_len\
    \ < 5\n        return [\"E\"]\n    end\n    \n    grades_sum = 0.0\n    for i\
    \ in 1:grades_len\n        grades_sum += grades[i]\n    end\n    \n    if grades_sum\
    \ < 4.0\n        return [\"E\"]\n    end\n    \n    grades_avg = grades_sum /\
    \ grades_len\n    \n    if grades_avg > 3.7\n        return [\"D-\"]\n    end\n\
    \    \n    if grades_avg > 3.3\n        return [\"D+\"]\n    end\n    \n    if\
    \ grades_avg > 3.0\n        return [\"D\"]\n    end\n    \n    if grades_avg >\
    \ 2.7\n        return [\"D+\"]\n    end\n    \n    if grades_avg > 2.3\n     \
    \   return [\"D\"]\n    end\n    \n    if grades_avg > 2.0\n        return [\"\
    D-\"]\n    end\n    \n    if grades_avg > 1.7\n        return [\"C+\"]\n    end\n\
    \    \n    if grades_avg > 1.3\n        return [\"C\"]\n    end\n    \n    if\
    \ grades_avg > 1.0\n        return [\"C\"]\n    end\n    \n    if grades_avg >\
    \ 0.7\n        return [\"C\"]\n    end\n    \n    if grades_avg > 0.0\n      \
    \  return [\"C\"]\n    end\n    \n    if grades_avg < 0.0\n        return [\"\
    B\"]\n    end\n    \n    if grades_avg < 1.0\n        return [\"B\"]\n    end\n\
    \    \n    if grades_avg < 2.0\n        return [\"B\"]\n    end\n    \n    if\
    \ grades_avg < 3.0\n        return [\"B\"]\n    end\n    \n    if grades_avg <\
    \ 3.3\n        return [\"B\"]\n    end\n    \n    if grades_avg < 3.7\n      \
    \  return [\"B\"]\n    end\n    \n    if grades_avg < 4.0\n        return [\"\
    B\"]\n    end\n    \n    if grades_avg < 4.3\n        return [\"B\"]\n    end\n\
    \    \n    if grades_avg < 4.7\n        return [\"B\"]\n    end\n    \n    if\
    \ grades_avg < 5.0\n        return [\"B\"]\n    end\n    \n    if grades_avg <\
    \ 5.3\n        return [\"B\"]\n    end\n    \n    if grades_avg < 5.7\n      \
    \  return [\"B\"]\n    end\n    \n    if grades_avg < 6.0\n        return [\"\
    B\"]\n    end\n    \n    if grades_avg < 6.3\n        return [\"B\"]\n    end\n\
    \    \n    if grades_avg < 6.7\n        return [\"\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpc_40e8.jl:151\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpc_40e8.jl:151\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphkpvrpbb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphkpvrpbb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphkpvrpbb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_len = len(grades)\n    grades_sum =\
    \ 0\n    grades_sum_i = 0\n    grades_sum_i_prev = 0\n    grades_sum_i_next =\
    \ 0\n    grades_sum_i_next2 = 0\n    grades_sum_i_next3 = 0\n    grades_sum_i_next4\
    \ = 0\n    grades_sum_i_next5 = 0\n    grades_sum_i_next6 = 0\n    grades_sum_i_next7\
    \ = 0\n    grades_sum_i_next8 = 0\n    grades_sum_i_next9 = 0\n    grades_sum_i_next10\
    \ = 0\n    grades_sum_i_next11 = 0\n    grades_sum_i_next12 = 0\n    grades_sum_i_next13\
    \ = 0\n    grades_sum_i_next14 = 0\n    grades_sum_i_next15 = 0\n    grades_sum_i_next16\
    \ = 0\n    grades_sum_i_next17 = 0\n    grades_sum_i_next18 = 0\n    grades_sum_i_next19\
    \ = 0\n    grades_sum_i_next20 = 0\n    grades_sum_i_next21 = 0\n    grades_sum_i_next22\
    \ = 0\n    grades_sum_i_next23 = 0\n    grades_sum_i_next24 = 0\n    grades_sum_i_next25\
    \ = 0\n    grades_sum_i_next26 = 0\n    grades_sum_i_next27 = 0\n    grades_sum_i_next28\
    \ = 0\n    grades_sum_i_next29 = 0\n    grades_sum_i_next30 = 0\n    grades_sum_i_next31\
    \ = 0\n    grades_sum_i_next32 = 0\n    grades_sum_i_next33 = 0\n    grades_sum_i_next34\
    \ = 0\n    grades_sum_i_next35 = 0\n    grades_sum_i_next36 = 0\n    grades_sum_i_next37\
    \ = 0\n    grades_sum_i_next38 = 0\n    grades_sum_i_next39 = 0\n    grades_sum_i_next40\
    \ = 0\n    grades_sum_i_next41 = 0\n    grades_sum_i_next42 = 0\n    grades_sum_i_next43\
    \ = 0\n    grades_sum_i_next44 = 0\n    grades_sum_i_next45 = 0\n    grades_sum_i_next46\
    \ = 0\n    grades_sum_i_next47 = 0\n    grades_sum_i_next48 = 0\n    grades_sum_i_next49\
    \ = 0\n    grades_sum_i_next50 = 0\n    grades_sum_i_next51 = 0\n    grades_sum_i_next52\
    \ = 0\n    grades_sum_i_next53 = 0\n    grade\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfmwt2m0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyfmwt2m0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyfmwt2m0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpya3wdz_t.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpya3wdz_t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpya3wdz_t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzfhd19z6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzfhd19z6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzfhd19z6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyw5xax3a.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyw5xax3a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyw5xax3a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsprfjgks.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsprfjgks.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsprfjgks.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp68fj04md.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp68fj04md.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp68fj04md.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvdczaa5m.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvdczaa5m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvdczaa5m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp18x7frc3.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp18x7frc3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp18x7frc3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpedy98_r4.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpedy98_r4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpedy98_r4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2oago0g6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2oago0g6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2oago0g6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0qoobrbc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0qoobrbc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0qoobrbc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqg0i2p_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmqg0i2p_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmqg0i2p_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdix6qumu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdix6qumu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdix6qumu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6p2bwncp.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6p2bwncp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6p2bwncp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzk4uel5z.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzk4uel5z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzk4uel5z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) * pow(length(grades) - 1, 2))\n    grades_entropy = - grades_avg + log(grades_std)\n\
    \    grades_entropy_normalized = grades_entropy / log(grades_avg)\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .- grades_avg\n   \
    \ grades_entropy_normalized = grades_entropy_normalized ./ grades_std\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .- grades_avg\n   \
    \ grades_entropy_normalized = grades_entropy_normalized ./ grades_std\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .- grades_avg\n   \
    \ grades_entropy_normalized = grades_entropy_normalized ./ grades_std\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .- grades_avg\n   \
    \ grades_entropy_normalized = grades_entropy_normalized ./ grades_std\n    grades_entropy_normalized\
    \ = grades_entropy_normalized .+ 1e-6\n    grades_entropy_normalized = sort(grades_entropy_normalized)\n\
    \    grades_entropy_normalized = grades_entropy_normalized[1:length(grades)]\n\
    \    grades_entropy_normalized = grades_entropy_normalized .- grades_avg\n   \
    \ grades_entropy_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4pqk7b40.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4pqk7b40.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4pqk7b40.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_avg =\
    \ grades_sum / length(grades)\n    grades_std = std(grades)\n    grades_min =\
    \ min(grades)\n    grades_max = max(grades)\n    grades_range = grades_max - grades_min\n\
    \    grades_range_sqr = grades_range * grades_range\n    grades_skew = grades_range_sqr\
    \ / length(grades)\n    grades_kurtosis = grades_range_sqr / ((length(grades)\
    \ - 1) / length(grades))\n    grades_entropy = - grades_avg + log(grades_std)\n\
    \    grades_entropy_normalized = grades_entropy / sum(grades_entropy)\n    grades_entropy_normalized\
    \ = sort(grades_entropy_normalized)\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= 0]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[1]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[2]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[3]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[4]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[5]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[6]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[7]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[8]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[9]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[10]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[11]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[12]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_normalized[13]]\n    grades_entropy_normalized = grades_entropy_normalized[grades_entropy_normalized\
    \ .!= grades_entropy_\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyeleips4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyeleips4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplgog_1nj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplgog_1nj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplgog_1nj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsgc5ewo9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsgc5ewo9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsgc5ewo9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiqcjndyw.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiqcjndyw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiqcjndyw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3362pr2v.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3362pr2v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3362pr2v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppjtt7zxf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppjtt7zxf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppjtt7zxf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp58h4bmo2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp58h4bmo2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp58h4bmo2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ < 0.0\n        grades_sum = 0.0\n    end\n    grades_avg = grades_sum / length(grades)\n\
    \    grades_std = std(grades)\n    grades_min = minimum(grades)\n    grades_max\
    \ = maximum(grades)\n    grades_range = grades_max - grades_min\n    grades_range_sqr\
    \ = grades_range * grades_range\n    grades_skew = grades_range_sqr / mean(grades_range)\n\
    \    grades_kurtosis = grades_range_sqr / ((length(grades) - 1) * mean(grades_range))\n\
    \    grades_coeff = grades_skew^2 + grades_kurtosis\n    grades_intercept = grades_mean\
    \ - grades_range * grades_coeff\n    grades_coeff2 = grades_coeff^2 / grades_skew^2\n\
    \    grades_intercept2 = grades_intercept / grades_skew\n    grades_probs = grades_coeff\
    \ + grades_intercept2\n    grades_probs_sorted = sort(grades_probs)\n    grades_probs_sorted_reverse\
    \ = sort(grades_probs[end:-1:1])\n    grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n\
    \    grades_probs_sorted_reverse = grades_probs_sorted_reverse[end:-1:1]\n   \
    \ grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n    grades_probs_sorted_reverse\
    \ = grades_probs_sorted_reverse[end:-1:1]\n    grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n\
    \    grades_probs_sorted_reverse = grades_probs_sorted_reverse[end:-1:1]\n   \
    \ grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n    grades_probs_sorted_reverse\
    \ = grades_probs_sorted_reverse[end:-1:1]\n    grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n\
    \    grades_probs_sorted_reverse = grades_probs_sorted_reverse[end:-1:1]\n   \
    \ grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n    grades_probs_sorted_reverse\
    \ = grades_probs_sorted_reverse[end:-1:1]\n    grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\n\
    \    grades_probs_sorted_reverse = grades_probs_sorted_reverse[end:-1:1]\n   \
    \ grades_probs_sorted_reverse = reverse(grades_probs_sorted_reverse)\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxgr5t2h2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxgr5t2h2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxgr5t2h2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a list of GPAs for some students and you have to write\
    \ \n    a function that can output a list of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1yuk8rn_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1yuk8rn_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1yuk8rn_.jl:1\n"
  exit_code: 1
  status: Exception
