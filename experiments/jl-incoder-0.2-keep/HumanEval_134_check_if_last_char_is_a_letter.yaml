name: HumanEval_134_check_if_last_char_is_a_letter
language: julia
prompt: "\"\"\"\n    Create a function that returns True if the last character\n \
  \   of a given string is an alphabetical character and is not\n    a part of a word,\
  \ and False otherwise.\n    Note: \"word\" is a group of characters separated by\
  \ space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279E\
  \ False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n    check_if_last_char_is_a_letter(\"\
  apple pi e \") \u279E False\n    check_if_last_char_is_a_letter(\"\") \u279E False\
  \ \n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
  \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
  \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"\
  Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
  \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple\
  \ pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
completions: ["    txt = txt.strip()\n    if txt.endsWith(\" \")\n        txt = txt.sub!(\"\
    \ \", \"\")\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n  \
    \  txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    txt =\
    \ txt.split(\" \")\n    \n    if txt[txt.length - 1] == txt[txt.length - 1].upper()\
    \ || txt[txt.length - 1] == txt[txt.length - 1].lower():\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end-1]\n    txt = txt.lower()\n    return txt != \"\"\nend\n</cell>\n\
    <text>\nExercise 10: Write a function that returns True if the last character\n\
    \    of a given string is a digit and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n   \
    \ txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt", "    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt =\
    \ txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n   \
    \ txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n\
    \        txt[end-1] \u2208 alphabet \u2227 !is_a_word(txt)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ return false\n    \n    txt = txt.split(\" \")\n    txt = txt[end]\n    \n \
    \   if txt.size == 0\n        return false\n    \n    if txt.head == txt.tail\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = ", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '$' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '%' \n        then return False\n\
    \    else if txt[txt.length - 1] == '&' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '+' \n     \
    \   then return False\n    else if txt[txt.length - 1] == '-' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False\n    else if txt[txt.length - 1] == '/' \n \
    \       then return False\n    else if txt[txt.length - 1] == '\\\\' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '$' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '%' \n        then return False\n\
    \    else if txt[txt.length - 1] == '&' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if ", "    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = ", " \
    \   \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"_\" \n        then return False\n    else if txt[txt.length - 1] == \"-\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"/\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"\\\\\" \n      \
    \  then return False\n    else if txt[txt.length - 1] == \"!\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"@\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"$\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"%\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"^\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"&\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"*\" \n        then return False\n    else if txt[txt.length - 1] == \"(\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \")\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"-\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \":\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"+\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"=\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"{\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"}\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"[\" \n        then return False\n    else if txt[txt.length - 1] == \"]\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"|\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"~\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"?\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"/\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"<\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"=\"\n        then return False\n    else if txt[txt.length\
    \ - 1] == \">\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"?", "    txt = txt.trim()\n    if txt.length == 0 \n        then return False\n\
    \    else if txt[txt.length - 1] == ' ' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '\\'' \n       \
    \ then return False\n    else if txt[txt.length - 1] == '\\\"' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '('\n        then return False\n\
    \    else if txt[txt.length - 1] == ')' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '&' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '?' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\'' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\\"' \n        then return False\n\
    \    else if txt[txt.length - 1] == '('\n        then return False\n    else if\
    \ txt[txt.length - 1] == ')' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '[' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ ']' \n        then return False\n    else if txt[txt.length - 1] == '{' \n \
    \       then return False\n    else if txt[txt.length - 1] == '}' \n        then\
    \ return False\n    else if txt[", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    else\n        return txt[end-1]\
    \ \u2209 \" aeiouAEIOU\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '&' \n        then return False\n    else if txt[txt.length - 1] == '('\n\
    \        then return False\n    else if txt[txt.length - 1] == ')' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '[' \n        then return False\n\
    \    else if txt[txt.length - 1] == ']' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '{' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '}' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '|' \n        then return False\n    else if txt[txt.length - 1] == '<' \n \
    \       then return False\n    else if txt[txt.length - 1] == '>' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '=' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '*' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '%' \n \
    \       then return False\n    else if txt[txt.length - 1] == '^' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '~' \n        then return False\n\
    \    else if txt[txt.length - 1] == '`' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '@' \n        then return False\n    else if ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1].isalpha()\n        then return True\n    else \n        txt = txt.split(\"\
    \ \")\n        for i in txt\n            if i.isalpha()\n                then\
    \ return False\n    else \n        txt = txt.split(\" \")\n        for i in txt\n\
    \            if i.isalpha()\n                then return True\n    else \n   \
    \     txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n\
    \                then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                then return True\n    else \n       \
    \ txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n \
    \               then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                then return True\n    else \n       \
    \ txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n \
    \               then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                then return True\n    else \n       \
    \ txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n \
    \               then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                then return True\n    else \n       \
    \ txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n \
    \               then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                then return True\n    else \n       \
    \ txt = txt.split(\" \")\n        for i in txt\n            if i.isalpha()\n \
    \               then return True\n    else \n        txt = txt.split(\" \")\n\
    \        for i in txt\n            if i.isalpha()\n                then return\
    \ True\n    else \n        txt = txt.split(\" \")\n        for i in txt\n    \
    \        if i.isalpha()\n                ", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '@' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '$' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '&' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '*' \n        then return False\n    else if txt[txt.length - 1] == '('\n  \
    \      then return False\n    else if txt[txt.length - 1] == ')' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '=' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '|' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '+' \n        then return False\n    else if txt[txt.length - 1] == '{' \n \
    \       then return False\n    else if txt[txt.length - 1] == '}' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '[' \n        then return False\n\
    \    else if txt[txt.length - 1] == ']' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '<' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '>' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt", "    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \".\" \n        then return False\n    else if txt[txt.length - 1] == \",\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"?\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"!\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"-\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"_\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"'\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"(\"\n        then return False\n    else if txt[txt.length\
    \ - 1] == \")\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"[\" \n        then return False\n    else if txt[txt.length - 1] == \"]\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"{\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"}\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"|\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"~\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"*\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"!\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"@\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"#\" \n        then return False\n    else if txt[txt.length - 1] == \"$\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"%\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"^\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"&\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"*\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"-\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"_\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"'\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"(\" \n        then return False\n    else ", "    \n    if txt == \"\"\n \
    \       false\n    else\n        txt[end-1] \u2208 letters || txt[end-1] \u2208\
    \ spaces\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[end]\n    \n    if txt.isalpha()\n        \n      \
    \  return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return ", "    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.length-1]\n    \n    if txt.isalpha() == True and\
    \ txt.isalpha() != True:\n        return True\n    else:\n        return False\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is an alphabetical\
    \ character and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n \
    \   txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt", "    txt = txt.trim()\n    if txt.length == 0 \n\
    \        then return False\n    else if txt.ends_with?(\" \")\n        then return\
    \ False\n    else if txt.ends_with?(\",\")\n        then return False\n    else\
    \ if txt.ends_with?(\".\")\n        then return False\n    else if txt.ends_with?(\"\
    !\")\n        then return False\n    else if txt.ends_with?(\"?\")\n        then\
    \ return False\n    else if txt.ends_with?(\":\")\n        then return False\n\
    \    else if txt.ends_with?(\";\")\n        then return False\n    else if txt.ends_with?(\"\
    '\")\n        then return False\n    else if txt.ends_with?(\"$\")\n        then\
    \ return False\n    else if txt.ends_with?(\"%\")\n        then return False\n\
    \    else if txt.ends_with?(\"^\")\n        then return False\n    else if txt.ends_with?(\"\
    &\")\n        then return False\n    else if txt.ends_with?(\"*\")\n        then\
    \ return False\n    else if txt.ends_with?(\"(\")\n        then return False\n\
    \    else if txt.ends_with?(\")\")\n        then return False\n    else if txt.ends_with?(\"\
    +\")\n        then return False\n    else if txt.ends_with?(\"-\")\n        then\
    \ return False\n    else if txt.ends_with?(\"=\")\n        then return False\n\
    \    else if txt.ends_with?(\"|\")\n        then return False\n    else if txt.ends_with?(\"\
    ~\")\n        then return False\n    else if txt.ends_with?(\"\xA3\")\n      \
    \  then return False\n    else if txt.ends_with?(\"\xAC\")\n        then return\
    \ False\n    else if txt.ends_with?(\"\xBD\")\n        then return False\n   \
    \ else if txt.ends_with?(\"\xBC\")\n        then return False\n    else if txt.ends_with?(\"\
    \xBE\")\n        then return False\n    else if txt.ends_with?(\"\xBC\")\n   \
    \     then return False\n    else if txt.ends_with?(\"\xBD\")\n        then return\
    \ False\n    else if txt.ends_with?(\"\xBE", "    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt =\
    \ txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt\
    \ = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n   \
    \ txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    \n    txt = txt.split(\" \")\n    \n  \
    \  for word in txt\n        if word[word.length - 1] == \" \" \n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n\
    \        txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.ends_with(' '):\n \
    \       txt = txt.strip(\" \")\n    return txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and\
    \ txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with('\
    \ ') and txt.ends_with(' ') and txt.ends_with(' ') and txt.ends_with", "    txt\
    \ = txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = ", "    \n    if txt.length == 0\n        false\n    else\n       \
    \ txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1]\
    \ == \",\" || txt[txt.length-1] == \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.split(\" \")\n    \n    if txt[txt.length - 1] == txt[txt.length -\
    \ 1].upcase()\n        && txt[txt.length - 1] != txt[txt.length - 1].downcase()\n\
    \        && txt[txt.length - 1] != txt[txt.length - 1].capitalize()\n        &&\
    \ txt[txt.length - 1] != txt[txt.length - 1].titlecase()\n        && txt[txt.length\
    \ - 1] != txt[txt.length - 1].swapcase()\n        && txt[txt.length - 1] != txt[txt.length\
    \ - 1].capitalize()\n        && txt[txt.length - 1] != txt[txt.length - 1].titlecase()\n\
    \        && txt[txt.length - 1] != txt[txt.length - 1].swapcase()\n        &&\
    \ txt[txt.length - 1] != txt[txt.length - 1].capitalize()\n        && txt[txt.length\
    \ - 1] != txt[txt.length - 1].titlecase()\n        && txt[txt.length - 1] != txt[txt.length\
    \ - 1].swapcase()\n        && txt[txt.length - 1] != txt[txt.length - 1].capitalize()\n\
    \        && txt[txt.length - 1] != txt[txt.length - 1].titlecase()\n        &&\
    \ txt[txt.length - 1] != txt[txt.length - 1].swapcase()\n        && txt[txt.length\
    \ - 1] != txt[txt.length - 1].capitalize()\n        && txt[txt.length - 1] !=\
    \ txt[txt.length - 1].titlecase()\n        && txt[txt.length - 1] != txt[txt.length\
    \ - 1].swapcase()\n        && txt[txt.length - 1] != txt[txt.length - 1].capitalize()\n\
    \        && txt[txt.length - 1] != txt[txt.length - 1].titlecase()\n        &&\
    \ txt[txt.length - 1] != txt[txt.length - 1].swapcase()\n        && txt[txt.length\
    \ - 1] != txt[txt.length - 1].capitalize()\n        && txt[txt.length - 1] !=\
    \ txt[txt.length - 1].titlecase()\n        && txt[txt.length - 1] != txt[txt.length\
    \ - 1].swapcase()\n        && txt[txt.length - 1] != txt[txt.length - 1].capitalize()\n\
    \        && txt[txt.length - 1] != txt[txt.length - 1].titlecase()\n        &&\
    \ txt[txt.length - 1] != txt[txt.length - 1].swapcase()\n        && txt[txt.length\
    \ - 1] != txt[txt.length - 1].capitalize()\n        && txt[txt.length - 1] !=\
    \ txt[txt.length - 1].titlecase()\n        && txt[txt.length - 1]", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n\
    \        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" ||\
    \ txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\"\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up with this solution:\n\
    <code>", "    \n    if txt == \"\"\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    for i in txt\n        if i[length(i)-1] != \" \" \n         \
    \   return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.split(\" \")\n    \n    if txt[txt.length-1].isalpha()\n        \n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is an alphabetical character and is\
    \ not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    if txt.length == 0 \n       \
    \ then return False \n    else if txt[txt.length - 1] == \" \" \n        then\
    \ return False \n    else if txt[txt.length - 1] == \"\\n\" \n        then return\
    \ False \n    else if txt[txt.length - 1] == \"\\t\" \n        then return False\
    \ \n    else if txt[txt.length - 1] == \"\\r\" \n        then return False \n\
    \    else if txt[txt.length - 1] == \"\\v\" \n        then return False \n   \
    \ else if txt[txt.length - 1] == \"\\f\" \n        then return False \n    else\
    \ if txt[txt.length - 1] == \"\\e\" \n        then return False \n    else if\
    \ txt[txt.length - 1] == \"\\\"\" \n        then return False \n    else if txt[txt.length\
    \ - 1] == \"\\'\" \n        then return False \n    else if txt[txt.length - 1]\
    \ == \"\\\\\" \n        then return False \n    else if txt[txt.length - 1] ==\
    \ \"%\" \n        then return False \n    else if txt[txt.length - 1] == \"&\"\
    \ \n        then return False \n    else if txt[txt.length - 1] == \"'\" \n  \
    \      then return False \n    else if txt[txt.length - 1] == \"(\" \n       \
    \ then return False \n    else if txt[txt.length - 1] == \")\" \n        then\
    \ return False \n    else if txt[txt.length - 1] == \",\" \n        then return\
    \ False \n    else if txt[txt.length - 1] == \".\" \n        then return False\
    \ \n    else if txt[txt.length - 1] == \"/\" \n        then return False \n  \
    \  else if txt[txt.length - 1] == \"0\" \n        then return False \n    else\
    \ if txt[txt.length - 1] == \"1\" \n        then return False \n    else if txt[txt.length\
    \ - 1] == \"2\" \n        then return False \n    else if txt[txt.length - 1]\
    \ == \"3\" \n        then return False \n    else if txt[txt.length - 1] == \"\
    4\" \n        then return False \n    else if txt[txt.length - 1] == \"5\" \n\
    \        then return False \n    else if txt[txt.length - 1] == \"6\" \n     \
    \   then return False \n    else if txt[txt.length - 1] == \"7\" \n        then\
    \ return False \n    else if txt[txt.length - 1] == \"8\" \n        then return\
    \ False \n    else if txt[txt.length - 1] == \"9\" \n        then return False\
    \ \n    else if txt[txt.length - 1] == \"a\" \n        then return False \n  \
    \  else if txt[txt.length", "    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    last = txt[txt.length-1]\n    \n\
    \    if last.isalpha()\n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt == \"\"\n        return\
    \ false\n    \n    txt = txt.split(\" \")\n    \n    for w in txt\n        if\
    \ w[length(w) - 1].isalpha()\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    \n    if txt == \"a\" or txt == \"e\" or txt == \"i\" or txt == \"o\" or\
    \ txt == \"u\":\n        return True\n    else:\n        return False\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is an alphabetical character and is\
    \ not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '@' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '#' \n        then return False\n\
    \    else if txt[txt.length - 1] == '$' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '%' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '('\n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '-' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '=' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '[' \n        then return False\n    else if txt[txt.length - 1] == ']' \n \
    \       then return False\n    else if txt[txt.length - 1] == '{' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '}' \n        then return False\n\
    \    else if txt[txt.length - 1] == '|' \n        then return False\n    else\
    \ if txt[txt.length - 1] == ';' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ':' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '<' \n        then return False\n    else if txt[txt.length - 1] == '>' \n \
    \       then return False\n    else if ", "    \n    if txt.length == 0 \n   \
    \     then return False\n    else if txt[txt.length-1] == \" \" \n        then\
    \ return False\n    else if txt[txt.length-1] != \" \" \n        then return True\n\
    \    else \n        txt[txt.length-1] == \" \" \n        && check_if_last_char_is_a_letter(txt.sub(1,txt.length-1))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt.last\n    txt\
    \ = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n \
    \   txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = ", "    txt = txt.strip()\n\
    \    if txt.ends_with?(\" \")\n        txt = txt.strip(\" \")\n    ends_with =\
    \ txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \"\
    )\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.strip(\" \")\n    txt = txt.strip(\" \")\n    txt = txt.",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] != \" \"\
    \ \n        then return True\n    else \n        txt[txt.length-1] == \" \" \n\
    \        && check_if_last_char_is_a_letter(txt.sub(1,txt.length-1))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n", "    \n    txt =\
    \ txt.split(\" \")\n    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n\
    \    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n   \
    \ \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n",
  "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"\\n\" \n        then return False\n    else if txt[txt.length - 1] == \"\\\
    r\" \n        then return False\n    else if txt[txt.length - 1] == \"\\t\" \n\
    \        then return False\n    else if txt[txt.length - 1] == \"\\v\" \n    \
    \    then return False\n    else if txt[txt.length - 1] == \"\\f\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\a\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\e\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\i\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\o\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"\\U\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    \\N\" \n        then return False\n    else if txt[txt.length - 1] == \"\\p\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"\\P\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"\\q\" \n     \
    \   then return False\n    else if txt[txt.length - 1] == \"\\Q\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\e\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\e\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\e\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"\\e\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    \\e\" \n        then return False\n    else if txt[txt.length - 1] == \"\\e\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"\\e\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"\\e\" \n     \
    \   then return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then\
    \ return False\n", "    txt = txt.trim()\n    if txt.length == 0\n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\"\
    \ || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    txt = txt.split(\" \")\n\
    \    \n    if txt[txt.length - 1] == \" \" \n        then return False\n     \
    \   else return True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    \n    if\
    \ txt == \"\"\n        false\n    else\n        txt[end-1] == \" \" || txt[end-1]\
    \ == \".\" || txt[end-1] == \",\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        then return False\n    else if\
    \ txt[txt.length - 1] == ' ' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '*' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '-' \n        then return False\n    else if txt[txt.length - 1] == '+' \n \
    \       then return False\n    else if txt[txt.length - 1] == '('\n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '{' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '}' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '[' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ ']' \n        then return False\n    else if txt[txt.length - 1] == '|' \n \
    \       then return False\n    else if txt[txt.length - 1] == '&' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '<' \n        then return False\n\
    \    else if txt[txt.length - 1] == '>' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '=' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '!' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '.' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if ",
  "    txt = txt.strip()\n    if txt.ends_with?(\" \")\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.strip(\" \")\n    if ends_with\n        txt = txt.strip(\"\
    \ \")\n    ends_with = txt.ends_with?(\" \")\n    txt = txt.strip(\" \")\n   \
    \ if ends_with\n        txt = txt.strip(\" \")\n    ends_with = txt.ends_with?(\"\
    \ \")\n    txt = txt.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.split(\" \")\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] == \"-\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"_\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"/\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"\\\\\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"'\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"!\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"?\" \n        then return False\n    else if txt[txt.length-1] == \"(\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \")\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"*\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"+\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"%\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"&\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"-\" \n        then return False\n    else if txt[txt.length-1] == \"/\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"\\\\\" \n  \
    \      then return False\n    else if txt[txt.length-1] == \"'\" \n        then\
    \ return False\n    else if txt[txt.length-1] == \"!\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"(\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \")\" \n        then return False\n    else if txt[txt.length-1] == \"*\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"+\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"%\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"&\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"-\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"/\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"\\\\\" \n        then return False\n    else ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n",
  "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\''\n        then return False\n    else if txt[txt.length - 1] == '\"'\n\
    \        then return False\n    else if txt[txt.length - 1] == '-'\n        then\
    \ return False\n    else if txt[txt.length - 1] == '_'\n        then return False\n\
    \    else if txt[txt.length - 1] == '.'\n        then return False\n    else if\
    \ txt[txt.length - 1] == ','\n        then return False\n    else if txt[txt.length\
    \ - 1] == '!'\n        then return False\n    else if txt[txt.length - 1] == '?'\n\
    \        then return False\n    else if txt[txt.length - 1] == ';'\n        then\
    \ return False\n    else if txt[txt.length - 1] == ':'\n        then return False\n\
    \    else if txt[txt.length - 1] == ';'\n        then return False\n    else if\
    \ txt[txt.length - 1] == '('\n        then return False\n    else if txt[txt.length\
    \ - 1] == ')'\n        then return False\n    else if txt[txt.length - 1] == '['\n\
    \        then return False\n    else if txt[txt.length - 1] == ']'\n        then\
    \ return False\n    else if txt[txt.length - 1] == '{'\n        then return False\n\
    \    else if txt[txt.length - 1] == '}'\n        then return False\n    else if\
    \ txt[txt.length - 1] == '\"'\n        then return False\n    else if txt[txt.length\
    \ - 1] == '\"'\n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\"'\n        then return False\n    else if txt[txt.length - 1] == '\"'\n \
    \       then return False\n    else if txt[txt.length - 1] == '\"'\n        then\
    \ return False\n    else if txt[txt.length - 1] == '\"'\n        then return False\n\
    \    else if txt[txt.length - 1] == '\"'\n        then return False\n    else\
    \ if txt[txt.length - 1] == '\"'\n        then return False\n    else if txt[txt.length\
    \ - 1] == '\"'\n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\"'\n        then return False\n    else if txt[txt.length - 1] == '\"'\n \
    \       then return False\n    else if txt[txt.length - 1] == '\"'\n        then\
    \ return False\n    else if txt[txt.length - 1] == '\"'\n        ", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt.filter(x->isalpha(x))\n\
    \    txt = txt.filter(x->!(x==\" \" || x==\"\\n\"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n\"))\n    txt = txt.filter(x->!(x==\" \"))\n    txt = txt.filter(x->!(x==\"\
    \\n", "    \n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == \" \" || txt[length(txt)-1] == \"\\n\" || txt[length(txt)-1] == \"\\t\" ||\
    \ txt[length(txt)-1] == \"\\r\" || txt[length(txt)-1] == \"\\v\" || txt[length(txt)-1]\
    \ == \"\\f\" || txt[length(txt)-1] == \"\\a\" || txt[length(txt)-1] == \"\\e\"\
    \ || txt[length(txt)-1] == \"\\i\" || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1]\
    \ == \"\\U\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\p\"\
    \ || txt[length(txt)-1] == \"\\P\" || txt[length(txt)-1] == \"\\q\" || txt[length(txt)-1]\
    \ == \"\\Q\" || txt[length(txt)-1] == \"\\v\" || txt[length(txt)-1] == \"\\V\"\
    \ || txt[length(txt)-1] == \"\\W\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1]\
    \ == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\"\
    \ || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1]\
    \ == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\"\
    \ || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1]\
    \ == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\"\
    \ || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1]\
    \ == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\"\
    \ || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1]\
    \ == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\"\
    \ || txt[length(txt)-1] == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1]\
    \ == \"\\Z\" || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\"\
    \ || txt[length(txt)-1] == \"\\z\" || txt[length(txt)-1] == \"\\Z\" || txt[length(txt",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] == \"a\"\
    \ \n        || txt[txt.length-1] == \"e\" \n        || txt[txt.length-1] == \"\
    i\" \n        || txt[txt.length-1] == \"o\" \n        || txt[txt.length-1] ==\
    \ \"u\"\n        then return True\n    else return False\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length -\
    \ 1] == \" \" \n        then return False\n        else return True\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.ends_with(' ') or txt.ends_with(','):\n\
    \        return False \n    if txt.ends_with('!'):\n        return False \n  \
    \  if txt.ends_with('?'):\n        return False \n    if txt.ends_with(';'):\n\
    \        return False \n    if txt.ends_with('.'):\n        return False \n  \
    \  if txt.ends_with(','):\n        return False \n    if txt.ends_with(':'):\n\
    \        return False \n    if txt.ends_with(';'):\n        return False \n  \
    \  if txt.ends_with(','):\n        return False \n    if txt.ends_with('!'):\n\
    \        return False \n    if txt.ends_with('?'):\n        return False \n  \
    \  if txt.ends_with('.'):\n        return False \n    if txt.ends_with(','):\n\
    \        return False \n    if txt.ends_with(':'):\n        return False \n  \
    \  if txt.ends_with(';'):\n        return False \n    if txt.ends_with(','):\n\
    \        return False \n    if txt.ends_with('!'):\n        return False \n  \
    \  if txt.ends_with('?'):\n        return False \n    if txt.ends_with('.'):\n\
    \        return False \n    if txt.ends_with(','):\n        return False \n  \
    \  if txt.ends_with(':'):\n        return False \n    if txt.ends_with(';'):\n\
    \        return False \n    if txt.ends_with(','):\n        return False \n  \
    \  if txt.ends_with('!'):\n        return False \n    if txt.ends_with('?'):\n\
    \        return False \n    if txt.ends_with('.'):\n        return False \n  \
    \  if txt.ends_with(','):\n        return False \n    if txt.ends_with(':'):\n\
    \        return False \n    if txt.ends_with(';'):\n        return False \n  \
    \  if txt.ends_with(','):\n        return False \n    if txt.ends_with('!'):\n\
    \        return False \n    if txt.ends_with('?'):\n        return False \n  \
    \  if txt.ends_with('.'):\n        return False \n    if txt.ends_with(','):\n\
    \        return False \n    if txt.ends_with(':'):\n        return False \n  \
    \  if txt.ends_with(';'):\n        return False \n    if txt.ends_with(','):\n\
    \        return False \n    if txt.ends_with('!'):\n        return False \n  \
    \  if txt.ends_with('?'):\n        return False ", "    txt = txt.trim()\n   \
    \ if txt.length == 0 \n        then return False\n    else if txt[txt.length -\
    \ 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"\\n\" \n        then return False\n    else if txt[txt.length - 1] == \"\\\
    t\" \n        then return False\n    else if txt[txt.length - 1] == \"\\r\" \n\
    \        then return False\n    else if txt[txt.length - 1] == \"\\v\" \n    \
    \    then return False\n    else if txt[txt.length - 1] == \"\\f\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\\"\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\'\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\\\\" \n        then return False\n    else if\
    \ txt[txt.length - 1] == \"%\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"&\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"'\" \n        then return False\n    else if txt[txt.length - 1] == \"(\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \")\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \",\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \".\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \":\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"<\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \">\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"?\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"@\" \n        then return False\n    else if txt[txt.length - 1] == \"[\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"]\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"^\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"_\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"`\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"{\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"|\" \n        then return ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"\\n\" \n        then return False\n    else if txt[txt.length - 1] == \"\\\
    r\" \n        then return False\n    else if txt[txt.length - 1] == \"\\t\" \n\
    \        then return False\n    else if txt[txt.length - 1] == \"\\v\" \n    \
    \    then return False\n    else if txt[txt.length - 1] == \"\\f\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\\"\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\'\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\\\\" \n        then return False\n    else if\
    \ txt[txt.length - 1] == \"%\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"&\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"'\" \n        then return False\n    else if txt[txt.length - 1] == \"(\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \")\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"*\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"+\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"-\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"/\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"=\"\n        then return False\n    else if txt[txt.length\
    \ - 1] == \"?\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \":\" \n        then return False\n    else if txt[txt.length - 1] == \"<\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \">\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"|\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"[\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"]\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"{\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"}\" \n        then return False\n    ", "    \n\
    \    if txt == \"\"\n        false\n    else\n        txt[end-1] == \" \" || txt[end-1]\
    \ == \"\\n\" || txt[end-1] == \"\\t\" || txt[end-1] == \"\\r\" || txt[end-1] ==\
    \ \"\\v\" || txt[end-1] == \"\\f\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\
    \\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\\
    P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\a\"\
    \ || txt[end-1] == \"\\A\" || txt[end-1] == \"\\v\" || txt[end-1] == \"\\V\" ||\
    \ txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1]\
    \ == \"\\L\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] ==\
    \ \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\a\" || txt[end-1] == \"\
    \\A\" || txt[end-1] == \"\\v\" || txt[end-1] == \"\\V\" || txt[end-1] == \"\\\
    e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\"\
    \ || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" ||\
    \ txt[end-1] == \"\\C\" || txt[end-1] == \"\\a\" || txt[end-1] == \"\\A\" || txt[end-1]\
    \ == \"\\v\" || txt[end-1] == \"\\V\" || txt[end-1] == \"\\e\" || txt[end-1] ==\
    \ \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\
    \\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\\
    C\" || txt[end-1] == \"\\a\" || txt[end-1] == \"\\A\" || txt[end-1] == \"\\v\"\
    \ || txt[end-1] == \"\\V\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" ||\
    \ txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\p\" || txt[end-1]\
    \ == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] ==\
    \ \"\\a\" || txt[end-1] == \"\\A\" || ", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.chars\n    txt = txt.filter(x->!(x==\" \" || x==\"\
    \\n\" || x==\"\\t\" || x==\"\\r\"))\n    txt = txt.filter(x->!(x==\"a\" || x==\"\
    b\" || x==\"c\" || x==\"d\" || x==\"e\" || x==\"f\" || x==\"g\" || x==\"h\" ||\
    \ x==\"i\" || x==\"j\" || x==\"k\" || x==\"l\" || x==\"m\" || x==\"n\" || x==\"\
    o\" || x==\"p\" || x==\"q\" || x==\"r\" || x==\"s\" || x==\"t\" || x==\"u\" ||\
    \ x==\"v\" || x==\"w\" || x==\"x\" || x==\"y\" || x==\"z\"))\n    txt = txt.filter(x->!(x==\"\
    A\" || x==\"B\" || x==\"C\" || x==\"D\" || x==\"E\" || x==\"F\" || x==\"G\" ||\
    \ x==\"H\" || x==\"I\" || x==\"J\" || x==\"K\" || x==\"L\" || x==\"M\" || x==\"\
    N\" || x==\"O\" || x==\"P\" || x==\"Q\" || x==\"R\" || x==\"S\" || x==\"T\" ||\
    \ x==\"U\" || x==\"V\" || x==\"W\" || x==\"X\" || x==\"Y\" || x==\"Z\"))\n   \
    \ txt = txt.filter(x->!(x==\"a\" || x==\"b\" || x==\"c\" || x==\"d\" || x==\"\
    e\" || x==\"f\" || x==\"g\" || x==\"h\" || x==\"i\" || x==\"j\" || x==\"k\" ||\
    \ x==\"l\" || x==\"m\" || x==\"n\" || x==\"o\" || x==\"p\" || x==\"q\" || x==\"\
    r\" || x==\"s\" || x==\"t\" || x==\"u\" || x==\"v\" || x==\"w\" || x==\"x\" ||\
    \ x==\"y\" || x==\"z\"))\n    txt = txt.filter(x->!(x==\"A\" || x==\"B\" || x==\"\
    C\" || x==\"D\" || x==\"E\" || x==\"F\" || x==\"G\" || x==\"H\" || x==\"I\" ||\
    \ x==\"J\" || x==\"K\" || x==\"L\" || x==\"M\" || x==\"N\" || x==\"O\" || x==\"\
    P\" || x==\"Q\" || x==\"R\" || x==\"S\" || x==\"T\" || x==\"U\" || x==\"V\" ||\
    \ x==\"W\" || x==\"X\" || x==\"Y\" || x==\"Z\"))\n    txt = txt.filter(x->", " \
    \   txt = txt.trim()\n    if txt.length == 0 \n        then return False\n   \
    \ else if txt[txt.length - 1] == \" \" \n        then return False\n    else if\
    \ txt[txt.length - 1] == \"-\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"_\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"/\" \n        then return False\n    else if txt[txt.length - 1] == \"\\\\\
    \" \n        then return False\n    else if txt[txt.length - 1] == \"?\" \n  \
    \      then return False\n    else if txt[txt.length - 1] == \"!\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"<\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \">\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"|\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"&\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"*\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"(\" \n        then return False\n    else if txt[txt.length - 1] == \")\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \",\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"-\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"_\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"/\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\\\\" \n        then return False\n   \
    \ else if txt[txt.length - 1] == \"?\" \n        then return False\n    else if\
    \ txt[txt.length - 1] == \"!\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"<\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \">\" \n        then return False\n    else if txt[txt.length - 1] == \"|\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"&\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"*\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"(\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \")\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \",\" \n        then return False\n", "  \
    \  txt = txt.trim()\n    if txt.length == 0 \n        then return False\n    else\
    \ if txt.head == txt.last\n        then return True\n    else if txt.head == txt.last\
    \ && txt.last == txt.last\n        then return True\n    else if txt.last == txt.last\n\
    \        then return False\n    else return False\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    txt = txt.split(\" \")\n    \n   \
    \ if txt[txt.length - 1] == \" \" \n        then return False\n        else return\
    \ True\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a\
    \ function that returns True if the last character\n    of a given string is a\
    \ digit and is not\n    a part of a word, and False otherwise.\n    Note: \"word\"\
    \ is a group of characters separated by space.", "    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.lower()\n    \n    if txt == \"a\"\
    \ or txt == \"e\" or txt == \"i\" or txt == \"o\" or txt == \"u\" or txt == \"\
    y\" \n    then return true\n    else return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a vowel and is not part of a word,\n\
    \    and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt.length == 0\n        false\n    else\n       \
    \ txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] ==\
    \ '?' || txt[txt.length-1] == '!'\n    end\nend\n</cell>\n<text>\nExercise 5\n\
    Write a function that returns True if the last character\nof a given string is\
    \ a vowel and False otherwise.\nNote: \"vowel\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length - 1] == \" \" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\n\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\r\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\t\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"-\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    _\" \n        then return False\n    else if txt[txt.length - 1] == \"!\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"#\" \n       \
    \ then return False\n    else if txt[txt.length - 1] == \"$\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"%\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"&\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"'\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"(\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \")\" \n        then return False\n    else if txt[txt.length - 1] == \"*\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"+\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \",\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"-\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"/\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"0\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"1\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"2\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"3\" \n        then return False\n    else if txt[txt.length - 1] == \"4\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"5\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"6\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"7\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"8\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"9\" \n        then return False\n    else\
    \ if ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    \n    if txt == \"\"\n        false\n    else\n        txt[end-1]\
    \ \u2208 letters || txt[end-1] \u2208 spaces\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a word is palindrome. \nA palindrome\
    \ is a word, phrase or sentence that reads the same backward as forward.", " \
    \   \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \ \n        then return False\n    else return True\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] == \"a\"\
    \ \n        || txt[txt.length-1] == \"e\" \n        || txt[txt.length-1] == \"\
    i\" \n        || txt[txt.length-1] == \"o\" \n        || txt[txt.length-1] ==\
    \ \"u\"\n        then return True\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length-1] == ' ' \n        then return False\n  \
    \  else if txt[txt.length-1] == '\\n' \n        then return False\n    else if\
    \ txt[txt.length-1] == '\\r' \n        then return False\n    else if txt[txt.length-1]\
    \ == '\\t' \n        then return False\n    else if txt[txt.length-1] == '\\v'\
    \ \n        then return False\n    else if txt[txt.length-1] == '\\f' \n     \
    \   then return False\n    else if txt[txt.length-1] == '\\a' \n        then return\
    \ False\n    else if txt[txt.length-1] == '\\e' \n        then return False\n\
    \    else if txt[txt.length-1] == '\\z' \n        then return False\n    else\
    \ if txt[txt.length-1] == '\\Z' \n        then return False\n    else if txt[txt.length-1]\
    \ == '\\0' \n        then return False\n    else if txt[txt.length-1] == '\\9'\
    \ \n        then return False\n    else if txt[txt.length-1] == '\\8' \n     \
    \   then return False\n    else if txt[txt.length-1] == '\\7' \n        then return\
    \ False\n    else if txt[txt.length-1] == '\\6' \n        then return False\n\
    \    else if txt[txt.length-1] == '\\5' \n        then return False\n    else\
    \ if txt[txt.length-1] == '\\4' \n        then return False\n    else if txt[txt.length-1]\
    \ == '\\3' \n        then return False\n    else if txt[txt.length-1] == '\\2'\
    \ \n        then return False\n    else if txt[txt.length-1] == '\\1' \n     \
    \   then return False\n    else if txt[txt.length-1] == '\\0' \n        then return\
    \ False\n    else if txt[txt.length-1] == '\\9' \n        then return False\n\
    \    else if txt[txt.length-1] == '\\8' \n        then return False\n    else\
    \ if txt[txt.length-1] == '\\7' \n        then return False\n    else if txt[txt.length-1]\
    \ == '\\6' \n        then return False\n    else if txt[txt.length-1] == '\\5'\
    \ \n        then return False\n    else if txt[txt.length-1] == '\\4' \n     \
    \   then return False\n    else if txt[txt.length-1] == '\\3' \n        then return\
    \ False\n    else if txt[txt", "    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] ==\
    \ ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0\n        false\n    else\n        txt[txt.length\
    \ - 1] == \" \" || txt[txt.length - 1] == \"\\n\" || txt[txt.length - 1] == \"\
    \\t\" || txt[txt.length - 1] == \"\\r\" || txt[txt.length - 1] == \"\\f\"\n  \
    \  end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns True\
    \ if the last character of a given string is a digit and is not\na part of a word,\
    \ and False otherwise.\nNote: \"word\" is a group of characters separated by space.",
  "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    ", "    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n   \
    \ txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n\
    \    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n    txt = ", " \
    \   txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n      \
    \  txt[txt.length - 1] == 'a' || txt[txt.length - 1] == 'e' || txt[txt.length\
    \ - 1] == 'i' || txt[txt.length - 1] == 'o' || txt[txt.length - 1] == 'u' || txt[txt.length\
    \ - 1] == 'A' || txt[txt.length - 1] == 'E' || txt[txt.length - 1] == 'I' || txt[txt.length\
    \ - 1] == 'O' || txt[txt.length - 1] == 'U'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt == \"\"\n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0\n      \
    \  false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] ==\
    \ \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    \n    if txt == \"\"\n      \
    \  return false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.last()\n    \n    txt = txt.last()\n\
    \    \n    ", "    txt = txt.trim()\n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length-1].isalpha()\n        then return False\n\
    \    else if txt[txt.length-1] == \" \"\n        then return False\n    else return\
    \ True\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt.last()\n    txt = txt.strip() # remove trailing space\n    txt = txt.downcase()\
    \ # convert to lowercase\n    txt = txt.split(\" \") # split by space\n    txt\
    \ = txt.last() # get the last element\n    txt = txt.strip() # remove trailing\
    \ space\n    txt = txt.split(\" \") # split by space\n    txt = txt.last() # get\
    \ the last element\n    txt = txt.strip() # remove trailing space\n    txt = txt.split(\"\
    \ \") # split by space\n    txt = txt.last() # get the last element\n    txt =\
    \ txt.strip() # remove trailing space\n    txt = txt.split(\" \") # split by space\n\
    \    txt = txt.last() # get the last element\n    txt = txt.strip() # remove trailing\
    \ space\n    txt = txt.split(\" \") # split by space\n    txt = txt.last() # get\
    \ the last element\n    txt = txt.strip() # remove trailing space\n    txt = txt.split(\"\
    \ \") # split by space\n    txt = txt.last() # get the last element\n    txt =\
    \ txt.strip() # remove trailing space\n    txt = txt.split(\" \") # split by space\n\
    \    txt = txt.last() # get the last element\n    txt = txt.strip() # remove trailing\
    \ space\n    txt = txt.split(\" \") # split by space\n    txt = txt.last() # get\
    \ the last element\n    txt = txt.strip() # remove trailing space\n    txt = txt.split(\"\
    \ \") # split by space\n    txt = txt.last() # get the last element\n    txt =\
    \ txt.strip() # remove trailing space\n    txt = txt.split(\" \") # split by space\n\
    \    txt = txt.last() # get the last element\n    txt = txt.strip() # remove trailing\
    \ space\n    txt = txt.split(\" \") # split by space\n    txt = txt.last() # get\
    \ the last element\n    txt = txt.strip() # remove trailing space\n    txt = txt.split(\"\
    \ \") # split by space\n    txt = txt.last() # get the last element\n    txt =\
    \ txt.strip() # remove trailing space\n    txt = txt.split(\" \") # split by space\n\
    \    txt = txt.last() # get the last element\n    txt = txt.strip() # remove trailing\
    \ space\n    txt = txt", "    txt = txt.split(\" \")\n    txt = txt[end]\n   \
    \ if txt == \"a\" or txt == \"e\" or txt == \"i\" or txt == \"o\" or txt == \"\
    u\" or txt == \"A\" or txt == \"E\" or txt == \"I\" or txt == \"O\" or txt ==\
    \ \"U\"\n        true\n    else\n        false\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for the answer! I appreciate it!\n<|/ c |>\n<| a tags=julia,string\
    \ |>\nI wrote a package called StringUtils which is designed to do just that.\
    \ It also has some useful functions for working with strings. \n<code>\njulia>\
    \ using StringUtils", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '*' \n        then return False\n    else if txt[txt.length - 1] == '&' \n\
    \        then return False\n    else if txt[txt.length - 1] == '%' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '^' \n        then return False\n\
    \    else if txt[txt.length - 1] == '~' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '<' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '>' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '|' \n        then return False\n    else if txt[txt.length - 1] == '+' \n \
    \       then return False\n    else if txt[txt.length - 1] == '=' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '&' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '~' \n        then return False\n    ", "    txt = txt.trim()\n    if\
    \ txt.length == 0 \n        then return False\n    else if txt[txt.length - 1]\
    \ == ' ' \n        then return False\n    else if txt[txt.length - 1] == '-' \n\
    \        then return False\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '.' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '?' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ';' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ ',' \n        then return False\n    else if txt[txt.length - 1] == '\"' \n\
    \        then return False\n    else if txt[txt.length - 1] == '\\'' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '('\n        then return\
    \ False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '[' \n        then return False\n    else\
    \ if txt[txt.length - 1] == ']' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '{' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '}' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '&' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '%' \n        then return False\n\
    \    else if txt[txt.length - 1] == '#' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '@' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '~' \n        then return False\n    else if txt[txt.length - 1] == '`' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '=' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '<' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '>' \n        then return False\n    else if ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '*' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '('\n        then return False\n    else if txt[txt.length - 1] == ')'\n   \
    \     then return False\n    else if txt[txt.length - 1] == '['\n        then\
    \ return False\n    else if txt[txt.length - 1] == ']'\n        then return False\n\
    \    else if txt[txt.length - 1] == '{'\n        then return False\n    else if\
    \ txt[txt.length - 1] == '}'\n        then return False\n    else if txt[txt.length\
    \ - 1] == '|' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\"' \n        then return False\n    else if txt[txt.length - 1] == '\\'' \n\
    \        then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '>' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '%' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '+' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '.' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '?' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '!' \n        then return False\n    else if txt[txt", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        false\n    else\n        txt[end-1] \u2208 letters\
    \ || txt[end-1] \u2208 words\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `letters` isn't defined anywhere and `words` isn't defined\
    \ either. Also, `end` isn't defined either. Also, `txt[end-1]` doesn't work. `end`\
    \ isn't defined either. Also, `txt[end-1] \u2208 letters` doesn't work. `letters`\
    \ isn't defined either. Also, `txt[end-1] \u2208 words` doesn't work. `words`\
    \ isn't defined either. Also, `txt[end-1] \u2208 letters || txt[end-1] \u2208\
    \ words` doesn't work. `letters` isn't defined either. Also, `txt[end-1] \u2208\
    \ words || txt[end-1] \u2208 letters` doesn't work. `words` isn't defined either.\
    \ Also, `txt[end-1] \u2208 letters || txt[end-1] \u2208 words || txt[end-1] \u2208\
    \ letters` doesn't work. `letters` isn't defined either. Also, `txt[end-1] \u2208\
    \ words || txt[end-1] \u2208 letters || txt[end-1] \u2208 words || txt[end-1]\
    \ \u2208 letters` doesn't work. `letters` isn't defined either. Also, `txt[end-1]\
    \ \u2208 words || txt[end-1] \u2208 letters || txt[end-1] \u2208 words || txt[end-1]\
    \ \u2208 letters || txt[end-1] \u2208 words || txt[end-1] \u2208 letters` doesn't\
    \ work. `letters` isn't defined either. Also, `txt[end-1] \u2208 words || txt[end-1]\
    \ \u2208 letters || txt[end-1] \u2208 words || txt[end-1] \u2208 letters || txt[end-1]\
    \ \u2208 words || txt[end-1] \u2208 letters || txt[end-1] \u2208 words || txt[end-1]\
    \ \u2208 letters` doesn't work. `letters` isn't defined either. Also, `txt[end-1]\
    \ \u2208 words || txt[end-1] \u2208 letters || txt[end-1] \u2208 words || txt[end-1]\
    \ \u2208 letters || txt[end", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt == \"\"\
    \n        return false\n    \n    txt = txt.split(\" \")\n    \n    last = txt[txt.length-1]\n\
    \    \n    if last.isalpha()\n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.ends_with?(\" \")\n\
    \        txt = txt.strip(\" \")\n    ends_with_letter = txt.ends_with?(letter)\n\
    \    word_in_txt = txt.split(\" \").length == 1\n    return ends_with_letter &&\
    \ !word_in_txt\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it! I didn't know that ends_with was a method of String. I'm still learning\
    \ Julia and I didn't know that you could use methods like that in Julia. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nNo problem! I added a more Julian way of doing it\
    \ :)\n<|/ c |>\n<| c |>\nThanks again! I appreciate it!\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.trim()\n    if txt.length == 0 \n        then return\
    \ False\n    else if txt[txt.length-1] == ' ' \n        then return False\n  \
    \  else if txt[txt.length-1] == '-' \n        then return False\n    else if txt[txt.length-1]\
    \ == '.' \n        then return False\n    else if txt[txt.length-1] == '!' \n\
    \        then return False\n    else if txt[txt.length-1] == '?' \n        then\
    \ return False\n    else if txt[txt.length-1] == '\\'' \n        then return False\n\
    \    else if txt[txt.length-1] == '\\\"' \n        then return False\n    else\
    \ if txt[txt.length-1] == '(' \n        then return False\n    else if txt[txt.length-1]\
    \ == ')' \n        then return False\n    else if txt[txt.length-1] == '[' \n\
    \        then return False\n    else if txt[txt.length-1] == ']' \n        then\
    \ return False\n    else if txt[txt.length-1] == '{' \n        then return False\n\
    \    else if txt[txt.length-1] == '}' \n        then return False\n    else if\
    \ txt[txt.length-1] == '*' \n        then return False\n    else if txt[txt.length-1]\
    \ == '+' \n        then return False\n    else if txt[txt.length-1] == '-' \n\
    \        then return False\n    else if txt[txt.length-1] == '/' \n        then\
    \ return False\n    else if txt[txt.length-1] == '.' \n        then return False\n\
    \    else if txt[txt.length-1] == '_' \n        then return False\n    else if\
    \ txt[txt.length-1] == '@' \n        then return False\n    else if txt[txt.length-1]\
    \ == '#' \n        then return False\n    else if txt[txt.length-1] == '$' \n\
    \        then return False\n    else if txt[txt.length-1] == '%' \n        then\
    \ return False\n    else if txt[txt.length-1] == '^' \n        then return False\n\
    \    else if txt[txt.length-1] == '&' \n        then return False\n    else if\
    \ txt[txt.length-1] == '*' \n        then return False\n    else if txt[txt.length-1]\
    \ == '('\n        then return False\n    else if txt[txt.length-1] == ')' \n \
    \       then return False\n    else if txt[txt.length-1] == '[' \n        then\
    \ return False\n    else if txt", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.match(\"[a-zA-Z]\") != nil\n        return true\n    else\n      \
    \  return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\nA simple solution is to use regular expressions:\n<code>\njulia> using Regexp",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0 \n        then return False\n\
    \    else if txt[txt.length - 1] == ' ' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return False\n    else if txt[txt.length - 1] == '-' \n \
    \       then return False\n    else if txt[txt.length - 1] == '_' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '/' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\\\' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '$' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '%' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '('\n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '$' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '%' \n        then return False\n    else if txt[txt.length - 1] == '&' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '('\n        then return False\n\
    \    else if txt[txt.length - 1] == ')' \n        then return False\n    else\
    \ if ", "    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()", "    txt = txt.split(\" \")\n    txt = txt[end]\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt", "    \n    if\
    \ txt == \"\"\n        false\n    else\n        txt[end-1] \u2208 letters \u2227\
    \ !txt[end-1] \u2208 word\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        then return False\n    else if\
    \ txt[txt.length - 1] == ' ' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '&' \n        then return False\n    else if txt[txt.length - 1] == '*' \n \
    \       then return False\n    else if txt[txt.length - 1] == '('\n        then\
    \ return False\n    else if txt[txt.length - 1] == ')' \n        then return False\n\
    \    else if txt[txt.length - 1] == '+' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '=' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '|' \n        then return False\n    else if txt[txt.length - 1] == '+' \n \
    \       then return False\n    else if txt[txt.length - 1] == '<' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '>' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if ",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.strip()\n    if txt.size == 0\n        return false\n   \
    \ else\n        txt = txt.split(\" \")\n        txt = txt[end]\n        txt =\
    \ txt.strip(\" \")\n        txt = txt.capitalize()\n        return txt ~= \"\"\
    \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '&' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '('\n        then return False\n\
    \    else if txt[txt.length - 1] == ')' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt[txt.length - 1] == '}' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '+' \n        then return False\n\
    \    else if txt[txt.length - 1] == '?' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False\n    else if txt[txt.length - 1] == '/' \n \
    \       then return False\n    else if txt[txt.length - 1] == '\\\\' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '&' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '('\n        then return False\n \
    \   else if txt[txt.length - 1] == ')' \n        then return False\n    else if\
    \ txt[txt.length - 1] == '[' \n        then return False\n    else if txt[txt.length\
    \ - 1] == ']' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '{' \n        then return False\n    else if txt", "    txt = txt.trim()\n \
    \   if txt.length == 0 \n        then return false\n    else if txt[txt.length\
    \ - 1].isalpha()\n        then return true\n    else return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ false\n    else\n        txt[txt.size - 1] == \" \" || txt[txt.size - 1] ==\
    \ \"\\n\" || txt[txt.size - 1] == \"\\t\" || txt[txt.size - 1] == \"\\r\" || txt[txt.size\
    \ - 1] == \"\\v\" || txt[txt.size - 1] == \"\\f\" || txt[txt.size - 1] == \"\\\
    e\" || txt[txt.size - 1] == \"\\a\" || txt[txt.size - 1] == \"\\U\" || txt[txt.size\
    \ - 1] == \"\\L\" || txt[txt.size - 1] == \"\\N\" || txt[txt.size - 1] == \"\\\
    p\" || txt[txt.size - 1] == \"\\P\" || txt[txt.size - 1] == \"\\c\" || txt[txt.size\
    \ - 1] == \"\\C\" || txt[txt.size - 1] == \"\\e\" || txt[txt.size - 1] == \"\\\
    E\" || txt[txt.size - 1] == \"\\U\" || txt[txt.size - 1] == \"\\L\" || txt[txt.size\
    \ - 1] == \"\\N\" || txt[txt.size - 1] == \"\\p\" || txt[txt.size - 1] == \"\\\
    P\" || txt[txt.size - 1] == \"\\c\" || txt[txt.size - 1] == \"\\C\" || txt[txt.size\
    \ - 1] == \"\\e\" || txt[txt.size - 1] == \"\\E\" || txt[txt.size - 1] == \"\\\
    U\" || txt[txt.size - 1] == \"\\L\" || txt[txt.size - 1] == \"\\N\" || txt[txt.size\
    \ - 1] == \"\\p\" || txt[txt.size - 1] == \"\\P\" || txt[txt.size - 1] == \"\\\
    c\" || txt[txt.size - 1] == \"\\C\" || txt[txt.size - 1] == \"\\e\" || txt[txt.size\
    \ - 1] == \"\\E\" || txt[txt.size - 1] == \"\\U\" || txt[txt.size - 1] == \"\\\
    L\" || txt[txt.size - 1] == \"\\N\" || txt[txt.size - 1] == \"\\p\" || txt[txt.size\
    \ - 1] == \"\\P\" || txt[txt.size - 1] == \"\\c\" || txt[txt.size - 1] == \"\\\
    C\" || txt[txt.size - 1] == \"\\e\" || txt[txt.size - 1] == \"\\E\" || txt[txt.size\
    \ - 1] == \"\\U\" || txt[txt.size - 1] == \"\\L\" || txt[txt.size - 1] == \"\\\
    N\" || txt[txt.size - 1] == \"\\p\" || txt[txt.size - 1] == \"\\P\" || txt[txt.size\
    \ - 1] == \"\\", "    txt = txt.strip()\n    if txt.length == 0\n        false\n\
    \    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" ||\
    \ txt[txt.length-1] == \",\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False\n    else if txt[txt.length-1] == \" \"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"a\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"e\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"i\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"o\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"u\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"A\" \n        then return False\n    else if txt[txt.length-1] == \"E\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"I\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"O\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"U\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"0\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"1\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"2\" \n        then return False\n    else if txt[txt.length-1] == \"3\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"4\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"5\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"6\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"7\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"8\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"9\" \n        then return False\n    else if txt[txt.length-1] == \"_\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"-\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"+\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"/\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"(\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \")\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"{\" \n        then return False\n    else if txt[txt.length-1] == \"}\"\
    \ ", "    txt = txt.strip()\n    if txt.size == 0\n        false\n    else\n \
    \       txt[end-1] \u2208 alphabet \u2227 not txt[end-1] \u2208 word\n    end\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThanks for your answer! I guess\
    \ I should have been more clear about my question. My goal is to write a function\
    \ that checks if a character is alphabetic, but only if it is not part of a word.\
    \ For example, `check_if_last_char_is_a_letter(\"apple pi e \") \u279E False`\
    \ because `pi` is the last character of the string. `check_if_last_char_is_a_letter(\"\
    apple pi e\") \u279E True` because `e` is not the last character of the string.\
    \ `check_if_last_char_is_a_letter(\"apple pi e\") \u279E False` because `e` is\
    \ not the last character of the string. `check_if_last_char_is_a_letter(\"\")\
    \ \u279E False` because there is no last character of the string.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that checks if a character is\
    \ alphabetic, but only if it is not part of a word. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I guess I should have been more clear about my\
    \ question. My goal is to write a function that checks if a character is alphabetic,\
    \ but only if it is not part of a word. For example, `check_if_last_char_is_a_letter(\"\
    apple pi e \") \u279E False` because `pi` is the last character of the string.\
    \ `check_if_last_char_is_a_letter(\"apple pi e\") \u279E True` because `e` is\
    \ not the last character of the string. `check_if_last_char_is_a_letter(\"apple\
    \ pi e\") \u279E False` because `e` is not the last character of the string. `check_if_last_char_is_a_letter(\"\
    \") \u279E False` because there is no last character of the string.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that checks if a character is\
    \ alphabetic, but only if it is not part of a word. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I guess I should have been more clear about my\
    \ question. My goal is to write a function that checks if a character is alphabetic,\
    \ but only if it is not part of a word. For example, `check_if_last_char", " \
    \   txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n \
    \   txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length -\
    \ 1] == txt[txt.length - 1].upper() \n        and txt[txt.length - 1] != \" \"\
    \ \n        and txt[txt.length - 1] != \".\" \n        and txt[txt.length - 1]\
    \ != \"!\" \n        and txt[txt.length - 1] != \"?\" \n        and txt[txt.length\
    \ - 1] != \"-\" \n        and txt[txt.length - 1] != \"_\" \n        and txt[txt.length\
    \ - 1] != \"~\" \n        and txt[txt.length - 1] != \"!\" \n        and txt[txt.length\
    \ - 1] != \"?\" \n        and txt[txt.length - 1] != \"-\" \n        and txt[txt.length\
    \ - 1] != \"_\" \n        and txt[txt.length - 1] != \"~\" \n        and txt[txt.length\
    \ - 1] != \"!\" \n        and txt[txt.length - 1] != \"?\" \n        and txt[txt.length\
    \ - 1] != \"-\" \n        and txt[txt.length - 1] != \"_\" \n        and txt[txt.length\
    \ - 1] != \"~\" \n        and txt[txt.length - 1] != \"!\" \n        and txt[txt.length\
    \ - 1] != \"?\" \n        and txt[txt.length - 1] != \"-\" \n        and txt[txt.length\
    \ - 1] != \"_\" \n        and txt[txt.length - 1] != \"~\" \n        and txt[txt.length\
    \ - 1] != \"!\" \n        and txt[txt.length - 1] != \"?\" \n        and txt[txt.length\
    \ - 1] != \"-\" \n        and txt[txt.length - 1] != \"_\" \n        and txt[txt.length\
    \ - 1] != \"~\" \n        and txt[txt.length - 1] != \"!\" \n        and txt[txt.length\
    \ - 1] != \"?\" \n        and txt[txt.length - 1] != \"-\" \n        and txt[txt.length\
    \ - 1] != \"_\" \n        and txt[txt.length - 1] != \"~\" \n        and txt[txt.length\
    \ - 1] != \"!\" \n        and txt[txt.length - 1] != \"?\" \n        and txt[txt.length\
    \ - 1] != \"-\" \n        and txt[txt.length - 1] != \"_\" \n        and txt[txt.length\
    \ - 1] != \"~\" \n        and txt[txt.length - 1] != \"!\" \n        and txt[txt.length\
    \ - 1] != \"?\" \n        and txt[txt.length - 1] != \"-\" \n        and txt[txt.length\
    \ - 1] != \"_\" \n        and txt[txt.length - 1] != \"~\" \n        and txt[txt.length\
    \ - 1] != \"!\" \n        and txt[txt.length - 1] != \"?\" \n        and txt[txt.length\
    \ - 1] != \"-\" \n        and txt[txt.length - 1] != \"_\" \n        and txt[txt.length\
    \ - 1] != \"~\" \n        and txt[txt.length - 1] != \"!\" \n        and txt[txt.length",
  "    txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n       \
    \ txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \"\\n\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    \n    if txt.length == 0 \n        then\
    \ return False \n    else if txt[txt.length - 1] == ' ' \n        then return\
    \ False \n    else if txt[txt.length - 1] == '.' \n        then return False \n\
    \    else if txt[txt.length - 1] == '?' \n        then return False \n    else\
    \ if txt[txt.length - 1] == '!' \n        then return False \n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False \n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False \n    else if txt[txt.length - 1] == '/' \n\
    \        then return False \n    else if txt[txt.length - 1] == '\\\\' \n    \
    \    then return False \n    else if txt[txt.length - 1] == '$' \n        then\
    \ return False \n    else if txt[txt.length - 1] == '%' \n        then return\
    \ False \n    else if txt[txt.length - 1] == '&' \n        then return False \n\
    \    else if txt[txt.length - 1] == '*' \n        then return False \n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False \n    else if txt[txt.length\
    \ - 1] == '^' \n        then return False \n    else if txt[txt.length - 1] ==\
    \ '<' \n        then return False \n    else if txt[txt.length - 1] == '>' \n\
    \        then return False \n    else if txt[txt.length - 1] == '|' \n       \
    \ then return False \n    else if txt[txt.length - 1] == '~' \n        then return\
    \ False \n    else if txt[txt.length - 1] == '?' \n        then return False \n\
    \    else if txt[txt.length - 1] == '!' \n        then return False \n    else\
    \ if txt[txt.length - 1] == '.' \n        then return False \n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False \n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return False \n    else if txt[txt.length - 1] == '/' \n\
    \        then return False \n    else if txt[txt.length - 1] == '\\\\' \n    \
    \    then return False \n    else if txt[txt.length - 1] == '$' \n        then\
    \ return False \n    else if txt[txt.length - 1] == '%' \n        then return\
    \ False \n    else if txt[txt.length - 1] == '&' \n        then return False \n\
    \    else if txt[txt.length - 1] == '*' \n        then return False \n    else\
    \ if txt[txt.length", "    txt = txt.trim()\n    if txt.length == 0 \n       \
    \ then return False\n    else if txt[txt.length-1] == \" \" \n        then return\
    \ False\n    else if txt[txt.length-1] in \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     then return False\n    else return True\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt.size == 0\n        false\n  \
    \  elseif txt.size == 1\n        txt.head == txt.last\n    else\n        txt.head\
    \ == txt.last.head && check_if_last_char_is_a_letter(txt.tail)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   then return false\n    else if txt[txt.length - 1] == ' ' \n        then return\
    \ false\n    else if txt[txt.length - 1] == '.' \n        then return false\n\
    \    else if txt[txt.length - 1] == '?' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '!' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '_' \n        then return false\n    else if txt[txt.length - 1] == '/' \n \
    \       then return false\n    else if txt[txt.length - 1] == '\\\\' \n      \
    \  then return false\n    else if txt[txt.length - 1] == '@' \n        then return\
    \ false\n    else if txt[txt.length - 1] == '$' \n        then return false\n\
    \    else if txt[txt.length - 1] == '%' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '^' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '&' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '*' \n        then return false\n    else if txt[txt.length - 1] == '('\n  \
    \      then return false\n    else if txt[txt.length - 1] == ')' \n        then\
    \ return false\n    else if txt[txt.length - 1] == '+' \n        then return false\n\
    \    else if txt[txt.length - 1] == '-' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '=' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '|' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '[' \n        then return false\n    else if txt[txt.length - 1] == ']' \n \
    \       then return false\n    else if txt[txt.length - 1] == '{' \n        then\
    \ return false\n    else if txt[txt.length - 1] == '}' \n        then return false\n\
    \    else if txt[txt.length - 1] == '<' \n        then return false\n    else\
    \ if txt[txt.length - 1] == '>' \n        then return false\n    else if txt[txt.length\
    \ - 1] == '?' \n        then return false\n    else if txt[txt.length - 1] ==\
    \ '!' \n        then return false\n    else if txt[txt.length - 1] == '.' \n \
    \       then return false\n    else if ", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '.' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '^' \n        then return False\n\
    \    else if txt[txt.length - 1] == '%' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '&' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '('\n        then return False\n    else if txt[txt.length - 1] == ')'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '[' \n     \
    \   then return False\n    else if txt[txt.length - 1] == ']' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '{' \n        then return False\n\
    \    else if txt[txt.length - 1] == '}' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '|' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '+' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '=' \n        then return False\n    else if txt[txt.length - 1] == '<' \n \
    \       then return False\n    else if txt[txt.length - 1] == '>' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '?' \n        then return False\n\
    \    else if txt[txt.length - 1] == '!' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '-' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '_' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '/' \n        then return False\n    else if txt[txt.length - 1] == '\\\\' \n\
    \        then return False\n    else if ", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length-1] == \" \" \n\
    \        then return False\n    else if txt[txt.length-1] == \"_\" \n        then\
    \ return False\n    else if txt[txt.length-1] == \"-\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"/\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"\\\\\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"?\" \n        then return False\n    else if txt[txt.length-1] == \"!\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"$\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"%\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"^\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"&\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"*\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"(\"\n        then return False\n    else if txt[txt.length-1] == \")\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"-\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"_\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"+\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"=\"\n        then return False\n    else if\
    \ txt[txt.length-1] == \"{\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"}\" \n        then return False\n    else if txt[txt.length-1] == \"[\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"]\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"|\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"~\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"<\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \">\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"?\" \n        then return False\n    else if txt[txt.length-1] == \"/\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"\\\\\" \n  \
    \      then return False\n    else if txt", "    txt = txt.split(\" \")\n    txt\
    \ = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.last\n  \
    \  txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n",
  "    \n    if txt.last == \" \" \n        then return False\n        else return\
    \ True\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.last\n  \
    \  txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n",
  "    txt = txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt =\
    \ txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n   \
    \ txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n\
    \    txt = txt.last\n    txt = ", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt.ends_with?(\"\
    \ \") \n        then return False\n    else if txt.ends_with?(\",\") \n      \
    \  then return False\n    else if txt.ends_with?(\".\")\n        then return False\n\
    \    else if txt.ends_with?(\"!\")\n        then return False\n    else if txt.ends_with?(\"\
    ?\")\n        then return False\n    else if txt.ends_with?(\";\")\n        then\
    \ return False\n    else if txt.ends_with?(\":\")\n        then return False\n\
    \    else if txt.ends_with?(\"'\")\n        then return False\n    else if txt.ends_with?(\"\
    $\")\n        then return False\n    else if txt.ends_with?(\"%\")\n        then\
    \ return False\n    else if txt.ends_with?(\"&\")\n        then return False\n\
    \    else if txt.ends_with?(\"*\")\n        then return False\n    else if txt.ends_with?(\"\
    (\")\n        then return False\n    else if txt.ends_with?(\")\")\n        then\
    \ return False\n    else if txt.ends_with?(\"+\")\n        then return False\n\
    \    else if txt.ends_with?(\"-\")\n        then return False\n    else if txt.ends_with?(\"\
    =\")\n        then return False\n    else if txt.ends_with?(\"\xA3\")\n      \
    \  then return False\n    else if txt.ends_with?(\"\xAC\")\n        then return\
    \ False\n    else if txt.ends_with?(\"\xBD\")\n        then return False\n   \
    \ else if txt.ends_with?(\"\xBC\")\n        then return False\n    else if txt.ends_with?(\"\
    \xBE\")\n        then return False\n    else if txt.ends_with?(\"\u20AC\")\n \
    \       then return False\n    else if txt.ends_with?(\"\u20B9\")\n        then\
    \ return False\n    else if txt.ends_with?(\"\u20BA\")\n        then return False\n\
    \    else if txt.ends_with?(\"\u20B8\")\n        then return False\n    else if\
    \ txt.ends_with?(\"\u20B9\")\n        then return False\n    else if ", "    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == ' ' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\n' \n        then return False\n    else if txt[txt.length - 1] == '\\t'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '\\r' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '\\v' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\f' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\a' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\e' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\z' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\Z' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\0' \n        then return False\n    else if txt[txt.length - 1] == '\\9'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '\\1' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '\\2' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\3' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\4' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\5' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\6' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\7' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\8' \n        then return False\n    else if txt[txt.length - 1] == '\\9'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '\\10' \n  \
    \      then return False\n    else if txt[txt.length - 1] == '\\11' \n       \
    \ then return False\n    else if txt[txt.length - 1] == '\\12' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\13' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\14' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\15' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\16' \n        then return False\n    else if txt[txt.length",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.strip()\n    if txt.size == 0\n        return false\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]",
  "    \n    if txt.length == 0 \n        then return False \n    else if txt[txt.length-1]\
    \ == \" \" \n        then return False \n    else if txt[txt.length-1] == \".\"\
    \ \n        then return False \n    else if txt[txt.length-1] == \",\" \n    \
    \    then return False \n    else if txt[txt.length-1] == \"?\" \n        then\
    \ return False \n    else if txt[txt.length-1] == \"!\" \n        then return\
    \ False \n    else if txt[txt.length-1] == \"-\" \n        then return False \n\
    \    else if txt[txt.length-1] == \"_\" \n        then return False \n    else\
    \ if txt[txt.length-1] == \"/\" \n        then return False \n    else if txt[txt.length-1]\
    \ == \"(\" \n        then return False \n    else if txt[txt.length-1] == \")\"\
    \ \n        then return False \n    else if txt[txt.length-1] == \"{\" \n    \
    \    then return False \n    else if txt[txt.length-1] == \"}\" \n        then\
    \ return False \n    else if txt[txt.length-1] == \"[\" \n        then return\
    \ False \n    else if txt[txt.length-1] == \"]\" \n        then return False \n\
    \    else if txt[txt.length-1] == \"{\" \n        then return False \n    else\
    \ if txt[txt.length-1] == \"}\" \n        then return False \n    else if txt[txt.length-1]\
    \ == \"[\" \n        then return False \n    else if txt[txt.length-1] == \"]\"\
    \ \n        then return False \n    else if txt[txt.length-1] == \"<\" \n    \
    \    then return False \n    else if txt[txt.length-1] == \">\" \n        then\
    \ return False \n    else if txt[txt.length-1] == \"|\" \n        then return\
    \ False \n    else if txt[txt.length-1] == \"\\\\\" \n        then return False\
    \ \n    else if txt[txt.length-1] == \"^\" \n        then return False \n    else\
    \ if txt[txt.length-1] == \"~\" \n        then return False \n    else if txt[txt.length-1]\
    \ == \"*\" \n        then return False \n    else if txt[txt.length-1] == \"?\"\
    \ \n        then return False \n    else if txt[txt.length-1] == \"!\" \n    \
    \    then return False \n    else if txt[txt.length-1] == \"-\" \n        then\
    \ return False \n    else if txt[txt.length-1] == \"_\" \n        then return\
    \ False \n    else if txt[txt.length-1]", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0\n        false\n    else\n        txt[txt.length - 1]\
    \ == \" \" || txt[txt.length - 1] == \".\" || txt[txt.length - 1] == \",\" ||\
    \ txt[txt.length - 1] == \"?\" || txt[txt.length - 1] == \"!\" || txt[txt.length\
    \ - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length - 1] == \"/\"\
    \ || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"|\" || txt[txt.length\
    \ - 1] == \"[\" || txt[txt.length - 1] == \"]\" || txt[txt.length - 1] == \"{\"\
    \ || txt[txt.length - 1] == \"}\" || txt[txt.length - 1] == \"~\" || txt[txt.length\
    \ - 1] == \"*\" || txt[txt.length - 1] == \"(\" || txt[txt.length - 1] == \")\"\
    \ || txt[txt.length - 1] == \"$\" || txt[txt.length - 1] == \"%\" || txt[txt.length\
    \ - 1] == \"^\" || txt[txt.length - 1] == \"&\" || txt[txt.length - 1] == \"*\"\
    \ || txt[txt.length - 1] == \"+\" || txt[txt.length - 1] == \"-\" || txt[txt.length\
    \ - 1] == \"=\" || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \"<\"\
    \ || txt[txt.length - 1] == \">\" || txt[txt.length - 1] == \"?\" || txt[txt.length\
    \ - 1] == \"!\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"*\" || txt[txt.length\
    \ - 1] == \"(\" || txt[txt.length - 1] == \")\" || txt[txt.length - 1] == \"$\"\
    \ || txt[txt.length - 1] == \"%\" || txt[txt.length - 1] == \"^\" || txt[txt.length\
    \ - 1] == \"&\" || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"+\"\
    \ || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"=\" || txt[txt.length\
    \ - 1] == \"|\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\"\
    \ || txt[txt.length - 1] == \"?\" || txt[txt.length - 1] == \"!\" || txt[txt.length\
    \ - 1] == \"{\" || txt[txt.length - 1] == \"}\" || txt[txt.length - 1] == \"~\"\
    \ || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"(\" || txt[txt.length\
    \ - 1] == \")\" || txt[txt.length - 1] == \"$\" || txt[txt.length - 1] == \"%\"\
    \ || txt[txt.length - 1] == \"^\" || txt[txt.length - 1] == \"&\" || txt[txt.length\
    \ - 1] == \"*\" || txt[txt.length - 1]", "    \n    txt = txt.split(\" \")\n \
    \   \n    txt = txt[txt.length-1]\n    \n    if txt.isalpha() == true and txt\
    \ != \" \" \n    \n    else \n    \n    return false\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n", "    txt = txt.strip()\n    if txt.size == 0\n     \
    \   false\n    elseif txt.size == 1\n        txt[end-1] == \" \"\n    else\n \
    \       txt[end-1] == \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = ", "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    ", "    \n    if txt == \"\"\n        false\n\
    \    else\n        txt[end-1] == \" \" || txt[end-1] == \".\" || txt[end-1] ==\
    \ \"!\" || txt[end-1] == \"?\" || txt[end-1] == \"-\" || txt[end-1] == \"_\" ||\
    \ txt[end-1] == \"~\" || txt[end-1] == \"\xA9\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[end-1]\
    \ == \"\xA7\" || txt[end-1] == \"\xB6\" || txt[end-1] == \"\xAE\" || txt[", " \
    \   txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n \
    \   txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    \n    if txt.length == 0 \n        then return False\n    else\
    \ if txt[txt.length - 1] == ' ' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '.' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '?' \n        then return False\n    else if txt[txt.length - 1] == '!' \n \
    \       then return False\n    else if txt[txt.length - 1] == '-' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '_' \n        then return False\n\
    \    else if txt[txt.length - 1] == '/' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\\\' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '$' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '%' \n        then return False\n    else if txt[txt.length - 1] == '&' \n \
    \       then return False\n    else if txt[txt.length - 1] == '*' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '('\n        then return False\n\
    \    else if txt[txt.length - 1] == ')' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '+' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '-' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '.' \n        then return False\n    else if txt[txt.length - 1] == '?' \n \
    \       then return False\n    else if txt[txt.length - 1] == '!' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '-' \n        then return False\n\
    \    else if txt[txt.length - 1] == '_' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '/' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\\\' \n        then return False\n    else if txt[txt.length - 1]\
    \ == '$' \n        then return False\n    else if txt[txt.length - 1] == '%' \n\
    \        then return False\n    else if txt[txt.length - 1] == '&' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '*' \n        then return False\n\
    \    else if txt[txt.length - 1] == '('\n        then return False\n    else if\
    \ txt[txt.length - 1] == ')' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '", "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n", "    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = txt.chars\n    txt = txt[end]\n\
    \    txt = txt.chars\n    txt = txt[end]\n    txt = ", "    txt = txt.trim()\n\
    \    if txt.length == 0\n        false\n    else\n        txt[txt.length-1] ==\
    \ ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.lower()\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.lower()\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.lower()\n    \n", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        then return False\n    else if txt[txt.length - 1] == ' ' \n\
    \        then return False\n    else if txt[txt.length - 1] == '\\n' \n      \
    \  then return False\n    else if txt[txt.length - 1] == '\\t' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\r' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\v' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\f' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\a' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\e' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\z' \n        then return False\n    else if txt[txt.length - 1] == '\\Z'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '\\E' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '\\W' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\L' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\p' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\P' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\c' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\C' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\C' \n        then return False\n    else if txt[txt.length - 1] == '\\C'\
    \ \n        then return False\n    else if txt[txt.length - 1] == '\\C' \n   \
    \     then return False\n    else if txt[txt.length - 1] == '\\C' \n        then\
    \ return False\n    else if txt[txt.length - 1] == '\\C' \n        then return\
    \ False\n    else if txt[txt.length - 1] == '\\C' \n        then return False\n\
    \    else if txt[txt.length - 1] == '\\C' \n        then return False\n    else\
    \ if txt[txt.length - 1] == '\\C' \n        then return False\n    else if txt[txt.length\
    \ - 1] == '\\C' \n        then return False\n    else if txt[txt.length - 1] ==\
    \ '\\C' \n        then return False\n    else if txt[txt.length - 1] == '\\C' ",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    txt = txt.split(\" \")\n    \n    txt = txt.last\n    \n    txt\
    \ = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n   \
    \ txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n\
    \    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n  \
    \  \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last\n", "    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = txt[end]\n    \n    if txt.isalpha() == True and txt != \" \":\n        return\
    \ True\n    else:\n        return False\n    \n\"\"\"\n    Create a function that\
    \ returns True if the last character\n    of a given string is a digit and is\
    \ not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    \n    if txt.length == 0 \n       \
    \ then return False\n    else if txt[txt.length-1] == \" \" \n        then return\
    \ False\n    else if txt[txt.length-1] == \".\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"!\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"-\" \n        then return False\n    else if txt[txt.length-1] == \"_\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"/\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"[\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"]\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"{\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"}\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"|\" \n        then return False\n    else if txt[txt.length-1] == \"\\\\\
    \" \n        then return False\n    else if txt[txt.length-1] == \"^\" \n    \
    \    then return False\n    else if txt[txt.length-1] == \"~\" \n        then\
    \ return False\n    else if txt[txt.length-1] == \"*\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"(\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \")\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"%\" \n        then return False\n    else if txt[txt.length-1] == \"+\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"=\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"<\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \">\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"!\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"-\" \n        then return False\n    else if txt[txt.length-1] == \"_\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"/\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"[\" \n        then return\
    \ False\n    else if txt[txt.length-1] == ", "    \n    if txt.length == 0 \n\
    \        then return False \n    else \n        txt[txt.length-1] == ' ' \n  \
    \          || txt[txt.length-1] == '\\t' \n            || txt[txt.length-1] ==\
    \ '\\n' \n            || txt[txt.length-1] == '\\r' \n            || txt[txt.length-1]\
    \ == '\\0' \n            || txt[txt.length-1] == '\\a' \n            || txt[txt.length-1]\
    \ == '\\e' \n            || txt[txt.length-1] == '\\i' \n            || txt[txt.length-1]\
    \ == '\\o' \n            || txt[txt.length-1] == '\\u'\n            || txt[txt.length-1]\
    \ == '\\v' \n            || txt[txt.length-1] == '\\f'\n            || txt[txt.length-1]\
    \ == '\\N' \n            || txt[txt.length-1] == '\\L' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n            || txt[txt.length-1]\
    \ == '\\P' \n            || txt[txt.length-1] == '\\p' \n", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        false\n    else\n        txt.ends_with?(\" \") &&\
    \ txt.ends_with?(\"a\") && txt.ends_with?(\"e\") && txt.ends_with?(\"i\") && txt.ends_with?(\"\
    o\") && txt.ends_with?(\"u\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.size ==\
    \ 0\n        return false\n    \n    if txt.size == 1\n        return true\n \
    \   \n    if txt.last == ' '\n        return false\n    \n    if txt.last == '.'\n\
    \        return false\n    \n    if txt.last == '?'\n        return false\n  \
    \  \n    if txt.last == '!'\n        return false\n    \n    if txt.last == '-'\n\
    \        return false\n    \n    if txt.last == '_'\n        return false\n  \
    \  \n    if txt.last == '='\n        return false\n    \n    if txt.last == '+'\n\
    \        return false\n    \n    if txt.last == '*'\n        return false\n  \
    \  \n    if txt.last == '/'\n        return false\n    \n    if txt.last == '('\n\
    \        return false\n    \n    if txt.last == ')'\n        return false\n  \
    \  \n    if txt.last == '{'\n        return false\n    \n    if txt.last == '}'\n\
    \        return false\n    \n    if txt.last == '['\n        return false\n  \
    \  \n    if txt.last == ']'\n        return false\n    \n    if txt.last == '|'\n\
    \        return false\n    \n    if txt.last == ';'\n        return false\n  \
    \  \n    if txt.last == ':'\n        return false\n    \n    if txt.last == '\"\
    '\n        return false\n    \n    if txt.last == '\"'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '&'\n        return false\n    \n    if txt.last == '%'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '%'\n        return false\n    \n    if txt.last == '%'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '%'\n        return false\n    \n    if txt.last == '%'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '%'\n        return false\n    \n    if txt.last == '%'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '%'\n        return false\n    \n    if txt.last == '%'\n        return false\n\
    \    \n    if txt.last == '%'\n        return false\n    \n    if txt.last ==\
    \ '%'\n        return false\n    \n    if txt.last == '%'\n        return false\n",
  "    txt = txt.trim()\n    if txt.length == 0 \n        then return False\n    else\
    \ if txt[txt.length - 1] == \" \" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\n\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"\\r\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    \\t\" \n        then return False\n    else if txt[txt.length - 1] == \"\\v\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"\\f\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"\\e\" \n     \
    \   then return False\n    else if txt[txt.length - 1] == \"\\\"\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\'\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\\\\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"%\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"&\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"'\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"(\" \n        then return False\n    else if txt[txt.length - 1] == \")\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \",\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"-\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \".\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \":\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"/\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"[\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"]\" \n        then return False\n    else if txt[txt.length - 1] == \"{\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"}\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"|\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"~\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"^\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"_\" \n        then return False", "    \n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1]\
    \ == ' ' \n        then return False\n    else if txt[txt.length-1] == 'a' \n\
    \        || txt[txt.length-1] == 'e' \n        || txt[txt.length-1] == 'i' \n\
    \        || txt[txt.length-1] == 'o' \n        || txt[txt.length-1] == 'u' \n\
    \        then return True\n    else \n        txt[txt.length-1] == 'w'\n     \
    \   || txt[txt.length-1] == 'o'\n        || txt[txt.length-1] == 'r'\n       \
    \ || txt[txt.length-1] == 'd'\n        || txt[txt.length-1] == 't'\n        ||\
    \ txt[txt.length-1] == 'h'\n        || txt[txt.length-1] == 'e'\n        || txt[txt.length-1]\
    \ == 'a'\n        || txt[txt.length-1] == 'p'\n        || txt[txt.length-1] ==\
    \ 'i'\n        || txt[txt.length-1] == 'n'\n        || txt[txt.length-1] == 's'\n\
    \        || txt[txt.length-1] == 'e'\n        || txt[txt.length-1] == 'y'\n  \
    \      || txt[txt.length-1] == 'u'\n        || txt[txt.length-1] == 'i'\n    \
    \    || txt[txt.length-1] == 'o'\n        || txt[txt.length-1] == 'r'\n      \
    \  || txt[txt.length-1] == 'd'\n        || txt[txt.length-1] == 't'\n        ||\
    \ txt[txt.length-1] == 'h'\n        || txt[txt.length-1] == 'a'\n        || txt[txt.length-1]\
    \ == 'p'\n        || txt[txt.length-1] == 'e'\n        || txt[txt.length-1] ==\
    \ 'n'\n        || txt[txt.length-1] == 's'\n        || txt[txt.length-1] == 'a'\n\
    \        || txt[txt.length-1] == 'l'\n        || txt[txt.length-1] == 'e'\n  \
    \      || txt[txt.length-1] == 'd'\n        || txt[txt.length-1] == 'o'\n    \
    \    || txt[txt.length-1] == 'r'\n        || txt[txt.length-1] == 'h'\n      \
    \  || txt[txt.length-1] == 'a'\n        || txt[txt.length-1] == 'p'\n        ||\
    \ txt[txt.length-1] == 'e'\n        || txt[txt.length-1] == 'n'\n        || txt[txt.length-1]\
    \ == 's'\n        || txt[txt.length-1] == 'a'\n        || txt[txt.length-1] ==\
    \ 'l'\n        || ", "    txt = txt.trim()\n    if txt.length == 0 \n        then\
    \ return False\n    else if txt[txt.length - 1].isalpha()\n        then return\
    \ False\n    else if txt[txt.length - 1] == \" \" \n        then return False\n\
    \    else return True\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0\n        false\n    else\n        txt[txt.length-1] ==\
    \ \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\N\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\c\" || txt[txt.length-1] == \"\\C\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\E\" || txt[txt.length-1] == \"\\U\" || txt[txt.length-1]\
    \ == \"\\L\" || txt[txt.length-1] == \"\\N\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\c\" || txt[txt.length-1]\
    \ == \"\\C\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\E\" ||\
    \ txt[txt.length-1] == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1]\
    \ == \"\\N\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\c\" || txt[txt.length-1] == \"\\C\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\E\" || txt[txt.length-1] == \"\\U\" ||\
    \ txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\N\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\c\" ||\
    \ txt[txt.length-1] == \"\\C\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\E\" || txt[txt.length-1] == \"\\U\" || txt[txt.length-1] == \"\\L\" ||\
    \ txt[txt.length-1] == \"\\N\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\c\" || txt[txt.length-1] == \"\\C\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\E\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length-1].isalpha()\n\
    \        then return False\n    else \n        txt = txt.split(\" \")\n      \
    \  for i in txt\n            if i[txt.length-1].isalpha()\n                then\
    \ return False\n    else \n        txt = txt.split(\" \")\n        for i in txt\n\
    \            if i[txt.length-1].isalpha()\n                then return True\n\
    \    end\nend\n</code>\n<|/ a tags=julia,string,regex |>\n<| c |>\nThanks for\
    \ your answer. Your code works fine for me. However I realized that my code was\
    \ wrong. I am going to edit my question to reflect my mistake.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to reflect your edit. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Your code works fine for me. However I realized\
    \ that my code was wrong. I am going to edit my question to reflect my mistake.\n\
    <|/ c |>\n<| a dscore=1 |>\nYou can use the following regex:\n<code>\n\"^[^a-zA-Z]*$\"\
    \n</code>\nThis matches any string that does not contain any letters.\n<|/ a tags=julia,string,regex\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for me. However I\
    \ realized that my code was wrong. I am going to edit my question to reflect my\
    \ mistake.\n<|/ c |>\n<| a |>\nYou can use the following regex:\n<code>\n\"^[^a-zA-Z]*$\"\
    \n</code>\nThis matches any string that does not contain any letters.\n<|/ a tags=julia,string,regex\
    \ dscore=1 |>\n<| a dscore=1 |>\nThis should work:\n<code>", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt\
    \ == \"\"\n        false\n    else\n        txt[end-1] \u2208 letters || txt[end-1]\
    \ \u2208 spaces\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        false\n    else\n        txt[txt.size - 1] == \"\
    \ \" || txt[txt.size - 1] == \"\\n\" || txt[txt.size - 1] == \"\\t\" || txt[txt.size\
    \ - 1] == \"\\r\" || txt[txt.size - 1] == \"\\v\" || txt[txt.size - 1] == \"\\\
    f\" || txt[txt.size - 1] == \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0 \n        then return False\n\
    \    else if txt[txt.length - 1] == \" \" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\n\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"\\t\" \n        then return False\n    else if txt[txt.length - 1]\
    \ == \"\\r\" \n        then return False\n    else if txt[txt.length - 1] == \"\
    \\v\" \n        then return False\n    else if txt[txt.length - 1] == \"\\f\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"\\e\" \n \
    \       then return False\n    else if txt[txt.length - 1] == \"\\\"\" \n    \
    \    then return False\n    else if txt[txt.length - 1] == \"\\'\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\\\\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"%\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"&\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"'\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"(\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \")\" \n        then return False\n    else if txt[txt.length - 1] == \",\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \".\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \":\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"<\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \">\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"?\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"/\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"[\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"]\" \n        then return False\n    else if txt[txt.length - 1] == \"{\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"}\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"|\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"~\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"^\" \n        then return False",
  "    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        then return False\n    else if txt[txt.length\
    \ - 1] == \" \" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"\\n\" \n        then return False\n    else if txt[txt.length - 1] == \"\\\
    t\" \n        then return False\n    else if txt[txt.length - 1] == \"\\r\" \n\
    \        then return False\n    else if txt[txt.length - 1] == \"\\v\" \n    \
    \    then return False\n    else if txt[txt.length - 1] == \"\\f\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"\\e\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"\\\"\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"\\'\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"\\\\\" \n        then return False\n    else if\
    \ txt[txt.length - 1] == \"%\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"&\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"'\" \n        then return False\n    else if txt[txt.length - 1] == \"(\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \")\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \",\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \".\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"/\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"0\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"1\" \n        then return False\n    else if txt[txt.length\
    \ - 1] == \"2\" \n        then return False\n    else if txt[txt.length - 1] ==\
    \ \"3\" \n        then return False\n    else if txt[txt.length - 1] == \"4\"\
    \ \n        then return False\n    else if txt[txt.length - 1] == \"5\" \n   \
    \     then return False\n    else if txt[txt.length - 1] == \"6\" \n        then\
    \ return False\n    else if txt[txt.length - 1] == \"7\" \n        then return\
    \ False\n    else if txt[txt.length - 1] == \"8\" \n        then return False\n\
    \    else if txt[txt.length - 1] == \"9\" \n        then return False\n    else\
    \ if txt[txt.length - 1] == \"-\" \n        then return False\n    ", "    txt\
    \ = txt.trim()\n    if txt.length == 0 \n        then return False\n    else if\
    \ txt[txt.length-1] == \" \" \n        then return False\n    else if txt[txt.length-1]\
    \ == \".\" \n        then return False\n    else if txt[txt.length-1] == \",\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"?\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"!\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"'\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"-\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"_\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"/\" \n        then return False\n    else if txt[txt.length-1] == \"[\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"]\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"{\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"}\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"{\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"(\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \")\" \n        then return False\n    else if txt[txt.length-1] == \"*\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"&\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"%\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"$\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"#\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"@\" \n        then return False\n    else if txt[txt.length-1]\
    \ == \"^\" \n        then return False\n    else if txt[txt.length-1] == \"~\"\
    \ \n        then return False\n    else if txt[txt.length-1] == \"`\" \n     \
    \   then return False\n    else if txt[txt.length-1] == \"-\" \n        then return\
    \ False\n    else if txt[txt.length-1] == \"+\" \n        then return False\n\
    \    else if txt[txt.length-1] == \"=\" \n        then return False\n    else\
    \ if txt[txt.length-1] == \"<\" \n        then return False\n    else if ", " \
    \   txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n      \
    \  txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] ==\
    \ '?' || txt[txt.length-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n    txt = txt.last\n\
    \    txt = txt.last\n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
