language: d
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q[];\n        q_rev.reverse();\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfxpyqs8e.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxpyqs8e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0) \n \
    \       return true;\n    if (q.length == 1) \n        return q[0] <= w;\n   \
    \ long sum = 0;\n    foreach (e; q) \n        sum += e;\n    if (sum > w) \n \
    \       return false;\n    long max = max(q);\n    if (max * q.length > w) \n\
    \        return false;\n    return q == q.dup.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuux3nnw2.d(37): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpuux3nnw2.d(40): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuux3nnw2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = 0L;\n    foreach(i;\
    \ q)\n        sum += i;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnwbt57t.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnwbt57t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0qdq9tb.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0qdq9tb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return (sum <= w) && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxp_0ki2.d(31): Error: undefined identifier `isPalindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxp_0ki2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm6e7ucc.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm6e7ucc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q;\n        q2.reverse();\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_5yhnqq.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_5yhnqq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return (sum <= w) && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxp_0ki2.d(31): Error: undefined identifier `isPalindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxp_0ki2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(el;\
    \ q)\n    {\n        sum += el;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return q.equal(q.dup.reverse);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8qo6bax.d(39): Error: no property `equal` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8qo6bax.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswxj3ptq.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswxj3ptq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpznxo3igg.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznxo3igg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q == q.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i8vmzti.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i8vmzti.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2wwbxyw.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2wwbxyw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    foreach(e;\
    \ q)\n    {\n        if(e > w)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy3m9oty4.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x4281e5]\n??:? void tmpy3m9oty4.__unittest_L40_C1() [0x427e38]\n??:?
    void tmpy3m9oty4.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428634]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285bb]\n??:? _d_run_main [0x428526]\n??:? main [0x427f7b]\n??:?
    __libc_start_main [0xdbc41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0p5mp90g.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p5mp90g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = 0L;\n    foreach(i;\
    \ q)\n        sum += i;\n    if(sum > w)\n        return false;\n    auto half\
    \ = q.length / 2;\n    foreach(i; 0..half)\n        if(q[i] != q[q.length - i\
    \ - 1])\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    return q\
    \ == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n  \
    \  assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi0v5ljz.d(33): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfi0v5ljz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdyx4szt.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdyx4szt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0)\n  \
    \      return true;\n    if (q.length == 1)\n        return q[0] <= w;\n    if\
    \ (q.length % 2 == 0)\n        return false;\n    long sum = 0;\n    foreach (i,\
    \ e; q)\n        sum += e;\n    if (sum > w)\n        return false;\n    long\
    \ half = q.length / 2;\n    for (long i = 0; i < half; i++)\n        if (q[i]\
    \ != q[q.length - i - 1])\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjhynxl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    int i = 0;\n\
    \    int j = q.length - 1;\n    while(i < j)\n    {\n        if(q[i] != q[j])\n\
    \            return false;\n        i++;\n        j--;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbi6f80z2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    return q\
    \ == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n  \
    \  assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi0v5ljz.d(33): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfi0v5ljz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // your code here\n   \
    \ long sum = 0;\n    foreach(i; q)\n    {\n        sum += i;\n    }\n    if(sum\
    \ > w)\n    {\n        return false;\n    }\n    else if(sum <= w)\n    {\n  \
    \      long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum_a1lom.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto q_sum = q.sum;\n \
    \   auto q_len = q.length;\n    auto q_is_palindrome = q.isPalindrome;\n    return\
    \ (q_sum <= w) && q_is_palindrome;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27t4p8wb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz1jxzx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    return (sum <= w) && (q == q.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvp562tb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reverse = q[];\n        q_reverse.reverse();\n\
    \        if(q == q_reverse)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa61v3va6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return q.equal(q.reverse);\n    }\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpes66wd66.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0qdq9tb.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0qdq9tb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_reversed = q.dup.reverse;\n        return q == q_reversed;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkjmhlrj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    long[] q_reversed\
    \ = q.dup;\n    q_reversed.reverse;\n    return q == q_reversed;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuaoylzr9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswxj3ptq.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswxj3ptq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxtwd6b_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhzb74um.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reversed = q.dup;\n       \
    \ q_reversed.reverse;\n        if(q == q_reversed)\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_alydgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_copy = q.dup;\n        q_copy.reverse;\n\
    \        return q == q_copy;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7nhbgqa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_copy = q.dup;\n        q_copy.reverse;\n\
    \        return q == q_copy;\n    }\n}\n/*\n    Write a function that returns\
    \ the number of ways to split the object q into two objects, a and b, such that\
    \ the sum of the elements of a is equal to the sum of the elements of b.\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8dloj1k.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpt8dloj1k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv4c4o5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    return q\
    \ == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n  \
    \  assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi0v5ljz.d(33): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfi0v5ljz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // your code here\n   \
    \ long sum = 0;\n    foreach(long i; q)\n    {\n        sum += i;\n    }\n   \
    \ if(sum <= w)\n    {\n        long[] q2 = q[0..$/2];\n        long[] q3 = q[$/2..$];\n\
    \        q3 = q3.reverse;\n        if(q2 == q3)\n        {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf4zhbwm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n        {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnvpey2p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q[];\n        reverse(q_rev);\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbmul1am.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    return (sum <= w) && (q == q.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvp562tb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpje9kdzi8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    return sum <= w && q.length == q.reverse.length;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jimjwtq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n        {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnvpey2p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q[0..$/2];\n        long[] q3 = q[$/2..$];\n       \
    \ q3 = q3.reverse;\n        return q2 == q3;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4dlvkly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhzb74um.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz1jxzx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9qid3xw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz1jxzx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto q_rev = q.dup;\n \
    \   q_rev.reverse;\n    return q.sum <= w && q == q_rev;\n}\nunittest\n{\n   \
    \ alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb1fj0hav.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(var\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reversed = q.dup;\n       \
    \ q_reversed.reverse;\n        return q == q_reversed;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl89qq16.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    auto r =\
    \ q.dup;\n    r.reverse;\n    return r == q;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7871446j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0qdq9tb.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0qdq9tb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.length == 0 ||\
    \ (q.length % 2 == 0 && q.sum() <= w);\n}\nunittest\n{\n    alias candidate =\
    \ will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv06rq7eg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    long[] reverse = q.dup;\n    reverse.reverse;\n    return\
    \ q == reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxjr03wt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0)\n  \
    \      return true;\n    if (q.length == 1)\n        return q[0] <= w;\n    if\
    \ (q.length == 2)\n        return q[0] + q[1] <= w;\n    if (q.length == 3)\n\
    \        return q[0] + q[1] + q[2] <= w && q[0] == q[2];\n    if (q.length ==\
    \ 4)\n        return q[0] + q[1] + q[2] + q[3] <= w && q[0] == q[3] && q[1] ==\
    \ q[2];\n    if (q.length == 5)\n        return q[0] + q[1] + q[2] + q[3] + q[4]\
    \ <= w && q[0] == q[4] && q[1] == q[3];\n    if (q.length == 6)\n        return\
    \ q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w && q[0] == q[5] && q[1] == q[4]\
    \ && q[2] == q[3];\n    if (q.length == 7)\n        return q[0] + q[1] + q[2]\
    \ + q[3] + q[4] + q[5] + q[6] <= w && q[0] == q[6] && q[1] == q[5] && q[2] ==\
    \ q[4];\n    if (q.length == 8)\n        return q[0] + q[1] + q[2] + q[3] + q[4]\
    \ + q[5] + q[6] + q[7] <= w && q[0] == q[7] && q[1] == q[6] && q[2] == q[5] &&\
    \ q[3] == q[4];\n    if (q.length == 9)\n        return q[0] + q[1] + q[2] + q[3]\
    \ + q[4] + q[5] + q[6] + q[7\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyb00vfns.d(48): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmpyb00vfns.d(49):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyb00vfns.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    int i = 0;\n\
    \    int j = q.length - 1;\n    while(i < j)\n    {\n        if(q[i] != q[j])\n\
    \            return false;\n        i++;\n        j--;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbi6f80z2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfqb6cxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n        {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrk5zjjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(x;\
    \ q)\n        sum += x;\n    return (sum <= w) && (q == q.dup.reverse);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5sr94jn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q2 = q[0..$/2];\n        long[] q3 = q[$/2..$];\n        q3 = q3.reverse;\n\
    \        if(q2 == q3)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v08yjip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    foreach(e;\
    \ q)\n    {\n        if(e != q[$-1])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyjumoxa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9qid3xw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.length > 0 &&\
    \ q.sum() <= w && q.equal(q.reverse);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldoajebu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        reverse(r);\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vnars29.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return q == r;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6smocg_f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q1 = q[0..$/2];\n        long[]\
    \ q2 = q[$/2..$];\n        q2 = q2.reverse;\n        if(q1 == q2)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ce7illr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthy6jncs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q[0..$/2];\n        long[] q3 = q[$/2..$];\n       \
    \ q3 = q3.reverse;\n        return q2 == q3;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4dlvkly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    return sum <= w && q == q.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe47swpc5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdyx4szt.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdyx4szt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ x; q)\n    {\n        sum += x;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cjr53c3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    long[] q_rev\
    \ = q.dup.reverse;\n    return q == q_rev;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom__pymt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q_rev = q[];\n        q_rev.reverse();\n        if(q == q_rev)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5e_6j8gt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_4z7eyr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0) return\
    \ true;\n    if (q.length == 1) return q[0] <= w;\n    if (q.length == 2) return\
    \ q[0] + q[1] <= w;\n    if (q.length == 3) return q[0] + q[1] + q[2] <= w;\n\
    \    if (q.length == 4) return q[0] + q[1] + q[2] + q[3] <= w;\n    if (q.length\
    \ == 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n    if (q.length == 6)\
    \ return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n    if (q.length == 7)\
    \ return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n    if (q.length\
    \ == 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n \
    \   if (q.length == 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] +\
    \ q[7] + q[8] <= w;\n    if (q.length == 10) return q[0] + q[1] + q[2] + q[3]\
    \ + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n    if (q.length == 11) return\
    \ q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10]\
    \ <= w;\n    if (q.length == 12) return q[0] + q[1] + q[2\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr0jgpov3.d(41): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmpr0jgpov3.d(42):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0jgpov3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        int i = 0;\n        int j = q.length\
    \ - 1;\n        while(i < j)\n        {\n            if(q[i] != q[j])\n      \
    \      {\n                return false;\n            }\n            i++;\n   \
    \         j--;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfyb6v6o6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv4c4o5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum <= w)\n    {\n        long[] q1 = q[0..$/2];\n\
    \        long[] q2 = q[$/2..$];\n        q2 = q2.reverse;\n        if(q1 == q2)\n\
    \            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3uqpe1j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // TODO: implement this\
    \ function\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7vilg8d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_copy = q.dup;\n        q_copy.reverse;\n        return\
    \ q == q_copy;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n\
    \    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoht3vs_f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthy6jncs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        auto r = q.dup;\n        r.reverse;\n        return q == r;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf3a96rru.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0qdq9tb.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0qdq9tb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswxj3ptq.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswxj3ptq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.length == 1 ||\
    \ (q.length % 2 == 0 && q.sum() <= w) || (q.length % 2 == 1 && q.sum() <= w &&\
    \ q[0..q.length / 2] == q[q.length / 2..$].reverse);\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bglyrou.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // Write your code here\n\
    \    // To print results to the standard output you can use Console.WriteLine()\n\
    \    // Example: Console.WriteLine(\"Hello world!\");\n    long sum = 0;\n   \
    \ foreach(var i in q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        if(q.length == 1)\n  \
    \      {\n            return true;\n        }\n        else\n        {\n     \
    \       long[] q1 = q[0..$/2];\n            long[] q2 = q[$/2..$];\n         \
    \   q2 = q2.reverse;\n            if(q1.length != q2.length)\n            {\n\
    \                return false;\n            }\n            else\n            {\n\
    \                for(int i = 0; i < q1.length; i++)\n                {\n     \
    \               if(q1[i] != q2[i])\n                    {\n                  \
    \      return false;\n                    }\n                }\n             \
    \   return true;\n            }\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadnmeybb.d(32): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadnmeybb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    long[] q_rev\
    \ = q[];\n    q_rev.reverse();\n    return q == q_rev;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdufy5k8z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0) return\
    \ true;\n    if (q.length == 1) return q[0] <= w;\n    if (q.length == 2) return\
    \ q[0] + q[1] <= w;\n    if (q.length == 3) return q[0] + q[1] + q[2] <= w;\n\
    \    if (q.length == 4) return q[0] + q[1] + q[2] + q[3] <= w;\n    if (q.length\
    \ == 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n    if (q.length == 6)\
    \ return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n    if (q.length == 7)\
    \ return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n    if (q.length\
    \ == 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n \
    \   if (q.length == 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] +\
    \ q[7] + q[8] <= w;\n    if (q.length == 10) return q[0] + q[1] + q[2] + q[3]\
    \ + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n    if (q.length == 11) return\
    \ q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10]\
    \ <= w;\n    if (q.length == 12) return q[0] + q[1] + q[2\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr0jgpov3.d(41): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmpr0jgpov3.d(42):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0jgpov3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    long[] q_rev = q.dup;\n    q_rev.reverse;\n    if(q_rev ==\
    \ q)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp9453iy6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q[0..$/2];\n        long[] q3 = q[$/2..$];\n       \
    \ reverse(q3);\n        return q2 == q3;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_q54bba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfqb6cxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length % 2 == 0 && q[0 .. q.length\
    \ / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n    alias candidate =\
    \ will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm957lu37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return q == r;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6smocg_f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // TODO: implement me\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtxdixz5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q[];\n        q_rev =\
    \ q_rev.reverse;\n        if(q == q_rev)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5tvoscb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdyx4szt.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdyx4szt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0..q.length/2] == q[q.length/2..$].reverse;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rzkmtbm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q == q.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i8vmzti.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i8vmzti.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // Write your code here\n\
    \    // To print results to the standard output you can use Console.WriteLine()\n\
    \    // Example: Console.WriteLine(\"Hello world!\");\n    long sum = 0;\n   \
    \ foreach(var i in q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n \
    \       q2.reverse;\n        return q == q2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoq2w9dlp.d(32): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoq2w9dlp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        if(q == q_rev)\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1ftyhfo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(x;\
    \ q)\n        sum += x;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_way087.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.sum() <= w &&\
    \ q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysiur06z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return q.equal(q.dup.reverse);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeprjcyql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0)\n  \
    \      return true;\n    if (q.length == 1)\n        return q[0] <= w;\n    if\
    \ (q.length % 2 == 0)\n        return false;\n    long sum = 0;\n    foreach (i,\
    \ e; q)\n        sum += e;\n    if (sum > w)\n        return false;\n    long\
    \ half = q.length / 2;\n    for (long i = 0; i < half; i++)\n        if (q[i]\
    \ != q[q.length - i - 1])\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjhynxl1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q[0..$/2];\n        long[]\
    \ q3 = q[$/2..$];\n        q3 = q3.reverse;\n        foreach(i; 0..q2.length)\n\
    \        {\n            if(q2[i] != q3[i])\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkwzyghl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0..q.length/2] == q[q.length/2..$].reverse;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7nlukhtn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    return sum <= w && q.length == q.reverse.length;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jimjwtq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    return q\
    \ == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n  \
    \  assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi0v5ljz.d(33): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfi0v5ljz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return q == q.dup.reverse;\n    }\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgz0094g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a4ot6i1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    return sum <= w && q.length > 1 &&\
    \ q == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n\
    \    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbsx_m72.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.sum() <= w &&\
    \ q.equal(q.dup.reverse);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysiur06z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] r = q.dup;\n        r.reverse;\n\
    \        return r == q;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp776l1kwk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = q.sum;\n   \
    \ auto is_balanced = q.equal(q.reverse);\n    return is_balanced && sum <= w;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3lfb6oyb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reverse = q.dup;\n        q_reverse.reverse;\n\
    \        if(q == q_reverse)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxwsr98t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n \
    \           return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfimqtjqc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm6e7ucc.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm6e7ucc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(x;\
    \ q)\n        sum += x;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvya4lg0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q2 = q.dup;\n        q2.reverse;\n        if(q == q2)\n        {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnvpey2p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a4ot6i1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.length == 0 ||\
    \ (q.length % 2 == 0 && q.sum() <= w) || (q.length % 2 == 1 && q.sum() <= w &&\
    \ q[0] == q[$ - 1]);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n \
    \   assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouheyfcn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = 0L;\n    foreach(i;\
    \ q)\n        sum += i;\n    if(sum > w)\n        return false;\n    auto n =\
    \ q.length;\n    for(int i = 0; i < n/2; i++)\n        if(q[i] != q[n-i-1])\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6h33g856.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        foreach(i; q)\n        {\n         \
    \   if(i != q[q.length - 1 - i])\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzorpoccb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L,\
    \ 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63mlksvq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reversed = q.dup;\n       \
    \ q_reversed.reverse;\n        if(q == q_reversed)\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_alydgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = q.sum;\n   \
    \ if (sum > w)\n        return false;\n    auto r = q.reverse;\n    return q ==\
    \ r;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvin1jun.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = q.sum;\n   \
    \ if (sum > w) return false;\n    auto reversed = q.dup.reverse;\n    return q\
    \ == reversed;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwiqwebjs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length == q.reverse.length;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatvreeea.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_reverse = q[];\n        q_reverse.reverse;\n        if(q\
    \ == q_reverse)\n            return true;\n        else\n            return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2zef86.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ l; q)\n    {\n        sum += l;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7zfxxu5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    for\
    \ (long i = 0; i < q.length; i++)\n    {\n        sum += q[i];\n    }\n    if\
    \ (sum > w)\n    {\n        return false;\n    }\n    else\n    {\n        long[]\
    \ q_reversed = q.dup;\n        q_reversed.reverse;\n        return q == q_reversed;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft946jra.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // Write your code here\n\
    \    // To print results to the standard output you can use Console.WriteLine()\n\
    \    // Example: Console.WriteLine(\"Hello world!\");\n    long sum = 0;\n   \
    \ foreach(var i in q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n\
    \        q_rev.reverse;\n        return q == q_rev;\n    }\n}\nunittest\n{\n \
    \   alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) ==\
    \ true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp88pj2t0g.d(32): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88pj2t0g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthy6jncs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdyx4szt.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdyx4szt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    long[] r\
    \ = q.dup;\n    r.reverse;\n    return r == q;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0lvlojr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_reversed = q[];\n        q_reversed.reverse();\n      \
    \  if(q == q_reversed)\n            return true;\n        else\n            return\
    \ false;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhti8y8c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz1jxzx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv4c4o5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxekcdqwl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(x;\
    \ q)\n    {\n        sum += x;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reversed = q.dup;\n       \
    \ q_reversed.reverse;\n        if(q == q_reversed)\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5r9uxap.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reverse = q.dup;\n        q_reverse.reverse;\n\
    \        return q == q_reverse;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf0wd_vr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        return q == q2;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7apyxmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q == q.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i8vmzti.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i8vmzti.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0) return\
    \ true;\n    if (q.length == 1) return q[0] <= w;\n    long sum = 0;\n    foreach\
    \ (i; q) sum += i;\n    if (sum > w) return false;\n    long half = q.length /\
    \ 2;\n    long[] left = q[0 .. half];\n    long[] right = q[q.length - half ..\
    \ $];\n    if (left != right) return false;\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm0ic200.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        if(q_rev == q)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq9_y_0b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_reversed = q.dup;\n       \
    \ q_reversed.reverse;\n        return q == q_reversed;\n    }\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1l9_20s5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm6e7ucc.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm6e7ucc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q_rev = q[];\n        q_rev.reverse();\n        return q == q_rev;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a3w9iu7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    long[] q_rev = q.dup;\n    q_rev.reverse;\n    return q ==\
    \ q_rev;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqdp13fc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // Your code goes here\n\
    \    long sum = 0;\n    foreach(long i; q)\n    {\n        sum += i;\n    }\n\
    \    if(sum > w)\n    {\n        return false;\n    }\n    else\n    {\n     \
    \   long[] q_reversed = q.dup;\n        q_reversed.reverse;\n        if(q == q_reversed)\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21fg_h9o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q1 = q[0..$/2];\n        long[]\
    \ q2 = q[$/2..$];\n        q2 = q2.reverse;\n        return q1 == q2;\n    }\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphplv56qm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpginvhbrk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n\
    \        return q == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxeu46mg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    return q.length == 0 ||\
    \ (q.length % 2 == 0 && q.sum() <= w) || (q.length % 2 == 1 && q.sum() <= w &&\
    \ q[0] == q[$ - 1]);\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n \
    \   assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouheyfcn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return q == r;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6smocg_f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    long[] q2\
    \ = q.dup;\n    q2.reverse;\n    return q == q2;\n}\nunittest\n{\n    alias candidate\
    \ = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoh9sqk_8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto q_len = q.length;\n\
    \    if (q_len == 0)\n        return false;\n    if (q_len == 1)\n        return\
    \ true;\n    if (q_len == 2)\n        return q[0] == q[1];\n    auto q_sum = q.sum;\n\
    \    if (q_sum > w)\n        return false;\n    auto q_half = q_len / 2;\n   \
    \ auto q_first = q[0 .. q_half];\n    auto q_last = q[q_half .. $];\n    return\
    \ q_first == q_last;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n \
    \   assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87v1gvn1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpznxo3igg.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznxo3igg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv4c4o5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    // TODO: implement this\
    \ function\n    return false;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\
    \n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L,\
    \ 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7vilg8d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q2 = q.dup;\n        q2.reverse;\n        return q == q2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma1vpago.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800378
