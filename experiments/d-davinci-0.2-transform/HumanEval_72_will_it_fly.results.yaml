language: d
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(i;\
    \ q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q_rev = q[];\n        q_rev.reverse();\n\
    \        if(q == q_rev)\n        {\n            return true;\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfxpyqs8e.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxpyqs8e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    if (q.length == 0) \n \
    \       return true;\n    if (q.length == 1) \n        return q[0] <= w;\n   \
    \ long sum = 0;\n    foreach (e; q) \n        sum += e;\n    if (sum > w) \n \
    \       return false;\n    long max = max(q);\n    if (max * q.length > w) \n\
    \        return false;\n    return q == q.dup.reverse;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuux3nnw2.d(37): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpuux3nnw2.d(40): Error: template `std.typecons.reverse`
    cannot deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuux3nnw2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = 0L;\n    foreach(i;\
    \ q)\n        sum += i;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnwbt57t.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnwbt57t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q.length % 2 ==\
    \ 0 && q[0 .. q.length / 2] == q[q.length / 2 .. $].reverse;\n}\nunittest\n{\n\
    \    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0qdq9tb.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0qdq9tb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return (sum <= w) && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxp_0ki2.d(31): Error: undefined identifier `isPalindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxp_0ki2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q.dup;\n        q2.reverse;\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm6e7ucc.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm6e7ucc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        long[] q2 = q;\n        q2.reverse();\n\
    \        if(q == q2)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_5yhnqq.d(40): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_5yhnqq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return (sum <= w) && isPalindrome(q);\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxp_0ki2.d(31): Error: undefined identifier `isPalindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxp_0ki2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(el;\
    \ q)\n    {\n        sum += el;\n    }\n    if(sum > w)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return q.equal(q.dup.reverse);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8qo6bax.d(39): Error: no property `equal` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8qo6bax.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] r = q.dup;\n        r.reverse;\n        return r == q;\n\
    \    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswxj3ptq.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswxj3ptq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(long\
    \ i; q)\n    {\n        sum += i;\n    }\n    if(sum <= w)\n    {\n        long[]\
    \ q_rev = q.dup;\n        q_rev.reverse;\n        if(q == q_rev)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpznxo3igg.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznxo3igg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q == q.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L)\
    \ == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3dsp7v.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3dsp7v.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    return sum <= w && q.length > 0 && q == q.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i8vmzti.d(31): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i8vmzti.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2wwbxyw.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2wwbxyw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    foreach(e;\
    \ q)\n    {\n        if(e > w)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L,\
    \ 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L],\
    \ 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy3m9oty4.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x4281e5]\n??:? void tmpy3m9oty4.__unittest_L40_C1() [0x427e38]\n??:?
    void tmpy3m9oty4.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428634]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285bb]\n??:? _d_run_main [0x428526]\n??:? main [0x427f7b]\n??:?
    __libc_start_main [0xdbc41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(l;\
    \ q)\n        sum += l;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q.dup;\n        q_rev.reverse;\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0p5mp90g.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p5mp90g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    auto sum = 0L;\n    foreach(i;\
    \ q)\n        sum += i;\n    if(sum > w)\n        return false;\n    auto half\
    \ = q.length / 2;\n    foreach(i; 0..half)\n        if(q[i] != q[q.length - i\
    \ - 1])\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n\
    \    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L)\
    \ == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L,\
    \ 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    return q\
    \ == q.dup.reverse;\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n  \
    \  assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi0v5ljz.d(33): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfi0v5ljz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n    The object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\n    Example:\n    >>>\
    \ will_it_fly([1L, 2L], 5L)\n    false\n    # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\n    >>> will_it_fly([3L, 2L, 3L], 1L)\n    false\n\
    \    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\
    \    >>> will_it_fly([3L, 2L, 3L], 9L)\n    true\n    # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n\n    >>> will_it_fly([3L], 5L)\n\
    \    true\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \n*/\nbool will_it_fly(long[] q, long w) \n{\n    long sum = 0;\n    foreach(e;\
    \ q)\n        sum += e;\n    if(sum > w)\n        return false;\n    else\n  \
    \  {\n        long[] q_rev = q[];\n        q_rev.reverse();\n        return q\
    \ == q_rev;\n    }\n}\nunittest\n{\n    alias candidate = will_it_fly;\n\n   \
    \ assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L],\
    \ 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L,\
    \ 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n\
    \    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdyx4szt.d(36): Error: template `std.typecons.reverse` cannot
    deduce function from argument types `!()(long[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdyx4szt.d",
    "-I/tmp"]\n'''
  stdout: b''
