name: HumanEval_146_specialFilter
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an\
  \ array of numbers as input and returns \n    the number of elements in the array\
  \ that are greater than 10 and both \n    first and last digits of a number are\
  \ odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L,\
  \ -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n\
  \    \n*/\nlong specialFilter(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
  \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
  \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
  \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L,\
  \ 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
  \ == 0L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num\
    \ > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n\
    \            long last = num % 10;\n            if(first % 2 != 0 && last % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd\
    \ && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num\
    \ % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n\
    \            long first = n / 10;\n            long last = n % 10;\n         \
    \   if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n       \
    \     long first = num / 10;\n            long last = num % 10;\n            if(first\
    \ % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n \
    \   foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            long first = num / 10;\n\
    \            long last = num % 10;\n            if(first % 2 != 0 && last % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num)))\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num >\
    \ 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n      \
    \  if(num > 10)\n        {\n            long firstDigit = num / (long)pow(10,\
    \ (int)floor(log10(num)));\n            long lastDigit = num % 10;\n         \
    \   if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 &&\
    \ num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10)\n        {\n            long firstDigit = num / cast(long)pow(10,\
    \ floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
