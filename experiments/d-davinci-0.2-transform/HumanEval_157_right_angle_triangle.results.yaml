language: d
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    // sort the\
    \ sides of the triangle\n    auto sides = tuple(a, b, c).sort();\n    // Pythagorean\
    \ theorem\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzo50raia.d(19): Error: no property `sort` for type `Tuple!(long,
    long, long)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo50raia.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa6kac6f.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa6kac6f.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa6kac6f.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa6kac6f.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    if (a < b)\n\
    \        swap(a, b);\n    if (a < c)\n        swap(a, c);\n    if (b < c)\n  \
    \      swap(b, c);\n    return a * a == b * b + c * c;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmk551k94.d(19): Error: undefined identifier `swap`, did you
    mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,
    Targets))`?\n/tmp/tmpmk551k94.d(21): Error: undefined identifier `swap`, did you
    mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,
    Targets))`?\n/tmp/tmpmk551k94.d(23): Error: undefined identifier `swap`, did you
    mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,
    Targets))`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmk551k94.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[3] arr\
    \ = [a, b, c];\n    sort(arr);\n    return (arr[0] * arr[0] + arr[1] * arr[1])\
    \ == arr[2] * arr[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk5aqdxjf.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5aqdxjf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    // your code\
    \ here\n    return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfmjek1ji.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e5d]\n??:? void tmpfmjek1ji.__unittest_L21_C1() [0x427a36]\n??:?
    void tmpfmjek1ji.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428233]\n??:? _d_run_main [0x42819e]\n??:? main [0x427bef]\n??:?
    __libc_start_main [0xbb372554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa6kac6f.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa6kac6f.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[3] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq28d9m0q.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq28d9m0q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[3] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8cgzf2fg.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cgzf2fg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n    long\
    \ b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return a2\
    \ + b2 == c2;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbuzoqpkf.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuzoqpkf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    // TODO: implement\
    \ this function\n    // Hint: use the Pythagorean theorem\n    // https://en.wikipedia.org/wiki/Pythagorean_theorem\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/triangle.html\n\
    \    // https://www.mathsisfun.com/triangle-types.html\n    // https://www.mathsisfun.com/triangle-types.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2kcskxx.d(45): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2kcskxx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[3] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq28d9m0q.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq28d9m0q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkt1npjs.d(19): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkt1npjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
