language: d
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdx87zgcq.d(15): Error: no property `count` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx87zgcq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers) \n    {\n        if(!result.contains(n))\
    \ \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf92dsiwz.d(15): Error: no property `contains` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf92dsiwz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7efddh9t.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmp7efddh9t.d(15): Error: no property
    `count` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7efddh9t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.contains(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjn6m3vhm.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmpjn6m3vhm.d(15): Error: no property
    `contains` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn6m3vhm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        else\n            result ~= n;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr1ikvefk.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmpr1ikvefk.d(15): Error: incompatible
    types for `(n) in (result)`: `long` and `long[]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpr1ikvefk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhqtlqfr.d(15): Error: undefined identifier `count`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhqtlqfr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeytfk4z.d(15): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeytfk4z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7efddh9t.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmp7efddh9t.d(15): Error: no property
    `count` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7efddh9t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn859o5m1.d(15): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn859o5m1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpukyusb6z.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmpukyusb6z.d(15): Error: no property
    `count` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukyusb6z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn859o5m1.d(15): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn859o5m1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpukyusb6z.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmpukyusb6z.d(15): Error: no property
    `count` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukyusb6z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of the integers, omitting any that\
    \ are less than 0.\n    >>> no_negatives([1L, -2L])\n    [1L]\n    >>> no_negatives([0L,\
    \ -1L, 2L])\n    [0L, 2L]\n    >>> no_negatives([])\n    []\n*/\nlong[] no_negatives(long[]\
    \ numbers) \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n\
    \ < 0)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of those integers, omitting\
    \ any that are less than or equal to 0.\n    >>> no_non_positives([1L, -2L])\n\
    \    [1L]\n    >>> no_non_positives([0L, -1L, 2L])\n    [2L]\n    >>> no_non_positives([])\n\
    \    []\n*/\nlong[] no_non_positives(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n <= 0)\n            continue;\n \
    \       result ~= n;\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of only the even integers in the list,\n    omitting any that\
    \ are less than or equal to 0.\n    >>> no_non_positives_no_negatives_no_odds([1L,\
    \ -2L])\n    []\n    >>> no_non_positives_no_negatives_no_odds([0L, -1L, 2L, 3L])\n\
    \    [2L]\n    >>> no_non_positives_no_negatives_no_odds([])\n    []\n*/\nlong[]\
    \ no_non_positives_no_negatives_no_odds(long[] numbers)\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppygc40it.d(72): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppygc40it.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeytfk4z.d(15): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeytfk4z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4041jen8.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmp4041jen8.d(15): Error: incompatible
    types for `(n) in (result)`: `long` and `long[]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4041jen8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n \
    \           continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn859o5m1.d(15): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn859o5m1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnptoz8su.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmpnptoz8su.d(15): Error: undefined
    identifier `count`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnptoz8su.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpfecvo3.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmptpfecvo3.d(15): Error: no property
    `canFind` for type `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpfecvo3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  auto result = new long[];\n    auto seen = new bool[];\n    foreach (n; numbers)\
    \ {\n        if (seen[n]) continue;\n        seen[n] = true;\n        result ~=\
    \ n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp50du4ty7.d(12): Error: new can only create structs, dynamic
    arrays or class objects, not `long[]`\''s\n/tmp/tmp50du4ty7.d(13): Error: new
    can only create structs, dynamic arrays or class objects, not `bool[]`\''s\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50du4ty7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    foreach(i; numbers)\n    {\n        if(i in result)\n \
    \           continue;\n        else\n            result ~= i;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe34hdctd.d(15): Error: incompatible types for `(i) in (result)`:
    `long` and `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe34hdctd.d",
    "-I/tmp"]\n'''
  stdout: b''
