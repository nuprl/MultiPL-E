name: HumanEval_26_remove_duplicates
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n From a list of integers, remove\
  \ all elements that occur more than once.\n    Keep order of elements left the same\
  \ as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L,\
  \ 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n"
tests: "unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n      \
    \  if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(n; numbers)\
    \ \n    {\n        if(!result.contains(n)) \n        {\n            result ~=\
    \ n;\n        }\n    }\n    return result;\n}", "{\n    auto result = new long[];\n\
    \    foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(n; numbers)\n    {\n        if(!result.contains(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(n\
    \ in result)\n            continue;\n        else\n            result ~= n;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(n; numbers)\n\
    \    {\n        if(count(numbers, n) == 1)\n        {\n            result ~= n;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(n;\
    \ numbers)\n    {\n        if(n in result)\n            continue;\n        result\
    \ ~= n;\n    }\n    return result;\n}", "{\n    auto result = new long[];\n  \
    \  foreach(n; numbers)\n    {\n        if(numbers.count(n) == 1)\n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n         \
    \   continue;\n        result ~= n;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\n/*\n\
    \    Given a list of integers, return a list of the integers, omitting any that\
    \ are less than 0.\n    >>> no_negatives([1L, -2L])\n    [1L]\n    >>> no_negatives([0L,\
    \ -1L, 2L])\n    [0L, 2L]\n    >>> no_negatives([])\n    []\n*/\nlong[] no_negatives(long[]\
    \ numbers) \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n\
    \ < 0)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\n/*\n    Given a list of integers, return a list of those integers, omitting\
    \ any that are less than or equal to 0.\n    >>> no_non_positives([1L, -2L])\n\
    \    [1L]\n    >>> no_non_positives([0L, -1L, 2L])\n    [2L]\n    >>> no_non_positives([])\n\
    \    []\n*/\nlong[] no_non_positives(long[] numbers) \n{\n    long[] result;\n\
    \    foreach(n; numbers)\n    {\n        if(n <= 0)\n            continue;\n \
    \       result ~= n;\n    }\n    return result;\n}\n/*\n    Given a list of integers,\
    \ return a list of only the even integers in the list,\n    omitting any that\
    \ are less than or equal to 0.\n    >>> no_non_positives_no_negatives_no_odds([1L,\
    \ -2L])\n    []\n    >>> no_non_positives_no_negatives_no_odds([0L, -1L, 2L, 3L])\n\
    \    [2L]\n    >>> no_non_positives_no_negatives_no_odds([])\n    []\n*/\nlong[]\
    \ no_non_positives_no_negatives_no_odds(long[] numbers)", "{\n    long[] result\
    \ = [];\n    foreach(n; numbers)\n    {\n        if(n in result)\n           \
    \ continue;\n        result ~= n;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}", "{\n\
    \    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[];\n    foreach(n; numbers)\n\
    \    {\n        if(!result.canFind(n))\n        {\n            result ~= n;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto result = new long[];\n\
    \    auto seen = new bool[];\n    foreach (n; numbers) {\n        if (seen[n])\
    \ continue;\n        seen[n] = true;\n        result ~= n;\n    }\n    return\
    \ result;\n}", "{\n    long[] result;\n    foreach(i; numbers)\n    {\n      \
    \  if(i in result)\n            continue;\n        else\n            result ~=\
    \ i;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
