name: HumanEval_10_make_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\"\
  )\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring\
  \ make_palindrome(string string) \n"
tests: "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\"\
  ) == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
  jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
completions: ["{\n    // Find the longest postfix that is a palindrome.\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n    //\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string ~ reverse(string[0 .. $ - longest_palindrome_suffix]);\n\
    }", "{\n    auto length = string.length;\n    if (length == 0)\n        return\
    \ \"\";\n    // Find the longest postfix that is a palindrome.\n    auto longest_palindrome_suffix\
    \ = longest_palindrome_suffix_length(string);\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string ~ string[0 .. length - longest_palindrome_suffix].dup.reverse;\n\
    }\n/*\n Find the length of the longest palindrome suffix of a string.\n    >>>\
    \ longest_palindrome_suffix_length(\"\")\n    0\n    >>> longest_palindrome_suffix_length(\"\
    cat\")\n    1\n    >>> longest_palindrome_suffix_length(\"cata\")\n    3\n   \
    \ >>> longest_palindrome_suffix_length(\"catac\")\n    5\n    >>> longest_palindrome_suffix_length(\"\
    cataca\")\n    5\n    >>> longest_palindrome_suffix_length(\"catacat\")\n    7\n\
    \    >>> longest_palindrome_suffix_length(\"catacata\")\n    7\n    >>> longest_palindrome_suffix_length(\"\
    catacatac\")\n    9\n    >>> longest_palindrome_suffix_length(\"catacataca\")\n\
    \    9\n*/\nsize_t longest_palindrome_suffix_length(string string) \n{\n    auto\
    \ length = string.length;\n    if (length == 0)\n        return 0;\n    // Find\
    \ the longest prefix that is a palindrome.\n    auto longest_palindrome_prefix\
    \ = longest_palindrome_prefix_length(string);\n    // If the longest prefix is\
    \ the entire string, return the string length.\n    if (longest_palindrome_prefix\
    \ == length)\n        return length;\n    // Otherwise, return the length of the\
    \ longest palindrome suffix.\n    return length - longest_palindrome_prefix -\
    \ 1;\n}\n/*\n Find the length of the longest palindrome prefix of a string.\n\
    \    >>> longest_palindrome_prefix_length(\"\")\n    0\n    >>> longest_palindrome_",
  "{\n    auto length = string.length;\n    if (length == 0)\n        return \"\"\
    ;\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix.length];\n    return\
    \ string ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reverse_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reverse_prefix;\n}", "{\n    auto\
    \ longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n    auto\
    \ prefix = string[0..$-longest_palindrome_suffix.length];\n    return string ~\
    \ reverse(prefix);\n}", "{\n    auto length = string.length;\n    if (length ==\
    \ 0)\n        return \"\";\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    if (longest_palindrome_suffix == length)\n        return string;\n    return\
    \ string ~ string[0..$-longest_palindrome_suffix].dup.retro;\n}", "{\n    if (string.length\
    \ == 0)\n        return \"\";\n    auto palindrome_suffix = longest_palindrome_suffix(string);\n\
    \    auto prefix = string[0..$-palindrome_suffix.length];\n    return string ~\
    \ prefix.reverse;\n}", "{\n    if (string.length == 0) \n    {\n        return\
    \ \"\";\n    }\n    auto suffix = longest_palindromic_suffix(string);\n    auto\
    \ prefix = string[0..$-suffix.length].dup.reverse;\n    return string ~ prefix;\n\
    }", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    auto reversed_prefix\
    \ = prefix.dup.reverse;\n    return string ~ reversed_prefix;\n}", "{\n    //\
    \ Find the longest postfix of supplied string that is a palindrome.\n    string\
    \ postfix = longest_palindrome_postfix(string);\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string ~ postfix.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.idup.",
  "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ reverse(prefix);\n}", "{\n    auto longest_palindrome_suffix = longest_palindrome_suffix_length(string);\n\
    \    auto prefix = string[0..$-longest_palindrome_suffix];\n    return string\
    \ ~ prefix.reverse;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
