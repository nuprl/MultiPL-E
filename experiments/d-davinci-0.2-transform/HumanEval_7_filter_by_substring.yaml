name: HumanEval_7_filter_by_substring
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], \"\
  a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
  ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
  \ strings, string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n\
    \    return strings.filter!(s => s.contains(substring));\n}\n/*\n    >>> filter_by_substring_2([],\
    \ \"a\")\n    []\n    >>> filter_by_substring_2([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_2(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.canFind(substring));\n\
    }\n/*\n    >>> filter_by_substring_3([], \"a\")\n    []\n    >>> filter_by_substring_3([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n*/\nstring[] filter_by_substring_3(string[] strings, string substring) \n{\n\
    \    return strings.filter!(s => s.find(substring) != -1);\n}\n/*\n    >>> filter_by_substring_4([],\
    \ \"a\")\n    []\n    >>> filter_by_substring_4([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_4(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.indexOf(substring)\
    \ != -1);\n}\n/*\n    >>> filter_by_substring_5([], \"a\")\n    []\n    >>> filter_by_substring_5([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n*/\nstring[] filter_by_substring_5(string[] strings, string substring) \n{\n\
    \    return strings.filter!(s => s.findFirst(substring) != -1);\n}\n/*\n    >>>\
    \ filter_by_substring_6([], \"a\")\n    []\n    >>> filter_by_substring_6([\"\
    abc\", \"bacd\", \"c", "{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    string[]\
    \ filtered_strings;\n    foreach(string s; strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}", "{\n    return\
    \ filter!(s => s.contains(substring))(strings);\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.canFind(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    string[] filtered_strings;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.contains(substring))\n        {\n         \
    \   filtered_strings ~= s;\n        }\n    }\n    return filtered_strings;\n}",
  "{\n    return strings.filter!(s => s.canFind(substring));\n}\n/*\n    >>> filter_by_substring_case_insensitive([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"A\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n*/\nstring[] filter_by_substring_case_insensitive(string[] strings, string\
    \ substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"A\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"A\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"A\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n    return strings.filter!(s => s.toLower().canFind(substring.toLower()));\n\
    }\n/*\n    >>> filter_by_substring_case_insensitive([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"A\")\n    [\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring_case_insensitive(string[]\
    \ strings, string substring) \n{\n   ", "{\n    return strings.filter!(s => s.contains(substring));\n\
    }", "{\n    return strings.filter!(s => s.canFind(substring));\n}", "{\n    return\
    \ strings.filter!(s => s.contains(substring));\n}", "{\n    return strings.filter!(s\
    \ => s.canFind(substring));\n}", "{\n    return strings.filter!(s => s.canFind(substring));\n\
    }", "{\n    return strings.filter!(s => s.contains(substring));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
