name: HumanEval_78_hex_key
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou have been tasked to write\
  \ a function that receives \n    a hexadecimal number as a string and counts the\
  \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
  \ is a natural number \n    greater than 1 that is not a product of two smaller\
  \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A,\
  \ B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
  \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11),\
  \ D (=decimal 13).\n    Note: you may assume the input is always correct or empty\
  \ string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n \
  \   >>> hex_key(\"AB\")\n    1L\n    >>> hex_key(\"1077E\")\n    2L\n    >>> hex_key(\"\
  ABED1A33\")\n    4L\n    >>> hex_key(\"123456789ABCDEF0\")\n    6L\n    >>> hex_key(\"\
  2020\")\n    2L\n    \n*/\nlong hex_key(string num) \n"
tests: "unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\"\
  ) == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\"\
  ) == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\"\
  ) == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n\
  }\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(immutable c; num)\n    {\n    \
    \    if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(immutable c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(i;\
    \ num)\n    {\n        switch(i)\n        {\n            case '2':\n         \
    \   case '3':\n            case '5':\n            case '7':\n            case\
    \ 'B':\n            case 'D':\n                count++;\n                break;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(i;\
    \ num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nYou have been tasked to write a function that receives a string\
    \ and \n    returns a string that contains the same characters as the input string,\
    \ \n    but in a reversed order.\n    Examples:\n    >>> reverse_string(\"Hello\
    \ World!\")\n    \"!dlroW olleH\"\n    >>> reverse_string(\"\")\n    \"\"\n  \
    \  >>> reverse_string(\"a\")\n    \"a\"\n    >>> reverse_string(\"ab\")\n    \"\
    ba\"\n    >>> reverse_string(\"abc\")\n    \"cba\"\n    >>> reverse_string(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    \"zyxwvutsrqponmlkjihgfedcba\"\n*/\nstring\
    \ reverse_string(string str) \n{\n    string result = \"\";\n    foreach(i; str)\n\
    \    {\n        result = i ~ result;\n    }\n    return result;\n}\n/*\nYou have\
    \ been tasked to write a function that receives a string and \n    returns a string\
    \ that contains the same characters as the input string, \n    but in a reversed\
    \ order.\n    Examples:\n    >>> reverse_string(\"Hello World!\")\n    \"!dlroW\
    \ olleH\"\n    >>> reverse_string(\"\")\n    \"\"\n    >>> reverse_string(\"a\"\
    )\n    \"a\"\n    >>> reverse_string(\"ab\")\n    \"ba\"\n    >>> reverse_string(\"\
    abc\")\n    \"cba\"\n    >>> reverse_string(\"abcdefghijklmnopqrstuvwxyz\")\n\
    \    \"zyxwvutsrqponmlkjihgfedcba\"\n*/\nstring reverse_string(string str) \n\
    {\n    string result = \"\";\n    foreach(i; str)\n    {\n        result = i ~\
    \ result;\n    }\n    return result;\n}\n/*\nYou", "{\n    long result = 0;\n\
    \    string hex = \"0123456789ABCDEF\";\n    foreach(i; 0 .. num.length)\n   \
    \ {\n        if(hex[num[i]] == '2' || hex[num[i]] == '3' || hex[num[i]] == '5'\
    \ || hex[num[i]] == '7' || hex[num[i]] == 'B' || hex[num[i]] == 'D')\n       \
    \ {\n            result++;\n        }\n    }\n    return result;\n}", "{\n   \
    \ long count = 0;\n    foreach(i; num)\n    {\n        if(i == '2' || i == '3'\
    \ || i == '5' || i == '7' || i == 'B' || i == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(i;\
    \ num)\n    {\n        if(i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(c; num)\n    {\n        if(c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    foreach(i; num)\n    {\n  \
    \      if(i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(c; num)\n    {\n        if(c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    int[] primes = [2,\
    \ 3, 5, 7, 11, 13];\n    int[] hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15];\n    int[] hex_primes = [2, 3, 5, 7, 11, 13];\n    int[]\
    \ hex_non_primes = [0, 1, 4, 6, 8, 9, 10, 12, 14, 15];\n    int[] hex_digits_in_num\
    \ = [];\n    int[] hex_primes_in_num = [];\n    int[] hex_non_primes_in_num =\
    \ [];\n    int[] hex_primes_in_num_count = [];\n    int[] hex_non_primes_in_num_count\
    \ = [];\n    int[] hex_primes_in_num_count_sum = [];\n    int[] hex_non_primes_in_num_count_sum\
    \ = [];\n    int[] hex_primes_in_num_count_sum_sum = [];\n    int[] hex_non_primes_in_num_count_sum_sum\
    \ = [];\n    int[] hex_primes_in_num_count_sum_sum_sum = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum\
    \ = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum_sum\
    \ = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum_sum = [];\n    int[]\
    \ hex_non_primes_in_num_count_sum_sum_sum_sum_sum = [];\n    int[] hex_primes_in_num_count_sum_sum_sum_sum_sum_sum\
    \ = [];\n    int[] hex_non_primes_in_num_count_sum_sum_sum_sum_sum_sum = [];\n\
    \    int[] hex_primes_in_num_count_sum_sum_sum_sum_sum_sum_sum", "{\n    long\
    \ count = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    foreach(immutable char c; num)\n\
    \    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' ||\
    \ c == 'D')\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c; num)\n    {\n        if(c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; num)\n    {\n        if(c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; num)\n    {\n        if(c == '2' || c == '3' || c == '5' || c == '7' || c\
    \ == 'B' || c == 'D')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
