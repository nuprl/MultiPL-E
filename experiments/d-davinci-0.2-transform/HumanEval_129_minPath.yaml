name: HumanEval_129_minPath
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a grid with N rows\
  \ and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains\
  \ a value. Every integer in the range [1, N * N]\n    inclusive appears exactly\
  \ once on the cells of the grid.\n\n    You have to find the minimum path of length\
  \ k in the grid. You can start\n    from any cell, and in each step you can move\
  \ to any of the neighbor cells,\n    in other words, you can go to cells which share\
  \ an edge with you current\n    cell.\n    Please note that a path of length k means\
  \ visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off\
  \ the grid.\n    A path A (of length k) is considered less than a path B (of length\
  \ k) if\n    after making the ordered lists of the values on the cells that A and\
  \ B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n    than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n   \
  \ lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return\
  \ an ordered list of the values on the cells that the minimum path go through.\n\
  \n    Examples:    \n    >>> minPath([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]],\
  \ 3L)\n    [1L, 2L, 1L]\n\n    >>> minPath([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L,\
  \ 2L]], 1L)\n    [1L]\n    \n*/\nlong[] minPath(long[][] grid, long k) \n"
tests: "unittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L,\
  \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L,\
  \ 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L)\
  \ == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L,\
  \ 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L,\
  \ 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L,\
  \ 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L,\
  \ 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L)\
  \ == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L,\
  \ 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L,\
  \ 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L],\
  \ [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L,\
  \ 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n\
  \    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L,\
  \ 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L,\
  \ 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][]\
    \ prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n     \
    \       }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[(int)k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n\
    \        path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n     \
    \       case 1:\n                x--;\n                break;\n            case\
    \ 2:\n                y--;\n                break;\n            case 3:\n    \
    \            x++;\n                break;", "{\n    int n = grid.length;\n   \
    \ int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n   \
    \ for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n\
    \            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] prev = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      prev[i][j] = -1;\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n        {\n            if (i > 0)\n            {\n         \
    \       if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n                {\n       \
    \             dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    prev[i][j]\
    \ = 0;\n                }\n            }\n            if (j > 0)\n           \
    \ {\n                if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n             \
    \   {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n           \
    \         prev[i][j] = 1;\n                }\n            }\n        }\n    long[]\
    \ res = new long[k];\n    int x = n - 1;\n    int y = n - 1;\n    for (int i =\
    \ 0; i < k; i++)\n    {\n", "{\n    // Write your code here\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] path = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            path[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = grid[0][0];\n    for (int i = 0; i < N; i++)\n    {\n   \
    \     for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i -\
    \ 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                path[i][j] = 1;\n            }\n    \
    \        if (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + grid[i][j];\n\
    \                path[i][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + grid[i][j];\n                path[i][j] = 4;\n            }\n\
    \        }\n    }\n    long[] res = new long[k];\n    int i = 0;\n    int j =\
    \ 0;\n    for (int t = 0", "{\n    long N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = (i + 1) * N + j + 1;\n            prev[i][j]\
    \ = -1;\n            next[i][j] = -1;\n        }\n    }\n    for (long i = 0;\
    \ i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n      \
    \      if (i > 0 && dp[i - 1][j] > dp[i][j])\n            {\n                dp[i\
    \ - 1][j] = dp[i][j];\n                prev[i - 1][j] = i * N + j;\n         \
    \   }\n            if (j > 0 && dp[i][j - 1] > dp[i][j])\n            {\n    \
    \            dp[i][j - 1] = dp[i][j];\n                prev[i][j - 1] = i * N\
    \ + j;\n            }\n            if (i < N - 1 && dp[i + 1][j] > dp[i][j])\n\
    \            {\n                dp[i + 1][j] = dp[i][j];\n                prev[i\
    \ + 1][j] = i * N + j;\n            }\n            if (j < N - 1 && dp[i][j +\
    \ 1] > dp[i][j])\n            {\n                dp[i][j + 1] = dp[i][j];\n  \
    \              prev[i][j + 1] = i * N + j;\n            }\n        }\n    }\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = (i + 1) * N", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < N\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    long[] res = new long[k];\n    for (int i = 0; i < k;\
    \ i++)\n    {\n        res[i] = grid[0][0];\n        int x = 0, y = 0;\n     \
    \   if (prev[x][y] == 1)\n            x--;\n        else if (prev[x][y] == 2)\n\
    \            y--;\n        else if (prev[x][y] == 3)\n            x++;\n     \
    \  ", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto dp\
    \ = new long[][](n, m);\n    auto path = new long[][](n, m);\n    foreach (i;\
    \ 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            if (i ==\
    \ 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n      \
    \          path[i][j] = grid[i][j];\n            }\n            else if (i ==\
    \ 0)\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n \
    \               path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n            }\n\
    \            else if (j == 0)\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n\
    \            }\n            else\n            {\n                dp[i][j] = min(dp[i\
    \ - 1][j], dp[i][j - 1]) + grid[i][j];\n                if (dp[i - 1][j] < dp[i][j\
    \ - 1])\n                {\n                    path[i][j] = path[i - 1][j] *\
    \ 10 + grid[i][j];\n                }\n                else\n                {\n\
    \                    path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n        \
    \        }\n            }\n        }\n    }\n    auto res = new long[k];\n   \
    \ auto i = n - 1;\n    auto j = m - 1;\n    foreach (l; 0 .. k)\n    {\n     \
    \   res[k - l - 1] = path[i][j] % 10;\n        if (i == 0)\n        {\n      \
    \      j--;\n        }\n        else if (j == 0)\n        {\n            i--;\n\
    \        }\n        else\n        {\n            if", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    foreach\
    \ (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n            dp[i][j]\
    \ = long.max;\n            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] =\
    \ grid[0][0];\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n \
    \       {\n            if (i > 0)\n            {\n                if (dp[i][j]\
    \ > dp[i - 1][j] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j];\n                    prev[i][j] = 0;\n        \
    \        }\n            }\n            if (j > 0)\n            {\n           \
    \     if (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n         \
    \           dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    prev[i][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    long[] res = new\
    \ long[k];\n    long i = N - 1;\n    long j = N - 1;\n    long cnt = k - 1;\n\
    \    while (cnt >= 0)\n    {\n        res[cnt] = grid[i][j];\n        if (prev[i][j]\
    \ == 0)\n        {\n            i--;\n        }\n        else if (prev[i][j] ==\
    \ 1)\n        {\n            j--;\n        }\n        cnt--;\n    }\n    return\
    \ res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n  \
    \  for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        \
    \    dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[] path = new int[k];\n    int cur = dp[N - 1][N - 1];\n  \
    \  path[k - 1] = grid[N - 1][N - 1];\n    int i = N - 1;\n    int j = N - 1;\n\
    \    for (int l = k - 2; l >= 0; l--)\n    {\n        if (i > 0 && dp[i - 1][j]\
    \ + grid[i][j] == cur)\n        {\n            path[l] = grid[i - 1][j];\n   \
    \         cur -= grid[i][j];\n            i--;\n        }\n        else\n    \
    \    {\n            path[l] = grid[i][j - 1];\n            cur -= grid[i][j];\n\
    \            j--;\n        }\n    }\n    return path;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ visited = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][]\
    \ path_prev = new long[n][n];\n    long[][] path_visited = new long[n][n];\n \
    \   long[][] path_dp = new long[n][n];\n    for (long i = 0; i < n; i++)\n   \
    \ {\n        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = -1;\n            visited[i][j] = 0;\n            path[i][j]\
    \ = grid[i][j];\n            path_prev[i][j] = -1;\n            path_visited[i][j]\
    \ = 0;\n            path_dp[i][j] = grid[i][j];\n        }\n    }\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            if (i > 0)\n            {\n                if (dp[i][j] > dp[i -\
    \ 1][j] + grid[i][j])\n                {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                    prev[i][j] = 0;\n               \
    \ }\n                if (path_dp[i][j] > path_dp[i - 1][j] + grid[i][j])\n   \
    \             {\n                    path_dp[i][j] = path_dp[i - 1][j] + grid[i][j];\n\
    \                    path_prev[i][j] = 0;\n                }\n            }\n\
    \            if (j > 0)\n            {\n                if (dp[i][j] > dp[i][j\
    \ - 1] + grid[i][j])\n                {\n                    dp[i][j]", "{\n \
    \   auto n = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    foreach (i; 0 .. n)\n    {\n \
    \       foreach (j; 0 .. m)\n        {\n            if (i == 0 && j == 0)\n  \
    \          {\n                dp[i][j] = grid[i][j];\n                path[i][j]\
    \ = grid[i][j];\n            }\n            else if (i == 0)\n            {\n\
    \                dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j]\
    \ = path[i][j - 1] * 10 + grid[i][j];\n            }\n            else if (j ==\
    \ 0)\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n \
    \               path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n            }\n\
    \            else\n            {\n                dp[i][j] = min(dp[i - 1][j],\
    \ dp[i][j - 1]) + grid[i][j];\n                if (dp[i - 1][j] < dp[i][j - 1])\n\
    \                {\n                    path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n\
    \                }\n                else\n                {\n                \
    \    path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n                }\n     \
    \       }\n        }\n    }\n    auto res = new long[k];\n    auto cur = path[n\
    \ - 1][m - 1];\n    foreach (i; 0 .. k)\n    {\n        res[i] = cur % 10;\n \
    \       cur /= 10;\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i][j] + grid[i\
    \ - 1][j] < dp[i - 1][j])\n            {\n                dp[i - 1][j] = dp[i][j]\
    \ + grid[i - 1][j];\n                prev[i - 1][j] = 1;\n            }\n    \
    \        if (j > 0 && dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n            {\n\
    \                dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n                prev[i][j\
    \ - 1] = 2;\n            }\n            if (i < n - 1 && dp[i][j] + grid[i + 1][j]\
    \ < dp[i + 1][j])\n            {\n                dp[i + 1][j] = dp[i][j] + grid[i\
    \ + 1][j];\n                prev[i + 1][j] = 3;\n            }\n            if\
    \ (j < n - 1 && dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n            {\n   \
    \             dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n                prev[i][j\
    \ + 1] = 4;\n            }\n        }\n    long[] ans = new long[(int)k];\n  \
    \  int x = n - 1, y = n - 1;\n    for (int i = (int)k - 1; i >= 0; i--)", "{\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = 0;\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n      \
    \      if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long cur = 0;\n\
    \    foreach(i; 0 .. k)\n    {\n        res[i] = grid[cur / n][cur % n];\n   \
    \     if(cur / n > 0 && dp[cur / n - 1][cur % n] + grid[cur / n][cur % n] == dp[cur\
    \ / n][cur % n])\n            cur -= n;\n        else if(cur % n > 0 && dp[cur\
    \ / n][cur % n - 1] + grid[cur / n][cur % n] == dp[cur / n][cur % n])\n      \
    \      cur -= 1;\n    }\n    return res;\n}", "{\n    long[] result = new long[k];\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = long.max;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0)\n            {\n                dp[i][j] =\
    \ min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n            if (j\
    \ > 0)\n            {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] +\
    \ grid[i][j]);\n            }\n        }\n    }\n    long x = 0;\n    long y =\
    \ 0;\n    for (long i = 0; i < k; i++)\n    {\n        result[i] = grid[x][y];\n\
    \        if (x == n - 1 && y == n - 1)\n        {\n            break;\n      \
    \  }\n        if (x == n - 1)\n        {\n            y++;\n        }\n      \
    \  else if (y == n - 1)\n        {\n            x++;\n        }\n        else\n\
    \        {\n            if (dp[x + 1][y] < dp[x][y + 1])\n            {\n    \
    \            x++;\n            }\n            else\n            {\n          \
    \      y++;\n            }\n        }\n    }\n    return result;\n}", "{\n   \
    \ int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path = new\
    \ int[n][n];\n    int[][] prev = new int[n][n];\n    int[][] next = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            prev[i][j] = -1;\n  \
    \          next[i][j] = -1;\n        }\n    }\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = i - 1;\n                    next[i][j] = j;\n\
    \                }\n            }\n            if (j > 0)\n            {\n   \
    \             if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n                {\n \
    \                   dp[i][j] = dp[i][j - 1] + grid[i][j];\n                  \
    \  prev[i][j] = i;\n                    next[i][j] = j - 1;\n                }\n\
    \            }\n        }\n    }\n    int min = int.max;\n    int minI = -1;\n\
    \    int minJ = -1;\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (dp[i][j] < min)\n           \
    \ {\n                min = dp[i][j];\n                minI = i;\n            \
    \    minJ = j;\n            }\n        }\n    }\n    long[] res = new long[k];",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    long[][] path =\
    \ new long[N][N];\n    long[][] path_prev = new long[N][N];\n    long[][] path_next\
    \ = new long[N][N];\n    long[][] path_prev_prev = new long[N][N];\n    long[][]\
    \ path_next_next = new long[N][N];\n    long[][] path_prev_next = new long[N][N];\n\
    \    long[][] path_next_prev = new long[N][N];\n    long[][] path_prev_prev_next\
    \ = new long[N][N];\n    long[][] path_next_next_prev = new long[N][N];\n    long[][]\
    \ path_prev_next_next = new long[N][N];\n    long[][] path_next_prev_prev = new\
    \ long[N][N];\n    long[][] path_prev_prev_next_next = new long[N][N];\n    long[][]\
    \ path_next_next_prev_prev = new long[N][N];\n    long[][] path_prev_next_next_prev\
    \ = new long[N][N];\n    long[][] path_next_prev_prev_next = new long[N][N];\n\
    \    long[][] path_prev_prev_next_next_prev = new long[N][N];\n    long[][] path_next_next_prev_prev_next\
    \ = new long[N][N];\n    long[][] path_prev_next_next_prev_prev = new long[N][N];\n\
    \    long[][] path_next_prev_prev_next_next = new long[N][N];\n    long[][] path_prev_prev_next_next_prev_prev\
    \ = new long[N][N];\n    long[][] path_next_next_prev_prev_next_next = new long[N][N];",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    for (long\
    \ i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    for (long i = 1; i < k; i++)\n    {\n        long[][] new_dp\
    \ = new long[N][N];\n        for (long x = 0; x < N; x++)\n            for (long\
    \ y = 0; y < N; y++)\n            {\n                long min_val = dp[x][y];\n\
    \                if (x > 0)\n                    min_val = min(min_val, dp[x -\
    \ 1][y]);\n                if (x < N - 1)\n                    min_val = min(min_val,\
    \ dp[x + 1][y]);\n                if (y > 0)\n                    min_val = min(min_val,\
    \ dp[x][y - 1]);\n                if (y < N - 1)\n                    min_val\
    \ = min(min_val, dp[x][y + 1]);\n                new_dp[x][y] = min_val;\n   \
    \         }\n        dp = new_dp;\n    }\n    long[] ret = new long[k];\n    long\
    \ x = 0, y = 0;\n    for (long i = 0; i < k; i++)\n    {\n        ret[i] = dp[x][y];\n\
    \        long min_val = dp[x][y];\n        if (x > 0 && dp[x - 1][y] < min_val)\n\
    \        {\n            min_val = dp[x - 1][y];\n            x--;\n        }\n\
    \        else if (x < N - 1 && dp[x + 1][y] < min_val)\n        {\n          \
    \  min_val = dp[x + 1][y];\n            x++;\n        }\n        else if (y >\
    \ 0 && dp[x][y - 1] < min_val)\n        {\n            min_val = dp[x][y - 1];",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long\
    \ i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n\
    \            if (i > 0 && dp[i][j] > dp[i - 1][j] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i][j]\
    \ > dp[i + 1][j] + grid[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j] + grid[i][j];\n                prev[i][j] = 2;\n            }\n    \
    \        if (j < N - 1 && dp[i][j] > dp[i][j + 1] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1] + grid[i][j];\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[k];\n    long\
    \ i = N - 1;\n    long j = N - 1;\n    for (long l = k - 1;", "{\n    int n =\
    \ grid.length;\n    long[] res = new long[(int)k];\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int i = n - 1;\n    int j = n - 1;\n    int idx = (int)k - 1;\n    while\
    \ (idx >= 0)\n    {\n        res[idx--] = grid[i][j];\n        if (i > 0 && dp[i\
    \ - 1][j] + 1 == dp[i][j])\n            i--;\n        else\n            j--;\n\
    \    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][] dp =\
    \ new long[N][N];\n    long[][] path = new long[N][N];\n    for (long i = 0; i\
    \ < N; i++) \n    {\n        for (long j = 0; j < N; j++) \n        {\n      \
    \      dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n        }\n    }\n\
    \    for (long i = 0; i < N; i++) \n    {\n        for (long j = 0; j < N; j++)\
    \ \n        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j]) \n          \
    \  {\n                dp[i][j] = dp[i - 1][j];\n                path[i][j] = path[i\
    \ - 1][j];\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1]) \n\
    \            {\n                dp[i][j] = dp[i][j - 1];\n                path[i][j]\
    \ = path[i][j - 1];\n            }\n            if (i < N - 1 && dp[i][j] > dp[i\
    \ + 1][j]) \n            {\n                dp[i][j] = dp[i + 1][j];\n       \
    \         path[i][j] = path[i + 1][j];\n            }\n            if (j < N -\
    \ 1 && dp[i][j] > dp[i][j + 1]) \n            {\n                dp[i][j] = dp[i][j\
    \ + 1];\n                path[i][j] = path[i][j + 1];\n            }\n       \
    \ }\n    }\n    long[][] dp2 = new long[N][N];\n    long[][] path2 = new long[N][N];\n\
    \    for (long i = 0; i < N; i++) \n    {\n        for (long j = 0; j < N; j++)\
    \ \n        {\n            dp2[i][", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 3;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n            }\n      \
    \  }\n    int i = N - 1;\n    int j = N - 1;\n    long[] res = new long[k];\n\
    \    for (int idx = k - 1; idx >= 0; idx--)\n    {\n        res[idx] = grid[i][j];\n\
    \        if (prev[i][j] == 1)\n            i--;\n        else if (prev[i][j] ==\
    \ 2)\n            j--;\n        else if (prev", "{\n    // Write your code here\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n  \
    \          if (i > 0)\n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            }\n            if (j > 0)\n       \
    \     {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \            }\n        }\n    }\n    int[] path = new int[k];\n    int cur =\
    \ 0;\n    int i = n - 1;\n    int j = n - 1;\n    while (cur < k)\n    {\n   \
    \     path[cur] = grid[i][j];\n        if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ == dp[i][j])\n        {\n            i--;\n        }\n        else\n       \
    \ {\n            j--;\n        }\n        cur++;\n    }\n    return path;\n}",
  "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0)\n            {\n                if (dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    prev[i][j] = 1;\n                }\n    \
    \        }\n            if (j > 0)\n            {\n                if (dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = 2;\n        \
    \        }\n            }\n        }\n    long[] res = new long[(int)k];\n   \
    \ int i = N - 1;\n    int j = N - 1;\n    for (int l = (int)k - 1; l >= 0; l--)\n\
    \    {\n        res[l] = grid[i][j];\n        if (prev[i][j] == 1)\n         \
    \   i--;\n        else\n            j--;\n    }\n    return res;\n}", "{\n   \
    \ int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            int\
    \ cur = grid[i][j];\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n \
    \           {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = cur;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = cur;\n            }\n            if (i < N - 1 && dp[i + 1][j]\
    \ + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = cur;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = cur;\n            }\n        }\n   \
    \ int x = 0, y = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            if (dp[i][j] < dp[x][y])\n            {\n         \
    \       x = i;\n                y = j;\n            }\n    long[] res = new long[k];\n\
    \    for (int i = 0; i <", "{\n    int N = grid.length;\n    int[][] values =\
    \ new int[N][N];\n    int[][] paths = new int[N][N];\n    int[][] minPath = new\
    \ int[N][N];\n    int[][] minPathValue = new int[N][N];\n    int[][] minPathIndex\
    \ = new int[N][N];\n    int[][] minPathIndex2 = new int[N][N];\n    int[][] minPathIndex3\
    \ = new int[N][N];\n    int[][] minPathIndex4 = new int[N][N];\n    int[][] minPathIndex5\
    \ = new int[N][N];\n    int[][] minPathIndex6 = new int[N][N];\n    int[][] minPathIndex7\
    \ = new int[N][N];\n    int[][] minPathIndex8 = new int[N][N];\n    int[][] minPathIndex9\
    \ = new int[N][N];\n    int[][] minPathIndex10 = new int[N][N];\n    int[][] minPathIndex11\
    \ = new int[N][N];\n    int[][] minPathIndex12 = new int[N][N];\n    int[][] minPathIndex13\
    \ = new int[N][N];\n    int[][] minPathIndex14 = new int[N][N];\n    int[][] minPathIndex15\
    \ = new int[N][N];\n    int[][] minPathIndex16 = new int[N][N];\n    int[][] minPathIndex17\
    \ = new int[N][N];\n    int[][] minPathIndex18 = new int[N][N];\n    int[][] minPathIndex19\
    \ = new int[N][N];\n    int[][] minPathIndex20 = new int[N][N];\n    int[][] minPathIndex21\
    \ = new int[N][N];\n    int[][] minPathIndex22 = new int[N][N];\n    int[][] minPathIndex23\
    \ = new int[N][N];\n    int[][] minPathIndex24 = new int[N][N];\n    int[][] min",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    long[][] path =\
    \ new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = i;\n            next[i][j] = j;\n            path[i][j] = 1;\n\
    \        }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j];\n                prev[i][j]\
    \ = i - 1;\n                next[i][j] = j;\n                path[i][j] = path[i\
    \ - 1][j] + 1;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1])\n\
    \            {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j]\
    \ = i;\n                next[i][j] = j - 1;\n                path[i][j] = path[i][j\
    \ - 1] + 1;\n            }\n            if (i < N - 1 && dp[i][j] > dp[i + 1][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j];\n                prev[i][j]\
    \ = i + 1;\n                next[i][j] = j;\n                path[i][j] = path[i\
    \ + 1][j] + 1;\n            }\n            if (j < N - 1 && dp[i][j] > dp[i][j\
    \ + 1])\n           ", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n\
    \        for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n \
    \           {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n       \
    \         prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1]\
    \ + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 1;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 3;\n            }\n        }\n    }\n    long[]\
    \ ans = new long[k];\n    long i = N - 1;\n    long j = N - 1;\n    for (long\
    \ l = k - 1;", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = -1;\n        }\n    }\n    for (long i = 0; i < n; i++)\n\
    \    {\n        for (long j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i][j] > dp[i - 1][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j];\n                prev[i][j] = 0;\n            }\n            if (j\
    \ > 0 && dp[i][j] > dp[i][j - 1])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1];\n                prev[i][j] = 1;\n            }\n            if (i < n\
    \ - 1 && dp[i][j] > dp[i + 1][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j];\n                prev[i][j] = 2;\n            }\n            if (j\
    \ < n - 1 && dp[i][j] > dp[i][j + 1])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1];\n                prev[i][j] = 3;\n            }\n        }\n\
    \    }\n    long[] res = new long[cast(int)k];\n    long i = 0;\n    long j =\
    \ 0;\n    for (long l = 0; l < k; l++)\n    {\n        res[cast(int)l] = grid[cast(int)i][cast(int)j];\n\
    \        if (prev[cast(int)i][cast(int)j] == 0)\n            i--;\n        else\
    \ if (prev[cast(int)i", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    for\
    \ (auto i = 0; i < n; i++)\n    {\n        for (auto j = 0; j < m; j++)\n    \
    \    {\n            dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n    \
    \    }\n    }\n    for (auto i = 1; i < n; i++)\n    {\n        dp[i][0] += dp[i\
    \ - 1][0];\n        path[i][0] += path[i - 1][0];\n    }\n    for (auto j = 1;\
    \ j < m; j++)\n    {\n        dp[0][j] += dp[0][j - 1];\n        path[0][j] +=\
    \ path[0][j - 1];\n    }\n    for (auto i = 1; i < n; i++)\n    {\n        for\
    \ (auto j = 1; j < m; j++)\n        {\n            if (dp[i - 1][j] < dp[i][j\
    \ - 1])\n            {\n                dp[i][j] += dp[i - 1][j];\n          \
    \      path[i][j] += path[i - 1][j];\n            }\n            else if (dp[i\
    \ - 1][j] > dp[i][j - 1])\n            {\n                dp[i][j] += dp[i][j\
    \ - 1];\n                path[i][j] += path[i][j - 1];\n            }\n      \
    \      else\n            {\n                dp[i][j] += dp[i - 1][j];\n      \
    \          path[i][j] += path[i - 1][j];\n            }\n        }\n    }\n  \
    \  auto min = dp[n - 1][m - 1];\n    auto minPath = path[n - 1][m - 1];\n    for\
    \ (auto i = 0; i < n; i++)\n    {\n        for (auto j = 0; j < m", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int i = 0, j =\
    \ 0;\n    foreach(idx; 0 .. k)\n    {\n        res[idx] = grid[i][j];\n      \
    \  if(i == N - 1 && j == N - 1)\n            break;\n        if(i == N - 1)\n\
    \            j++;\n        else if(j == N - 1)\n            i++;\n        else\
    \ if(dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n          \
    \  j++;\n    }\n    return res;\n}", "{\n    // Write your code here\n    int\
    \ n = grid.length;\n    int[][] visited = new int[n][n];\n    int[] min = new\
    \ int[k];\n    int[] min_index = new int[k];\n    int[] min_row = new int[k];\n\
    \    int[] min_col = new int[k];\n    int[] min_visited = new int[k];\n    int[]\
    \ min_visited_index = new int[k];\n    int[] min_visited_row = new int[k];\n \
    \   int[] min_visited_col = new int[k];\n    int[] min_visited_index_row = new\
    \ int[k];\n    int[] min_visited_index_col = new int[k];\n    int[] min_visited_index_row_col\
    \ = new int[k];\n    int[] min_visited_index_row_col_index = new int[k];\n   \
    \ int[] min_visited_index_row_col_index_row = new int[k];\n    int[] min_visited_index_row_col_index_row_col\
    \ = new int[k];\n    int[] min_visited_index_row_col_index_row_col_index = new\
    \ int[k];\n    int[] min_visited_index_row_col_index_row_col_index_row = new int[k];\n\
    \    int[] min_visited_index_row_col_index_row_col_index_row_col = new int[k];\n\
    \    int[] min_visited_index_row_col_index_row_col_index_row_col_index = new int[k];\n\
    \    int[] min_visited_index_row_col_index_row_col_index_row_col_index_row = new\
    \ int[k];\n    int[] min_visited_index_row_col_index_row_col_index_row_col_index_row_col\
    \ = new int[k];\n    int[] min_visited_index_row_col_index_row_col_index_row_col_index_row_col_index\
    \ = new int[k];\n", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     path[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n            x++;\n       ", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 3;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n            }\n      \
    \  }\n    int x = 0, y = 0;\n    long[] res = new long[k];\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        res[i] = grid[x][y];\n        if (prev[x][y] ==\
    \ 1)\n            x--;\n        else if (prev[x][y] == 2)\n            y--;\n\
    \        else if (prev[x][y] == 3)\n            x++;\n       ", "{\n    int N\
    \ = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    long[] ans = new\
    \ long[k];\n    int cur = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n            if (dp[i][j] == cur)\n            {\n      \
    \          ans[cur] = grid[i][j];\n                cur++;\n                if\
    \ (cur == k)\n                    return ans;\n            }\n    return ans;\n\
    }", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][]\
    \ prev = new long[n][n];\n    long[][] next = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n           \
    \ next[i][j] = -1;\n        }\n    }\n    for (long step = 1; step < k; step++)\n\
    \    {\n        for (long i = 0; i < n; i++)\n        {\n            for (long\
    \ j = 0; j < n; j++)\n            {\n                long min = dp[i][j];\n  \
    \              long min_i = i;\n                long min_j = j;\n            \
    \    if (i > 0 && dp[i - 1][j] < min)\n                {\n                   \
    \ min = dp[i - 1][j];\n                    min_i = i - 1;\n                  \
    \  min_j = j;\n                }\n                if (i < n - 1 && dp[i + 1][j]\
    \ < min)\n                {\n                    min = dp[i + 1][j];\n       \
    \             min_i = i + 1;\n                    min_j = j;\n               \
    \ }\n                if (j > 0 && dp[i][j - 1] < min)\n                {\n   \
    \                 min = dp[i][j - 1];\n                    min_i = i;\n      \
    \              min_j = j - 1;\n                }\n                if (j < n -\
    \ 1 && dp[i][j + 1] < min)\n                {\n                    min = dp[i][j\
    \ + 1];\n                    min_i = i;\n                    min_j = j + 1;\n\
    \                }\n                dp[i][j] = min * 10 + grid[i][j];\n      \
    \          prev[i][j] = min_i * n + min_j;\n            }\n        }\n    }\n\
    \    long min = dp[0", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int x = 0, y =\
    \ 0;\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n\
    \        res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n            x++;\n       ", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next\
    \ = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_prev\
    \ = new long[n][n];\n    long[][] path_next = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            prev[i][j] = grid[i][j];\n   \
    \         next[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n   \
    \         path_prev[i][j] = grid[i][j];\n            path_next[i][j] = grid[i][j];\n\
    \        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n  \
    \          {\n                prev[j][l] = dp[j][l];\n                path_prev[j][l]\
    \ = path[j][l];\n            }\n        }\n        for (long j = 0; j < n; j++)\n\
    \        {\n            for (long l = 0; l < n; l++)\n            {\n        \
    \        if (j > 0)\n                {\n                    if (prev[j - 1][l]\
    \ < dp[j][l])\n                    {\n                        dp[j][l] = prev[j\
    \ - 1][l];\n                        path[j][l] = path_prev[j - 1][l];\n      \
    \              }\n                    else if (prev[j - 1][l] == dp[j][l])\n \
    \                   {\n                        if (path_prev[j - 1][l] < path[j][l])\n\
    \                        {\n                            path[j][l] = path_prev[j\
    \ - 1][", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n \
    \   long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n   \
    \ long[][] dir = new long[N][N];\n    long[][] path = new long[N][N];\n    long[][]\
    \ path_prev = new long[N][N];\n    long[][] path_next = new long[N][N];\n    long[][]\
    \ path_dir = new long[N][N];\n    long[][] path_val = new long[N][N];\n    long[][]\
    \ path_len = new long[N][N];\n    long[][] path_pos = new long[N][N];\n    long[][]\
    \ path_prev_pos = new long[N][N];\n    long[][] path_next_pos = new long[N][N];\n\
    \    long[][] path_dir_pos = new long[N][N];\n    long[][] path_val_pos = new\
    \ long[N][N];\n    long[][] path_len_pos = new long[N][N];\n    long[][] path_val_pos_len\
    \ = new long[N][N];\n    long[][] path_val_pos_len_prev = new long[N][N];\n  \
    \  long[][] path_val_pos_len_next = new long[N][N];\n    long[][] path_val_pos_len_dir\
    \ = new long[N][N];\n    long[][] path_val_pos_len_prev_pos = new long[N][N];\n\
    \    long[][] path_val_pos_len_next_pos = new long[N][N];\n    long[][] path_val_pos_len_dir_pos\
    \ = new long[N][N];\n    long[][] path_val_pos_len_prev_pos_val = new long[N][N];\n\
    \    long[][] path_val_pos_len_next_pos_val = new long[N][N];\n    long[][] path_val",
  "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    long[][] next = new long[n][n];\n    long[][] path =\
    \ new long[n][n];\n    long[][] path_prev = new long[n][n];\n    long[][] path_next\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++) \n    {\n        for (long\
    \ j = 0; j < n; j++) \n        {\n            dp[i][j] = grid[i][j];\n       \
    \     prev[i][j] = grid[i][j];\n            next[i][j] = grid[i][j];\n       \
    \     path[i][j] = grid[i][j];\n            path_prev[i][j] = grid[i][j];\n  \
    \          path_next[i][j] = grid[i][j];\n        }\n    }\n    for (long step\
    \ = 1; step < k; step++) \n    {\n        for (long i = 0; i < n; i++) \n    \
    \    {\n            for (long j = 0; j < n; j++) \n            {\n           \
    \     if (i > 0) \n                {\n                    if (prev[i - 1][j] <\
    \ prev[i][j]) \n                    {\n                        prev[i][j] = prev[i\
    \ - 1][j];\n                        path_prev[i][j] = path_prev[i - 1][j];\n \
    \                   }\n                    else if (prev[i - 1][j] == prev[i][j])\
    \ \n                    {\n                        if (path_prev[i - 1][j] < path_prev[i][j])\
    \ \n                        {\n                            path_prev[i][j] = path_prev[i\
    \ - 1][j];\n                        }\n                    }\n               \
    \ }\n                if (i < n - 1) \n                {\n                    if\
    \ (next[i + 1][j] < next[i][j]) \n                    {\n                    \
    \    next[i][j] = next[i + 1][", "{\n    // Write your code here\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            dp[i][j] =\
    \ int.max;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n\
    \            {\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            }\n            if (j > 0)\n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n\
    \    long[] res = new long[k];\n    int i = 0;\n    int j = 0;\n    for (int l\
    \ = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        if (i == n -\
    \ 1)\n        {\n            j++;\n        }\n        else if (j == n - 1)\n \
    \       {\n            i++;\n        }\n        else\n        {\n            if\
    \ (dp[i + 1][j] < dp[i][j + 1])\n            {\n                i++;\n       \
    \     }\n            else\n            {\n                j++;\n            }\n\
    \        }\n    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][] next\
    \ = new long[N][N];\n    long[][] cost = new long[N][N];\n    for (long i = 0;\
    \ i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n      \
    \      dp[i][j] = grid[i][j];\n            prev[i][j] = grid[i][j];\n        \
    \    next[i][j] = grid[i][j];\n            cost[i][j] = grid[i][j];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++)\n    {\n        for (long j = 0; j <\
    \ N; j++)\n        {\n            for (long l = 0; l < N; l++)\n            {\n\
    \                if (j > 0)\n                {\n                    if (dp[j][l]\
    \ > dp[j - 1][l] + cost[j][l])\n                    {\n                      \
    \  dp[j][l] = dp[j - 1][l] + cost[j][l];\n                        prev[j][l] =\
    \ prev[j - 1][l];\n                        next[j][l] = grid[j][l];\n        \
    \            }\n                    else if (dp[j][l] == dp[j - 1][l] + cost[j][l])\n\
    \                    {\n                        if (prev[j][l] > prev[j - 1][l])\n\
    \                        {\n                            prev[j][l] = prev[j -\
    \ 1][l];\n                            next[j][l] = grid[j][l];\n             \
    \           }\n                        else if (prev[j][l] == prev[j - 1][l])\n\
    \                        {\n                            if (next[j][l] > grid[j][l])\n\
    \                            {\n                                next[j][l] = grid[j][l];\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n                if (j < N - 1)\n                {\n \
    \                   if (", "{\n    long N = grid.length;\n    long[] res = new\
    \ long[k];\n    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n\
    \    for (long i = 0; i < N; i++) {\n        for (long j = 0; j < N; j++) {\n\
    \            dp[i][j] = long.max;\n            prev[i][j] = -1;\n        }\n \
    \   }\n    dp[0][0] = grid[0][0];\n    for (long i = 0; i < N; i++) {\n      \
    \  for (long j = 0; j < N; j++) {\n            if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n     \
    \           prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j -\
    \ 1] + grid[i][j] < dp[i][j]) {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                prev[i][j] = 1;\n            }\n            if (i < N - 1 &&\
    \ dp[i + 1][j] + grid[i][j] < dp[i][j]) {\n                dp[i][j] = dp[i + 1][j]\
    \ + grid[i][j];\n                prev[i][j] = 2;\n            }\n            if\
    \ (j < N - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j]) {\n                dp[i][j]\
    \ = dp[i][j + 1] + grid[i][j];\n                prev[i][j] = 3;\n            }\n\
    \        }\n    }\n    long i = N - 1;\n    long j = N - 1;\n    for (long l =\
    \ k - 1; l >= 0; l--) {\n        res[l] = grid", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_prev\
    \ = new long[n][n];\n    long[][] path_next = new long[n][n];\n    long[][] path_prev_prev\
    \ = new long[n][n];\n    long[][] path_next_next = new long[n][n];\n    long[][]\
    \ path_prev_prev_prev = new long[n][n];\n    long[][] path_next_next_next = new\
    \ long[n][n];\n    long[][] path_prev_prev_prev_prev = new long[n][n];\n    long[][]\
    \ path_next_next_next_next = new long[n][n];\n    long[][] path_prev_prev_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_next_next_next_next_next = new long[n][n];\n\
    \    long[][] path_prev_prev_prev_prev_prev_prev = new long[n][n];\n    long[][]\
    \ path_next_next_next_next_next_next = new long[n][n];\n    long[][] path_prev_prev_prev_prev_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_next_next_next_next_next_next_next = new\
    \ long[n][n];\n    long[][] path_prev_prev_prev_prev_prev_prev_prev_prev = new\
    \ long[n][n];\n    long[][] path_next_next_next_next_next_next_next_next = new\
    \ long[n][n];\n    long[][] path_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = new long[n][n];\n    long[][] path_next_next_next_next_next_next_next_next",
  "{\n    long N = grid.length;\n    long[] res = new long[k];\n    long[][] dp =\
    \ new long[N][N];\n    long[][] prev = new long[N][N];\n    for (long i = 0; i\
    \ < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n        \
    \    dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n        }\n    }\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j];\n                prev[i][j] = 0;\n \
    \           }\n            if (j > 0 && dp[i][j - 1] < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j] = 1;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i + 1][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1];\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long x = 0;\n    long y = 0;\n  \
    \  for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            if (dp[i][j] < dp[x][y])\n            {\n            \
    \    x = i;\n                y = j;\n            }\n        }\n    }\n    for\
    \ (long i =", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] path = new long[k];\n   \
    \ long curr = dp[N - 1][N - 1];\n    long i = N - 1;\n    long j = N - 1;\n  \
    \  foreach(idx; k .. 0)\n    {\n        path[idx] = grid[i][j];\n        if(i\
    \ > 0 && dp[i - 1][j] + grid[i][j] == curr)\n        {\n            curr -= grid[i][j];\n\
    \            i--;\n        }\n        else if(j > 0 && dp[i][j - 1] + grid[i][j]\
    \ == curr)\n        {\n            curr -= grid[i][j];\n            j--;\n   \
    \     }\n    }\n    return path;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[] res = new int[k];\n    int i = 0, j = 0;\n    for\
    \ (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        if (i\
    \ > 0 && dp[i - 1][j] < dp[i][j])\n            i--;\n        else if (j > 0 &&\
    \ dp[i][j - 1] < dp[i][j])\n            j--;\n        else\n            break;\n\
    \    }\n    return res;\n}", "{\n    long n = grid.length;\n    assert(n >= 2);\n\
    \    assert(n == grid[0].length);\n    assert(k >= 1);\n    assert(k <= n * n);\n\
    \    //\n    //\n    //\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = -1;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    //\n    //\n    //\n    dp[0][0] = 0;\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            if (i > 0)\n            {\n                if (dp[i - 1][j]\
    \ != -1)\n                {\n                    if (dp[i][j] == -1 || dp[i -\
    \ 1][j] + grid[i][j] < dp[i][j])\n                    {\n                    \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                        prev[i][j]\
    \ = (i - 1) * n + j;\n                    }\n                }\n            }\n\
    \            if (j > 0)\n            {\n                if (dp[i][j - 1] != -1)\n\
    \                {\n                    if (dp[i][j] == -1 || dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n                    {\n                        dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                        prev[i][j] = i * n + j - 1;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ //\n    //\n    //\n    long[] path = new long[k];\n    long cur = n * n - 1;\n\
    \    for (long i = k - 1; i >= 0", "{\n    auto N = grid.length;\n    auto M =\
    \ grid[0].length;\n    auto dp = new long[N][M][k + 1];\n    foreach (i; 0 ..\
    \ N)\n        foreach (j; 0 .. M)\n            foreach (l; 0 .. k + 1)\n     \
    \           dp[i][j][l] = long.max;\n    dp[0][0][1] = grid[0][0];\n    foreach\
    \ (i; 0 .. N)\n        foreach (j; 0 .. M)\n            foreach (l; 1 .. k + 1)\n\
    \            {\n                if (i > 0)\n                    dp[i][j][l] =\
    \ min(dp[i][j][l], dp[i - 1][j][l - 1] + grid[i][j]);\n                if (j >\
    \ 0)\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j - 1][l - 1] +\
    \ grid[i][j]);\n                if (i < N - 1)\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i + 1][j][l - 1] + grid[i][j]);\n                if (j\
    \ < M - 1)\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l\
    \ - 1] + grid[i][j]);\n            }\n    auto res = new long[k];\n    auto i\
    \ = N - 1;\n    auto j = M - 1;\n    auto l = k;\n    while (l > 0)\n    {\n \
    \       res[l - 1] = grid[i][j];\n        if (i > 0 && dp[i][j][l] == dp[i - 1][j][l\
    \ - 1] + grid[i][j])\n            i--;\n        else if (j > 0 && dp[i][j][l]\
    \ == dp[i][j - 1][l - 1] + grid[i][j])\n            j--;\n        else if (i <\
    \ N - 1 &&", "{\n    int n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    for (int i = 0; i < n; i++)\n    {\n\
    \        for (int j = 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\
    \            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n      \
    \          dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n   \
    \         }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n         \
    \   {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (j < n - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 3;\n            }\n        }\n    }\n    long[]\
    \ res = new long[k];\n    int x = n - 1;\n    int y = n - 1;\n    for (int i =\
    \ k - 1; i >= 0; i--)\n    {\n        res[i] = grid[x][y];\n        if (prev[x][y]\
    \ == 0)\n        {\n", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = 0;\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n     \
    \   {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] path = new long[k];\n   \
    \ long x = 0, y = 0;\n    foreach(i; 0 .. k)\n    {\n        path[i] = grid[x][y];\n\
    \        if(x < n - 1 && dp[x + 1][y] + grid[x][y] == dp[x][y])\n            x++;\n\
    \        else if(y < n - 1 && dp[x][y + 1] + grid[x][y] == dp[x][y])\n       \
    \     y++;\n    }\n    return path;\n}", "{\n    // TODO: Implement your solution\
    \ here\n    return null;\n}", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    long[][] prev = new long[n][n];\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n        \
    \    dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n        }\n    }\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j];\n                prev[i][j] = 1;\n \
    \           }\n            if (j > 0 && dp[i][j] > dp[i][j - 1])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j] = 2;\n\
    \            }\n            if (i < n - 1 && dp[i][j] > dp[i + 1][j])\n      \
    \      {\n                dp[i][j] = dp[i + 1][j];\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < n - 1 && dp[i][j] > dp[i][j + 1])\n\
    \            {\n                dp[i][j] = dp[i][j + 1];\n                prev[i][j]\
    \ = 4;\n            }\n        }\n    }\n    long[] res = new long[(int)k];\n\
    \    long cur = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            if (dp[i][j] == cur)\n          \
    \  {\n                res[0] = grid[i][j];\n                long x = i;\n    \
    \            long y = j;\n                for (long l = 1; l", "{\n    auto n\
    \ = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    foreach (i; 0 .. n)\n    {\n \
    \       foreach (j; 0 .. m)\n        {\n            if (i == 0 && j == 0)\n  \
    \          {\n                dp[i][j] = grid[i][j];\n                path[i][j]\
    \ = grid[i][j];\n            }\n            else if (i == 0)\n            {\n\
    \                dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j]\
    \ = path[i][j - 1] * 10 + grid[i][j];\n            }\n            else if (j ==\
    \ 0)\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n \
    \               path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n            }\n\
    \            else\n            {\n                dp[i][j] = min(dp[i - 1][j],\
    \ dp[i][j - 1]) + grid[i][j];\n                if (dp[i - 1][j] < dp[i][j - 1])\n\
    \                {\n                    path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n\
    \                }\n                else\n                {\n                \
    \    path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n                }\n     \
    \       }\n        }\n    }\n    auto res = new long[k];\n    auto i = n - 1;\n\
    \    auto j = m - 1;\n    foreach (idx; k)\n    {\n        res[idx - 1] = grid[i][j];\n\
    \        if (i == 0)\n        {\n            j--;\n        }\n        else if\
    \ (j == 0)\n        {\n            i--;\n        }\n        else\n        {\n\
    \            if (dp[i -", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] prev = new int[n][n];\n    int[][] dir = new int[][]{{0, 1}, {1,\
    \ 0}, {0, -1}, {-1, 0}};\n    for (int i = 0; i < n; i++)\n        for (int j\
    \ = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            for\
    \ (int d = 0; d < 4; d++)\n            {\n                int x = i + dir[d][0];\n\
    \                int y = j + dir[d][1];\n                if (x < 0 || x >= n ||\
    \ y < 0 || y >= n)\n                    continue;\n                if (dp[x][y]\
    \ > dp[i][j] + 1)\n                {\n                    dp[x][y] = dp[i][j]\
    \ + 1;\n                    prev[x][y] = d;\n                }\n            }\n\
    \    int[] cur = new int[]{n - 1, n - 1};\n    int[] path = new int[(int)k];\n\
    \    for (int i = (int)k - 1; i >= 0; i--)\n    {\n        path[i] = grid[cur[0]][cur[1]];\n\
    \        int d = prev[cur[0]][cur[1]];\n        cur[0] -= dir[d][0];\n       \
    \ cur[1] -= dir[d][1];\n    }\n    return path;\n}", "{\n    auto n = grid.length;\n\
    \    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n    auto prev\
    \ = new long[][](n, m);\n    foreach (i; 0 .. n)\n    {\n        foreach (j; 0\
    \ .. m)\n        {\n            dp[i][j] = grid[i][j];\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    foreach (i; 1 .. n)\n    {\n        dp[i][0] +=\
    \ dp[i - 1][0];\n        prev[i][0] = 0;\n    }\n    foreach (j; 1 .. m)\n   \
    \ {\n        dp[0][j] += dp[0][j - 1];\n        prev[0][j] = 1;\n    }\n    foreach\
    \ (i; 1 .. n)\n    {\n        foreach (j; 1 .. m)\n        {\n            if (dp[i\
    \ - 1][j] < dp[i][j - 1])\n            {\n                dp[i][j] += dp[i - 1][j];\n\
    \                prev[i][j] = 0;\n            }\n            else\n          \
    \  {\n                dp[i][j] += dp[i][j - 1];\n                prev[i][j] =\
    \ 1;\n            }\n        }\n    }\n    auto res = new long[](k);\n    auto\
    \ i = n - 1;\n    auto j = m - 1;\n    foreach (l; k .. 0)\n    {\n        res[l]\
    \ = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n            i--;\n \
    \       }\n        else\n        {\n            j--;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    int[][] dir = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n             \
    \   dir[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                dir[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] =\
    \ dp[i + 1][j] + grid[i][j];\n                dir[i][j] = 3;\n            }\n\
    \            if (j < N - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n        \
    \    {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n              \
    \  dir[i][j] = 4;\n            }\n        }\n    long[] res = new long[(int)k];\n\
    \    int i = 0, j = 0;\n    for (int t = 0; t < k; t++)\n    {\n        res[t]\
    \ = grid[i][j];\n        if (dir[i][j] == 1)\n            i--;", "{\n    long\
    \ N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev = new\
    \ long[N][N];\n    long[][] next = new long[N][N];\n    long[][] dirs = new long[][]\
    \ { {-1L, 0L}, {1L, 0L}, {0L, -1L}, {0L, 1L} };\n    foreach (i; 0 .. N)\n   \
    \ {\n        foreach (j; 0 .. N)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1L;\n            next[i][j] = -1L;\n        }\n   \
    \ }\n    dp[0][0] = grid[0][0];\n    foreach (i; 0 .. N)\n    {\n        foreach\
    \ (j; 0 .. N)\n        {\n            foreach (dir; dirs)\n            {\n   \
    \             long x = i + dir[0];\n                long y = j + dir[1];\n   \
    \             if (x < 0 || x >= N || y < 0 || y >= N)\n                    continue;\n\
    \                if (dp[x][y] > dp[i][j] + grid[x][y])\n                {\n  \
    \                  dp[x][y] = dp[i][j] + grid[x][y];\n                    prev[x][y]\
    \ = i * N + j;\n                }\n                else if (dp[x][y] == dp[i][j]\
    \ + grid[x][y])\n                {\n                    if (prev[x][y] == -1L)\n\
    \                        prev[x][y] = i * N + j;\n                    else\n \
    \                   {\n                        long cur = prev[x][y];\n      \
    \                  long cur_x = cur / N;\n                        long cur_y =\
    \ cur % N;\n                        if (grid[cur_x][cur_y] > grid[i][j])\n   \
    \                     {\n                            prev[x][y] = i * N + j;\n\
    \                        }\n                        else if (grid[cur_x][cur_y]\
    \ == grid[i][j", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n  \
    \  long[][] path = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n\
    \        for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n            next[i][j] = -1;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n            {\n\
    \                if (dp[i][j] > dp[i - 1][j] + grid[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                 \
    \   prev[i][j] = i - 1;\n                    next[i][j] = j;\n               \
    \ }\n            }\n            if (j > 0)\n            {\n                if\
    \ (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n                \
    \    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = i;\n\
    \                    next[i][j] = j - 1;\n                }\n            }\n \
    \       }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for (long j\
    \ = 0; j < N; j++)\n        {\n            if (i < N - 1)\n            {\n   \
    \             if (dp[i][j] > dp[i + 1][j] + grid[i][j])\n                {\n \
    \                   dp[i][j] = dp[i + 1][j] + grid[i][j];\n                  \
    \  prev[i][j", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n  \
    \  for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n\
    \            next[i][j] = -1;\n        }\n    }\n    for (long step = 1; step\
    \ < k; step++)\n    {\n        for (long i = 0; i < N; i++)\n        {\n     \
    \       for (long j = 0; j < N; j++)\n            {\n                long min\
    \ = dp[i][j];\n                long min_prev = -1;\n                long min_next\
    \ = -1;\n                if (i > 0 && dp[i - 1][j] < min)\n                {\n\
    \                    min = dp[i - 1][j];\n                    min_prev = (i -\
    \ 1) * N + j;\n                    min_next = i * N + j;\n                }\n\
    \                if (i < N - 1 && dp[i + 1][j] < min)\n                {\n   \
    \                 min = dp[i + 1][j];\n                    min_prev = (i + 1)\
    \ * N + j;\n                    min_next = i * N + j;\n                }\n   \
    \             if (j > 0 && dp[i][j - 1] < min)\n                {\n          \
    \          min = dp[i][j - 1];\n                    min_prev = i * N + j - 1;\n\
    \                    min_next = i * N + j;\n                }\n              \
    \  if (j < N - 1 && dp[i][j + 1] < min)\n                {\n                 \
    \   min = dp[i][j + 1];\n                    min_prev = i * N + j + 1;\n     \
    \               min_next = i * N + j;\n                }\n                dp[i][j]\
    \ = min * 10 + grid[i][j", "{\n    long N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    long[][] path = new long[N][N];\n    long[][] path_len = new\
    \ long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long j =\
    \ 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n            path[i][j]\
    \ = grid[i][j];\n            path_len[i][j] = 1;\n        }\n    }\n    for (long\
    \ i = 1; i < k; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n\
    \            for (long l = 0; l < N; l++)\n            {\n                long\
    \ min = dp[j][l];\n                long min_path = path[j][l];\n             \
    \   long min_path_len = path_len[j][l];\n                if (j > 0)\n        \
    \        {\n                    if (dp[j - 1][l] < min)\n                    {\n\
    \                        min = dp[j - 1][l];\n                        min_path\
    \ = path[j - 1][l];\n                        min_path_len = path_len[j - 1][l];\n\
    \                    }\n                    else if (dp[j - 1][l] == min)\n  \
    \                  {\n                        if (path[j - 1][l] < min_path)\n\
    \                        {\n                            min_path = path[j - 1][l];\n\
    \                            min_path_len = path_len[j - 1][l];\n            \
    \            }\n                        else if (path[j - 1][l] == min_path)\n\
    \                        {\n                            if (path_len[j - 1][l]\
    \ < min_path_len)\n                            {\n                           \
    \     min_path_len = path_len[j - 1][l];\n                            }\n    \
    \                    }\n                    }\n                }\n           \
    \     if (j < N - 1)\n                {\n                    if (dp[j + 1][l]\
    \ < min)\n                    {\n                        min = dp[j", "{\n   \
    \ long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 ..\
    \ N)\n        {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n\
    \        }\n    }\n    dp[0][0] = grid[0][0];\n    foreach (i; 0 .. N)\n    {\n\
    \        foreach (j; 0 .. N)\n        {\n            if (i > 0)\n            {\n\
    \                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                 \
    \   prev[i][j] = 0;\n                }\n            }\n            if (j > 0)\n\
    \            {\n                if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                    prev[i][j] = 1;\n                }\n            }\n     \
    \   }\n    }\n    long[] path = new long[k];\n    long cur = dp[N - 1][N - 1];\n\
    \    long i = N - 1;\n    long j = N - 1;\n    foreach (t; 0 .. k)\n    {\n  \
    \      path[t] = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n      \
    \      i--;\n        }\n        else\n        {\n            j--;\n        }\n\
    \    }\n    return path;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 2;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 3;\n            }\n        }\n    int[]\
    \ cur = [N - 1, N - 1];\n    long[] res = new long[k];\n    for (int i = 0; i\
    \ < k; i++)\n    {\n        res[i] = grid[cur[0]][cur[1]];\n        switch (prev[cur[0]][cur[1]])\n\
    \        {\n            case 0: cur[0]--; break;\n            case 1: cur[1]--;\
    \ break;\n           ", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[] path = new int[k];\n    int i = n - 1;\n    int j = n -\
    \ 1;\n    for (int t = 0; t < k; t++)\n    {\n        path[t] = grid[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n\
    \        else\n            j--;\n    }\n    return path;\n}", "{\n    long n =\
    \ grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n\
    \    long[][] next = new long[n][n];\n    long[][] dir = new long[][] {{0L, 1L},\
    \ {1L, 0L}, {0L, -1L}, {-1L, 0L}};\n    for (long i = 0L; i < n; i++)\n    {\n\
    \        for (long j = 0L; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = i * n + j;\n            next[i][j] = -1L;\n        }\n\
    \    }\n    for (long step = 1L; step < k; step++)\n    {\n        for (long i\
    \ = 0L; i < n; i++)\n        {\n            for (long j = 0L; j < n; j++)\n  \
    \          {\n                long min = dp[i][j];\n                long min_prev\
    \ = prev[i][j];\n                for (long d = 0L; d < 4L; d++)\n            \
    \    {\n                    long x = i + dir[d][0L];\n                    long\
    \ y = j + dir[d][1L];\n                    if (x >= 0L && x < n && y >= 0L &&\
    \ y < n)\n                    {\n                        if (dp[x][y] < min)\n\
    \                        {\n                            min = dp[x][y];\n    \
    \                        min_prev = prev[x][y];\n                        }\n \
    \                       else if (dp[x][y] == min)\n                        {\n\
    \                            if (prev[x][y] < min_prev)\n                    \
    \        {\n                                min_prev = prev[x][y];\n         \
    \                   }\n                        }\n                    }\n    \
    \            }\n                dp[i][j] += min;\n                prev[i][j] =\
    \ min_prev;\n            }\n        }\n    }\n    long min = dp[0L][0L];\n   \
    \ long min_prev = prev[0L][0", "{\n    int N = grid.length;\n    int[][] dp =\
    \ new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j -\
    \ 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 2;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 4;\n            }\n        }\n    long[] res = new\
    \ long[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n  \
    \      res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else", "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = grid[i][j];\n    for (int i = 1; i < N; i++)\n        dp[0][i]\
    \ += dp[0][i - 1];\n    for (int i = 1; i < N; i++)\n        dp[i][0] += dp[i\
    \ - 1][0];\n    for (int i = 1; i < N; i++)\n        for (int j = 1; j < N; j++)\n\
    \            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1]);\n    long[] res = new\
    \ long[(int)k];\n    int i = 0, j = 0;\n    for (int l = 0; l < k; l++)\n    {\n\
    \        res[l] = grid[i][j];\n        if (i == N - 1)\n            j++;\n   \
    \     else if (j == N - 1)\n            i++;\n        else if (dp[i + 1][j] <\
    \ dp[i][j + 1])\n            i++;\n        else\n            j++;\n    }\n   \
    \ return res;\n}", "{\n    // write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = 0; j < n; j++) {\n            dp[i][j] = int.max;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < n; j++) {\n            if (i > 0) {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            }\n            if (j > 0) {\n     \
    \           dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n           \
    \ }\n        }\n    }\n    long[] res = new long[k];\n    int i = n - 1;\n   \
    \ int j = n - 1;\n    for (int idx = k - 1; idx >= 0; idx--) {\n        res[idx]\
    \ = grid[i][j];\n        if (i > 0 && dp[i][j] - grid[i][j] == dp[i - 1][j]) {\n\
    \            i--;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n  \
    \  int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     path[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n            x++;\n       ", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_len\
    \ = new long[n][n];\n    long[][] path_val = new long[n][n];\n    long[][] path_val_len\
    \ = new long[n][n];\n    long[][] path_val_len_max = new long[n][n];\n    long[][]\
    \ path_val_len_max_idx = new long[n][n];\n    long[][] path_val_len_max_idx_len\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max = new long[n][n];\n\
    \    long[][] path_val_len_max_idx_len_max_idx = new long[n][n];\n    long[][]\
    \ path_val_len_max_idx_len_max_idx_len = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max_idx\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max_idx_len\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max_idx_len_max\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max_idx_len_max_idx\
    \ = new long[n][n];\n    long[][] path_val_len_max_idx_len_max_idx_len_max_idx_len_max_idx_len\
    \ = new long[n][n];\n    long[][] path", "{\n    // TODO: Implement your solution\
    \ here\n    return null;\n}", "{\n    long N = grid.length;\n    long[][] dp =\
    \ new long[N][N];\n    long[][] prev = new long[N][N];\n    foreach (i; 0 .. N)\n\
    \    {\n        foreach (j; 0 .. N)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n    \
    \        if (i > 0)\n            {\n                if (dp[i][j] > dp[i - 1][j]\
    \ + grid[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    prev[i][j] = 0;\n                }\n    \
    \        }\n            if (j > 0)\n            {\n                if (dp[i][j]\
    \ > dp[i][j - 1] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = 1;\n        \
    \        }\n            }\n        }\n    }\n    long[] res = new long[k];\n \
    \   long i = N - 1;\n    long j = N - 1;\n    foreach (k; k .. 0)\n    {\n   \
    \     res[k] = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n        \
    \    i--;\n        }\n        else\n        {\n            j--;\n        }\n \
    \   }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][] dist = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    int[][] dir = new int[][]{{-1,\
    \ 0}, {1, 0}, {0, -1}, {0, 1}};\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dist[i][j] = int.max;\n    dist[0][0] =\
    \ 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n \
    \           for (int[] d : dir)\n            {\n                int x = i + d[0];\n\
    \                int y = j + d[1];\n                if (x < 0 || x >= N || y <\
    \ 0 || y >= N)\n                    continue;\n                if (dist[x][y]\
    \ > dist[i][j] + 1)\n                {\n                    dist[x][y] = dist[i][j]\
    \ + 1;\n                    prev[x][y] = i * N + j;\n                }\n     \
    \       }\n    int[] res = new int[k];\n    int x = N - 1;\n    int y = N - 1;\n\
    \    for (int i = k - 1; i >= 0; i--)\n    {\n        res[i] = grid[x][y];\n \
    \       int p = prev[x][y];\n        x = p / N;\n        y = p % N;\n    }\n \
    \   return res;\n}", "{\n    auto N = grid.length;\n    assert(N >= 2);\n    assert(k\
    \ >= 1);\n    assert(k <= N * N);\n    auto M = grid[0].length;\n    assert(N\
    \ == M);\n    auto dp = new long[N][N][N * N + 1];\n    foreach (i; 0 .. N)\n\
    \        foreach (j; 0 .. N)\n            foreach (l; 0 .. N * N + 1)\n      \
    \          dp[i][j][l] = -1;\n    auto dirs = new int[][]\n    {\n        [0,\
    \ 1],\n        [0, -1],\n        [1, 0],\n        [-1, 0]\n    };\n    auto dfs\
    \ = (int i, int j, int l) =>\n    {\n        if (dp[i][j][l] != -1)\n        \
    \    return dp[i][j][l];\n        if (l == 1)\n            return dp[i][j][l]\
    \ = grid[i][j];\n        auto res = long.max;\n        foreach (dir; dirs)\n \
    \       {\n            auto ni = i + dir[0];\n            auto nj = j + dir[1];\n\
    \            if (ni < 0 || ni >= N || nj < 0 || nj >= N)\n                continue;\n\
    \            auto tmp = dfs(ni, nj, l - 1);\n            if (tmp == long.max)\n\
    \                continue;\n            tmp = tmp * (N * N) + grid[i][j];\n  \
    \          res = min(res, tmp);\n        }\n        return dp[i][j][l] = res;\n\
    \    };\n    auto res = long.max;\n    foreach (i; 0 .. N)\n        foreach (j;\
    \ 0 .. N)\n        {\n            auto tmp = dfs(i, j, k);\n            if (tmp\
    \ == long.max)\n                continue;\n            res = min(res, tmp);\n\
    \        }\n    assert(res != long.max);\n    auto ret = new long[k];\n    for\
    \ (int i = k - 1; i >= 0; i--)", "{\n    // your code here\n    long[][] dp =\
    \ new long[grid.length][grid.length];\n    long[][] path = new long[grid.length][grid.length];\n\
    \    for (int i = 0; i < grid.length; i++)\n    {\n        for (int j = 0; j <\
    \ grid.length; j++)\n        {\n            dp[i][j] = grid[i][j];\n         \
    \   path[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 1; i < k; i++)\n\
    \    {\n        for (int j = 0; j < grid.length; j++)\n        {\n           \
    \ for (int m = 0; m < grid.length; m++)\n            {\n                long min\
    \ = dp[j][m];\n                long minPath = path[j][m];\n                if\
    \ (j > 0 && dp[j - 1][m] < min)\n                {\n                    min =\
    \ dp[j - 1][m];\n                    minPath = path[j - 1][m];\n             \
    \   }\n                if (j < grid.length - 1 && dp[j + 1][m] < min)\n      \
    \          {\n                    min = dp[j + 1][m];\n                    minPath\
    \ = path[j + 1][m];\n                }\n                if (m > 0 && dp[j][m -\
    \ 1] < min)\n                {\n                    min = dp[j][m - 1];\n    \
    \                minPath = path[j][m - 1];\n                }\n              \
    \  if (m < grid.length - 1 && dp[j][m + 1] < min)\n                {\n       \
    \             min = dp[j][m + 1];\n                    minPath = path[j][m + 1];\n\
    \                }\n                dp[j][m] = min + grid[j][m];\n           \
    \     path[j][m] = minPath + grid[j][m];\n            }\n        }\n    }\n  \
    \  long min = dp[0][0];\n    long minPath = path[0][0];\n    for (int i = 0; i\
    \ < grid.length; i++)\n    {\n", "{\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int cur = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \            if (dp[i][j] <= k)\n            {\n                path[cur++] =\
    \ grid[i][j];\n                k -= dp[i][j];\n                i = j = 0;\n  \
    \          }\n    return path;\n}", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n\
    \            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j\
    \ + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j]\
    \ = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][] dp4 = new int[", "{\n    auto\
    \ n = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    auto res = new long[][](n, m);\n\
    \    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n    \
    \        if (i == 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n\
    \                path[i][j] = 1;\n            }\n            else if (i == 0)\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          path[i][j] = path[i][j - 1];\n            }\n            else if (j\
    \ == 0)\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                path[i][j] = path[i - 1][j];\n            }\n            else\n\
    \            {\n                if (dp[i - 1][j] < dp[i][j - 1])\n           \
    \     {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n         \
    \           path[i][j] = path[i - 1][j];\n                }\n                else\
    \ if (dp[i - 1][j] > dp[i][j - 1])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = path[i][j - 1];\n\
    \                }\n                else\n                {\n                \
    \    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j] = path[i\
    \ - 1][j] + path[i][j - 1];\n                }\n            }\n        }\n   \
    \ }\n    auto sum = dp[n - 1][m - 1];\n    auto cnt = path[n - 1][m - 1];\n  \
    \  auto kk = k", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++) {\n      \
    \  for (int j = 0; j < N; j++) {\n            dp[i][j] = int.max;\n          \
    \  prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j] +\
    \ 1;\n                prev[i][j] = 0;\n            }\n            if (j > 0 &&\
    \ dp[i][j - 1] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j - 1] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (i < N - 1 &&\
    \ dp[i + 1][j] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 2;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 3;\n            }\n        }\n    }\n    int[] path\
    \ = new int[k as int];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        path[i] = grid[x][y];\n        switch (prev[x][y]) {\n          \
    \  case 0:\n                x--;\n                break;\n            case 1:\n\
    \                y--;\n                break;\n            case 2", "{\n    //\
    \ Write your code here\n    long[] result = new long[(int)k];\n    int[][] dir\
    \ = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    int n = grid.length;\n\
    \    int m = grid[0].length;\n    int[][] visited = new int[n][m];\n    int[][]\
    \ dist = new int[n][m];\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            dist[i][j] = int.max;\n        }\n    }\n  \
    \  dist[0][0] = 0;\n    PriorityQueue!(int[]) pq = new PriorityQueue!(int[])((a,\
    \ b) => a[2] > b[2]);\n    pq.put(new int[]{0, 0, 0});\n    while (pq.size() >\
    \ 0) {\n        int[] cur = pq.poll();\n        if (visited[cur[0]][cur[1]] ==\
    \ 1) {\n            continue;\n        }\n        visited[cur[0]][cur[1]] = 1;\n\
    \        for (int i = 0; i < 4; i++) {\n            int x = cur[0] + dir[i][0];\n\
    \            int y = cur[1] + dir[i][1];\n            if (x < 0 || x >= n || y\
    \ < 0 || y >= m) {\n                continue;\n            }\n            if (dist[x][y]\
    \ > dist[cur[0]][cur[1]] + 1) {\n                dist[x][y] = dist[cur[0]][cur[1]]\
    \ + 1;\n                pq.put(new int[]{x, y, dist[x][y]});\n            }\n\
    \        }\n    }\n    int[][] path = new int[n][m];\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = 0; j < m; j++) {\n            path[i][j] = int.max;\n\
    \        }\n    }", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n\
    \        for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n \
    \           {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n       \
    \         prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1]\
    \ + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 1;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 3;\n            }\n        }\n    }\n    long[]\
    \ res = new long[k];\n    long i = N - 1;\n    long j = N - 1;\n    for (long\
    \ l = k - 1;", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n\
    \ - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j =\
    \ n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n\
    \        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j]\
    \ - grid[i][j];\n    int[][] dp4 = new int[", "{\n    // TODO: implement\n   \
    \ return null;\n}", "{\n    enum Direction {\n        UP,\n        DOWN,\n   \
    \     LEFT,\n        RIGHT\n    }\n    class Cell {\n        long value;\n   \
    \     long x;\n        long y;\n        Cell(long value, long x, long y) {\n \
    \           this.value = value;\n            this.x = x;\n            this.y =\
    \ y;\n        }\n    }\n    class Path {\n        long[] path;\n        long length;\n\
    \        Path(long[] path, long length) {\n            this.path = path;\n   \
    \         this.length = length;\n        }\n    }\n    class PathComparator :\
    \ Comparator!(Path) {\n        override int opCmp(Path a, Path b) {\n        \
    \    if (a.length != b.length) {\n                return a.length < b.length ?\
    \ -1 : 1;\n            }\n            for (long i = 0; i < a.length; i++) {\n\
    \                if (a.path[i] != b.path[i]) {\n                    return a.path[i]\
    \ < b.path[i] ? -1 : 1;\n                }\n            }\n            return\
    \ 0;\n        }\n    }\n    auto gridSize = grid.length;\n    auto cells = new\
    \ Cell[gridSize][gridSize];\n    for (long i = 0; i < gridSize; i++) {\n     \
    \   for (long j = 0; j < gridSize; j++) {\n            cells[i][j] = new Cell(grid[i][j],\
    \ i, j);\n        }\n    }\n    auto cellComparator = new CellComparator();\n\
    \    auto pathComparator = new PathComparator();\n    auto minHeap = new MinHeap!(Path,\
    \ PathComparator)(pathComparator);\n    auto visited = new bool[gridSize][gridSize];\n\
    \    auto directions = new Direction[][] {\n        [Direction.UP] = [Direction.LEFT,\
    \ Direction.RIGHT],\n        [Direction.DOWN] = [Direction.LEFT, Direction.RIGHT],\n\
    \        [Direction.LEFT] = [Direction.UP, Direction.DOWN],\n        [Direction.RIGHT]\
    \ = [Direction.UP,", "{\n    int n = grid.length;\n    int[][] dist = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dist[i][j] = int.max;\n    dist[0][0] = 0;\n    auto pq = new PriorityQueue!(int[int],\
    \ \"a[0] < b[0]\");\n    pq.put([0, 0, 0]);\n    while (!pq.empty)\n    {\n  \
    \      auto cur = pq.get;\n        int x = cur[1];\n        int y = cur[2];\n\
    \        if (dist[x][y] < cur[0])\n            continue;\n        if (x > 0 &&\
    \ dist[x - 1][y] > dist[x][y] + grid[x - 1][y])\n        {\n            dist[x\
    \ - 1][y] = dist[x][y] + grid[x - 1][y];\n            pq.put([dist[x - 1][y],\
    \ x - 1, y]);\n        }\n        if (x < n - 1 && dist[x + 1][y] > dist[x][y]\
    \ + grid[x + 1][y])\n        {\n            dist[x + 1][y] = dist[x][y] + grid[x\
    \ + 1][y];\n            pq.put([dist[x + 1][y], x + 1, y]);\n        }\n     \
    \   if (y > 0 && dist[x][y - 1] > dist[x][y] + grid[x][y - 1])\n        {\n  \
    \          dist[x][y - 1] = dist[x][y] + grid[x][y - 1];\n            pq.put([dist[x][y\
    \ - 1], x, y - 1]);\n        }\n        if (y < n - 1 && dist[x][y + 1] > dist[x][y]\
    \ + grid[x][y + 1])\n        {\n            dist[x][y + 1] = dist[x][y] + grid[x][y\
    \ + 1];\n            pq.put([dist[x][y + 1", "{\n    int n = grid.length;\n  \
    \  int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    long[] ans = new long[(int)k];\n    int x = 0, y = 0;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        ans[i] = grid[x][y];\n      \
    \  if (prev[x][y] == 1)\n            x--;\n        else if (prev[x][y] == 2)\n\
    \            y--;\n        else if (prev[x][y] == 3)\n            x", "{\n   \
    \ int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n         \
    \   }\n            if (i + 1 < N && dp[i + 1][j] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j + 1 < N && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int[] path = new int[(int)k];\n\
    \    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        path[i]\
    \ = grid[x][y];\n        switch (prev[x][y])\n        {\n            case 1:\n\
    \                x--;\n                break;\n            case 2:\n         \
    \       y--;\n                break;\n            case 3:\n                x++;\n\
    \                break;", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    auto\
    \ res = new long[][](n, m);\n    foreach (i; 0 .. n)\n    {\n        foreach (j;\
    \ 0 .. m)\n        {\n            dp[i][j] = grid[i][j];\n            path[i][j]\
    \ = 1;\n            res[i][j] = grid[i][j];\n        }\n    }\n    foreach (i;\
    \ 1 .. n)\n    {\n        foreach (j; 1 .. m)\n        {\n            if (dp[i\
    \ - 1][j] < dp[i][j - 1])\n            {\n                dp[i][j] += dp[i - 1][j];\n\
    \                path[i][j] = path[i - 1][j] + 1;\n                res[i][j] =\
    \ res[i - 1][j];\n            }\n            else if (dp[i - 1][j] > dp[i][j -\
    \ 1])\n            {\n                dp[i][j] += dp[i][j - 1];\n            \
    \    path[i][j] = path[i][j - 1] + 1;\n                res[i][j] = res[i][j -\
    \ 1];\n            }\n            else\n            {\n                dp[i][j]\
    \ += dp[i - 1][j];\n                path[i][j] = path[i - 1][j] + 1;\n       \
    \         res[i][j] = min(res[i - 1][j], res[i][j - 1]);\n            }\n    \
    \    }\n    }\n    auto i = n - 1;\n    auto j = m - 1;\n    auto ans = new long[](k);\n\
    \    while (k > 0)\n    {\n        if (i > 0 && dp[i - 1][j] < dp[i][j - 1])\n\
    \        {\n            i--;\n        }\n        else if (j > 0 && dp[i - 1",
  "{\n    // We will use a priority queue to keep track of the best paths.\n    //\
    \ The priority queue will be sorted by the lexicographic order of the\n    //\
    \ paths.\n    // The priority queue will contain tuples of the form (path, index).\n\
    \    // The path is the path itself and the index is the index of the cell\n \
    \   // that the path is currently at.\n    // The priority queue will be sorted\
    \ by the lexicographic order of the\n    // paths.\n    auto pq = new PriorityQueue!(tuple(long[],\
    \ long), \"a[0] < b[0]\");\n    // We will use a set to keep track of the paths\
    \ that we have already\n    // visited.\n    auto visited = new Set!(long[]);\n\
    \    // We will use a map to keep track of the best path for each cell.\n    auto\
    \ bestPath = new Map!(long, long[]);\n    // We will use a map to keep track of\
    \ the best path length for each cell.\n    auto bestPathLength = new Map!(long,\
    \ long);\n    // We will use a map to keep track of the best path index for each\
    \ cell.\n    auto bestPathIndex = new Map!(long, long);\n    // We will use a\
    \ map to keep track of the best path sum for each cell.\n    auto bestPathSum\
    \ = new Map!(long, long);\n    // We will use a map to keep track of the best\
    \ path sum for each cell.\n    auto bestPathSumIndex = new Map!(long, long);\n\
    \    // We will use a map to keep track of the best path sum for each cell.\n\
    \    auto bestPathSumLength = new Map!(long, long);\n    // We will use a map\
    \ to keep track of the best path sum for each cell.\n    auto bestPathSumSum =\
    \ new Map!(long, long);\n    // We will use a map to keep track of the best path\
    \ sum for each cell.\n    auto bestPathSumSumIndex = new Map!(long, long);\n \
    \   // We will use a map to keep track of the best path sum for each cell.\n \
    \   auto bestPathSumSumLength = new Map!(long, long);\n    // We will use a map\
    \ to keep track of the best path sum for", "{\n    long N = grid.length;\n   \
    \ long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    for\
    \ (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n    \
    \    {\n            dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n   \
    \     }\n    }\n    for (long i = 0; i < N; i++)\n    {\n        for (long j =\
    \ 0; j < N; j++)\n        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j];\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1])\n   \
    \         {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j]\
    \ = 1;\n            }\n            if (i < N - 1 && dp[i][j] > dp[i + 1][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j] > dp[i][j + 1])\n\
    \            {\n                dp[i][j] = dp[i][j + 1];\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[(int)k];\n\
    \    long i = 0;\n    long j = 0;\n    for (long l = 0; l < k; l++)\n    {\n \
    \       res[(int)l] = grid[(int)i][(int)j];\n        long p = prev[(int)i][(int)j];\n\
    \        if (p == 0)\n            i--;\n        else if (p == 1)\n           \
    \ j", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][]\
    \ prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n     \
    \       }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int curr_i = 0;\n\
    \    int curr_j = 0;\n    long[] ans = new long[(int)k];\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        ans[i] = grid[curr_i][curr_j];\n        if (prev[curr_i][curr_j]\
    \ == 1)\n            curr_i--;\n        else if (prev[curr_i][", "{\n    int n\
    \ = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new\
    \ int[k];\n    int i = n - 1;\n    int j = n - 1;\n    for (int p = k - 1; p >=\
    \ 0; p--)\n    {\n        path[p] = grid[i][j];\n        if (i > 0 && dp[i - 1][j]\
    \ + grid[i][j] == dp[i][j])\n            i--;\n        else\n            j--;\n\
    \    }\n    return path;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n    dp2[N\
    \ - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for (int j =\
    \ N - 1; j >= 0; j--)\n        {\n            if (i < N - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < N - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n \
    \   int[][] dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n   \
    \ int[] ans = new int[N * N];\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n    auto\
    \ dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    foreach (i;\
    \ 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            if (i ==\
    \ 0 && j == 0)\n            {\n                dp[i][j] = grid[i][j];\n      \
    \          path[i][j] = 0;\n            }\n            else if (i == 0)\n    \
    \        {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n          \
    \      path[i][j] = j - 1;\n            }\n            else if (j == 0)\n    \
    \        {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n          \
    \      path[i][j] = i - 1;\n            }\n            else\n            {\n \
    \               if (dp[i - 1][j] < dp[i][j - 1])\n                {\n        \
    \            dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j]\
    \ = i - 1;\n                }\n                else\n                {\n     \
    \               dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    path[i][j]\
    \ = j - 1;\n                }\n            }\n        }\n    }\n    auto result\
    \ = new long[k];\n    auto i = n - 1;\n    auto j = m - 1;\n    foreach (t; 0\
    \ .. k)\n    {\n        result[t] = grid[i][j];\n        if (path[i][j] == i -\
    \ 1)\n        {\n            i--;\n        }\n        else\n        {\n      \
    \      j--;\n        }\n    }\n    return result;\n}", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] = 0;\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    long curr = 0;\n    foreach(i;\
    \ 0 .. k)\n    {\n        res[i] = grid[curr / N][curr % N];\n        if(curr\
    \ / N > 0 && dp[curr / N - 1][curr % N] + grid[curr / N][curr % N] == dp[curr\
    \ / N][curr % N])\n            curr -= N;\n        else\n            curr -= 1;\n\
    \    }\n    return res;\n}", "{\n    int N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    long[][] prev = new long[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n            {\n              \
    \  long new_val = dp[i - 1][j] + grid[i][j];\n                if (new_val < dp[i][j])\n\
    \                {\n                    dp[i][j] = new_val;\n                \
    \    prev[i][j] = 1;\n                }\n            }\n            if (j > 0)\n\
    \            {\n                long new_val = dp[i][j - 1] + grid[i][j];\n  \
    \              if (new_val < dp[i][j])\n                {\n                  \
    \  dp[i][j] = new_val;\n                    prev[i][j] = 2;\n                }\n\
    \            }\n        }\n    long[] res = new long[(int)k];\n    int i = N -\
    \ 1;\n    int j = N - 1;\n    for (int l = (int)k - 1; l >= 0; l--)\n    {\n \
    \       res[l] = grid[i][j];\n        if (prev[i][j] == 1)\n            i--;\n\
    \        else\n            j--;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    prev[0][0] = -1;\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if (i >\
    \ 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] =\
    \ dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n        \
    \    if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n              \
    \  dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n           \
    \ }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n\
    \            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    long[] res = new long[(int)k];\n    int\
    \ x = N - 1;\n    int y = N - 1;\n    for (int i = (int)k - 1; i >= 0; i--)\n\
    \    {\n        res[i] = grid[x][y];\n        if (prev[x][y] == 0)\n         \
    \   x--;\n        else if (prev[x][y]", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] path = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            dp[i][j] =\
    \ int.max;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        for (int j = 0; j < n; j++) {\n            if (i > 0 && dp[i - 1][j]\
    \ + 1 < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j] + 1;\n          \
    \      path[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] +\
    \ 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j - 1] + 1;\n            \
    \    path[i][j] = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j]\
    \ + 1 < dp[i][j]) {\n                dp[i][j] = dp[i + 1][j] + 1;\n          \
    \      path[i][j] = 3;\n            }\n            if (j < n - 1 && dp[i][j +\
    \ 1] + 1 < dp[i][j]) {\n                dp[i][j] = dp[i][j + 1] + 1;\n       \
    \         path[i][j] = 4;\n            }\n        }\n    }\n    long[] ans = new\
    \ long[k];\n    int x = 0;\n    int y = 0;\n    for (int i = 0; i < k; i++) {\n\
    \        ans[i] = grid[x][y];\n        if (path[x][y] == 1) {\n            x--;\n\
    \        } else if (path[x][y] == 2) {\n            y--;\n        } else if (path[x][y]\
    \ == 3", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][]\
    \ prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i +\
    \ 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j] + grid[i][j];\n                prev[i][j] = 3;\n            }\n    \
    \        if (j < N - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1] + grid[i][j];\n                prev[i][j]\
    \ = 4;\n            }\n        }\n    long[] res = new long[k];\n    int cur_i\
    \ = N - 1;\n    int cur_j = N - 1;\n    for (int i = k - 1; i >= 0; i--)\n   \
    \ {\n        res[i] = grid[cur_i][cur_j];\n        if", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i + 1\
    \ < n && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j + 1 < n && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    long[] ans = new long[(int)k];\n    int i = n - 1;\n\
    \    int j = n - 1;\n    for (int t = (int)k - 1; t >= 0; t--)\n    {\n      \
    \  ans[t] = grid[i][j];\n        if (prev[i][j] == 1)\n            i--;\n    \
    \    else if (prev[i][j] == 2)\n            j--;\n        else if", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 1;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 2;\n            }\n            if (i\
    \ < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[k];\n    int cur = 0;\n    int\
    \ x = 0;\n    int y = 0;\n    while (k > 0)\n    {\n        path[cur++] = grid[x][y];\n\
    \        switch (prev[x][y])\n        {\n            case 1:\n               \
    \ x--;\n                break;\n            case 2:\n                y--;\n  \
    \              break;\n            case 3:\n                x++;\n           \
    \     break", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int x = 0, y =\
    \ 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n \
    \           if (dp[i][j] < dp[x][y])\n            {\n                x = i;\n\
    \                y = j;\n            }\n    long[] res = new long[k];\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        res[", "{\n    int n = grid.length;\n\
    \    int[][] dist = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dist[i][j] = int.max;\n    dist[0][0] =\
    \ 0;\n    int[][] prev = new int[n][n];\n    prev[0][0] = -1;\n    int[] dx =\
    \ [1, 0, -1, 0];\n    int[] dy = [0, 1, 0, -1];\n    auto q = new PriorityQueue!(tuple!(int,\
    \ int, int), \"a[2] < b[2]\");\n    q.put(tuple(0, 0, 0));\n    while (!q.empty)\n\
    \    {\n        auto t = q.get;\n        int x = t[0];\n        int y = t[1];\n\
    \        int d = t[2];\n        if (d > dist[x][y])\n            continue;\n \
    \       for (int i = 0; i < 4; i++)\n        {\n            int nx = x + dx[i];\n\
    \            int ny = y + dy[i];\n            if (nx < 0 || nx >= n || ny < 0\
    \ || ny >= n)\n                continue;\n            int nd = d + grid[nx][ny];\n\
    \            if (nd < dist[nx][ny])\n            {\n                dist[nx][ny]\
    \ = nd;\n                prev[nx][ny] = x * n + y;\n                q.put(tuple(nx,\
    \ ny, nd));\n            }\n        }\n    }\n    int[] path = new int[k];\n \
    \   int x = n - 1;\n    int y = n - 1;\n    for (int i = k - 1; i >= 0; i--)\n\
    \    {\n        path[i] = grid[x][y];\n        int p = prev[x][y];\n        x\
    \ = p / n;\n        y = p % n;\n    }\n    return path;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (", "{\n    // Write your code here\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    long[][] visited = new long[n][n];\n    long[][]\
    \ path = new long[n][n];\n    long[][] path_prev = new long[n][n];\n    long[][]\
    \ path_next = new long[n][n];\n    long[][] path_visited = new long[n][n];\n \
    \   long[][] path_dp = new long[n][n];\n    for (long i = 0; i < n; i++)\n   \
    \ {\n        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = grid[i][j];\n            next[i][j] = grid[i][j];\n\
    \            visited[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n\
    \            path_prev[i][j] = grid[i][j];\n            path_next[i][j] = grid[i][j];\n\
    \            path_visited[i][j] = grid[i][j];\n            path_dp[i][j] = grid[i][j];\n\
    \        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n  \
    \          {\n                if (j > 0)\n                {\n                \
    \    if (prev[j - 1][l] < prev[j][l])\n                    {\n               \
    \         prev[j][l] = prev[j - 1][l];\n                        path_prev[j][l]\
    \ = path_prev[j - 1][l];\n                    }\n                    else if (prev[j\
    \ - 1][l] == prev[j][l])\n                    {\n                        if (path_prev[j\
    \ - 1", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][]\
    \ prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n     \
    \       }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n        \
    \    case 1: x--; break;\n            case 2: y--; break;\n            case 3:\
    \ x++; break;\n            case 4: y++; break;\n        }\n    }", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    // TODO\n    return null;\n}", "{\n    // Write your\
    \ code here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n \
    \   for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i - 1 >= 0)\n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + (int)grid[i][j]);\n            }\n          \
    \  if (j - 1 >= 0)\n            {\n                dp[i][j] = min(dp[i][j], dp[i][j\
    \ - 1] + (int)grid[i][j]);\n            }\n        }\n    }\n    int[] path =\
    \ new int[(int)k];\n    path[0] = (int)grid[0][0];\n    int i = 0;\n    int j\
    \ = 0;\n    for (int l = 1; l < k; l++)\n    {\n        if (i - 1 >= 0 && dp[i\
    \ - 1][j] + (int)grid[i][j] == dp[i][j])\n        {\n            i--;\n      \
    \  }\n        else\n        {\n            j--;\n        }\n        path[l] =\
    \ (int)grid[i][j];\n    }\n    return path;\n}", "{\n    long[][] dp = new long[grid.length][grid.length];\n\
    \    long[][] prev = new long[grid.length][grid.length];\n    foreach(i; 0 ..\
    \ grid.length)\n    {\n        foreach(j; 0 .. grid.length)\n        {\n     \
    \       dp[i][j] = long.max;\n            prev[i][j] = -1;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    foreach(i; 0 .. grid.length)\n    {\n        foreach(j;\
    \ 0 .. grid.length)\n        {\n            if(i > 0)\n            {\n       \
    \         if(dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n                {\n  \
    \                  dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n               \
    \     prev[i - 1][j] = 0;\n                }\n            }\n            if(j\
    \ > 0)\n            {\n                if(dp[i][j] + grid[i][j - 1] < dp[i][j\
    \ - 1])\n                {\n                    dp[i][j - 1] = dp[i][j] + grid[i][j\
    \ - 1];\n                    prev[i][j - 1] = 1;\n                }\n        \
    \    }\n            if(i < grid.length - 1)\n            {\n                if(dp[i][j]\
    \ + grid[i + 1][j] < dp[i + 1][j])\n                {\n                    dp[i\
    \ + 1][j] = dp[i][j] + grid[i + 1][j];\n                    prev[i + 1][j] = 2;\n\
    \                }\n            }\n            if(j < grid.length - 1)\n     \
    \       {\n                if(dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n    \
    \            {\n                    dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n\
    \                    prev[i][j + 1] = 3;\n", "{\n    int n = grid.length;\n  \
    \  long[][] dp = new long[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = grid[i][j];\n    for (int i\
    \ = 1; i < n; i++)\n        dp[0][i] += dp[0][i - 1];\n    for (int i = 1; i <\
    \ n; i++)\n        dp[i][0] += dp[i - 1][0];\n    for (int i = 1; i < n; i++)\n\
    \        for (int j = 1; j < n; j++)\n            dp[i][j] += min(dp[i - 1][j],\
    \ dp[i][j - 1]);\n    long[] res = new long[(int)k];\n    int i = 0, j = 0;\n\
    \    for (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n      \
    \  if (i == n - 1)\n            j++;\n        else if (j == n - 1)\n         \
    \   i++;\n        else if (dp[i + 1][j] < dp[i][j + 1])\n            i++;\n  \
    \      else\n            j++;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                prev[i][j] = 1;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i][j - 1] + grid[i][j];\n                prev[i][j] = 2;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + grid[i][j];\n      \
    \          prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j\
    \ + 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + grid[i][j];\n                prev[i][j] = 4;\n            }\n       \
    \ }\n    int x = 0, y = 0;\n    long[] res = new long[k];\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        res[i] = grid[x][y];\n        if (prev[x][y] ==\
    \ 1)\n            x--;\n        else", "{\n    long N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n \
    \           dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0\
    \ .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] ans = new long[k];\n    ans[0] = dp[N - 1][N - 1];\n  \
    \  long i = N - 1;\n    long j = N - 1;\n    foreach(k; 1 .. k)\n    {\n     \
    \   if(i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n        {\n          \
    \  ans[k] = grid[i][j];\n            i--;\n        }\n        else\n        {\n\
    \            ans[k] = grid[i][j];\n            j--;\n        }\n    }\n    return\
    \ ans;\n}", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n  \
    \  for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n \
    \           next[i][j] = -1;\n        }\n    }\n    for (long i = 0; i < N; i++)\n\
    \    {\n        for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = i - 1;\n                    next[i][j] = j;\n\
    \                }\n            }\n            if (j > 0)\n            {\n   \
    \             if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n                {\n \
    \                   dp[i][j] = dp[i][j - 1] + grid[i][j];\n                  \
    \  prev[i][j] = i;\n                    next[i][j] = j - 1;\n                }\n\
    \            }\n        }\n    }\n    long min = long.max;\n    long min_i = 0;\n\
    \    long min_j = 0;\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            if (dp[i][j] < min)\n           \
    \ {\n                min = dp[i][j];\n                min_i = i;\n           \
    \     min_j = j;\n            }\n        }\n    }\n    long[] path = new long[k];\n\
    \    long cur_i = min_i;\n   ", "{\n    // TODO: implement this function\n   \
    \ return null;\n}", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    int[][] dir = new int[][]{{1, 0}, {0,\
    \ 1}, {-1, 0}, {0, -1}};\n    for (int i = 0; i < N; i++)\n        for (int j\
    \ = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            for\
    \ (int d = 0; d < 4; d++)\n            {\n                int x = i + dir[d][0];\n\
    \                int y = j + dir[d][1];\n                if (x < 0 || x >= N ||\
    \ y < 0 || y >= N)\n                    continue;\n                if (dp[x][y]\
    \ > dp[i][j] + grid[x][y])\n                {\n                    dp[x][y] =\
    \ dp[i][j] + grid[x][y];\n                    prev[x][y] = d * N + i;\n      \
    \          }\n                else if (dp[x][y] == dp[i][j] + grid[x][y])\n  \
    \              {\n                    if (prev[x][y] > d * N + i)\n          \
    \              prev[x][y] = d * N + i;\n                }\n            }\n   \
    \ int[] path = new int[k];\n    int x = N - 1;\n    int y = N - 1;\n    for (int\
    \ i = k - 1; i >= 0; i--)\n    {\n        path[i] = grid[x][y];\n        int d\
    \ = prev[x][y] / N;\n        int px = prev[x][y] % N;\n        x -= dir[d][0];\n\
    \        y -= dir[d][1];\n    }\n    return path;\n}", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] path = new long[k];\n    long[] path2 = new long[k];\n\
    \    long[] path3 = new long[k];\n    long[] path4 = new long[k];\n    long[]\
    \ path5 = new long[k];\n    long[] path6 = new long[k];\n    long[] path7 = new\
    \ long[k];\n    long[] path8 = new long[k];\n    long[] path9 = new long[k];\n\
    \    long[] path10 = new long[k];\n    long[] path11 = new long[k];\n    long[]\
    \ path12 = new long[k];\n    long[] path13 = new long[k];\n    long[] path14 =\
    \ new long[k];\n    long[] path15 = new long[k];\n    long[] path16 = new long[k];\n\
    \    long[] path17 = new long[k];\n    long[] path18 = new long[k];\n    long[]\
    \ path19 = new long[k];\n    long[] path20 = new long[k];\n    long[] path21 =\
    \ new long[k];\n    long[] path22 = new long[k];\n    long[] path23 = new long[k];\n\
    \    long[] path24 = new long[k];\n    long[] path25 = new long[k];\n    long[]\
    \ path26 = new long[k];\n    long[] path27 = new long[", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] path = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            path[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n    {\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                path[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                path[i][j] = 1;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                path[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                path[i][j] = 3;\n            }\n        }\n    }\n    int[] res\
    \ = new int[k];\n    int x = 0;\n    int y = 0;\n    for (int i = 0; i < k; i++)\n\
    \    {\n", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \        dp[i][j] = grid[i][j];\n    for (long i = 0; i < N; i++)\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n              \
    \  dp[i][j] = min(dp[i][j], dp[i - 1][j]);\n            if (j > 0)\n         \
    \       dp[i][j] = min(dp[i][j], dp[i][j - 1]);\n        }\n    long[] ans = new\
    \ long[(int)k];\n    long i = 0;\n    long j = 0;\n    for (long l = 0; l < k;\
    \ l++)\n    {\n        ans[(int)l] = dp[(int)i][(int)j];\n        if (i > 0 &&\
    \ dp[(int)i - 1][(int)j] < dp[(int)i][(int)j])\n            i--;\n        else\
    \ if (j > 0 && dp[(int)i][(int)j - 1] < dp[(int)i][(int)j])\n            j--;\n\
    \        else if (i < N - 1 && dp[(int)i + 1][(int)j] < dp[(int)i][(int)j])\n\
    \            i++;\n        else if (j < N - 1 && dp[(int)i][(int)j + 1] < dp[(int)i][(int)j])\n\
    \            j++;\n    }\n    return ans;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    // TODO: Implement your solution here\n    return null;\n\
    }", "{\n    // TODO: Implement your solution here\n    return null;\n}", "{\n\
    \    // TODO: Implement your solution here\n    return null;\n}", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] parent = new\
    \ int[N][N];\n    int[][] dir = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            for (int[] d : dir)\n      \
    \      {\n                int x = i + d[0];\n                int y = j + d[1];\n\
    \                if (x < 0 || x >= N || y < 0 || y >= N)\n                   \
    \ continue;\n                if (dp[x][y] > dp[i][j] + 1)\n                {\n\
    \                    dp[x][y] = dp[i][j] + 1;\n                    parent[x][y]\
    \ = i * N + j;\n                }\n            }\n    int[] path = new int[k];\n\
    \    int cur = (N - 1) * N + N - 1;\n    for (int i = k - 1; i >= 0; i--)\n  \
    \  {\n        path[i] = cur;\n        cur = parent[cur / N][cur % N];\n    }\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n        res[i]\
    \ = grid[path[i] / N][path[i] % N];\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[] dx = [0, 1, 0, -1];\n    int[] dy = [1, 0, -1, 0];\n    int[] res =\
    \ new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n\
    \        res[i] = grid[x][y];\n        int min_dp = int.max;\n        int min_dir\
    \ = 0;\n        for (int dir = 0; dir < 4; dir++)\n        {\n            int\
    \ nx = x + dx[dir];\n            int ny = y + dy[dir];\n            if (nx < 0\
    \ || nx >= n || ny < 0 || ny >= n)\n                continue;\n            if\
    \ (dp[nx][ny] < min_dp)\n            {\n                min_dp = dp[nx][ny];\n\
    \                min_dir = dir;\n            }\n        }\n        x += dx[min_dir];\n\
    \        y += dy[min_dir];\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new int[N][N];\n \
    \   for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n       \
    \     dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1;\
    \ i >= 0; i--)\n        for (int j = N - 1; j >= 0; j--)\n        {\n        \
    \    if (i < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j]\
    \ + grid[i][j]);\n            if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + grid[i][j]);\n        }\n    int[][] dp3 = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp3[i][j] = int.max;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n           ", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for\
    \ (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n \
    \       for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    long[][] prev = new long[N][N];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n            prev[i][j] = -1;\n    foreach(i; 0 ..\
    \ N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0 && dp[i - 1][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j];\n     \
    \           prev[i][j] = 0;\n            }\n            if(j > 0 && dp[i][j -\
    \ 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1];\n  \
    \              prev[i][j] = 1;\n            }\n            if(i < N - 1 && dp[i\
    \ + 1][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j];\n\
    \                prev[i][j] = 2;\n            }\n            if(j < N - 1 && dp[i][j\
    \ + 1] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1];\n\
    \                prev[i][j] = 3;\n            }\n            dp[i][j] += grid[i][j];\n\
    \        }\n    long[] ans = new long[k];\n    long i = N - 1;\n    long j = N\
    \ - 1;\n    foreach(k; 0 .. k)\n    {\n        ans[k] = grid[i][j];\n        if(prev[i][j]\
    \ == 0)\n            i--;\n        else if(prev[i][j] == 1)\n            j--",
  "{\n    auto N = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[][](N,\
    \ M);\n    auto path = new long[][](N, M);\n    foreach (i; 0 .. N)\n    {\n \
    \       foreach (j; 0 .. M)\n        {\n            if (i == 0 && j == 0)\n  \
    \          {\n                dp[i][j] = grid[i][j];\n                path[i][j]\
    \ = grid[i][j];\n            }\n            else if (i == 0)\n            {\n\
    \                dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j]\
    \ = path[i][j - 1] * 10 + grid[i][j];\n            }\n            else if (j ==\
    \ 0)\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n \
    \               path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n            }\n\
    \            else\n            {\n                dp[i][j] = min(dp[i - 1][j],\
    \ dp[i][j - 1]) + grid[i][j];\n                if (dp[i - 1][j] < dp[i][j - 1])\n\
    \                {\n                    path[i][j] = path[i - 1][j] * 10 + grid[i][j];\n\
    \                }\n                else\n                {\n                \
    \    path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n                }\n     \
    \       }\n        }\n    }\n    auto res = new long[k];\n    auto cur = path[N\
    \ - 1][M - 1];\n    foreach (i; 0 .. k)\n    {\n        res[i] = cur % 10;\n \
    \       cur /= 10;\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[k];\n    int cur = 0;\n    int\
    \ x = 0;\n    int y = 0;\n    while (cur < k)\n    {\n        path[cur] = grid[x][y];\n\
    \        if (prev[x][y] == 1)\n            x--;\n        else if (prev[x][y] ==\
    \ 2)\n            y--;\n        else if (prev[x][y] == 3)\n            x", "{\n\
    \    // write your code here\n    long[][] dp = new long[grid.length][grid[0].length];\n\
    \    long[][] dp2 = new long[grid.length][grid[0].length];\n    long[][] dp3 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp4 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp5 = new long[grid.length][grid[0].length];\n    long[][] dp6 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp7 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp8 = new long[grid.length][grid[0].length];\n    long[][] dp9 =\
    \ new long[grid.length][grid[0].length];\n    long[][] dp10 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp11 = new long[grid.length][grid[0].length];\n    long[][] dp12\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp13 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp14 = new long[grid.length][grid[0].length];\n    long[][] dp15\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp16 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp17 = new long[grid.length][grid[0].length];\n    long[][] dp18\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp19 = new long[grid.length][grid[0].length];\n\
    \    long[][] dp20 = new long[grid.length][grid[0].length];\n    long[][] dp21\
    \ = new long[grid.length][grid[0].length];\n    long[][] dp22 = new long[grid.length][grid[0].",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] ans = new long[k];\n    long\
    \ cur = 0;\n    foreach(i; 0 .. k)\n    {\n        ans[i] = grid[cur / N][cur\
    \ % N];\n        if(cur / N > 0 && dp[cur / N - 1][cur % N] + grid[cur / N][cur\
    \ % N] == dp[cur / N][cur % N])\n            cur -= N;\n        else if(cur %\
    \ N > 0 && dp[cur / N][cur % N - 1] + grid[cur / N][cur % N] == dp[cur / N][cur\
    \ % N])\n            cur -= 1;\n    }\n    return ans;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int\
    \ cur = 0;\n    int i = N - 1;\n    int j = N - 1;\n    while (k > 0)\n    {\n\
    \        path[cur++] = grid[i][j];\n        k--;\n        if (i > 0 && dp[i -\
    \ 1][j] + grid[i][j] == dp[i][j])\n            i--;\n        else\n          \
    \  j--;\n    }\n    return path;\n}", "{\n    int N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            for (int x = 0; x\
    \ < N; x++)\n                for (int y = 0; y < N; y++)\n                   \
    \ if (abs(i - x) + abs(j - y) == 1)\n                        dp[i][j] = min(dp[i][j],\
    \ dp[x][y] + grid[i][j]);\n    long[] ans = new long[k];\n    int x = 0, y = 0;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        ans[i] = grid[x][y];\n      \
    \  long min = dp[x][y];\n        if (x > 0 && dp[x - 1][y] < min)\n        {\n\
    \            min = dp[x - 1][y];\n            x--;\n        }\n        else if\
    \ (x < N - 1 && dp[x + 1][y] < min)\n        {\n            min = dp[x + 1][y];\n\
    \            x++;\n        }\n        else if (y > 0 && dp[x][y - 1] < min)\n\
    \        {\n            min = dp[x][y - 1];\n            y--;\n        }\n   \
    \     else if (y < N - 1 && dp[x][y + 1] < min)\n        {\n            min =\
    \ dp[x][y + 1];\n            y++;\n        }\n    }\n    return ans;\n}", "{\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new\
    \ int[k];\n    for (int i = 0; i < k; i++)\n        path[i] = grid[0][0];\n  \
    \  int x = 0, y = 0;\n    for (int i = 1; i < k; i++)\n    {\n        if (x +\
    \ 1 < n && dp[x + 1][y] + grid[x + 1][y] == dp[x][y])\n        {\n           \
    \ x++;\n            path[i] = grid[x][y];\n        }\n        else\n        {\n\
    \            y++;\n            path[i] = grid[x][y];\n        }\n    }\n    return\
    \ path;\n}", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n       \
    \     dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            prev[i][j] = -1;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n            {\n                if (dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    prev[i][j] = 0;\n                }\n    \
    \        }\n            if (j > 0)\n            {\n                if (dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = 1;\n        \
    \        }\n            }\n        }\n    int i = n - 1;\n    int j = n - 1;\n\
    \    long[] res = new long[k];\n    for (int it = 0; it < k; it++)\n    {\n",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i + 1 < N && dp[i + 1][j] > dp[i][j] + grid[i + 1][j])\n           \
    \ {\n                dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n             \
    \   prev[i + 1][j] = i * N + j;\n            }\n            if (j + 1 < N && dp[i][j\
    \ + 1] > dp[i][j] + grid[i][j + 1])\n            {\n                dp[i][j +\
    \ 1] = dp[i][j] + grid[i][j + 1];\n                prev[i][j + 1] = i * N + j;\n\
    \            }\n            if (i - 1 >= 0 && dp[i - 1][j] > dp[i][j] + grid[i\
    \ - 1][j])\n            {\n                dp[i - 1][j] = dp[i][j] + grid[i -\
    \ 1][j];\n                prev[i - 1][j] = i * N + j;\n            }\n       \
    \     if (j - 1 >= 0 && dp[i][j - 1] > dp[i][j] + grid[i][j - 1])\n          \
    \  {\n                dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n            \
    \    prev[i][j - 1] = i * N + j;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int cur = N * N - 1;\n    for (int i = k", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i + 1 < N)\n\
    \                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + grid[i + 1][j]);\n\
    \            if(j + 1 < N)\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j]\
    \ + grid[i][j + 1]);\n        }\n    long[] res = new long[k];\n    foreach(i;\
    \ 0 .. k)\n        res[i] = grid[0][0];\n    long curr = dp[0][0];\n    long i\
    \ = 0;\n    long j = 0;\n    foreach(l; 1 .. k)\n    {\n        if(i + 1 < N &&\
    \ dp[i + 1][j] < curr)\n        {\n            res[l] = grid[i + 1][j];\n    \
    \        curr = dp[i + 1][j];\n            i++;\n        }\n        else if(j\
    \ + 1 < N && dp[i][j + 1] < curr)\n        {\n            res[l] = grid[i][j +\
    \ 1];\n            curr = dp[i][j + 1];\n            j++;\n        }\n    }\n\
    \    return res;\n}", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n  \
    \  for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n\
    \            next[i][j] = -1;\n        }\n    }\n    for (long step = 1; step\
    \ < k; step++)\n    {\n        for (long i = 0; i < N; i++)\n        {\n     \
    \       for (long j = 0; j < N; j++)\n            {\n                long min\
    \ = dp[i][j];\n                long min_prev = -1;\n                long min_next\
    \ = -1;\n                if (i > 0 && dp[i - 1][j] < min)\n                {\n\
    \                    min = dp[i - 1][j];\n                    min_prev = i - 1;\n\
    \                    min_next = j;\n                }\n                if (i <\
    \ N - 1 && dp[i + 1][j] < min)\n                {\n                    min = dp[i\
    \ + 1][j];\n                    min_prev = i + 1;\n                    min_next\
    \ = j;\n                }\n                if (j > 0 && dp[i][j - 1] < min)\n\
    \                {\n                    min = dp[i][j - 1];\n                \
    \    min_prev = i;\n                    min_next = j - 1;\n                }\n\
    \                if (j < N - 1 && dp[i][j + 1] < min)\n                {\n   \
    \                 min = dp[i][j + 1];\n                    min_prev = i;\n   \
    \                 min_next = j + 1;\n                }\n                dp[i][j]\
    \ = min * 10 + grid[i][j];\n                prev[i][j] = min_prev;\n         \
    \       next[i][j] = min_next;\n            }\n        }\n    }", "{\n    // write\
    \ your code here\n    long[][] dp = new long[grid.length][grid.length];\n    long[][]\
    \ prev = new long[grid.length][grid.length];\n    long[][] next = new long[grid.length][grid.length];\n\
    \    for (int i = 0; i < grid.length; i++)\n    {\n        for (int j = 0; j <\
    \ grid.length; j++)\n        {\n            dp[i][j] = grid[i][j];\n         \
    \   prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n    for\
    \ (int i = 0; i < k - 1; i++)\n    {\n        for (int j = 0; j < grid.length;\
    \ j++)\n        {\n            for (int l = 0; l < grid.length; l++)\n       \
    \     {\n                if (j > 0 && dp[j - 1][l] > dp[j][l])\n             \
    \   {\n                    dp[j - 1][l] = dp[j][l];\n                    prev[j\
    \ - 1][l] = l;\n                    next[j - 1][l] = j;\n                }\n \
    \               if (j < grid.length - 1 && dp[j + 1][l] > dp[j][l])\n        \
    \        {\n                    dp[j + 1][l] = dp[j][l];\n                   \
    \ prev[j + 1][l] = l;\n                    next[j + 1][l] = j;\n             \
    \   }\n                if (l > 0 && dp[j][l - 1] > dp[j][l])\n               \
    \ {\n                    dp[j][l - 1] = dp[j][l];\n                    prev[j][l\
    \ - 1] = l;\n                    next[j][l - 1] = j;\n                }\n    \
    \            if (l < grid.length - 1 && dp[j][l + 1] > dp[j][l])\n           \
    \     {\n                    dp[j][l + 1] = dp[j][l];\n                    prev[j][l\
    \ + 1] = l;\n                    next", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j -\
    \ 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 2;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     path[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n\
    \        else", "{\n    // write your code here\n    int n = grid.length;\n  \
    \  int m = grid[0].length;\n    long[][] dp = new long[n][m];\n    for (int i\
    \ = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n  \
    \          dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 1; i < n;\
    \ i++)\n    {\n        dp[i][0] += dp[i - 1][0];\n    }\n    for (int i = 1; i\
    \ < m; i++)\n    {\n        dp[0][i] += dp[0][i - 1];\n    }\n    for (int i =\
    \ 1; i < n; i++)\n    {\n        for (int j = 1; j < m; j++)\n        {\n    \
    \        dp[i][j] += min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    long[]\
    \ res = new long[k];\n    int i = n - 1;\n    int j = m - 1;\n    for (int l =\
    \ k - 1; l >= 0; l--)\n    {\n        res[l] = grid[i][j];\n        if (i == 0)\n\
    \        {\n            j--;\n        }\n        else if (j == 0)\n        {\n\
    \            i--;\n        }\n        else\n        {\n            if (dp[i -\
    \ 1][j] < dp[i][j - 1])\n            {\n                i--;\n            }\n\
    \            else\n            {\n                j--;\n            }\n      \
    \  }\n    }\n    return res;\n}", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    foreach(i; 0\
    \ .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n            dp[i][j] =\
    \ long.max;\n            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    foreach(i; 0 .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n      \
    \      if(i > 0)\n            {\n                if(dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    prev[i][j] = 0;\n                }\n    \
    \        }\n            if(j > 0)\n            {\n                if(dp[i][j -\
    \ 1] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = 1;\n        \
    \        }\n            }\n        }\n    }\n    long[] path = new long[k];\n\
    \    long i = n - 1;\n    long j = n - 1;\n    foreach(t; 0 .. k)\n    {\n   \
    \     path[t] = grid[i][j];\n        if(prev[i][j] == 0)\n        {\n        \
    \    i--;\n        }\n        else\n        {\n            j--;\n        }\n \
    \   }\n    return path;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 4;\n            }\n        }\n    int\
    \ x = 0, y = 0;\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n         \
    \   x--;\n        else if (prev[x][y] == 2)\n            y--;\n        else if\
    \ (prev[x][y] == 3)\n            x++;\n       ", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][]\
    \ path_len = new long[n][n];\n    long[][] path_idx = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n\
    \            path_len[i][j] = 1;\n            path_idx[i][j] = 0;\n        }\n\
    \    }\n    for (long i = 1; i < k; i++)\n    {\n        long[][] dp_new = new\
    \ long[n][n];\n        long[][] path_new = new long[n][n];\n        long[][] path_len_new\
    \ = new long[n][n];\n        long[][] path_idx_new = new long[n][n];\n       \
    \ for (long j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n;\
    \ l++)\n            {\n                long min_val = dp[j][l];\n            \
    \    long min_path = path[j][l];\n                long min_path_len = path_len[j][l];\n\
    \                long min_path_idx = path_idx[j][l];\n                if (j >\
    \ 0)\n                {\n                    if (dp[j - 1][l] < min_val)\n   \
    \                 {\n                        min_val = dp[j - 1][l];\n       \
    \                 min_path = path[j - 1][l];\n                        min_path_len\
    \ = path_len[j - 1][l];\n                        min_path_idx = path_idx[j - 1][l];\n\
    \                    }\n                    else if (dp[j - 1][l] == min_val)\n\
    \                    {\n                        if (path[j - 1][l] < min_path)\n\
    \                        {\n                ", "{\n    auto N = grid.length;\n\
    \    auto M = grid[0].length;\n    auto dp = new long[][][](N, M, k + 1);\n  \
    \  auto path = new long[][][](N, M, k + 1);\n    foreach (i, j; 0 .. N)\n    {\n\
    \        dp[i][j][0] = grid[i][j];\n        path[i][j][0] = grid[i][j];\n    }\n\
    \    foreach (i, j; 0 .. N)\n    {\n        foreach (l; 1 .. k + 1)\n        {\n\
    \            dp[i][j][l] = long.max;\n            path[i][j][l] = long.max;\n\
    \        }\n    }\n    foreach (l; 1 .. k + 1)\n    {\n        foreach (i, j;\
    \ 0 .. N)\n        {\n            if (i > 0)\n            {\n                if\
    \ (dp[i][j][l] > dp[i - 1][j][l - 1])\n                {\n                   \
    \ dp[i][j][l] = dp[i - 1][j][l - 1];\n                    path[i][j][l] = grid[i][j];\n\
    \                }\n            }\n            if (i < N - 1)\n            {\n\
    \                if (dp[i][j][l] > dp[i + 1][j][l - 1])\n                {\n \
    \                   dp[i][j][l] = dp[i + 1][j][l - 1];\n                    path[i][j][l]\
    \ = grid[i][j];\n                }\n            }\n            if (j > 0)\n  \
    \          {\n                if (dp[i][j][l] > dp[i][j - 1][l - 1])\n       \
    \         {\n                    dp[i][j][l] = dp[i][j - 1][l - 1];\n        \
    \            path[i][j][l] = grid[i][j];\n                }\n            }\n \
    \           if (j < N - 1)\n            {\n                if (dp[i][j][l] > dp[i",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] path\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n    {\n        for (int j\
    \ = 0; j < N; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = 0;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \    {\n        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n           \
    \     {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                  \
    \  path[i][j] = 1;\n                }\n                else if (dp[i - 1][j] +\
    \ 1 == dp[i][j])\n                {\n                    if (grid[i - 1][j] <\
    \ grid[i][j])\n                    {\n                        dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                        path[i][j] = 1;\n                    }\n\
    \                }\n            }\n            if (j > 0)\n            {\n   \
    \             if (dp[i][j - 1] + 1 < dp[i][j])\n                {\n          \
    \          dp[i][j] = dp[i][j - 1] + 1;\n                    path[i][j] = 2;\n\
    \                }\n                else if (dp[i][j - 1] + 1 == dp[i][j])\n \
    \               {\n                    if (grid[i][j - 1] < grid[i][j])\n    \
    \                {\n                        dp[i][j] = dp[i][j - 1] + 1;\n   \
    \                     path[i][j] = 2;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    long[] ans = new long[k];\n    int x\
    \ = N - 1;\n    int y =", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n     \
    \   {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp2[i][j] = int.max;\n    dp2[N\
    \ - 1][N - 1] = 0;\n    foreach(i; N .. 0)\n        foreach(j; N .. 0)\n     \
    \   {\n            if(i < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i\
    \ + 1][j] + 1);\n            if(j < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            dp4[i][j] = int.max;\n    dp4[0][0] = 0;\n    foreach(i;\
    \ 0 .. N)\n        foreach", "{\n    // Write your code here\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] path = new long[N][N];\n    long[][]\
    \ path_len = new long[N][N];\n    for (int i = 0; i < N; i++)\n    {\n       \
    \ for (int j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            path[i][j] = grid[i][j];\n            path_len[i][j] = 1;\n     \
    \   }\n    }\n    for (int i = 1; i < k; i++)\n    {\n        long[][] dp_new\
    \ = new long[N][N];\n        long[][] path_new = new long[N][N];\n        long[][]\
    \ path_len_new = new long[N][N];\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            for (int l = 0; l < N; l++)\n            {\n               \
    \ dp_new[j][l] = dp[j][l];\n                path_new[j][l] = path[j][l];\n   \
    \             path_len_new[j][l] = path_len[j][l];\n            }\n        }\n\
    \        for (int j = 0; j < N; j++)\n        {\n            for (int l = 0; l\
    \ < N; l++)\n            {\n                if (j > 0)\n                {\n  \
    \                  if (dp_new[j][l] > dp[j - 1][l] * 10 + grid[j][l])\n      \
    \              {\n                        dp_new[j][l] = dp[j - 1][l] * 10 + grid[j][l];\n\
    \                        path_new[j][l] = path[j - 1][l] * 10 + grid[j][l];\n\
    \                        path_len_new[j][l] = path_len[j - 1][l] + 1;\n      \
    \              }\n                    else if (dp_new[j][l] == dp[j - 1][", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 ..\
    \ N)\n        {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    foreach (i; 0 .. N)\n    {\n       \
    \ foreach (j; 0 .. N)\n        {\n            if (i > 0)\n            {\n    \
    \            long new_dp = dp[i - 1][j] + grid[i][j];\n                if (new_dp\
    \ < dp[i][j])\n                {\n                    dp[i][j] = new_dp;\n   \
    \                 prev[i][j] = 0;\n                }\n            }\n        \
    \    if (j > 0)\n            {\n                long new_dp = dp[i][j - 1] + grid[i][j];\n\
    \                if (new_dp < dp[i][j])\n                {\n                 \
    \   dp[i][j] = new_dp;\n                    prev[i][j] = 1;\n                }\n\
    \            }\n        }\n    }\n    long[] res = new long[k];\n    long i =\
    \ N - 1;\n    long j = N - 1;\n    foreach (k; 0 .. k)\n    {\n        res[k]\
    \ = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n            i--;\n \
    \       }\n        else\n        {\n            j--;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = -1;\n\
    \    dp[0][0] = 0;\n    long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n            prev[i][j] = -1;\n    prev[0][0] = 0;\n\
    \    long[][] next = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n            next[i][j] = -1;\n    next[0][0] = 0;\n    long[][] dist\
    \ = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n    \
    \        dist[i][j] = -1;\n    dist[0][0] = 0;\n    long[][] path = new long[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            path[i][j] =\
    \ -1;\n    path[0][0] = 0;\n    long[][] visited = new long[n][n];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n            visited[i][j] = -1;\n    visited[0][0]\
    \ = 0;\n    long[][] queue = new long[n * n][2];\n    long[][] queue2 = new long[n\
    \ * n][2];\n    long[][] queue3 = new long[n * n][2];\n    long[][] queue4 = new\
    \ long[n * n][2];\n    long[][] queue5 = new long[n * n][2];\n    long[][] queue6\
    \ = new long[n * n][2];\n    long[][] queue7 = new long[n * n][2];\n    long[][]\
    \ queue8 = new long[n", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n    {\n        foreach(j;\
    \ 0 .. n)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach(i; 0 .. n)\n    {\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 0;\n            }\n            if(j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 1;\n            }\n            if(i + 1 <\
    \ n && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] =\
    \ dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n        \
    \    if(j + 1 < n && dp[i][j + 1] + 1 < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n        \
    \    }\n        }\n    }\n    long[] res = new long[k];\n    long x = n - 1;\n\
    \    long y = n - 1;\n    foreach(i; 0 .. k)\n    {\n        res[i] = grid[x][y];\n\
    \        long p = prev[x][y];\n        if(p == 0)\n            x--;\n        else\
    \ if(p == 1)\n            y--;\n       ", "{\n    // Write your code here\n  \
    \  int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for\
    \ (int i = N - 1; i >= 0; i--)\n        for (int j = N - 1; j >= 0; j--)\n   \
    \     {\n            if (i < N - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + grid[i][j]);\n            if (j < N - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n        }\n    int[][] dp3 =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j <\
    \ N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j] - grid[i][j];\n    int[][]",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n \
    \   int[][] dp2 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n    dp2[N - 1][N\
    \ - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for (int j = N - 1;\
    \ j >= 0; j--)\n        {\n            if (i < N - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n            if (j < N - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n   \
    \     }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n \
    \       for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j]\
    \ - grid[i][j];\n    int[][] dp4 = new int[", "{\n    int n = grid.length;\n \
    \   int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] path = new int[k];\n    path[0]\
    \ = grid[0][0];\n    int i = 0, j = 0;\n    for (int l = 1; l < k; l++)\n    {\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n        {\n    \
    \        path[l] = grid[i - 1][j];\n            i--;\n        }\n        else\n\
    \        {\n            path[l] = grid[i][j - 1];\n            j--;\n        }\n\
    \    }\n    return path;\n}", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    long[][] prev = new long[n][n];\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n        \
    \    dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n        }\n    }\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j];\n                prev[i][j] = 0;\n \
    \           }\n            if (j > 0 && dp[i][j - 1] < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1];\n                prev[i][j] = 1;\n\
    \            }\n            if (i < n - 1 && dp[i + 1][j] < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i + 1][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < n - 1 && dp[i][j + 1] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1];\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[(int)k];\n\
    \    long i = 0;\n    long j = 0;\n    for (long l = 0; l < k; l++)\n    {\n \
    \       res[(int)l] = grid[(int)i][(int)j];\n        switch ((int)prev[(int)i][(int)j])\n\
    \        {\n            case 0:\n                i--;\n                break;\n\
    \            case 1:\n               ", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    int[][] dir = new\
    \ int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \            for (int d = 0; d < 4; d++)\n            {\n                int x\
    \ = i + dir[d][0];\n                int y = j + dir[d][1];\n                if\
    \ (x < 0 || x >= n || y < 0 || y >= n)\n                    continue;\n      \
    \          if (dp[x][y] > dp[i][j] + 1)\n                {\n                 \
    \   dp[x][y] = dp[i][j] + 1;\n                    prev[x][y] = d;\n          \
    \      }\n            }\n    int x = n - 1;\n    int y = n - 1;\n    long[] res\
    \ = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n\
    \        int d = prev[x][y];\n        x -= dir[d][0];\n        y -= dir[d][1];\n\
    \    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n           \
    \ dp[i][j] = int.max;\n    dp[0][0] = 0;\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n        {\n            if(i != 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if(j != 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new\
    \ int[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n           \
    \ dp2[i][j] = int.max;\n    dp2[N - 1][N - 1] = 0;\n    foreach(i; N .. 0)\n \
    \       foreach(j; N .. 0)\n        {\n            if(i != N - 1)\n          \
    \      dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n            if(j\
    \ != N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n\
    \        }\n    int[][] dp3 = new int[N][N];\n    foreach(i; 0 .. N)\n       \
    \ foreach(j; 0 .. N)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][]\
    \ dp4 = new int[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n \
    \           dp4[i][j] = int.max;\n    dp4[0][0] = 0", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < N\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    long[] res = new long[k];\n    int i = 0, j = 0;\n \
    \   for (int t = 0; t < k; t++)\n    {\n        res[t] = grid[i][j];\n       \
    \ switch (prev[i][j])\n        {\n            case 1:\n                i--;\n\
    \                break;\n            case 2:\n                j--;\n         \
    \       break;\n            case 3:\n                i++;\n                break;\n\
    \            case", "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    for (int i = 0; i < N; i++)\n      \
    \  for (int j = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0)\n            {\n                if (dp[i -\
    \ 1][j] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j];\n                    prev[i][j] = 1;\n        \
    \        }\n            }\n            if (j > 0)\n            {\n           \
    \     if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n                {\n         \
    \           dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    prev[i][j]\
    \ = 2;\n                }\n            }\n        }\n    long[] ans = new long[(int)k];\n\
    \    int x = N - 1;\n    int y = N - 1;\n    for (int i = (int)k - 1; i >= 0;\
    \ i--)\n    {\n        ans[i] = grid[x][y];\n        if (prev[x][y] == 1)\n  \
    \          x--;\n        else\n            y--;\n    }\n    return ans;\n}", "{\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    long[][] next = new long[n][n];\n    for (long i = 0;\
    \ i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n      \
    \      dp[i][j] = grid[i][j];\n            prev[i][j] = -1;\n            next[i][j]\
    \ = -1;\n        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for\
    \ (long j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n\
    \            {\n                if (j > 0 && dp[j - 1][l] < dp[j][l])\n      \
    \          {\n                    dp[j][l] = dp[j - 1][l];\n                 \
    \   prev[j][l] = j - 1;\n                    next[j][l] = l;\n               \
    \ }\n                if (j < n - 1 && dp[j + 1][l] < dp[j][l])\n             \
    \   {\n                    dp[j][l] = dp[j + 1][l];\n                    prev[j][l]\
    \ = j + 1;\n                    next[j][l] = l;\n                }\n         \
    \       if (l > 0 && dp[j][l - 1] < dp[j][l])\n                {\n           \
    \         dp[j][l] = dp[j][l - 1];\n                    prev[j][l] = j;\n    \
    \                next[j][l] = l - 1;\n                }\n                if (l\
    \ < n - 1 && dp[j][l + 1] < dp[j][l])\n                {\n                   \
    \ dp[j][l] = dp[j][l + 1];\n                    prev[j][l] = j;\n            \
    \        next[j][l] = l + 1;\n                }\n            }\n        }\n  \
    \  }\n    long[] res = new long[k", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n  \
    \          dp[i][j] = int.max;\n    dp[0][0] = 0;\n    foreach(i; 0 .. n)\n  \
    \      foreach(j; 0 .. n)\n        {\n            if(i + 1 < n)\n            \
    \    dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + abs(grid[i][j] - grid[i + 1][j]));\n\
    \            if(j + 1 < n)\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j]\
    \ + abs(grid[i][j] - grid[i][j + 1]));\n        }\n    long[] res = new long[k];\n\
    \    int curr = 0;\n    int i = 0;\n    int j = 0;\n    while(curr < k)\n    {\n\
    \        res[curr] = grid[i][j];\n        if(i + 1 < n && dp[i + 1][j] < dp[i][j\
    \ + 1])\n            i++;\n        else\n            j++;\n        curr++;\n \
    \   }\n    return res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[] path = new int[k];\n    path[0] = grid[0][0];\n\
    \    int i = 0, j = 0;\n    for (int l = 1; l < k; l++)\n    {\n        if (i\
    \ + 1 < n && dp[i + 1][j] + grid[i + 1][j] == dp[i][j])\n        {\n         \
    \   i++;\n            path[l] = grid[i][j];\n        }\n        else\n       \
    \ {\n            j++;\n            path[l] = grid[i][j];\n        }\n    }\n \
    \   return path;\n}", "{\n    import std.algorithm;\n    import std.range;\n \
    \   import std.conv;\n    import std.array;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.math;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.array;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.math;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.array;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.math;\n    import std.typecons;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.conv;\n    import std", "{\n    auto n\
    \ = grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n,\
    \ m);\n    auto path = new long[][](n, m);\n    auto min = new long[][](n, m);\n\
    \    foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n    \
    \        dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n            min[i][j]\
    \ = grid[i][j];\n        }\n    }\n    for (long i = 0; i < n; i++)\n    {\n \
    \       for (long j = 0; j < m; j++)\n        {\n            if (i > 0)\n    \
    \        {\n                if (dp[i][j] > dp[i - 1][j] + grid[i][j])\n      \
    \          {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n    \
    \                path[i][j] = path[i - 1][j] + 1;\n                    min[i][j]\
    \ = min[i - 1][j];\n                }\n                else if (dp[i][j] == dp[i\
    \ - 1][j] + grid[i][j])\n                {\n                    if (path[i][j]\
    \ > path[i - 1][j] + 1)\n                    {\n                        path[i][j]\
    \ = path[i - 1][j] + 1;\n                        min[i][j] = min[i - 1][j];\n\
    \                    }\n                    else if (path[i][j] == path[i - 1][j]\
    \ + 1)\n                    {\n                        if (min[i][j] > min[i -\
    \ 1][j])\n                        {\n                            min[i][j] = min[i\
    \ - 1][j];\n                        }\n                    }\n               \
    \ }\n            }\n            if (j > 0)\n            {\n                if\
    \ (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n                \
    \    dp[i][j] = dp[", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n        \
    \    case 1: x--; break;\n            case 2: y--; break;\n            case 3:\
    \ x++; break;\n            case 4: y++; break;\n        }\n    }", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 1;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 2;\n            }\n            if (i\
    \ < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[(int)k];\n    int x = 0, y = 0;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n     \
    \   if (prev[x][y] == 1)\n            x--;\n        else if (prev[x][y] == 2)\n\
    \            y--;\n        else if (prev[x][y] == 3)\n            x", "{\n   \
    \ int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n         \
    \   }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = 0, y = 0;\n    long[]\
    \ res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n        res[i] =\
    \ grid[x][y];\n        int p = prev[x][y];\n        if (p == 1)\n            x--;\n\
    \        else if (p == 2)\n            y--;\n        else if (p == 3)\n      \
    \      x++;\n        else\n            y", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 2;\n            }\n            if (i < n - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 3;\n            }\n            if (j < n\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n            }\n      \
    \  }\n    int[] path = new int[(int)k];\n    int x = 0, y = 0;\n    for (int i\
    \ = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n        switch (prev[x][y])\n\
    \        {\n            case 1:\n                x--;\n                break;\n\
    \            case 2:\n                y--;\n                break;\n         \
    \   case 3:\n                x++;\n                break;", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = (long)1e18;\n            prev[i][j] = -1;\n   \
    \     }\n    }\n    dp[0][0] = 0;\n    for (long i = 0; i < n; i++)\n    {\n \
    \       for (long j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \        {\n                if (dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n  \
    \              {\n                    dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n\
    \                    prev[i - 1][j] = 1;\n                }\n            }\n \
    \           if (j > 0)\n            {\n                if (dp[i][j] + grid[i][j\
    \ - 1] < dp[i][j - 1])\n                {\n                    dp[i][j - 1] =\
    \ dp[i][j] + grid[i][j - 1];\n                    prev[i][j - 1] = 2;\n      \
    \          }\n            }\n            if (i < n - 1)\n            {\n     \
    \           if (dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n                {\n\
    \                    dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n             \
    \       prev[i + 1][j] = 3;\n                }\n            }\n            if\
    \ (j < n - 1)\n            {\n                if (dp[i][j] + grid[i][j + 1] <\
    \ dp[i][j + 1])\n                {\n                    dp[i][j + 1] = dp[i][j]\
    \ + grid[i][j + 1];\n                    prev[i][", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    for\
    \ (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n    \
    \    {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n     \
    \   }\n    }\n    dp[0][0] = 0;\n    for (long i = 0; i < N; i++)\n    {\n   \
    \     for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n      \
    \      {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + 1;\n                    prev[i][j]\
    \ = 0;\n                }\n            }\n            if (j > 0)\n           \
    \ {\n                if (dp[i][j - 1] + 1 < dp[i][j])\n                {\n   \
    \                 dp[i][j] = dp[i][j - 1] + 1;\n                    prev[i][j]\
    \ = 1;\n                }\n            }\n            if (i < N - 1)\n       \
    \     {\n                if (dp[i + 1][j] + 1 < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i + 1][j] + 1;\n                    prev[i][j]\
    \ = 2;\n                }\n            }\n            if (j < N - 1)\n       \
    \     {\n                if (dp[i][j + 1] + 1 < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i][j + 1] + 1;\n                    prev[i][j]\
    \ = 3;\n                }\n            }\n        }\n    }\n    long[] res = new\
    \ long[k];\n    long i = N - 1;\n    long j = N - 1;\n    for (long l = k - 1;\
    \ l >= 0;", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    foreach (i; 0 .. N)\n    {\n       \
    \ foreach (j; 0 .. N)\n        {\n            dp[i][j] = long.max;\n         \
    \   prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach (i; 0 ..\
    \ N)\n    {\n        foreach (j; 0 .. N)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = 0;\n                }\n            }\n     \
    \       if (j > 0)\n            {\n                if (dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1]\
    \ + grid[i][j];\n                    prev[i][j] = 1;\n                }\n    \
    \        }\n        }\n    }\n    long[] res = new long[k];\n    long cur = k\
    \ - 1;\n    long i = N - 1;\n    long j = N - 1;\n    while (cur >= 0)\n    {\n\
    \        res[cur] = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n   \
    \         i--;\n        }\n        else if (prev[i][j] == 1)\n        {\n    \
    \        j--;\n        }\n        cur--;\n    }\n    return res;\n}", "{\n   \
    \ int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    prev[0][0] = -1;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 3;\n            }\n        }\n    int x = 0;\n \
    \   int y = 0;\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = grid[x][y];\n        int nx = x;\n        int ny = y;\n\
    \        switch (prev[x][y])\n        {\n            case 0:\n               \
    \ nx--;\n               ", "{\n    // The number of rows and columns in the grid.\n\
    \    long N = grid.length;\n    // The number of cells in the grid.\n    long\
    \ M = N * N;\n    // The number of possible paths of length k.\n    long P = pow(N,\
    \ k);\n    // The number of possible paths of length k that start from a given\
    \ cell.\n    long Q = pow(N - 1, k);\n    // The number of possible paths of length\
    \ k that start from a given cell\n    // and end at a given cell.\n    long R\
    \ = pow(N - 2, k);\n    // The number of possible paths of length k that start\
    \ from a given cell\n    // and end at a given cell and have a given value at\
    \ the end.\n    long S = pow(N - 2, k - 1);\n    // The number of possible paths\
    \ of length k that start from a given cell\n    // and end at a given cell and\
    \ have a given value at the end and have a\n    // given value at the start.\n\
    \    long T = pow(N - 2, k - 2);\n    // The number of possible paths of length\
    \ k that start from a given cell\n    // and end at a given cell and have a given\
    \ value at the end and have a\n    // given value at the start and have a given\
    \ value at the middle.\n    long U = pow(N - 2, k - 3);\n    // The number of\
    \ possible paths of length k that start from a given cell\n    // and end at a\
    \ given cell and have a given value at the end and have a\n    // given value\
    \ at the start and have a given value at the middle and have\n    // a given value\
    \ at the middle.\n    long V = pow(N - 2, k - 4);\n    // The number of possible\
    \ paths of length k that start from a given cell\n    // and end at a given cell\
    \ and have a given value at the end and have a\n    // given value at the start\
    \ and have a given value at the middle and have\n    // a given value at the middle\
    \ and have a given value at the middle.\n    long W = pow(N - 2, k - 5);\n   \
    \ // The number of possible paths of length k that start from a given cell\n \
    \   // and end at a given cell", "{\n    long n = grid.length;\n    long[][] dp\
    \ = new long[n][n];\n    long[][] prev = new long[n][n];\n    foreach(i; 0 ..\
    \ n)\n    {\n        foreach(j; 0 .. n)\n        {\n            dp[i][j] = long.max;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach(i;\
    \ 0 .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n            if(i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n            if(j\
    \ > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if(i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n         \
    \       dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n      \
    \      }\n            if(j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n         \
    \   {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    }\n    long[] res = new long[k];\n    long\
    \ x = n - 1;\n    long y = n - 1;\n    foreach(i; 0 .. k)\n    {\n        res[i]\
    \ = grid[x][y];\n        if(prev[x][y] == 0)\n        {\n            x--;\n  \
    \      }\n        else if(prev[x][y] == 1)\n       ", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] res = new int[k];\n    for\
    \ (int i = 0; i < k; i++)\n        res[i] = grid[0][0];\n    int cur = 0;\n  \
    \  int x = 0;\n    int y = 0;\n    while (k > 0)\n    {\n        if (x + 1 < N\
    \ && dp[x + 1][y] == cur + grid[x + 1][y])\n        {\n            x++;\n    \
    \        res[k - 1] = grid[x][y];\n        }\n        else\n        {\n      \
    \      y++;\n            res[k - 1] = grid[x][y];\n        }\n        cur += grid[x][y];\n\
    \        k--;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                prev[i][j] = 3;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n            }\n      \
    \  }\n    int[] path = new int[k];\n    int x = 0, y = 0;\n    for (int i = 0;\
    \ i < k; i++)\n    {\n        path[i] = grid[x][y];\n        switch (prev[x][y])\n\
    \        {\n            case 1:\n                x--;\n                break;\n\
    \            case 2:\n                y--;\n                break;\n         \
    \   case 3:\n                x++;\n                break;\n            case",
  "{\n    long N = grid.length;\n    long[] res = new long[k];\n    long[][] dp =\
    \ new long[N][N];\n    long[][] path = new long[N][N];\n    for (long i = 0; i\
    \ < N; i++) {\n        for (long j = 0; j < N; j++) {\n            dp[i][j] =\
    \ grid[i][j];\n            path[i][j] = 1;\n        }\n    }\n    for (long i\
    \ = 1; i < k; i++) {\n        for (long j = 0; j < N; j++) {\n            for\
    \ (long l = 0; l < N; l++) {\n                long min = dp[j][l];\n         \
    \       long min_path = path[j][l];\n                if (j > 0 && dp[j - 1][l]\
    \ < min) {\n                    min = dp[j - 1][l];\n                    min_path\
    \ = path[j - 1][l];\n                }\n                if (j < N - 1 && dp[j\
    \ + 1][l] < min) {\n                    min = dp[j + 1][l];\n                \
    \    min_path = path[j + 1][l];\n                }\n                if (l > 0\
    \ && dp[j][l - 1] < min) {\n                    min = dp[j][l - 1];\n        \
    \            min_path = path[j][l - 1];\n                }\n                if\
    \ (l < N - 1 && dp[j][l + 1] < min) {\n                    min = dp[j][l + 1];\n\
    \                    min_path = path[j][l + 1];\n                }\n         \
    \       dp[j][l] = min + grid[j][l];\n                path[j][l] = min_path +\
    \ 1;\n            }\n        }\n    }\n    long min = dp[0][0];\n    long min_path\
    \ = path[0][0];\n    for (long i = 0; i < N; i++) {\n        for (long j = 0;\
    \ j < N; j++) {\n            if (dp[i][j] < min) {", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    int[] res = new int[k];\n    int\
    \ cur = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[cur\
    \ / N][cur % N];\n        cur = dp[cur / N][cur % N];\n    }\n    return res;\n\
    }", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][]\
    \ prev = new long[N][N];\n    long[][] next = new long[N][N];\n    foreach (i;\
    \ 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n            dp[i][j]\
    \ = -1;\n            prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n\
    \    }\n    dp[0][0] = grid[0][0];\n    prev[0][0] = -1;\n    next[0][0] = -1;\n\
    \    foreach (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n    \
    \        if (i > 0 && dp[i - 1][j] != -1)\n            {\n                if (dp[i][j]\
    \ == -1 || dp[i][j] > dp[i - 1][j] + grid[i][j])\n                {\n        \
    \            dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    prev[i][j]\
    \ = i - 1;\n                    next[i][j] = j;\n                }\n         \
    \   }\n            if (j > 0 && dp[i][j - 1] != -1)\n            {\n         \
    \       if (dp[i][j] == -1 || dp[i][j] > dp[i][j - 1] + grid[i][j])\n        \
    \        {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \              prev[i][j] = i;\n                    next[i][j] = j - 1;\n    \
    \            }\n            }\n        }\n    }\n    long[] ans = new long[k];\n\
    \    long i = N - 1;\n    long j = N - 1;\n    foreach (k; 0 .. k)\n    {\n  \
    \      ans[k] = grid[i][j];\n        long tmp = i;\n        i = prev", "{\n  \
    \  int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i +\
    \ 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ + 1][j] + grid[i][j];\n                prev[i][j] = 3;\n            }\n    \
    \        if (j < N - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i][j + 1] + grid[i][j];\n                prev[i][j]\
    \ = 4;\n            }\n        }\n    long[] res = new long[k];\n    int i = N\
    \ - 1;\n    int j = N - 1;\n    for (int l = 0; l < k; l++)\n    {\n        res[l]\
    \ = grid[i][j];\n        switch (prev[i][j])\n        {\n", "{\n    // Write your\
    \ code here\n    long n = grid.length;\n    assert(n >= 2);\n    assert(k >= 1);\n\
    \    assert(k <= n * n);\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    foreach(i; 0 .. n)\n    {\n        foreach(j; 0 .. n)\n\
    \        {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n \
    \       }\n    }\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n    {\n\
    \        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n            {\n\
    \                if(dp[i][j] > dp[i - 1][j] + grid[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                 \
    \   prev[i][j] = 0;\n                }\n            }\n            if(j > 0)\n\
    \            {\n                if(dp[i][j] > dp[i][j - 1] + grid[i][j])\n   \
    \             {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n \
    \                   prev[i][j] = 1;\n                }\n            }\n      \
    \  }\n    }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j =\
    \ n - 1;\n    long cnt = k - 1;\n    while(cnt >= 0)\n    {\n        res[cnt]\
    \ = grid[i][j];\n        if(prev[i][j] == 0)\n        {\n            i--;\n  \
    \      }\n        else if(prev[i][j] == 1)\n        {\n            j--;\n    \
    \    }\n        cnt--;\n    }\n    return res;\n}", "{\n    import std.algorithm;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.array;\n    import std.conv;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.array;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.array;\n    import std.conv;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.math;\n    import std.typecons;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.array;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.array;\n    import std", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0 && dp[i][j] + grid[i - 1][j] < dp[i\
    \ - 1][j])\n            {\n                dp[i - 1][j] = dp[i][j] + grid[i -\
    \ 1][j];\n                prev[i - 1][j] = 1;\n            }\n            if (j\
    \ > 0 && dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n            {\n          \
    \      dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n                prev[i][j -\
    \ 1] = 2;\n            }\n            if (i < n - 1 && dp[i][j] + grid[i + 1][j]\
    \ < dp[i + 1][j])\n            {\n                dp[i + 1][j] = dp[i][j] + grid[i\
    \ + 1][j];\n                prev[i + 1][j] = 3;\n            }\n            if\
    \ (j < n - 1 && dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n            {\n   \
    \             dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n                prev[i][j\
    \ + 1] = 4;\n            }\n        }\n    int x = n - 1;\n    int y = n - 1;\n\
    \    long[] res = new long[(int)k];\n    for (int i = (int)k - 1; i >= 0;", "{\n\
    \    int n = grid.length;\n    int[][] dist = new int[n][n];\n    for (int i =\
    \ 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dist[i][j]\
    \ = int.max;\n    dist[0][0] = 0;\n    auto pq = new PriorityQueue!(int, \"a >\
    \ b\");\n    pq.put(0, tuple(0, 0));\n    while (!pq.empty)\n    {\n        auto\
    \ p = pq.get();\n        int d = p[0];\n        int i = p[1][0];\n        int\
    \ j = p[1][1];\n        if (d > dist[i][j])\n            continue;\n        if\
    \ (d == k)\n            break;\n        for (int di = -1; di <= 1; di++)\n   \
    \         for (int dj = -1; dj <= 1; dj++)\n            {\n                if\
    \ (abs(di) + abs(dj) != 1)\n                    continue;\n                int\
    \ ni = i + di;\n                int nj = j + dj;\n                if (ni < 0 ||\
    \ ni >= n || nj < 0 || nj >= n)\n                    continue;\n             \
    \   int nd = d + 1;\n                if (nd < dist[ni][nj])\n                {\n\
    \                    dist[ni][nj] = nd;\n                    pq.put(nd, tuple(ni,\
    \ nj));\n                }\n            }\n    }\n    int i = 0;\n    int j =\
    \ 0;\n    long[] ans = new long[k];\n    for (int d = 0; d < k; d++)\n    {\n\
    \        ans[d] = grid[i][j];\n        int ni = -1;\n        int nj = -1;\n  \
    \      for (int di = -1; di <= 1; di++)\n            for (int dj = -1; dj <= 1;\
    \ dj++)\n            {\n                if (abs(di) + abs(dj) != 1)\n        \
    \            continue;\n                int ti = i + di;\n                int\
    \ tj = j + dj;\n                if (ti < 0", "{\n    long n = grid.length;\n \
    \   long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n            dp[i][j]\
    \ = long.max;\n            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] =\
    \ grid[0][0];\n    foreach(i; 0 .. n)\n    {\n        foreach(j; 0 .. n)\n   \
    \     {\n            if(i > 0)\n            {\n                if(dp[i][j] > dp[i\
    \ - 1][j] + grid[i][j])\n                {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                    prev[i][j] = 0;\n               \
    \ }\n            }\n            if(j > 0)\n            {\n                if(dp[i][j]\
    \ > dp[i][j - 1] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = 1;\n        \
    \        }\n            }\n        }\n    }\n    long[] ans = new long[k];\n \
    \   long i = n - 1;\n    long j = n - 1;\n    foreach(k; 0 .. k)\n    {\n    \
    \    ans[k] = grid[i][j];\n        if(prev[i][j] == 0)\n        {\n          \
    \  i -= 1;\n        }\n        else if(prev[i][j] == 1)\n        {\n         \
    \   j -= 1;\n        }\n    }\n    return ans;\n}", "{\n    long[] result = new\
    \ long[k];\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n   \
    \ long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n    long[][]\
    \ path = new long[N][N];\n    long[][] path_prev = new long[N][N];\n    long[][]\
    \ path_next = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n     \
    \   for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            prev[i][j] = i * N + j;\n            next[i][j] = i * N + j;\n  \
    \          path[i][j] = 1;\n            path_prev[i][j] = i * N + j;\n       \
    \     path_next[i][j] = i * N + j;\n        }\n    }\n    for (long step = 1;\
    \ step < k; step++)\n    {\n        for (long i = 0; i < N; i++)\n        {\n\
    \            for (long j = 0; j < N; j++)\n            {\n                long\
    \ min = dp[i][j];\n                long min_prev = prev[i][j];\n             \
    \   long min_next = next[i][j];\n                long min_path = path[i][j];\n\
    \                long min_path_prev = path_prev[i][j];\n                long min_path_next\
    \ = path_next[i][j];\n                if (i > 0)\n                {\n        \
    \            if (dp[i - 1][j] < min)\n                    {\n                \
    \        min = dp[i - 1][j];\n                        min_prev = prev[i - 1][j];\n\
    \                        min_next = next[i - 1][j];\n                        min_path\
    \ = path[i - 1][j];\n                        min_path_prev = path_prev[i - 1][j];\n\
    \                        min_path_next = path_next[i - 1][j];\n              \
    \      }", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] dp2 = new long[n][n];\n    long[][] dp3 = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n; j++) \n  \
    \      {\n            dp[i][j] = grid[i][j];\n            dp2[i][j] = grid[i][j];\n\
    \            dp3[i][j] = grid[i][j];\n        }\n    }\n    for (long i = 1; i\
    \ < k; i++) \n    {\n        for (long j = 0; j < n; j++) \n        {\n      \
    \      for (long l = 0; l < n; l++) \n            {\n                dp[j][l]\
    \ = grid[j][l];\n                dp2[j][l] = grid[j][l];\n                dp3[j][l]\
    \ = grid[j][l];\n                if (j > 0) \n                {\n            \
    \        dp[j][l] = min(dp[j][l], dp[j - 1][l]);\n                    dp2[j][l]\
    \ = min(dp2[j][l], dp2[j - 1][l]);\n                    dp3[j][l] = min(dp3[j][l],\
    \ dp3[j - 1][l]);\n                }\n                if (j < n - 1) \n      \
    \          {\n                    dp[j][l] = min(dp[j][l], dp[j + 1][l]);\n  \
    \                  dp2[j][l] = min(dp2[j][l], dp2[j + 1][l]);\n              \
    \      dp3[j][l] = min(dp3[j][l], dp3[j + 1][l]);\n                }\n       \
    \         if (l > 0) \n                {\n                    dp[j][l] = min(dp[j][l],\
    \ dp[j][l - 1]);\n                    dp2", "{\n    auto n = grid.length;\n  \
    \  auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n    auto path\
    \ = new long[][](n, m);\n    auto res = new long[k];\n    foreach (i; 0 .. n)\n\
    \    {\n        foreach (j; 0 .. m)\n        {\n            if (i == 0 && j ==\
    \ 0)\n            {\n                dp[i][j] = grid[i][j];\n                path[i][j]\
    \ = 0;\n            }\n            else if (i == 0)\n            {\n         \
    \       dp[i][j] = dp[i][j - 1] + grid[i][j];\n                path[i][j] = j\
    \ - 1;\n            }\n            else if (j == 0)\n            {\n         \
    \       dp[i][j] = dp[i - 1][j] + grid[i][j];\n                path[i][j] = i\
    \ - 1;\n            }\n            else\n            {\n                if (dp[i\
    \ - 1][j] < dp[i][j - 1])\n                {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                    path[i][j] = i - 1;\n           \
    \     }\n                else\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = j - 1;\n    \
    \            }\n            }\n        }\n    }\n    auto i = n - 1;\n    auto\
    \ j = m - 1;\n    foreach (idx; 0 .. k)\n    {\n        res[idx] = grid[i][j];\n\
    \        if (path[i][j] < m)\n        {\n            j = path[i][j];\n       \
    \ }\n        else\n        {\n            i = path[i][j];\n        }\n    }\n\
    \    return res;\n}", "{\n    int N = grid.length;\n    long[] res = new long[(int)k];\n\
    \    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};\n    int[][] dp =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j <\
    \ N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            for (int[]\
    \ dir : dirs)\n            {\n                int x = i + dir[0];\n          \
    \      int y = j + dir[1];\n                if (x >= 0 && x < N && y >= 0 && y\
    \ < N)\n                    dp[x][y] = min(dp[x][y], dp[i][j] + (int)grid[i][j]);\n\
    \            }\n    int cur = 0;\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            if (dp[i][j] < dp[cur][cur])\n        \
    \        cur = i;\n    int x = cur;\n    int y = cur;\n    for (int i = 0; i <\
    \ k; i++)\n    {\n        res[i] = grid[x][y];\n        int min = int.max;\n \
    \       int[] next = new int[2];\n        for (int[] dir : dirs)\n        {\n\
    \            int nx = x + dir[0];\n            int ny = y + dir[1];\n        \
    \    if (nx >= 0 && nx < N && ny >= 0 && ny < N && dp[nx][ny] < min)\n       \
    \     {\n                min = dp[nx][ny];\n                next[0] = nx;\n  \
    \              next[1] = ny;\n            }\n        }\n        x = next[0];\n\
    \        y = next[1", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 3;\n            }\n        }\n    int i = N - 1;\n\
    \    int j = N - 1;\n    long[] ans = new long[k];\n    for (int c = k - 1; c\
    \ >= 0; c--)\n    {\n        ans[c] = grid[i][j];\n        switch (prev[i][j])\n\
    \        {\n            case 0:\n                i--;\n                break;\n\
    \            case 1:\n                j--;\n                break;\n         \
    \   case 2:\n", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n  \
    \  foreach (i; 0 .. n)\n    {\n        foreach (j; 0 .. n)\n        {\n      \
    \      dp[i][j] = long.max;\n            prev[i][j] = -1;\n            next[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach (i; 0 .. n)\n    {\n\
    \        foreach (j; 0 .. n)\n        {\n            if (i > 0)\n            {\n\
    \                if (dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n             \
    \   {\n                    dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n       \
    \             prev[i - 1][j] = i * n + j;\n                }\n            }\n\
    \            if (j > 0)\n            {\n                if (dp[i][j] + grid[i][j\
    \ - 1] < dp[i][j - 1])\n                {\n                    dp[i][j - 1] =\
    \ dp[i][j] + grid[i][j - 1];\n                    prev[i][j - 1] = i * n + j;\n\
    \                }\n            }\n            if (i < n - 1)\n            {\n\
    \                if (dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n             \
    \   {\n                    dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n       \
    \             prev[i + 1][j] = i * n + j;\n                }\n            }\n\
    \            if (j < n - 1)\n            {\n                if (dp[i][j] + grid[i][j\
    \ + 1] < dp[i][j + 1])\n                {\n                    dp[i][j + 1] =\
    \ dp", "{\n    long N = grid.length;\n    long[][] dist = new long[N][N];\n  \
    \  long[][] prev = new long[N][N];\n    long[][] path = new long[N][N];\n    long[][]\
    \ dirs = new long[][]{{1L, 0L}, {-1L, 0L}, {0L, 1L}, {0L, -1L}};\n    foreach\
    \ (i; 0 .. N)\n    {\n        foreach (j; 0 .. N)\n        {\n            dist[i][j]\
    \ = long.max;\n            prev[i][j] = -1L;\n            path[i][j] = -1L;\n\
    \        }\n    }\n    dist[0][0] = 0L;\n    prev[0][0] = -1L;\n    path[0][0]\
    \ = grid[0][0];\n    auto q = new PriorityQueue!(long[], \"a[0] < b[0]\")();\n\
    \    q.put([0L, 0L]);\n    while (q.size() > 0)\n    {\n        auto p = q.get();\n\
    \        long i = p[0];\n        long j = p[1];\n        if (dist[i][j] == k)\n\
    \        {\n            break;\n        }\n        foreach (dir; dirs)\n     \
    \   {\n            long x = i + dir[0];\n            long y = j + dir[1];\n  \
    \          if (x < 0 || x >= N || y < 0 || y >= N)\n            {\n          \
    \      continue;\n            }\n            if (dist[x][y] > dist[i][j] + 1)\n\
    \            {\n                dist[x][y] = dist[i][j] + 1;\n               \
    \ prev[x][y] = i * N + j;\n                path[x][y] = path[i][j] * 10 + grid[x][y];\n\
    \                q.put([x, y]);\n            }\n            else if (dist[x][y]\
    \ == dist[i][j] + 1)\n            {\n                if (path[x][y] > path[i][",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i < N - 1)\n                dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1);\n \
    \           if (j < N - 1)\n                dp[i][j] = min(dp[i][j], dp[i][j +\
    \ 1] + 1);\n        }\n    int[] res = new int[k];\n    int x = 0, y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n        int\
    \ nx = x, ny = y;\n        if (x > 0 && dp[x - 1][y] < dp[nx][ny])\n         \
    \   nx = x - 1, ny = y;\n        if (y > 0 && dp[x][y - 1] < dp[nx][ny])\n   \
    \         nx = x, ny = y - 1;\n        if (x < N - 1 && dp[x + 1][y] < dp[nx][ny])\n\
    \            nx = x + 1, ny = y;\n        if (y < N - 1 && dp[", "{\n    long\
    \ N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] =\
    \ 0;\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n        \
    \    if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long i = N - 1;\n\
    \    long j = N - 1;\n    foreach(idx; k .. 0)\n    {\n        res[idx] = grid[i][j];\n\
    \        if(i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n\
    \        else\n            j--;\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[k];\n    int i = 0;\n    int j\
    \ = 0;\n    for (int t = 0; t < k; t++)\n    {\n        path[t] = grid[i][j];\n\
    \        if (prev[i][j] == 1)\n            i--;\n        else if (prev[i][j] ==\
    \ 2)\n            j--;\n        else if (prev[i][j] == 3)\n            i", "{\n\
    \    int N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path\
    \ = new long[N][N];\n    for (int i = 0; i < N; i++)\n    {\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  path[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            if (i > 0)\n            {\n                if (dp[i][j] > dp[i -\
    \ 1][j] + grid[i][j])\n                {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                    path[i][j] = 0;\n               \
    \ }\n            }\n            if (j > 0)\n            {\n                if\
    \ (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n                \
    \    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = 1;\n\
    \                }\n            }\n        }\n    }\n    long[] res = new long[k];\n\
    \    int i = N - 1;\n    int j = N - 1;\n    for (int l = k - 1; l >= 0; l--)\n\
    \    {\n        res[l] = grid[i][j];\n        if (path[i][j] == 0)\n        {\n\
    \            i--;\n        }\n        else\n        {\n            j--;\n    \
    \    }\n    }\n    return res;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    prev[0][0] = -1;\n    for (int i = 0; i < n; i++)\n  \
    \      for (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i -\
    \ 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 0;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 1;\n            }\n            if (i\
    \ < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 3;\n     \
    \       }\n        }\n    long[] res = new long[(int)k];\n    int x = n - 1;\n\
    \    int y = n - 1;\n    for (int i = (int)k - 1; i >= 0; i--)\n    {\n      \
    \  res[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n            case\
    \ 0: x--; break;\n            case 1: y", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = (int)grid[i][j];\n    for (int i = 0; i\
    \ < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if (i\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]);\n            if\
    \ (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]);\n        }\n\
    \    int[] res = new int[(int)k];\n    int i = 0, j = 0;\n    for (int l = 0;\
    \ l < k; l++)\n    {\n        res[l] = dp[i][j];\n        if (i + 1 < N && dp[i\
    \ + 1][j] < dp[i][j])\n            i++;\n        else if (j + 1 < N && dp[i][j\
    \ + 1] < dp[i][j])\n            j++;\n    }\n    return res;\n}", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] parent = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                parent[i][j] = 1;\n            }\n    \
    \        if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n          \
    \      dp[i][j] = dp[i][j - 1] + 1;\n                parent[i][j] = 2;\n     \
    \       }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i + 1][j] + 1;\n                parent[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ parent[i][j] = 4;\n            }\n        }\n    int[] path = new int[k];\n\
    \    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        path[i]\
    \ = grid[x][y];\n        if (parent[x][y] == 1)\n            x--;\n        else\
    \ if (parent[x][y] == 2)\n            y--;\n        else if (parent[x][y] == 3)\n\
    \            x++;\n       ", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[] path = new int[k];\n    int idx = 0;\n\
    \    int i = N - 1;\n    int j = N - 1;\n    while (k > 0)\n    {\n        path[idx++]\
    \ = grid[i][j];\n        k--;\n        if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ == dp[i][j])\n            i--;\n        else\n            j--;\n    }\n    return\
    \ path;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
