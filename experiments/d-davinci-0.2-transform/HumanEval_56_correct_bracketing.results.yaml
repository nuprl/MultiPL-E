language: d
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    Returns true if the string is a palindrome.\n    >>> is_palindrome(\"\
    racecar\")\n    true\n    >>> is_palindrome(\"racecars\")\n    false\n    >>>\
    \ is_palindrome(\"\")\n    true\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir4v70u.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir4v70u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir4v70u.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir4v70u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open = 0;\n    int close = 0;\n    foreach(char c; brackets)\n    {\n\
    \        if(c == '<')\n        {\n            open++;\n        }\n        else\
    \ if(c == '>')\n        {\n            close++;\n        }\n        if(close >\
    \ open)\n        {\n            return false;\n        }\n    }\n    if(open ==\
    \ close)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n  \
    \          count++;\n        else if(c == '>')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression.\n    >>> count_parenthesizations(\"\
    1+2+3\")\n    5\n    >>> count_parenthesizations(\"1+2*3\")\n    5\n    >>> count_parenthesizations(\"\
    1+2*3*4\")\n    14\n    >>> count_parenthesizations(\"1+2*3*4*5\")\n    42\n*/\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n  \
    \          count++;\n        else if(c == '>')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\n    >>> count_cats(\"cat\")\n    1\n    >>> count_cats(\"catcat\")\n   \
    \ 2\n    >>> count_cats(\"catcatcat\")\n    3\n    >>> count_cats(\"catcatcatcat\"\
    )\n    4\n    >>> count_cats(\"catcatcatcatcat\")\n    5\n    >>> count_cats(\"\
    catcatcatcatcatcat\")\n    6\n    >>> count_cats(\"catcatcatcatcatcatcat\")\n\
    \    7\n    >>> count_cats(\"catcatcatcatcatcatcatcat\")\n    8\n    >>> count_cats(\"\
    catcatcatcatcatcatcatcatcat\")\n    9\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcat\"\
    )\n    10\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcat\")\n    11\n\
    \    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcat\")\n    12\n    >>>\
    \ count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcat\")\n    13\n    >>> count_cats(\"\
    catcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n    14\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n    15\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n    16\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n    17\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n    18\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n    19\n    >>> count_cats(\"catcatcatcatcatcatcatcatcatcat\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75ig7wcb.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75ig7wcb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open = 0;\n    foreach(char c; brackets) {\n        if (c == '<') {\n\
    \            open++;\n        } else {\n            if (open == 0) {\n       \
    \         return false;\n            }\n            open--;\n        }\n    }\n\
    \    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsoxmzuj.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsoxmzuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int counter = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            counter++;\n        else if(c == '>')\n            counter--;\n \
    \       if(counter < 0)\n            return false;\n    }\n    return counter\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        if (brackets[i] == '<')\n        {\n            count++;\n   \
    \     }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrbupgj2.d(19): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrbupgj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsoxmzuj.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsoxmzuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the given\
    \ string.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xi53c36.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xi53c36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    for (int i = 0; i < brackets.length; i++) \n    {\n  \
    \      if (brackets[i] == '<') \n        {\n            count++;\n        }\n\
    \        else if (brackets[i] == '>') \n        {\n            count--;\n    \
    \    }\n        if (count < 0) \n        {\n            return false;\n      \
    \  }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n  \
    \          count++;\n        else if(c == '>')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n  \
    \          count++;\n        else if(c == '>')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return a string of the same length as brackets,\n    where each character\
    \ is either \" \" or \"|\".\n    The \"|\"s should be placed so that the string\n\
    \    is correct bracketing.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq37d8biy.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq37d8biy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    /*\n    return the number of ways to parenthesize the expression.\n    >>> count_parenthesizations(\"\
    1+2\")\n    1\n    >>> count_parenthesizations(\"1+2+3\")\n    3\n    >>> count_parenthesizations(\"\
    1+2+3+4\")\n    5\n    >>> count_parenthesizations(\"1+2*3\")\n    3\n    >>>\
    \ count_parenthesizations(\"1*2+3\")\n    3\n    >>> count_parenthesizations(\"\
    1*2*3\")\n    1\n    >>> count_parenthesizations(\"1*2*3*4\")\n    1\n    >>>\
    \ count_parenthesizations(\"1*2+3*4\")\n    9\n    >>> count_parenthesizations(\"\
    1+2*3+4\")\n    5\n    >>> count_parenthesizations(\"1+2*3*4\")\n    5\n    >>>\
    \ count_parenthesizations(\"1*2*3+4\")\n    5\n    >>> count_parenthesizations(\"\
    1*2*3*4\")\n    1\n    >>> count_parenthesizations(\"1*2*3*4*5\")\n    1\n   \
    \ >>> count_parenthesizations(\"1*2+3*4*5\")\n    15\n    >>> count_parenthesizations(\"\
    1*2*3+4*5\")\n    15\n    >>> count_parenthesizations(\"1*2*3*4+5\")\n    5\n\
    \    >>> count_parenthesizations(\"1*2*3*4*5\")\n    1\n    >>> count_parenthesizations(\"\
    1*2*3*4*5*6\")\n    1\n    >>> count_parenthesizations(\"1*2+3*4*5*6\")\n    31\n\
    \    >>> count_parenthesizations(\"1*2\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpndswghmh.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpndswghmh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\n    >>> count_cat(\"cat\")\n    1\n    >>> count_cat(\"catcat\")\n    2\n\
    \    >>> count_cat(\"catcatcat\")\n    3\n    >>> count_cat(\"catcatcatcat\")\n\
    \    4\n    >>> count_cat(\"catcatcatcatcat\")\n    5\n    >>> count_cat(\"catcatcatcatcatcat\"\
    )\n    6\n    >>> count_cat(\"catcatcatcatcatcatcat\")\n    7\n    >>> count_cat(\"\
    catcatcatcatcatcatcatcat\")\n    8\n    >>> count_cat(\"catcatcatcatcatcatcatcatcat\"\
    )\n    9\n    >>> count_cat(\"catcatcatcatcatcatcatcatcatcat\")\n    10\n*/\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            open++;\n        else if(c == '>')\n            open--;\n       \
    \ if(open < 0)\n            return false;\n    }\n    return open == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir4v70u.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir4v70u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            open++;\n        else if(c == '>')\n            open--;\n       \
    \ if(open < 0)\n            return false;\n    }\n    return open == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir4v70u.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir4v70u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsoxmzuj.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsoxmzuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c == '<')\
    \ \n        {\n            count++;\n        } \n        else if (c == '>') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to split a string into two non-empty strings.\n\
    \    >>> split_count(\"\")\n    0\n    >>> split_count(\"a\")\n    0\n    >>>\
    \ split_count(\"ab\")\n    1\n    >>> split_count(\"aba\")\n    2\n    >>> split_count(\"\
    abab\")\n    3\n    >>> split_count(\"ababa\")\n    5\n*/\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the substring sub appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm05x32fy.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm05x32fy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of ways to split a string into two non-empty substrings.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg4qre_1q.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4qre_1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsoxmzuj.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsoxmzuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return a string of \"<\" and \">\" such that every opening bracket\
    \ has a corresponding closing bracket.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpet0ifa2s.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpet0ifa2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times that the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvac0xb92.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvac0xb92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else\n            count--;\n        if(count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return the number of times the string \"cat\" appears in the string\
    \ s.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmir4v70u.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmir4v70u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n  \
    \          count++;\n        else if(c == '>')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
