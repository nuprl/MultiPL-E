language: d
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        else\n  \
    \      {\n            max = arr[i];\n            max_index = i;\n        }\n \
    \   }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbmjc37bx.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpbmjc37bx.__unittest_L33_C1() [0x427e1f]

    ??:? void tmpbmjc37bx.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz448gyfs.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpz448gyfs.__unittest_L33_C1() [0x427e53]

    ??:? void tmpz448gyfs.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptmzscx8i.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmptmzscx8i.__unittest_L29_C1() [0x427e13]

    ??:? void tmptmzscx8i.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e < max)\n        {\n       \
    \     index = i;\n        }\n        else\n        {\n            max = e;\n \
    \       }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpc0h1nfp_.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpc0h1nfp_.can_arrange(long[]) [0x427d0b]

    ??:? void tmpc0h1nfp_.__unittest_L32_C1() [0x427f32]

    ??:? void tmpc0h1nfp_.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp79dot60d.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp79dot60d.__unittest_L32_C1() [0x427e40]

    ??:? void tmp79dot60d.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n    \
    \    {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqg9oh2wg.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqg9oh2wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfekbywdj.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpfekbywdj.__unittest_L33_C1() [0x427e1f]

    ??:? void tmpfekbywdj.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            return max_index;\n        }\n        else\n\
    \        {\n            max = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcyvv4mu8.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpcyvv4mu8.__unittest_L33_C1() [0x427dff]

    ??:? void tmpcyvv4mu8.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(i == 0)\n            continue;\n        if(e < arr[i - 1])\n\
    \            max = max(max, i - 1);\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhk81mee.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhk81mee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max_index = -1L;\n    for (long\
    \ i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n  \
    \      {\n            max_index = max(max_index, i - 1L);\n        }\n    }\n\
    \    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbtvd3dpy.d(22): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtvd3dpy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e < max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa639uuf4.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa639uuf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] <= arr[i-1])\n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9d5pfjp5.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmp9d5pfjp5.can_arrange(long[]) [0x427d5d]

    ??:? void tmp9d5pfjp5.__unittest_L27_C1() [0x427dd0]

    ??:? void tmp9d5pfjp5.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long max_index =\
    \ -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n     \
    \       return max_index;\n        }\n        else\n        {\n            max\
    \ = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm318cdz5.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmpm318cdz5.__unittest_L33_C1() [0x427ddf]

    ??:? void tmpm318cdz5.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b052]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430694]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430171]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]

    ??:? runModuleUnitTests [0x42bf95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428624]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length - 1;\n    while\
    \ (i > 0) {\n        if (arr[i] < arr[i - 1]) {\n            return i - 1;\n \
    \       }\n        i--;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_bkx35wm.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmp_bkx35wm.__unittest_L26_C1() [0x427ddf]

    ??:? void tmp_bkx35wm.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long maxIndex =\
    \ -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            maxIndex = i;\n  \
    \      }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpptiueyhb.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpptiueyhb.__unittest_L29_C1() [0x427def]

    ??:? void tmpptiueyhb.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n      \
    \      max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe1vutaz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmphe1vutaz.__unittest_L29_C1() [0x427de7]

    ??:? void tmphe1vutaz.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] < arr[i-1])\n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpp1p4nn7l.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpp1p4nn7l.can_arrange(long[]) [0x427d5d]

    ??:? void tmpp1p4nn7l.__unittest_L27_C1() [0x427dd0]

    ??:? void tmpp1p4nn7l.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n\
    \            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx0tubxg.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx0tubxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp6_ne7ax_.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428286]

    ??:? long tmp6_ne7ax_.can_arrange(long[]) [0x427d4f]

    ??:? void tmp6_ne7ax_.__unittest_L27_C1() [0x427dc4]

    ??:? void tmp6_ne7ax_.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n   \
    \         return max_index;\n        }\n        max = v;\n        max_index =\
    \ i;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw2yomn2w.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpw2yomn2w.__unittest_L30_C1() [0x427ddb]

    ??:? void tmpw2yomn2w.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43068c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430169]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]

    ??:? runModuleUnitTests [0x42bf8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42861c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n   \
    \         max = v;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9qlzqc4c.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmp9qlzqc4c.__unittest_L29_C1() [0x427dcf]

    ??:? void tmp9qlzqc4c.__modtest() [0x427f44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            index = i;\n        }\n        else \n       \
    \ {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzmpsg6g2.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpzmpsg6g2.can_arrange(long[]) [0x427d0b]

    ??:? void tmpzmpsg6g2.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpzmpsg6g2.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n   \
    \         return max_index;\n        }\n        else\n        {\n            max\
    \ = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73avaprb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmp73avaprb.__unittest_L33_C1() [0x427ddb]

    ??:? void tmp73avaprb.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43068c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430169]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]

    ??:? runModuleUnitTests [0x42bf8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42861c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(i, v; arr)\n    {\n        if(v > max)\n        {\n      \
    \      max = v;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph9ddpm7x.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmph9ddpm7x.__unittest_L29_C1() [0x427de7]

    ??:? void tmph9ddpm7x.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++)\n    {\n        if (arr[i] >= arr[i + 1L])\n     \
    \       continue;\n        if (arr[i] > max)\n            max = i;\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfaf44jem.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpfaf44jem.__unittest_L27_C1() [0x427e6c]

    ??:? void tmpfaf44jem.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5z4pqbv.d(25): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5z4pqbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rwpm0o7.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rwpm0o7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] < arr[i-1])\n        {\n            max\
    \ = max(max, i-1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq94t6kdf.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq94t6kdf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return max_index;\n        }\n        else\n  \
    \      {\n            max = arr[i];\n            max_index = i;\n        }\n \
    \   }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8z508ktm.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmp8z508ktm.__unittest_L33_C1() [0x427e1f]

    ??:? void tmp8z508ktm.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n    \
    \    {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqg9oh2wg.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqg9oh2wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e < max)\n        {\n    \
    \        return max_index;\n        }\n        if(e > max)\n        {\n      \
    \      max = e;\n            max_index = i;\n        }\n    }\n    return -1L;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk3w6dhqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpk3w6dhqn.__unittest_L33_C1() [0x427de7]

    ??:? void tmpk3w6dhqn.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b05a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43069c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430179]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]

    ??:? runModuleUnitTests [0x42bf9d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42862c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e < max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa639uuf4.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa639uuf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, v; arr)\n\
    \    {\n        if(v <= arr[i - 1])\n            max = max(max, i - 1);\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_o68646o.d(21): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o68646o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= arr[i - 1])\n            max = max(max, i - 1);\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ts7u43r.d(21): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ts7u43r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long len = arr.length;\n    long max\
    \ = -1L;\n    for (long i = 0L; i < len - 1L; i++)\n    {\n        if (arr[i]\
    \ > arr[i + 1L])\n        {\n            max = max(max, i);\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0wb36d89.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wb36d89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(long i, long v; arr)\n    {\n        if(v <= max)\n       \
    \ {\n            max = v;\n            index = i;\n        }\n    }\n    return\
    \ index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcs9bwet8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpcs9bwet8.__unittest_L29_C1() [0x427def]

    ??:? void tmpcs9bwet8.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n      \
    \      max = v;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphmsv9sd0.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmphmsv9sd0.__unittest_L29_C1() [0x427deb]

    ??:? void tmphmsv9sd0.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n       \
    \     continue;\n        if (i > max)\n            max = i;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb7unakm7.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpb7unakm7.__unittest_L27_C1() [0x427e44]

    ??:? void tmpb7unakm7.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp55sx9nbh.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp55sx9nbh.__unittest_L29_C1() [0x427e13]

    ??:? void tmp55sx9nbh.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 1L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhxxqpsu.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhxxqpsu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpfxemkzr_.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpfxemkzr_.can_arrange(long[]) [0x427d0b]

    ??:? void tmpfxemkzr_.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpfxemkzr_.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = v;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jk9e6uy.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp_jk9e6uy.__unittest_L32_C1() [0x427e40]

    ??:? void tmp_jk9e6uy.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] <= arr[i-1])\n        {\n            max\
    \ = max(max, i-1);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78p3e7u9.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78p3e7u9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n\
    \    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7_e58cc7.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp7_e58cc7.__unittest_L27_C1() [0x427e13]

    ??:? void tmp7_e58cc7.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n   \
    \         return max_index;\n        }\n        max = e;\n        max_index =\
    \ i;\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmk8n8nxe.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpmk8n8nxe.__unittest_L30_C1() [0x427ddb]

    ??:? void tmpmk8n8nxe.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43068c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430169]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]

    ??:? runModuleUnitTests [0x42bf8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42861c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n       \
    \     continue;\n        if (arr[i] > max)\n            max = i;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0w_ucc9b.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmp0w_ucc9b.__unittest_L27_C1() [0x427e6c]

    ??:? void tmp0w_ucc9b.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptmzscx8i.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmptmzscx8i.__unittest_L29_C1() [0x427e13]

    ??:? void tmptmzscx8i.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, num; arr)\n    {\n        if(num <= max)\n        {\n  \
    \          max = num;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4bihgmqz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp4bihgmqz.__unittest_L29_C1() [0x427deb]

    ??:? void tmp4bihgmqz.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest = -1L;\n    long largestIndex\
    \ = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= largest)\n        {\n\
    \            largest = v;\n            largestIndex = i;\n        }\n    }\n \
    \   return largestIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8h84eefp.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmp8h84eefp.__unittest_L29_C1() [0x427dcf]

    ??:? void tmp8h84eefp.__modtest() [0x427f44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp79dot60d.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp79dot60d.__unittest_L32_C1() [0x427e40]

    ??:? void tmp79dot60d.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0xu5f4k.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0xu5f4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n   \
    \     {\n            continue;\n        }\n        max = max(max, i + 1L);\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w8w6h53.d(24): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w8w6h53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (int i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpiuo07kx2.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282b6]

    ??:? long tmpiuo07kx2.can_arrange(long[]) [0x427d0b]

    ??:? void tmpiuo07kx2.__unittest_L32_C1() [0x427f5a]

    ??:? void tmpiuo07kx2.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n        else\n        {\n            return i - 1L;\n        }\n \
    \   }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp81nryg4p.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmp81nryg4p.__unittest_L31_C1() [0x427e03]

    ??:? void tmp81nryg4p.__modtest() [0x427f78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long max_index =\
    \ -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ arr[i];\n        max_index = i;\n    }\n    return max_index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmy72h5b6.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ed]

    ??:? void tmpmy72h5b6.__unittest_L30_C1() [0x427dfb]

    ??:? void tmpmy72h5b6.__modtest() [0x427f70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n    \
    \    {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqg9oh2wg.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqg9oh2wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 1L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdxsb1bgc.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmpdxsb1bgc.__unittest_L27_C1() [0x427e38]

    ??:? void tmpdxsb1bgc.__modtest() [0x427f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428698]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n       \
    \     continue;\n        if (max < i)\n            max = i;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9jmulcn3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmp9jmulcn3.__unittest_L27_C1() [0x427e44]

    ??:? void tmp9jmulcn3.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++) \n    {\n        if (arr[i] > arr[i + 1]) \n      \
    \  {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllxre6da.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllxre6da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n\
    \            max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx0tubxg.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx0tubxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp55sx9nbh.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp55sx9nbh.__unittest_L29_C1() [0x427e13]

    ??:? void tmp55sx9nbh.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = v;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jk9e6uy.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp_jk9e6uy.__unittest_L32_C1() [0x427e40]

    ??:? void tmp_jk9e6uy.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long max =\
    \ arr[n - 1];\n    long index = n - 1;\n    for (long i = n - 2; i >= 0; i--)\
    \ \n    {\n        if (arr[i] <= max) \n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe2cuzr1.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmphe2cuzr1.__unittest_L30_C1() [0x427e1b]

    ??:? void tmphe2cuzr1.__modtest() [0x427f90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++) \n    {\n        if (arr[i] > arr[i + 1]) \n      \
    \  {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllxre6da.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllxre6da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5z4pqbv.d(25): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5z4pqbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++)\n    {\n        if (arr[i] >= arr[i + 1L])\n     \
    \       continue;\n        if (arr[i] > max)\n            max = i;\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfaf44jem.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpfaf44jem.__unittest_L27_C1() [0x427e6c]

    ??:? void tmpfaf44jem.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 0L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            return max;\n        }\n        max = i;\n    }\n    return -1L;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpdxyi1qg_.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpdxyi1qg_.can_arrange(long[]) [0x427d4f]

    ??:? void tmpdxyi1qg_.__unittest_L28_C1() [0x427dd0]

    ??:? void tmpdxyi1qg_.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long res = -1L;\n    for (long i = 1L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n        {\n\
    \            res = i - 1L;\n            break;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe79_0viq.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpe79_0viq.__unittest_L28_C1() [0x427deb]

    ??:? void tmpe79_0viq.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] <= arr[i - 1])\n        {\n          \
    \  max = max(max, i - 1);\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_sny3yr.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_sny3yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            return max_index;\n        }\n        else\n\
    \        {\n            max = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcyvv4mu8.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpcyvv4mu8.__unittest_L33_C1() [0x427dff]

    ??:? void tmpcyvv4mu8.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsw6jb38j.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpsw6jb38j.__unittest_L29_C1() [0x427e13]

    ??:? void tmpsw6jb38j.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n        else if(arr[i] == max)\n        {\n            max = arr[i];\n\
    \        }\n        else\n        {\n            return i - 1L;\n        }\n \
    \   }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcuqz854h.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428255]

    ??:? void tmpcuqz854h.__unittest_L35_C1() [0x427e5f]

    ??:? void tmpcuqz854h.__modtest() [0x427fd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b146]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b11d]

    ??:? runModuleUnitTests [0x42c089]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428718]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long n = arr.length;\n    long max =\
    \ arr[n - 1];\n    long index = n - 1;\n    for (long i = n - 2; i >= 0; i--)\
    \ \n    {\n        if (arr[i] <= max) \n        {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe2cuzr1.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmphe2cuzr1.__unittest_L30_C1() [0x427e1b]

    ??:? void tmphe2cuzr1.__modtest() [0x427f90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max)\
    \ {\n            return max_index;\n        }\n        if (arr[i] > max) {\n \
    \           max = arr[i];\n            max_index = i;\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv7ojrd37.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpv7ojrd37.__unittest_L30_C1() [0x427e53]

    ??:? void tmpv7ojrd37.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++)\n    {\n        if (arr[i] >= arr[i + 1])\n       \
    \     continue;\n        if (i > max)\n            max = i;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb7unakm7.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmpb7unakm7.__unittest_L27_C1() [0x427e44]

    ??:? void tmpb7unakm7.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(i == 0)\n        {\n            max = arr[i];\n\
    \        }\n        else\n        {\n            if(arr[i] <= max)\n         \
    \   {\n                return i - 1;\n            }\n            else\n      \
    \      {\n                max = arr[i];\n            }\n        }\n    }\n   \
    \ return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkk7meuxb.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x42822d]

    ??:? void tmpkk7meuxb.__unittest_L38_C1() [0x427e37]

    ??:? void tmpkk7meuxb.__modtest() [0x427fac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430760]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43023d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f5]

    ??:? runModuleUnitTests [0x42c061]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n   \
    \     {\n            continue;\n        }\n        max = max(max, i + 1L);\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w8w6h53.d(24): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w8w6h53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            index = i;\n        }\n        else \n       \
    \ {\n            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzmpsg6g2.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpzmpsg6g2.can_arrange(long[]) [0x427d0b]

    ??:? void tmpzmpsg6g2.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpzmpsg6g2.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0 ..\
    \ arr.length)\n    {\n        if(arr[i] <= arr[i-1])\n        {\n            return\
    \ max;\n        }\n        else\n        {\n            max = i;\n        }\n\
    \    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpbodf3y7e.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42829e]

    ??:? long tmpbodf3y7e.can_arrange(long[]) [0x427d5d]

    ??:? void tmpbodf3y7e.__unittest_L31_C1() [0x427ddc]

    ??:? void tmpbodf3y7e.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430720]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]

    ??:? runModuleUnitTests [0x42c021]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfekbywdj.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpfekbywdj.__unittest_L33_C1() [0x427e1f]

    ??:? void tmpfekbywdj.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n      \
    \      max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe1vutaz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmphe1vutaz.__unittest_L29_C1() [0x427de7]

    ??:? void tmphe1vutaz.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(i; 0..arr.length)\n\
    \    {\n        if(arr[i] <= arr[i-1])\n        {\n            max = i;\n    \
    \    }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp6w0sy6ha.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmp6w0sy6ha.can_arrange(long[]) [0x427d5d]

    ??:? void tmp6w0sy6ha.__unittest_L27_C1() [0x427dd0]

    ??:? void tmp6w0sy6ha.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfekbywdj.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpfekbywdj.__unittest_L33_C1() [0x427e1f]

    ??:? void tmpfekbywdj.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = v;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jk9e6uy.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp_jk9e6uy.__unittest_L32_C1() [0x427e40]

    ??:? void tmp_jk9e6uy.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    long max_index =\
    \ -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            max = arr[i];\n            max_index = i;\n\
    \        }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprw_zteqk.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281e5]

    ??:? void tmprw_zteqk.__unittest_L29_C1() [0x427def]

    ??:? void tmprw_zteqk.__modtest() [0x427f64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c243]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430269]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430718]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]

    ??:? runModuleUnitTests [0x42c019]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, v; arr)\n\
    \    {\n        if(v <= max)\n            return i - 1;\n        max = v;\n  \
    \  }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp8ooq4eo.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmpp8ooq4eo.__unittest_L26_C1() [0x427dd3]

    ??:? void tmpp8ooq4eo.__modtest() [0x427f48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max_index = -1L;\n    long max_value\
    \ = arr[0];\n    for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max_value)\n        {\n            max_index = i;\n        }\n        else\n\
    \        {\n            max_value = arr[i];\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpg978jvnx.d(18): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpg978jvnx.can_arrange(long[]) [0x427d16]

    ??:? void tmpg978jvnx.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpg978jvnx.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz448gyfs.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpz448gyfs.__unittest_L33_C1() [0x427e53]

    ??:? void tmpz448gyfs.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr) \n    {\n        if (e <= max) \n        {\n   \
    \         max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfwna_l7k.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpfwna_l7k.__unittest_L29_C1() [0x427deb]

    ??:? void tmpfwna_l7k.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            return max_index;\n        }\n        max =\
    \ arr[i];\n        max_index = i;\n    }\n    return -1L;\n}\nunittest\n{\n  \
    \  alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbundc1do.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmpbundc1do.__unittest_L30_C1() [0x427dff]

    ??:? void tmpbundc1do.__modtest() [0x427f74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, v; arr)\n\
    \    {\n        if(v <= arr[max])\n            max = i;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpz83gh9gg.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42828e]

    ??:? long tmpz83gh9gg.can_arrange(long[]) [0x427d4f]

    ??:? void tmpz83gh9gg.__unittest_L25_C1() [0x427dcc]

    ??:? void tmpz83gh9gg.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      max = e;\n            index = i;\n        }\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9t93qoyo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp9t93qoyo.__unittest_L29_C1() [0x427deb]

    ??:? void tmp9t93qoyo.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 1L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc4ul9cu4.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4ul9cu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = arr.length - 1L; i >= 0L; i--)\n    {\n        if\
    \ (arr[i] < max)\n        {\n            max_index = i;\n        }\n        else\n\
    \        {\n            max = max(max, arr[i]);\n        }\n    }\n    return\
    \ max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6rdwsvqe.d(27): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rdwsvqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    foreach(long i;\
    \ arr)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    long index = -1L;\n    for(long i = 0L; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] == max)\n        {\n            index = i;\n        }\n\
    \    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk80ao537.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpk80ao537.__unittest_L35_C1() [0x427e13]

    ??:? void tmpk80ao537.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 0L;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] <= arr[i - 1L]) \n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpplafgmg_.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428286]

    ??:? long tmpplafgmg_.can_arrange(long[]) [0x427d4f]

    ??:? void tmpplafgmg_.__unittest_L27_C1() [0x427dc4]

    ??:? void tmpplafgmg_.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length - 1;\n    while\
    \ (i > 0 && arr[i] >= arr[i - 1])\n        i--;\n    return i - 1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd7_7waz2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpd7_7waz2.__unittest_L22_C1() [0x427dd7]

    ??:? void tmpd7_7waz2.__modtest() [0x427f4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long result = -1L;\n    long max = arr[0];\n\
    \    for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i] <= max)\n\
    \        {\n            result = i;\n        }\n        else\n        {\n    \
    \        max = arr[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L])\
    \ == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcl22bzli.d(18): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpcl22bzli.can_arrange(long[]) [0x427d16]

    ??:? void tmpcl22bzli.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpcl22bzli.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = 0L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < arr[i - 1L])\n        {\n\
    \            return i - 1L;\n        }\n    }\n    return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpm10q4dxi.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428286]

    ??:? long tmpm10q4dxi.can_arrange(long[]) [0x427d4b]

    ??:? void tmpm10q4dxi.__unittest_L27_C1() [0x427dc8]

    ??:? void tmpm10q4dxi.__modtest() [0x427f58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c233]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430259]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430708]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]

    ??:? runModuleUnitTests [0x42c009]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max)\
    \ {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp95dfye0p.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp95dfye0p.__unittest_L27_C1() [0x427e13]

    ??:? void tmp95dfye0p.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length;\n    while (i--\
    \ > 0) \n    {\n        if (arr[i] < arr[i + 1]) \n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpx_9qyad4.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42827e]

    ??:? long tmpx_9qyad4.can_arrange(long[]) [0x427d4d]

    ??:? void tmpx_9qyad4.__unittest_L27_C1() [0x427dc0]

    ??:? void tmpx_9qyad4.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest = -1L;\n    long largestIndex\
    \ = -1L;\n    foreach(i, e; arr)\n    {\n        if(e <= largest)\n        {\n\
    \            largest = e;\n            largestIndex = i;\n        }\n    }\n \
    \   return largestIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbfyek9nf.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmpbfyek9nf.__unittest_L29_C1() [0x427dcf]

    ??:? void tmpbfyek9nf.__modtest() [0x427f44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++)\n    {\n        if (arr[i] >= arr[i + 1L])\n     \
    \       continue;\n        if (arr[i] > max)\n            max = i;\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfaf44jem.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpfaf44jem.__unittest_L27_C1() [0x427e6c]

    ??:? void tmpfaf44jem.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return max_index;\n        }\n        else\n  \
    \      {\n            max = arr[i];\n            max_index = i;\n        }\n \
    \   }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8z508ktm.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmp8z508ktm.__unittest_L33_C1() [0x427e1f]

    ??:? void tmp8z508ktm.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n   \
    \     {\n            continue;\n        }\n        max = max(max, i + 1L);\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w8w6h53.d(24): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w8w6h53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_idx\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max)\
    \ {\n            return max_idx;\n        }\n        if (arr[i] > max) {\n   \
    \         max = arr[i];\n            max_idx = i;\n        }\n    }\n    return\
    \ -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpomy75ddc.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpomy75ddc.__unittest_L30_C1() [0x427e53]

    ??:? void tmpomy75ddc.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= arr[i - 1L])\n        {\n\
    \            max = max(max, i - 1L);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rwpm0o7.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rwpm0o7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0nx9h_aq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp0nx9h_aq.__unittest_L27_C1() [0x427e13]

    ??:? void tmp0nx9h_aq.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= arr[i-1])\n            max = max(max, i-1);\n    }\n \
    \   return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgp4_h_z.d(21): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgp4_h_z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        else if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpftpkqz_g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428245]

    ??:? void tmpftpkqz_g.__unittest_L33_C1() [0x427e53]

    ??:? void tmpftpkqz_g.__modtest() [0x427fc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430778]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430255]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b10d]

    ??:? runModuleUnitTests [0x42c079]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 0
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long maxIndex =\
    \ -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            maxIndex = i;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n        }\n    }\n    return maxIndex;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfekbywdj.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmpfekbywdj.__unittest_L33_C1() [0x427e1f]

    ??:? void tmpfekbywdj.__modtest() [0x427f94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430748]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430225]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]

    ??:? runModuleUnitTests [0x42c049]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9y6kr07.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9y6kr07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long i = arr.length - 1;\n    while\
    \ (i > 0 && arr[i] >= arr[i - 1])\n        i--;\n    return i - 1;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd7_7waz2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpd7_7waz2.__unittest_L22_C1() [0x427dd7]

    ??:? void tmpd7_7waz2.__modtest() [0x427f4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430251]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430700]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]

    ??:? runModuleUnitTests [0x42c001]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnlx2gpe.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpmnlx2gpe.__unittest_L29_C1() [0x427e13]

    ??:? void tmpmnlx2gpe.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ <= max) \n        {\n            return max_index;\n        }\n        max =\
    \ max(max, arr[i]);\n        max_index = i;\n    }\n    return -1L;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5z4pqbv.d(25): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5z4pqbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++)\n    {\n        if (arr[i] > arr[i + 1L])\n      \
    \  {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzh6yrq9.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzh6yrq9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnf8dzo78.d(17): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4282be]

    ??:? long tmpnf8dzo78.can_arrange(long[]) [0x427d0b]

    ??:? void tmpnf8dzo78.__unittest_L32_C1() [0x427f5e]

    ??:? void tmpnf8dzo78.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430740]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43021d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d5]

    ??:? runModuleUnitTests [0x42c041]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] >= arr[i + 1L]) \n   \
    \     {\n            continue;\n        }\n        max = max(max, i + 1L);\n \
    \   }\n    return max;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w8w6h53.d(24): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w8w6h53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e > max)\n        {\n      \
    \      max = e;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphe1vutaz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmphe1vutaz.__unittest_L29_C1() [0x427de7]

    ??:? void tmphe1vutaz.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0nx9h_aq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmp0nx9h_aq.__unittest_L27_C1() [0x427e13]

    ??:? void tmp0nx9h_aq.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprhyd58eo.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmprhyd58eo.__unittest_L29_C1() [0x427e13]

    ??:? void tmprhyd58eo.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    foreach(long i, long a; arr)\n    {\n        if(a > max)\n       \
    \ {\n            max = a;\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjq9zaqg5.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmpjq9zaqg5.__unittest_L29_C1() [0x427de7]

    ??:? void tmpjq9zaqg5.__modtest() [0x427f5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long maxIndex =\
    \ -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n     \
    \       return maxIndex;\n        }\n        max = v;\n        maxIndex = i;\n\
    \    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppwr96but.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmppwr96but.__unittest_L30_C1() [0x427ddb]

    ??:? void tmppwr96but.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301dd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43068c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430169]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b021]

    ??:? runModuleUnitTests [0x42bf8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42861c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(long i, long v; arr) {\n        if (v <= max) {\n      \
    \      return max_index;\n        }\n        max = v;\n        max_index = i;\n\
    \    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpplu8a6w8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281d5]

    ??:? void tmpplu8a6w8.__unittest_L28_C1() [0x427ddf]

    ??:? void tmpplu8a6w8.__modtest() [0x427f54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b052]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430694]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430171]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]

    ??:? runModuleUnitTests [0x42bf95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428624]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max)\
    \ {\n            return max_index;\n        }\n        max = max(max, arr[i]);\n\
    \        max_index = i;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhmyyubf.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhmyyubf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long largest = -1L;\n    long prev =\
    \ arr[0];\n    for (long i = 1L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= prev)\n        {\n            largest = max(largest, i - 1L);\n        }\n\
    \        prev = arr[i];\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n\
    \    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L,\
    \ 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L,\
    \ 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzc1_698.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzc1_698.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0;\
    \ i < arr.length - 1; i++) \n    {\n        if (arr[i] >= arr[i + 1]) \n     \
    \   {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpakd94sn0.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpakd94sn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nqpasli.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nqpasli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp79dot60d.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281dd]

    ??:? void tmp79dot60d.__unittest_L32_C1() [0x427e40]

    ??:? void tmp79dot60d.__modtest() [0x427f60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430710]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]

    ??:? runModuleUnitTests [0x42c011]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08ezqoqk.d(22): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08ezqoqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++) {\n        if (arr[i] <= max)\
    \ {\n            return max_index;\n        }\n        max = max(max, arr[i]);\n\
    \        max_index = i;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate\
    \ = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhmyyubf.d(23): Error: function expected before `()`, not `max`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhmyyubf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    foreach(i, v; arr)\n    {\n        if(v <= max)\n        {\n   \
    \         max = v;\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9qlzqc4c.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmp9qlzqc4c.__unittest_L29_C1() [0x427dcf]

    ??:? void tmp9qlzqc4c.__modtest() [0x427f44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160693
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long index = -1L;\n\
    \    foreach(i, e; arr)\n    {\n        if(e < max)\n        {\n            index\
    \ = i;\n            break;\n        }\n        max = e;\n    }\n    return index;\n\
    }\nunittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n\
    \    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L,\
    \ 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0tjacnzr.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmp0tjacnzr.__unittest_L30_C1() [0x427eff]

    ??:? void tmp0tjacnzr.__modtest() [0x427f48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b042]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430684]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430161]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]

    ??:? runModuleUnitTests [0x42bf85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428614]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160694
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            index = i;\n       \
    \ }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpye0rvh41.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428205]

    ??:? void tmpye0rvh41.__unittest_L29_C1() [0x427e13]

    ??:? void tmpye0rvh41.__modtest() [0x427f88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430738]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430215]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0cd]

    ??:? runModuleUnitTests [0x42c039]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160692
