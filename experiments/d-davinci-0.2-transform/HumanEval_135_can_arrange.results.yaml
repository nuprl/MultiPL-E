language: d
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaahthzjp.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaahthzjp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaahthzjp.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaahthzjp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6nt0fpry.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nt0fpry.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++) \n    {\n        if (arr[i] <=\
    \ max) \n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6nt0fpry.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nt0fpry.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaahthzjp.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaahthzjp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            index = i;\n        }\n        else\n        {\n\
    \            max = arr[i];\n        }\n    }\n    return index;\n}\nunittest\n\
    {\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L,\
    \ 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpevy40hux.d(17): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4282be]\n??:? long tmpevy40hux.can_arrange(long[]) [0x427d0b]\n??:?
    void tmpevy40hux.__unittest_L32_C1() [0x427f5e]\n??:? void tmpevy40hux.__modtest()
    [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0d5]\n??:? runModuleUnitTests [0x42c041]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428657]\n??:? _d_run_main [0x4285c2]\n??:? main [0x427f9f]\n??:?
    __libc_start_main [0x889cf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        else\n  \
    \      {\n            max = arr[i];\n            max_index = i;\n        }\n \
    \   }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_d9c_g5i.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x428215]\n??:? void tmp_d9c_g5i.__unittest_L33_C1() [0x427e1f]\n??:?
    void tmp_d9c_g5i.__modtest() [0x427f94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0dd]\n??:? runModuleUnitTests [0x42c049]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42865f]\n??:? _d_run_main [0x4285ca]\n??:? main [0x427fa7]\n??:?
    __libc_start_main [0xc64f2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ max)\n        {\n            return max_index;\n        }\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpk82v8c1t.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x428245]\n??:? void tmpk82v8c1t.__unittest_L33_C1() [0x427e53]\n??:?
    void tmpk82v8c1t.__modtest() [0x427fc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430778]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430255]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b10d]\n??:? runModuleUnitTests [0x42c079]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428708]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42868f]\n??:? _d_run_main [0x4285fa]\n??:? main [0x427fdb]\n??:?
    __libc_start_main [0x750f5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpr28gpyxx.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428205]\n??:? void tmpr28gpyxx.__unittest_L29_C1() [0x427e13]\n??:?
    void tmpr28gpyxx.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42864f]\n??:? _d_run_main [0x4285ba]\n??:? main [0x427f9b]\n??:?
    __libc_start_main [0xa1eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuzwt8gwv.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428205]\n??:? void tmpuzwt8gwv.__unittest_L29_C1() [0x427e13]\n??:?
    void tmpuzwt8gwv.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42864f]\n??:? _d_run_main [0x4285ba]\n??:? main [0x427f9b]\n??:?
    __libc_start_main [0x3d421554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e < max)\n        {\n       \
    \     index = i;\n        }\n        else\n        {\n            max = e;\n \
    \       }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmppl1371ig.d(17): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42828e]\n??:? long tmppl1371ig.can_arrange(long[]) [0x427d0b]\n??:?
    void tmppl1371ig.__unittest_L32_C1() [0x427f32]\n??:? void tmppl1371ig.__modtest()
    [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428627]\n??:? _d_run_main [0x428592]\n??:? main [0x427f73]\n??:?
    __libc_start_main [0xb8c40554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpr28gpyxx.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428205]\n??:? void tmpr28gpyxx.__unittest_L29_C1() [0x427e13]\n??:?
    void tmpr28gpyxx.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42864f]\n??:? _d_run_main [0x4285ba]\n??:? main [0x427f9b]\n??:?
    __libc_start_main [0xa1eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    foreach(i, e; arr)\n    {\n        if(e <= max)\n        {\n      \
    \      index = i;\n        }\n        else\n        {\n            max = e;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwjqvn66d.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4281dd]\n??:? void tmpwjqvn66d.__unittest_L32_C1() [0x427e40]\n??:?
    void tmpwjqvn66d.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286a0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428627]\n??:? _d_run_main [0x428592]\n??:? main [0x427f73]\n??:?
    __libc_start_main [0x828ad554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long max_index\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            max_index = i;\n   \
    \     }\n    }\n    return max_index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpr28gpyxx.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428205]\n??:? void tmpr28gpyxx.__unittest_L29_C1() [0x427e13]\n??:?
    void tmpr28gpyxx.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42864f]\n??:? _d_run_main [0x4285ba]\n??:? main [0x427f9b]\n??:?
    __libc_start_main [0xa1eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e <= max)\n            return i - 1;\n        max = max(max,\
    \ e);\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpps4den5c.d(22): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpps4den5c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long index =\
    \ -1;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            max = max(max, arr[i]);\n            index = i;\n\
    \        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaahthzjp.d(23): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaahthzjp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] >\
    \ max)\n        {\n            max = arr[i];\n            maxIndex = i;\n    \
    \    }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\
    \n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2_t37clg.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428205]\n??:? void tmp2_t37clg.__unittest_L29_C1() [0x427e13]\n??:?
    void tmp2_t37clg.__modtest() [0x427f88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c263]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430289]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430215]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0cd]\n??:? runModuleUnitTests [0x42c039]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42864f]\n??:? _d_run_main [0x4285ba]\n??:? main [0x427f9b]\n??:?
    __libc_start_main [0x34fc7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    for (long i = 0L;\
    \ i < arr.length - 1L; i++) \n    {\n        if (arr[i] > arr[i + 1L]) \n    \
    \    {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L,\
    \ 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L,\
    \ 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjodqs8va.d(22): Error: function expected before `()`, not `max`
    of type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjodqs8va.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = arr[0];\n    long maxIndex\
    \ = 0;\n    for (long i = 1; i < arr.length; i++)\n    {\n        if (arr[i] <=\
    \ max)\n        {\n            return maxIndex;\n        }\n        else\n   \
    \     {\n            max = arr[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    return -1;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L,\
    \ 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L])\
    \ == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2o9e9x4f.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x428215]\n??:? void tmp2o9e9x4f.__unittest_L33_C1() [0x427e1f]\n??:?
    void tmp2o9e9x4f.__modtest() [0x427f94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c273]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b106]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0dd]\n??:? runModuleUnitTests [0x42c049]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42865f]\n??:? _d_run_main [0x4285ca]\n??:? main [0x427fa7]\n??:?
    __libc_start_main [0x1f0f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nCreate a function which returns the largest index\
    \ of an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1L,\
    \ 2L, 4L, 3L, 5L])\n    3L\n    >>> can_arrange([1L, 2L, 3L])\n    -1L\n    \n\
    */\nlong can_arrange(long[] arr) \n{\n    long max = -1L;\n    long max_index\
    \ = -1L;\n    for (long i = 0L; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ <= max)\n        {\n            return max_index;\n        }\n        else\n\
    \        {\n            max = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = can_arrange;\n\n\
    \    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L,\
    \ 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L,\
    \ 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([])\
    \ == -1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe7ruc0y0.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4281f5]\n??:? void tmpe7ruc0y0.__unittest_L33_C1() [0x427dff]\n??:?
    void tmpe7ruc0y0.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430205]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0bd]\n??:? runModuleUnitTests [0x42c029]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42863f]\n??:? _d_run_main [0x4285aa]\n??:? main [0x427f87]\n??:?
    __libc_start_main [0xbed87554]\n1/1 unittests FAILED\n'''
  stdout: b''
