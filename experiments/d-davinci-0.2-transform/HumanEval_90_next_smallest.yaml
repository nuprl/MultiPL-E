name: HumanEval_90_next_smallest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of\
  \ integers.\n    Write a function next_smallest() that returns the 2nd smallest\
  \ element of the list.\n    Return None if there is no such element.\n    >>> next_smallest([1L,\
  \ 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L, 4L, 3L, 2L])\n    2L\n\
  \    >>> next_smallest([])\n    None\n    >>> next_smallest([1L, 1L])\n    None\n\
  \    \n*/\nNullable!(long) next_smallest(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
  \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
  \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n    \
  \    assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result =\
  \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result =\
  \ candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get\
  \ == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
  }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
  \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (lst.length < 2)\n        return null;\n    auto min1 = lst[0];\n\
    \    auto min2 = lst[1];\n    if (min1 > min2)\n        swap(min1, min2);\n  \
    \  foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n      \
    \      min2 = min1;\n            min1 = e;\n        }\n        else if (e < min2)\n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2) \n    {\n        return null;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n     \
    \   if (i < min) \n        {\n            second_min = min;\n            min =\
    \ i;\n        }\n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\n/*", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long next = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            next = min;\n           \
    \ min = e;\n        }\n        else if (e < next)\n        {\n            next\
    \ = e;\n        }\n    }\n    if (min == next)\n        return null;\n    return\
    \ next;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long).init;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return Nullable!(long).init;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n\
    \        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min1)\n        {\n            min2 = min1;\n         \
    \   min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n\
    \        if (i < min) \n        {\n            second_min = min;\n           \
    \ min = i;\n        }\n        else if (i < second_min) \n        {\n        \
    \    second_min = i;\n        }\n    }\n    if (min == second_min) \n    {\n \
    \       return null;\n    }\n    return second_min;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min)\n    {\n\
    \        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min)\n        {\n            min2 = min;\n           \
    \ min = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long second = lst[1];\n   \
    \ foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            second\
    \ = min;\n            min = e;\n        }\n        else if (e < second)\n    \
    \    {\n            second = e;\n        }\n    }\n    if (min == second)\n  \
    \      return null;\n    return second;\n}", "{\n    if (lst.length < 2)\n   \
    \     return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, x; lst)\n    {\n        if (x < min)\n        {\n            min2 = min;\n\
    \            min = x;\n        }\n        else if (x < min2)\n        {\n    \
    \        min2 = x;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n   \
    \ long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return null;\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n   \
    \ }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n \
    \           min2 = min;\n            min = e;\n        }\n        else if (e <\
    \ min2)\n        {\n            min2 = e;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e\
    \ < min) \n        {\n            second_min = min;\n            min = e;\n  \
    \      }\n        else if (e < second_min) \n        {\n            second_min\
    \ = e;\n        }\n    }\n    if (min == second_min)\n        return null;\n \
    \   return second_min;\n}\n/*", "{\n    if (lst.length < 2)\n        return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    \n    long min = lst[0];\n\
    \    long second = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (e\
    \ < min)\n        {\n            second = min;\n            min = e;\n       \
    \ }\n        else if (e < second)\n        {\n            second = e;\n      \
    \  }\n    }\n    \n    if (min == second)\n        return null;\n    \n    return\
    \ second;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
