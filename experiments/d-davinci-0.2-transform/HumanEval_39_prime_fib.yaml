name: HumanEval_39_prime_fib
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    prime_fib returns n-th\
  \ number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1L)\n\
  \    2L\n    >>> prime_fib(2L)\n    3L\n    >>> prime_fib(3L)\n    5L\n    >>> prime_fib(4L)\n\
  \    13L\n    >>> prime_fib(5L)\n    89L\n    \n*/\nlong prime_fib(long n) \n"
tests: "unittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L)\
  \ == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n\
  \    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L)\
  \ == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n\
  \    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n\
  }\nvoid main(){}"
completions: ["{\n    long a = 0;\n    long b = 1;\n    long c = 0;\n    long i =\
    \ 0;\n    while (i < n) \n    {\n        c = a + b;\n        a = b;\n        b\
    \ = c;\n        if (isPrime(c)) \n        {\n            i++;\n        }\n   \
    \ }\n    return c;\n}", "{\n    long a = 0L;\n    long b = 1L;\n    long c = 0L;\n\
    \    long i = 0L;\n    while (i < n) \n    {\n        c = a + b;\n        a =\
    \ b;\n        b = c;\n        if (isPrime(c)) \n        {\n            i = i +\
    \ 1L;\n        }\n    }\n    return c;\n}", "{\n    long a = 2L;\n    long b =\
    \ 3L;\n    long c = 5L;\n    long i = 3L;\n    while (i < n) \n    {\n       \
    \ a = b;\n        b = c;\n        c = a + b;\n        if (isPrime(c)) \n     \
    \   {\n            i += 1L;\n        }\n    }\n    return c;\n}", "{\n    long\
    \ a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n    while (i\
    \ < n) \n    {\n        c = a + b;\n        if (isPrime(c)) \n        {\n    \
    \        i++;\n        }\n        a = b;\n        b = c;\n    }\n    return c;\n\
    }\n/*", "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i =\
    \ 3L;\n    while (i < n) {\n        a = b;\n        b = c;\n        c = a + b;\n\
    \        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n\
    }\n/*", "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i =\
    \ 3L;\n    while (true) \n    {\n        if (isPrime(c)) \n        {\n       \
    \     if (i == n) \n            {\n                return c;\n            }\n\
    \            i++;\n        }\n        a = b;\n        b = c;\n        c = a +\
    \ b;\n    }\n    return 0L;\n}\n/*", "{\n    long a = 2L;\n    long b = 3L;\n\
    \    long c = 5L;\n    long i = 3L;\n    while (i < n) \n    {\n        a = b;\n\
    \        b = c;\n        c = a + b;\n        if (isPrime(c)) \n        {\n   \
    \         i++;\n        }\n    }\n    return c;\n}", "{\n    long a = 2L;\n  \
    \  long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while (i < n) \n    {\n\
    \        a = b;\n        b = c;\n        c = a + b;\n        if (isPrime(c)) \n\
    \        {\n            i++;\n        }\n    }\n    return c;\n}", "{\n    long\
    \ a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while (i\
    \ < n) \n    {\n        a = b;\n        b = c;\n        c = a + b;\n        if\
    \ (isPrime(c)) \n        {\n            i++;\n        }\n    }\n    return c;\n\
    }", "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n\
    \    while (i < n) {\n        a = b;\n        b = c;\n        c = a + b;\n   \
    \     if (isPrime(c)) {\n            i++;\n        }\n    }\n    return c;\n}",
  "{\n    long a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n   \
    \ while (i < n) \n    {\n        c = a + b;\n        a = b;\n        b = c;\n\
    \        if (isPrime(c)) \n        {\n            i = i + 1L;\n        }\n   \
    \ }\n    return c;\n}", "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n\
    \    long i = 3L;\n    while (i < n) {\n        a = b;\n        b = c;\n     \
    \   c = a + b;\n        if (isPrime(c)) {\n            i += 1L;\n        }\n \
    \   }\n    return c;\n}", "{\n    long i = 1L;\n    long a = 1L;\n    long b =\
    \ 1L;\n    long c = 0L;\n    while (i < n) \n    {\n        c = a + b;\n     \
    \   a = b;\n        b = c;\n        if (isPrime(c)) \n        {\n            i++;\n\
    \        }\n    }\n    return c;\n}", "{\n    long a = 2L;\n    long b = 3L;\n\
    \    long c = 5L;\n    long i = 3L;\n    while (i < n) \n    {\n        a = b;\n\
    \        b = c;\n        c = a + b;\n        i++;\n        if (isPrime(c)) \n\
    \        {\n            i++;\n        }\n    }\n    return c;\n}", "{\n    long\
    \ a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n    while (i\
    \ < n) \n    {\n        c = a + b;\n        a = b;\n        b = c;\n        if\
    \ (isPrime(c)) \n        {\n            i = i + 1L;\n        }\n    }\n    return\
    \ c;\n}", "{\n    long a = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i\
    \ = 3L;\n    while (i < n) {\n        a = b;\n        b = c;\n        c = a +\
    \ b;\n        if (isPrime(c)) {\n            i++;\n        }\n    }\n    return\
    \ c;\n}\n/*", "{\n    long i = 1;\n    long j = 1;\n    long k = 0;\n    long\
    \ count = 0;\n    while (true) {\n        k = i + j;\n        if (isPrime(k))\
    \ {\n            count++;\n            if (count == n) {\n                return\
    \ k;\n            }\n        }\n        i = j;\n        j = k;\n    }\n}", "{\n\
    \    long a = 0L;\n    long b = 1L;\n    long c = 0L;\n    long i = 0L;\n    while\
    \ (i < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (isPrime(c))\
    \ {\n            i += 1L;\n        }\n    }\n    return c;\n}", "{\n    long a\
    \ = 2L;\n    long b = 3L;\n    long c = 5L;\n    long i = 3L;\n    while (i <\
    \ n) \n    {\n        a = b;\n        b = c;\n        c = a + b;\n        if (isPrime(c))\
    \ \n        {\n            i++;\n        }\n    }\n    return c;\n}", "{\n   \
    \ long a = 0L;\n    long b = 1L;\n    long c = 1L;\n    long i = 1L;\n    while\
    \ (i < n) \n    {\n        c = a + b;\n        a = b;\n        b = c;\n      \
    \  if (isPrime(c)) \n        {\n            i = i + 1L;\n        }\n    }\n  \
    \  return c;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
