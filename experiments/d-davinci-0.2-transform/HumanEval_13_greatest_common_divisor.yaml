name: HumanEval_13_greatest_common_divisor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common divisor\
  \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n   \
  \ >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
  \ a, long b) \n"
tests: "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
  \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
  \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
completions: ["{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple of\
    \ a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>>\
    \ greatest_common_divisor_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ a) \n{\n    long result = a[0];\n    foreach (i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a list of prime numbers less than n\n\
    \    >>> prime_numbers(10L)\n    [2L, 3L, 5L, 7L]\n*/\nlong[] prime_numbers(long\
    \ n) \n{\n    long[] result = [];\n    for (long i = 2L; i < n; i++) \n    {\n\
    \        bool is_prime = true;\n        foreach (j; result) \n        {\n    \
    \        if (i % j == 0) \n            {\n                is_prime = false;\n\
    \                break", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    } \n    else\
    \ if (b == 0L) \n    {\n        return a;\n    } \n    else \n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if (a < b) \n    {\n\
    \        return greatest_common_divisor(b, a);\n    }\n    if (b == 0) \n    {\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    while (b != 0) {\n        auto t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a == 2 || b\
    \ == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0L)\n        return b;\n    if (b ==\
    \ 0L)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) :\
    \ (greatest_common_divisor(a >> 1, b) << 1);\n    if ((b & 1) == 0)\n        return\
    \ greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return greatest_common_divisor((a\
    \ - b) >> 1, b);\n    return greatest_common_divisor((b - a) >> 1, a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if\
    \ (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b = -b;\n    while (a !=\
    \ b)\n    {\n        if (a > b)\n            a -= b;\n        else\n         \
    \   b -= a;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n   \
    \ if (a > b)\n        return greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a,\
    \ b - a);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n     \
    \   return a;\n    }\n    if (a == 1L || b == 1L) \n    {\n        return 1L;\n\
    \    }\n    if (a % 2L == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n     \
    \   return greatest_common_divisor(a / 2L, b);\n    }\n    if (a % 2L != 0L &&\
    \ b % 2L == 0L) \n    {\n        return greatest_common_divisor(a, b / 2L);\n\
    \    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple_list([25L, 15L, 75L])\n  \
    \  375L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result =\
    \ 1L;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor_list([3L, 5L, 7L", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
