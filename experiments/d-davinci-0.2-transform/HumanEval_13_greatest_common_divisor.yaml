name: HumanEval_13_greatest_common_divisor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common divisor\
  \ of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n   \
  \ >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
  \ a, long b) \n"
tests: "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
  \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
  \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
completions: ["{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple of\
    \ a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>>\
    \ greatest_common_divisor_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ a) \n{\n    long result = a[0];\n    foreach (i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a list of prime numbers less than n\n\
    \    >>> prime_numbers(10L)\n    [2L, 3L, 5L, 7L]\n*/\nlong[] prime_numbers(long\
    \ n) \n{\n    long[] result = [];\n    for (long i = 2L; i < n; i++) \n    {\n\
    \        bool is_prime = true;\n        foreach (j; result) \n        {\n    \
    \        if (i % j == 0) \n            {\n                is_prime = false;\n\
    \                break", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    } \n    else\
    \ if (b == 0L) \n    {\n        return a;\n    } \n    else \n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if (a < b) \n    {\n\
    \        return greatest_common_divisor(b, a);\n    }\n    if (b == 0) \n    {\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    while (b != 0) {\n        auto t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a == 2 || b\
    \ == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0L)\n        return b;\n    if (b ==\
    \ 0L)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) :\
    \ (greatest_common_divisor(a >> 1, b) << 1);\n    if ((b & 1) == 0)\n        return\
    \ greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return greatest_common_divisor((a\
    \ - b) >> 1, b);\n    return greatest_common_divisor((b - a) >> 1, a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if\
    \ (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b = -b;\n    while (a !=\
    \ b)\n    {\n        if (a > b)\n            a -= b;\n        else\n         \
    \   b -= a;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n   \
    \ if (a > b)\n        return greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a,\
    \ b - a);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n     \
    \   return a;\n    }\n    if (a == 1L || b == 1L) \n    {\n        return 1L;\n\
    \    }\n    if (a % 2L == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n     \
    \   return greatest_common_divisor(a / 2L, b);\n    }\n    if (a % 2L != 0L &&\
    \ b % 2L == 0L) \n    {\n        return greatest_common_divisor(a, b / 2L);\n\
    \    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple_list([25L, 15L, 75L])\n  \
    \  375L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result =\
    \ 1L;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor_list([3L, 5L, 7L", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a list of integers\n    >>> least_common_multiple_of_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_list([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_of_list(long[] list) \n{\n    long result = 1L;\n\
    \    foreach (long i; list) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor_of_list([3L, 5L])\n    1L\n\
    \    >>> greatest_common_divisor_of_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_of_list(long[]\
    \ list) \n{\n    long result = 0L;\n    foreach (long i; list) \n    {\n     \
    \   if (result == 0L)\n            result = i;\n        else\n            result\
    \ = greatest_common_divisor(result, i);\n    }\n    return result;\n}\n/*\n Return\
    \ a greatest common divisor of a list of integers\n    >>> greatest_common_divisor_of_list([3L,\
    \ 5L])\n    1L\n    >>> greatest_common_divisor_of_list([25L, 15L])\n    5L\n\
    */\nlong greatest_common_divisor_of_list(long[] list) \n{\n", "{\n    if (a <\
    \ b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n       \
    \ return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    return\
    \ b == 0 ? a : greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n \
    \       return b;\n    if (b == 0)\n        return a;\n    if (a > b)\n      \
    \  return greatest_common_divisor(a % b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b % a);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n\
    \ Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a greatest common divisor of a list of integers\n    >>>\
    \ greatest_common_divisor_list([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor_list([25L,\
    \ 15L, 75L])\n    5L\n    \n*/\nlong greatest_common_divisor_list(long[] a) \n\
    {\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n        result = greatest_common_divisor(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n    >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n  \
    \  >>> least_common_multiple_list([25L, 15L, 75L])\n    225L\n    \n*/\nlong least_common_multiple_",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    else\n        return greatest_common_divisor((b - a) / 2L, a);\n}",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    while (b\
    \ != 0)\n    {\n        long t = b;\n        b = a % b;\n        a = t;\n    }\n\
    \    return a;\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    while (b != 0) \n    {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}", "{\n    return b == 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    return b == 0 ? a : greatest_common_divisor(b, a\
    \ % b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ long[] a) \n{\n    return a.length == 1 ? a[0] : greatest_common_divisor(a[0],\
    \ greatest_common_divisor(a[1 .. $]));\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple([3L, 5L, 7L])\n    105L\n\
    \    >>> least_common_multiple([25L, 15L, 75L])\n    375L\n*/\nlong least_common_multiple(in\
    \ long[] a) \n{\n    return a.length == 1 ? a[0] : least_common_multiple(a[0],\
    \ least_common_multiple(a[1 .. $]));\n}\n/*\n Return a greatest common divisor\
    \ of a list of integers\n    >>> greatest_common_divisor([3L, 5L, 7L])\n    1L\n\
    \    >>> greatest_common_divisor([25L, 15L, 75L])\n    5L\n*/\nlong greatest_common_divisor(in\
    \ int[] a) \n{\n    return a.length == 1 ? a[0] : greatest_common_divisor(a[0],\
    \ greatest_common_divisor(a[1 .. $]));\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple([3L, 5L", "{\n    if (b\
    \ == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0 || b == 0)\n    {\n        return 0;\n    }\n    else if (a == b)\n   \
    \ {\n        return a;\n    }\n    else if (a > b)\n    {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    else\n    {\n        return greatest_common_divisor(a,\
    \ b - a);\n    }\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b ==\
    \ 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return\
    \ 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L\
    \ != 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L !=\
    \ 0L && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n  \
    \  return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a ==\
    \ 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a > b)\n        return greatest_common_divisor(a % b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b % a);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(in long[] a) \n{\n    long result = a[0];\n  \
    \  foreach (i; 1 .. a.length)\n        result = least_common_multiple(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a least common multiple of a range\
    \ of integers\n    >>> least_common_multiple_range(1L, 5L)\n    60L\n    >>> least_common_multiple_range(1L,\
    \ 10L)\n    2520L\n*/\nlong least_common_multiple_range(long a, long b) \n{\n\
    \    long result = a;\n    foreach (i; a + 1 .. b + 1)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a list of prime numbers less than a\
    \ given integer\n    >>> prime_numbers(10L)\n    [2L, 3L, 5L, 7L]\n    >>> prime_numbers(20L)\n\
    \    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n*/\nlong[] prime_numbers(long n) \n\
    {\n    long[] result = [];\n   ", "{\n    while (b != 0) \n    {\n        long\
    \ t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n \
    \   if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n   \
    \ if (a < 0L)\n        a = -a;\n    if (b < 0L)\n        b = -b;\n    if (a <\
    \ b)\n        return greatest_common_divisor(b, a);\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a == 0L)\n      \
    \  return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L &&\
    \ b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if (b\
    \ == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L) \n    {\n        return b;\n    }\n    if (b == 0L) \n    {\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\n\
    long least_common_multiple_list(long[] a) \n{\n    long result = a[0];\n    foreach\
    \ (long i; a)\n        result = least_common_multiple(result, i);\n    return\
    \ result;\n}\n/*\n Return a greatest common divisor of a list of integers\n  \
    \  >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>> greatest_common_divisor_list([25L,\
    \ 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[] a) \n{\n    long\
    \ result = a[0];\n    foreach (long i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>>\
    \ greatest_common_divisor_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ a) \n{\n    long result = a[0];\n    foreach (long i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n", "{\n    if (a == 0L) return b;\n    if (b ==\
    \ 0L) return a;\n    if (a == b) return a;\n    if (a == 1L || b == 1L) return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L) return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L) return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L) return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n \
    \       return greatest_common_divisor(a, b % a);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_of_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_list([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_of_list(long[] a) \n{\n    long result = 1L;\n\
    \    foreach (i; a)\n        result = least_common_multiple(result, i);\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_of_list([3L, 5L])\n    15L\n    >>> least_common_multiple_of_list([25L,\
    \ 15L])\n    75L\n*/\nlong least_common_multiple_of_list(long[] a) \n{\n    long\
    \ result = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n    >>> least_common_multiple_of_list([3L, 5L])\n    15L\n    >>>\
    \ least_common_multiple_of_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_of_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a)\n        result = least_common_multiple(",
  "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if (b == 0L) \n    {\n\
    \        return a;\n    }\n    if (a == b) \n    {\n        return a;\n    }\n\
    \    if (a == 1L || b == 1L) \n    {\n        return 1L;\n    }\n    if (a % 2L\
    \ == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L) \n    {\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    }\n    if (b % 2L == 0L) \n    {\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n\
    }\n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple_list([25L, 15L, 75L])\n  \
    \  75L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result = 1L;\n\
    \    foreach (i; a) \n    {\n        result = least_common_multiple(result, i);\n\
    \    }\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L, 7L])\n    1L\n  \
    \  >>> greatest_common_divisor_list([", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b, a\
    \ % b);\n}", "{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) {\n        long t = b;\n        b = a %\
    \ b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1 || b == 1)\n        return 1;\n    if ((a & 1) == 0)\n       \
    \ return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) : greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1;\n    if ((b & 1) == 0)\n        return greatest_common_divisor(a,\
    \ b >> 1);\n    if (a > b)\n        return greatest_common_divisor((a - b) >>\
    \ 1, b);\n    return greatest_common_divisor((b - a) >> 1, a);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common multiple of\
    \ two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>>\
    \ least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a sequence of integers\n    >>> least_common_multiple_of_sequence([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_sequence([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_of_sequence(long[] sequence) \n{\n    if (sequence.length\
    \ == 0L)\n        return 1L;\n    if (sequence.length == 1L)\n        return sequence[0L];\n\
    \    return least_common_multiple(sequence[0L], least_common_multiple_of_sequence(sequence[1L..$]));\n\
    }\n/*\n Return a least common multiple of a sequence of integers\n    >>> least_common_multiple_of_sequence([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_sequence([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_of_sequence(long[] sequence) \n{\n    if (sequence.length\
    \ == 0L)\n        return 1L;\n    if (sequence.length == 1L)\n        return sequence[0L];\n\
    \    return least_common_multiple(sequence[0L], least_common_multiple_of_sequence(sequence[1L..$]));\n\
    }\n/*\n Return a least common multiple of a sequence of integers\n    >>> least_common_multiple_of_sequence([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_of_sequence([25L, 15L])\n    75L\n\
    */\nlong least_common_multiple_", "{\n    if (a == 0L)\n        return b;\n  \
    \  if (b == 0L)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return\
    \ greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a, b\
    \ - a);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n \
    \       return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : (greatest_common_divisor(a >> 1, b) << 1);\n    if ((b & 1) == 0)\n\
    \        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n        return\
    \ greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    long c;\n    while (a != 0) {\n        c = a;\n\
    \        a = b % a;\n        b = c;\n    }\n    return b;\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a < 0)\n\
    \        a = -a;\n    if (b < 0)\n        b = -b;\n    while (a != b)\n    {\n\
    \        if (a > b)\n            a -= b;\n        else\n            b -= a;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b\
    \ == 0L)\n        return a;\n    if (a == b)\n        return a;\n    if (a ==\
    \ 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n\
    \        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L\
    \ == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a / 2L, b);\n\
    \    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 2L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long lcm = 1L;\n    foreach (i; a)\n        lcm = least_common_multiple(lcm,\
    \ i);\n    return lcm;\n}\n/*\n Return a least common multiple of a list of integers\n\
    \    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 2L])\n    150L\n\
    \    \n*/\nlong least_common_multiple_list(long[] a) \n{\n    long lcm = 1L;\n\
    \    foreach (i; a)\n        lcm = least_common_multiple(lcm, i);\n    return\
    \ lcm;\n}\n/*\n Return a least common multiple of a list of integers\n    >>>\
    \ least_common_multiple_list([3L, 5L])\n    15L\n    >>> least_common_multiple_list([25L,\
    \ 15L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 2L])\n    150L\n\
    \    \n*/\nlong", "{\n    if (a == 0L)\n        return b;\n    else if (b == 0L)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}", "{\n \
    \   if (a == 0L)\n        return b;\n    else if (b == 0L)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long c;\n    while (a != 0) {\n        c = a;\n       \
    \ a = b % a;\n        b = c;\n    }\n    return b;\n}", "{\n    if (a < b)\n \
    \       return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n     \
    \   return a;\n    }\n    if (a == 1L || b == 1L) \n    {\n        return 1L;\n\
    \    }\n    if (a % 2L == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L) \n    {\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    }\n    if (b % 2L == 0L) \n    {\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n\
    }", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if\
    \ (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n\
    }", "{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n      \
    \  a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b, a\
    \ % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n   \
    \     return b;\n    if (b == 0L)\n        return a;\n    while (a != b)\n   \
    \ {\n        if (a > b)\n            a -= b;\n        else\n            b -= a;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L) \n    {\n        return b;\n \
    \   }\n    else if (b == 0L) \n    {\n        return a;\n    }\n    else \n  \
    \  {\n        return greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if\
    \ (a < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    long c;\n    while (a\
    \ != 0) {\n        c = a; a = b % a;  b = c;\n    }\n    return b;\n}", "{\n \
    \   if(a == 0L) return b;\n    if(b == 0L) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return\
    \ greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a, b\
    \ - a);\n}", "{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else if\
    \ (b == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}", "{\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>>\
    \ greatest_common_divisor_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ a) \n{\n    long result = 0L;\n    foreach (i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n    >>> greatest_common_divisor_list([3L, 5L])\n    1L\n    >>>\
    \ greatest_common_divisor_list([25L, 15L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ a) \n{\n    long result = 0L;\n    foreach (i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n   ", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n    {\n        return\
    \ greatest_common_divisor(b, a);\n    }\n    else if (b == 0)\n    {\n       \
    \ return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0) \n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common\
    \ multiple of a list of integers\n    >>> least_common_multiple_of_list([3L, 5L])\n\
    \    15L\n    >>> least_common_multiple_of_list([25L, 15L])\n    75L\n    \n*/\n\
    long least_common_multiple_of_list(long[] a) \n{\n    long result = 1L;\n    foreach\
    \ (i; a) \n        result = least_common_multiple(result, i);\n    return result;\n\
    }\n/*\n Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor_of_list([3L,\
    \ 5L])\n    1L\n    >>> greatest_common_divisor_of_list([25L, 15L])\n    5L\n\
    \    \n*/\nlong greatest_common_divisor_of_list(long[] a) \n{\n    long result\
    \ = a[0];\n    foreach (i; a) \n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n    >>> least_common_multiple_of_list([3L, 5L])\n    15L\n    >>>\
    \ least_common_multiple_of_list([25L, 15L])\n    75L\n    \n*/\nlong least_common_multiple_of_list(long[]\
    \ a) \n{\n    long result = 1L;\n    foreach (i; a) \n        result = least_",
  "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n \
    \   return greatest_common_divisor(b, a % b);\n}", "{\n    long c;\n    while\
    \ (b != 0) \n    {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n\
    \    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  while (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a\
    \ = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n  \
    \  if (b == 0L)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n\
    \    else\n        return greatest_common_divisor(a, b % a);\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 10L])\n    150L\n*/\nlong least_common_multiple_list(long[]\
    \ numbers) \n{\n    long result = 1L;\n    foreach (number; numbers)\n       \
    \ result = least_common_multiple(result, number);\n    return result;\n}\n/*\n\
    \ Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor_list([3L,\
    \ 5L])\n    1L\n    >>> greatest_common_divisor_list([25L, 15L])\n    5L\n   \
    \ >>> greatest_common_divisor_list([25L, 15L, 10L])\n    5L\n*/\nlong greatest_common_divisor_list(long[]\
    \ numbers) \n{\n    long result = numbers[0];\n    foreach (number; numbers)\n\
    \        result = greatest_common_divisor(result, number);\n    return result;\n\
    }\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n \
    \       return greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a > b)\n        return greatest_common_divisor(a - b,\
    \ b);\n    else\n        return greatest_common_divisor(a, b - a);\n}", "{\n \
    \   if (a == 0L)\n    {\n        return b;\n    }\n    if (b == 0L)\n    {\n \
    \       return a;\n    }\n    if (a == b)\n    {\n        return a;\n    }\n \
    \   if (a == 1L || b == 1L)\n    {\n        return 1L;\n    }\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L)\n    {\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    }\n    if (b % 2L == 0L)\n    {\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n\
    }", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n\
    \    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n   \
    \     return b;\n    if (b == 0L)\n        return a;\n    if (a > b)\n       \
    \ return greatest_common_divisor(a % b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b % a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b\
    \ / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple of\
    \ a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L])\n\
    \    75L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result =\
    \ a[0];\n    foreach (i; 1 .. a.length)\n        result = least_common_multiple(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n    >>>\
    \ least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([25L,\
    \ 15L, 5L])\n    75L\n    >>> least_common_multiple_list([25L, 15L, 5L, 3L])\n\
    \    75L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result =\
    \ a[0];\n    foreach (i; 1 .. a.length)\n        result = least_common_multiple(result,\
    \ a[i]);\n    return result;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n    >>> least_common_multiple_list", "{\n    if (a == 0L)\n   \
    \ {\n        return b;\n    }\n    if (b == 0L)\n    {\n        return a;\n  \
    \  }\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\
    \ \n    {\n        return b;\n    }\n    else if (b == 0L) \n    {\n        return\
    \ a;\n    }\n    else \n    {\n        return greatest_common_divisor(b, a % b);\n\
    \    }\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b = a\
    \ % b;\n        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L, 11L])\n    2310L\n*/\nlong least_common_multiple_list(long[] a) \n{\n\
    \    long result = a[0];\n    foreach (long i; a[1..$]) \n    {\n        result\
    \ = least_common_multiple(result, i);\n    }\n    return result;\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([3L, 5L, 7L])\n    105L\n    >>> least_common_multiple_list([3L,\
    \ 5L, 7L, 11L])\n    2310L\n*/\nlong least_common_multiple_list(Tuple!(long[])\
    \ a) \n{\n    long result = a[0];\n    foreach (long i; a[1..$]) \n    {\n   \
    \     result = least_common_multiple(result, i);\n    }\n    return result;\n\
    }\n/*\n Return a least common multiple of a list of integers\n", "{\n    while\
    \ (b != 0) \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common\
    \ multiple of a tuple of integers\n    >>> least_common_multiple(tuple(3L, 5L,\
    \ 7L))\n    105L\n    >>> least_common_multiple(tuple(25L, 15L, 75L))\n    375L\n\
    \    \n*/\nlong least_common_multiple(tuple!(long[]) t) \n{\n    long result =\
    \ 1L;\n    foreach (i; t) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a least common multiple of a\
    \ tuple of integers\n    >>> least_common_multiple(3L, 5L, 7L)\n    105L\n   \
    \ >>> least_common_multiple(25L, 15L, 75L)\n    375L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b, long c) \n{\n    return least_common_multiple(tuple(a, b, c));\n\
    }\n/*\n Return a least common multiple of a tuple of integers\n    >>> least_common_multiple(3L,\
    \ 5L, 7L, 9L)\n    945L\n    >>> least_common_multiple(25L, 15L, 75L, 125L)\n\
    \    1875L\n    \n*/\nlong least_common_multiple(long a, long b, long c, long\
    \ d) \n{\n    return least_common_multiple(tuple(a, b, c, d));\n}\n/*\n Return\
    \ a least common multiple of a tuple of integers\n    >>> least_common_multiple(3L",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    long c;\n    while (a != 0) {\n        c = a;\n        a = b % a;\n     \
    \   b = c;\n    }\n    return b;\n}", "{\n    if (b == 0)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if (b\
    \ == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a >\
    \ b)\n        return greatest_common_divisor(a % b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a < b) \n  \
    \      return greatest_common_divisor(b, a);\n    if (b == 0) \n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n\
    \        return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n   \
    \     return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a %\
    \ 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L) \n        return b;\n    if (b == 0L) \n        return a;\n    if (a\
    \ == b) \n        return a;\n    if (a == 1L || b == 1L) \n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L) \n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L) \n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L) \n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n       \
    \ return greatest_common_divisor(b, a);\n    if (b == 0)\n        return a;\n\
    \    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n   \
    \     return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n      \
    \  return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    long c;\n    while (b != 0) {\n        c = a % b;\n        a = b;\n     \
    \   b = c;\n    }\n    return a;\n}", "{\n    if (a == 0)\n        return b;\n\
    \    else if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long c;\n    while (a != 0) \n    {\n        c = a; \n\
    \        a = b % a;  \n        b = c;\n    }\n    return b;\n}", "{\n    if (b\
    \ == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}", "{\n    if (a ==\
    \ 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a > b)\n\
    \        return greatest_common_divisor(a % b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b % a);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n \
    \       return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a >> 1, b) :\
    \ greatest_common_divisor(a >> 1, b >> 1) << 1;\n    else if ((b & 1) == 0)\n\
    \        return greatest_common_divisor(a, b >> 1);\n    else\n        return\
    \ a > b ? greatest_common_divisor((a - b) >> 1, b) : greatest_common_divisor((b\
    \ - a) >> 1, a);\n}", "{\n    long c;\n    while (a != 0) \n    {\n        c =\
    \ a; \n        a = b % a;  \n        b = c;\n    }\n    return b;\n}", "{\n  \
    \  if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b) \n    {\n       \
    \ return greatest_common_divisor(b, a);\n    }\n    if (b == 0) \n    {\n    \
    \    return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    else\n        return greatest_common_divisor((b - a) / 2L, a);\n}",
  "{\n    if (a == 0L) return b;\n    if (b == 0L) return a;\n    if (a < 0L) a =\
    \ -a;\n    if (b < 0L) b = -b;\n    while (a != b) {\n        if (a > b) a -=\
    \ b;\n        else b -= a;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n \
    \       return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L\
    \ == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L,\
    \ b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3L, 5L)\n    1L\n    >>> greatest_common_divisor(25L,\
    \ 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long a, long b) \n{\n \
    \   if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n   \
    \ if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 0L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    225L\n\
    */\nlong least_common_multiple(in long[] a) \n{\n    long result = 1L;\n    foreach\
    \ (i; a)\n        result = least_common_multiple(result, i);\n    return result;\n\
    }\n/*\n Return a greatest common divisor of a list of integers\n    >>> greatest_common_divisor([",
  "{\n    while (b != 0) \n    {\n        long t = b;\n        b = a % b;\n      \
    \  a = t;\n    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n   \
    \ if (a == 1L || b == 1L)\n        return 1L;\n    if (a == 2L || b == 2L)\n \
    \       return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L *\
    \ greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L)\n        return\
    \ greatest_common_divisor(a / 2L, b);\n    if (b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    while (a != 0 && b != 0) \n    {\n        if (a > b) \n        {\n      \
    \      a %= b;\n        } \n        else \n        {\n            b %= a;\n  \
    \      }\n    }\n    return a + b;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n   \
    \ if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L\
    \ == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if\
    \ (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a / 2L,\
    \ b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n   \
    \ if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a % 2L != 0L && b % 2L != 0L && a < b)\n        return greatest_common_divisor((b\
    \ - a) / 2L, a);\n    if (a % 2L != 0L && b % 2L != 0L && a > b)\n        return\
    \ greatest_common_divisor((a - b) / 2L, b);\n    return 1L;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n    >>> least_common_multiple_list([3L,\
    \ 5L])\n    15L\n    >>> least_common_multiple_list([25L, 15L])\n    75L\n   \
    \ >>> least_common_multiple_list([25L, 15L, 10L])\n    150L\n    \n*/\nlong least_common_multiple_list(long[]\
    \ a) \n{\n    if (a.length == 0)\n        return 1L;\n    if (a.length == 1)\n\
    \        return a[0];\n    long result", "{\n    if (a < b) \n    {\n        return\
    \ greatest_common_divisor(b, a);\n    }\n    if (b == 0) \n    {\n        return\
    \ a;\n    }\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    long\
    \ c;\n    while (a != 0) \n    {\n        c = a;\n        a = b % a;\n       \
    \ b = c;\n    }\n    return b;\n}", "{\n    if (a == 0L)\n        return b;\n\
    \    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n   \
    \ if (a > b)\n        return greatest_common_divisor(a - b, b);\n    else\n  \
    \      return greatest_common_divisor(a, b - a);\n}", "{\n    if (a < b) \n  \
    \  {\n        return greatest_common_divisor(b, a);\n    }\n    while (b != 0)\
    \ \n    {\n        long t = b;\n        b = a % b;\n        a = t;\n    }\n  \
    \  return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a < b)\n    {\n        return greatest_common_divisor(b, a);\n    }\n \
    \   if (b == 0)\n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L) \n    {\n        return b;\n    }\n    if\
    \ (b == 0L) \n    {\n        return a;\n    }\n    if (a == b) \n    {\n     \
    \   return a;\n    }\n    if (a == 1L || b == 1L) \n    {\n        return 1L;\n\
    \    }\n    if (a % 2L == 0L && b % 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n     \
    \   return greatest_common_divisor(a / 2L, b);\n    }\n    if (a % 2L != 0L &&\
    \ b % 2L == 0L) \n    {\n        return greatest_common_divisor(a, b / 2L);\n\
    \    }\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n \
    \   if (a == 0L)\n        return b;\n    else if (b == 0L)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a >\
    \ b)\n        return greatest_common_divisor(a % b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b %\
    \ 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n  \
    \  if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a greatest common divisor of a list of integers\n    >>>\
    \ greatest_common_divisor([3L, 5L, 7L])\n    1L\n    >>> greatest_common_divisor([25L,\
    \ 15L, 75L])\n    5L\n    \n*/\nlong greatest_common_divisor(long[] a) \n{\n \
    \   if (a.length == 0L)\n        return 0L;\n    if (a.length == 1L)\n       \
    \ return a[0L];\n    long result = greatest_common_divisor(a[0L], a[1L]);\n  \
    \  for (long i = 2L; i < a.length; i++)\n        result = greatest_common_divisor(result,\
    \ a[i]);\n    return result", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (a % b == 0) \n    {\n        return b;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b %\
    \ 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n  \
    \  if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    while (b != 0) {\n        long t = b;\n        b = a % b;\n        a = t;\n\
    \    }\n    return a;\n}", "{\n    if (a == 0L)\n        return b;\n    if (b\
    \ == 0L)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ % b, b);\n    else\n        return greatest_common_divisor(a, b % a);\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0L)\n     \
    \   return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1L || b == 1L)\n        return 1L;\n    if (a % 2L == 0L &&\
    \ b % 2L == 0L)\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return\
    \ 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? (2 * greatest_common_divisor(a\
    \ >> 1, b >> 1)) : greatest_common_divisor(a >> 1, b);\n    else\n        return\
    \ ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2L, b);\n    return\
    \ greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a == 0L)\n      \
    \  return b;\n    if (b == 0L)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a - b, b);\n    return\
    \ greatest_common_divisor(a, b - a);\n}", "{\n    if (a == 0L)\n        return\
    \ b;\n    else if (b == 0L)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n  \
    \      return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if\
    \ (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n    if (a\
    \ == b)\n        return a;\n    if (a == 1L || b == 1L)\n        return 1L;\n\
    \    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L * greatest_common_divisor(a\
    \ / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L != 0L)\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0L)\n        return b;\n    if (b == 0L)\n        return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    >>> least_common_multiple(1L,\
    \ 1L)\n    1L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([1L,\
    \ 1L])\n    1L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result\
    \ = a[0];\n    foreach (i; 1 .. a.length) \n    {\n        result = least_common_multiple(result,\
    \ a[i]);\n    }\n    return result;\n}\n/*\n Return a least common multiple of\
    \ a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n    >>> least_common_multiple_list([1L,\
    \ 1L])\n    1L\n*/\nlong least_common_multiple_list(long[] a) \n{\n    long result\
    \ = a[0];\n    foreach (i; 1 .. a.length) \n    {\n        result = least_common_multiple(result,\
    \ a[i]);\n    }\n    return result;\n}\n/*\n Return a least common multiple of\
    \ a list of integers\n    >>> least_common_multiple_list([3L, 5L])\n    15L\n\
    \    >>> least_common_multiple_list([25L, 15L])\n    75L\n", "{\n    if (a ==\
    \ 0L) \n    {\n        return b;\n    }\n    if (b == 0L) \n    {\n        return\
    \ a;\n    }\n    if (a == b) \n    {\n        return a;\n    }\n    if (a == 1L\
    \ || b == 1L) \n    {\n        return 1L;\n    }\n    if (a % 2L == 0L && b %\
    \ 2L == 0L) \n    {\n        return 2L * greatest_common_divisor(a / 2L, b / 2L);\n\
    \    }\n    if (a % 2L == 0L && b % 2L != 0L) \n    {\n        return greatest_common_divisor(a\
    \ / 2L, b);\n    }\n    if (a % 2L != 0L && b % 2L == 0L) \n    {\n        return\
    \ greatest_common_divisor(a, b / 2L);\n    }\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0L)\n        return b;\n    if (b ==\
    \ 0L)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1L\
    \ || b == 1L)\n        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n   \
    \     return 2L * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L ==\
    \ 0L && b % 2L != 0L)\n        return greatest_common_divisor(a / 2L, b);\n  \
    \  if (a % 2L != 0L && b % 2L == 0L)\n        return greatest_common_divisor(a,\
    \ b / 2L);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2L,\
    \ b);\n    return greatest_common_divisor((b - a) / 2L, a);\n}", "{\n    if (a\
    \ < b) \n    {\n        return greatest_common_divisor(b, a);\n    }\n    if (b\
    \ == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n   \
    \     return a;\n    if (a == b)\n        return a;\n    if (a == 1L || b == 1L)\n\
    \        return 1L;\n    if (a % 2L == 0L && b % 2L == 0L)\n        return 2L\
    \ * greatest_common_divisor(a / 2L, b / 2L);\n    if (a % 2L == 0L && b % 2L !=\
    \ 0L)\n        return greatest_common_divisor(a / 2L, b);\n    if (a % 2L != 0L\
    \ && b % 2L == 0L)\n        return greatest_common_divisor(a, b / 2L);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    long c;\n    while\
    \ (a != 0) {\n        c = a;\n        a = b % a;\n        b = c;\n    }\n    return\
    \ b;\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) != 0 ? greatest_common_divisor(a\
    \ >> 1, b) : greatest_common_divisor(a >> 1, b >> 1) << 1;\n    if ((b & 1) ==\
    \ 0)\n        return greatest_common_divisor(a, b >> 1);\n    if (a > b)\n   \
    \     return greatest_common_divisor((a - b) >> 1, b);\n    return greatest_common_divisor((b\
    \ - a) >> 1, a);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
