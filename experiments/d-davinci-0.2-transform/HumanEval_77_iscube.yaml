name: HumanEval_77_iscube
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes\
  \ an integer a and returns True \n    if this ingeger is a cube of some integer\
  \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
  \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
  \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
  \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n"
tests: "unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) ==\
  \ true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n\
  \    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
  \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L)\
  \ == false);\n}\nvoid main(){}"
completions: ["{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3));\n}", "{\n    return a == 0 || a == 1 || a == -1 || a == 64 ||\
    \ a == -64;\n}", "{\n    return a == 0 || (a > 0 && pow(cast(int)sqrt(a), 3) ==\
    \ a);\n}", "{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == cast(long)pow(cast(double)cbrt(a),\
    \ 3));\n}", "{\n    if (a == 0)\n        return true;\n    if (a < 0)\n      \
    \  a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}", "{\n\
    \    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27;\n}", "{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3));\n}", "{\n    return a == 0 || a == 1 || a == -1 || a == 8 ||\
    \ a == 27 || a == -8 || a == -27;\n}", "{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a,\
    \ 1.0/3.0), 3) == a);\n}", "{\n    return a == 0 || a == 1 || a == -1 || (a >\
    \ 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}", "{\n    return a == 0 ||\
    \ a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}",
  "{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3));\n}", "{\n    return a == 0 || a == 1 || a == -1 || (a > 0 &&\
    \ a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}", "{\n    if (a == 0)\n        return\
    \ true;\n    if (a < 0)\n        a = -a;\n    long b = (long)cbrt(a);\n    return\
    \ b * b * b == a;\n}", "{\n    return a == 0 || a == 1 || a == -1 || a == 64 ||\
    \ a == -64;\n}", "{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n  \
    \  long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}", "{\n    return\
    \ a == 0L || (a > 0L && a == cast(long)pow(cast(double)cbrt(a), 3));\n}", "{\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3));\n}", "{\n    long b = (long)pow(a, 1.0/3.0);\n    return a ==\
    \ b*b*b;\n}", "{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a,\
    \ 1.0/3.0), 3));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
