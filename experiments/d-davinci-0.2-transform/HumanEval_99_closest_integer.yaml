name: HumanEval_99_closest_integer
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ takes a value (string) representing a number\n    and returns the closest integer\
  \ to it. If the number is equidistant\n    from two integers, round it away from\
  \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
  15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
  \ number is equidistant\n    from two integers, the one you should return is the\
  \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
  ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \n\
  */\nlong closest_integer(string value) \n"
tests: "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
  10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
  -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
  0\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    long result = 0;\n    double d = to!double(value);\n    if (d\
    \ > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n \
    \       result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return\
    \ cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d + cast(long)(d\
    \ - cast(long)d);\n    }\n    else\n    {\n        result = cast(long)d - cast(long)(d\
    \ - cast(long)d);\n    }\n    return result;\n}", "{\n    long result = 0;\n \
    \   double d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long)round(d);\n}", "{\n    return round(to!double(value));\n}", "{\n \
    \   double d = to!double(value);\n    long l = to!long(d);\n    if (abs(d - l)\
    \ < 0.5)\n        return l;\n    else\n        return l + sign(d);\n}", "{\n \
    \   return round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d1 = floor(d);\n    double d2 = ceil(d);\n\
    \    if (d - d1 > d2 - d)\n        result = cast(long)d2;\n    else\n        result\
    \ = cast(long)d1;\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto result = to!long(value);\n\
    \    if (result == to!long(value))\n        return result;\n    else\n       \
    \ return result + sign(value.to!double);\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    long l = to!long(d_abs);\n\
    \    double d_diff = d_abs - l;\n    if (d_diff >= 0.5)\n    {\n        result\
    \ = l + 1;\n    }\n    else\n    {\n        result = l;\n    }\n    if (d < 0)\n\
    \    {\n        result = -result;\n    }\n    return result;\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) d;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto result = to!long(value);\n    if (value.length > 1)\n    {\n\
    \        auto fraction = value[$-1..$];\n        auto fraction_value = to!long(fraction);\n\
    \        if (fraction_value >= 5)\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto d = to!double(value);\n    return cast(long) d;\n}", "{\n   \
    \ return round(to!double(value));\n}", "{\n    long result = 0;\n    double d\
    \ = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d + 1;\n\
    \    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n \
    \   {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    double d_int_plus = to!double(to!long(d) + 1);\n    double d_int_minus =\
    \ to!double(to!long(d) - 1);\n    if (abs(d - d_int) < abs(d - d_int_plus))\n\
    \    {\n        result = to!long(d_int);\n    }\n    else if (abs(d - d_int) >\
    \ abs(d - d_int_plus))\n    {\n        result = to!long(d_int_plus);\n    }\n\
    \    else if (abs(d - d_int) == abs(d - d_int_plus))\n    {\n        if (d > 0)\n\
    \        {\n            result = to!long(d_int_plus);\n        }\n        else\n\
    \        {\n            result = to!long(d_int_minus);\n        }\n    }\n   \
    \ return result;\n}", "{\n    return cast(long) round(to!double(value));\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    auto d = to!double(value);\n    return\
    \ cast(long) d;\n}", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if(d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double val = to!double(value);\n\
    \    double intval = to!double(to!string(to!int(val)));\n    double diff = val\
    \ - intval;\n    if (diff > 0.5)\n    {\n        result = to!long(ceil(val));\n\
    \    }\n    else if (diff < -0.5)\n    {\n        result = to!long(floor(val));\n\
    \    }\n    else\n    {\n        if (val > 0)\n        {\n            result =\
    \ to!long(ceil(val));\n        }\n        else\n        {\n            result\
    \ = to!long(floor(val));\n        }\n    }\n    return result;\n}", "{\n    return\
    \ round(to!real(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}",
  "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d >= 0)\n    {\n        result\
    \ = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n    }\n\
    \    else\n    {\n        result = cast(long)d;\n        if (d - result < -0.5)\n\
    \            result--;\n    }\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long) round(d);\n}",
  "{\n    return cast(long)round(to!double(value));\n}", "{\n    return round(to!real(value));\n\
    }", "{\n    // TODO: Implement\n    return 0;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if(d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d_int\
    \ = cast(double) cast(long) d;\n    double d_int_plus_one = d_int + 1;\n    double\
    \ d_int_minus_one = d_int - 1;\n    double diff_int = abs(d - d_int);\n    double\
    \ diff_int_plus_one = abs(d - d_int_plus_one);\n    double diff_int_minus_one\
    \ = abs(d - d_int_minus_one);\n    if (diff_int <= diff_int_plus_one && diff_int\
    \ <= diff_int_minus_one)\n    {\n        result = cast(long) d_int;\n    }\n \
    \   else if (diff_int_plus_one <= diff_int && diff_int_plus_one <= diff_int_minus_one)\n\
    \    {\n        result = cast(long) d_int_plus_one;\n    }\n    else if (diff_int_minus_one\
    \ <= diff_int && diff_int_minus_one <= diff_int_plus_one)\n    {\n        result\
    \ = cast(long) d_int_minus_one;\n    }\n    return result;\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return round(to!real(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    // Convert the string to a double\n\
    \    double d = to!double(value);\n    // Round the double to the nearest integer\n\
    \    long l = round(d);\n    // Return the rounded integer\n    return l;\n}",
  "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}",
  "{\n    return cast(long)round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d\
    \ + 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n   \
    \ return result;\n}", "{\n    return cast(long) round(to!double(value));\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    double d = to!double(value);\n  \
    \  return cast(long)d;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double fraction = d - cast(long)d;\n\
    \    if (fraction == 0.5)\n    {\n        if (d > 0)\n        {\n            result\
    \ = cast(long)d + 1;\n        }\n        else\n        {\n            result =\
    \ cast(long)d - 1;\n        }\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d2 = floor(d);\n    if (d - d2 > 0.5)\n        result = cast(long)ceil(d);\n\
    \    else\n        result = cast(long)floor(d);\n    return result;\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto number = to!double(value);\n    auto floor = cast(long) floor(number);\n\
    \    auto ceil = cast(long) ceil(number);\n    if (number - floor > ceil - number)\n\
    \        return ceil;\n    else\n        return floor;\n}", "{\n    double d =\
    \ to!double(value);\n    return cast(long)round(d);\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n    }\n\
    \    else\n    {\n        result = cast(long)d;\n        if (result - d > 0.5)\n\
    \            result--;\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long) round(d);\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double d_int = cast(double) cast(long)\
    \ d;\n    double d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if\
    \ (d_int < 0)\n        {\n            result = cast(long) (d_int - 1);\n     \
    \   }\n        else\n        {\n            result = cast(long) (d_int + 1);\n\
    \        }\n    }\n    else\n    {\n        result = cast(long) d;\n    }\n  \
    \  return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    result = cast(long)d;\n    if(d - result > 0.5)\n        result++;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  if (d - cast(long)d > 0.5)\n        result = cast(long)d + 1;\n    else\n \
    \       result = cast(long)d;\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double fractional = d - cast(long)d;\n\
    \    if (fractional >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n\
    \    else\n    {\n        result = cast(long)d;\n    }\n    return result;\n}",
  "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}", "{\n \
    \   return cast(long) round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long)floor(d);\n        if (d -\
    \ result > 0.5)\n            result++;\n    }\n    else\n    {\n        result\
    \ = cast(long)ceil(d);\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    long l = cast(long)d;\n    if (d - l > 0.5)\n       \
    \ return l + 1;\n    else if (d - l < -0.5)\n        return l - 1;\n    else\n\
    \        return l;\n}", "{\n    return round(to!double(value));\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}", "{\n    return\
    \ round(to!double(value));\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long) round(d);\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  double d_int = to!double(to!long(d));\n    double d_int_plus_one = d_int +\
    \ 1;\n    double diff_d_int = abs(d - d_int);\n    double diff_d_int_plus_one\
    \ = abs(d - d_int_plus_one);\n    if (diff_d_int < diff_d_int_plus_one)\n    {\n\
    \        result = to!long(d_int);\n    }\n    else\n    {\n        result = to!long(d_int_plus_one);\n\
    \    }\n    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    return round(to!double(value));\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long) round(d);\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    long l = to!long(d);\n    if (d - l > 0.5)\n        return l + 1;\n    else\
    \ if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n}", "{\n\
    \    long result = 0;\n    float f = to!float(value);\n    if (f > 0)\n    {\n\
    \        result = cast(long)ceil(f);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(f);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n  \
    \  return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n        result\
    \ = cast(long)d + 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n\
    \    }\n    return result;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    real num = to!real(value);\n    long result = cast(long)num;\n   \
    \ if (num - result > 0.5)\n        result++;\n    return result;\n}", "{\n   \
    \ return cast(long) round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    double d = to!double(value);\n    return cast(long)round(d);\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    auto d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d_int\
    \ = to!double(to!long(d));\n    double d_int_plus_one = d_int + 1;\n    double\
    \ d_int_minus_one = d_int - 1;\n    double d_int_plus_one_diff = abs(d_int_plus_one\
    \ - d);\n    double d_int_minus_one_diff = abs(d_int_minus_one - d);\n    if (d_int_plus_one_diff\
    \ < d_int_minus_one_diff)\n    {\n        result = to!long(d_int_plus_one);\n\
    \    }\n    else if (d_int_plus_one_diff > d_int_minus_one_diff)\n    {\n    \
    \    result = to!long(d_int_minus_one);\n    }\n    else\n    {\n        if (d_int_plus_one\
    \ > 0)\n        {\n            result = to!long(d_int_plus_one);\n        }\n\
    \        else\n        {\n            result = to!long(d_int_minus_one);\n   \
    \     }\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto val = to!double(value);\n    auto int_val = to!long(val);\n \
    \   auto diff = val - int_val;\n    if (diff == 0.5)\n    {\n        if (int_val\
    \ > 0)\n            return int_val + 1;\n        else\n            return int_val\
    \ - 1;\n    }\n    else\n    {\n        if (diff > 0.5)\n            return int_val\
    \ + 1;\n        else\n            return int_val;\n    }\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!real(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    auto num = to!double(value);\n    auto floor = cast(long)num;\n  \
    \  auto ceil = floor + 1;\n    auto diff_floor = abs(num - floor);\n    auto diff_ceil\
    \ = abs(num - ceil);\n    return diff_floor < diff_ceil ? floor : ceil;\n}", "{\n\
    \    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return round(to!double(value));\n}", "{\n    auto result = to!long(value);\n\
    \    auto diff = abs(to!double(value) - result);\n    if (diff > 0.5)\n    {\n\
    \        result += (result > 0 ? 1 : -1);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    if (d_int == d)\n        result = to!long(d);\n    else\n    {\n        if\
    \ (d > 0)\n            result = to!long(d_int + 1);\n        else\n          \
    \  result = to!long(d_int - 1);\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double fractional = d - cast(long)d;\n\
    \    if (fractional >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n\
    \    else\n    {\n        result = cast(long)d;\n    }\n    return result;\n}",
  "{\n    return round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double f =\
    \ floor(d);\n    double c = ceil(d);\n    if (d - f > c - d)\n        result =\
    \ cast(long)c;\n    else\n        result = cast(long)f;\n    return result;\n}",
  "{\n    return cast(long) round(to!double(value));\n}", "{\n    // TODO: Implement\
    \ me\n    return 0;\n}", "{\n    return cast(long)value.to!real;\n}", "{\n   \
    \ double d = to!double(value);\n    return cast(long) round(d);\n}", "{\n    return\
    \ cast(long)round(to!double(value));\n}", "{\n    // TODO: implement\n    return\
    \ 0;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n     \
    \   result = cast(long) ceil(d);\n    }\n    else\n    {\n        result = cast(long)\
    \ floor(d);\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d >= 0)\n    {\n        result\
    \ = cast(long)d;\n        if (d - result >= 0.5)\n            result++;\n    }\n\
    \    else\n    {\n        result = cast(long)d;\n        if (result - d >= 0.5)\n\
    \            result--;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double fractional = d - to!long(d);\n \
    \   if (fractional > 0.5)\n    {\n        result = ceil(d);\n    }\n    else if\
    \ (fractional < 0.5)\n    {\n        result = floor(d);\n    }\n    else\n   \
    \ {\n        result = round(d);\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long) ceil(d);\n    }\n    else\n    {\n        result = cast(long) floor(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
