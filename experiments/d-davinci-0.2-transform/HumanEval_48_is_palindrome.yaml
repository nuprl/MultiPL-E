name: HumanEval_48_is_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
  aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
  zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n"
tests: "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
  \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
  aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
  xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
  xywzx\") == false);\n}\nvoid main(){}"
completions: ["{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.equal(text.dup.reverse);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++) \n    {\n        if (text[i] != text[len\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    return text == text.dup.reverse;\n}", "{\n    return text\
    \ == text.dup.reverse;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
