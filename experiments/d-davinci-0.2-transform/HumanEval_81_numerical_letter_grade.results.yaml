language: d
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpugvw7c9r.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpugvw7c9r.__unittest_L90_C1() [0x428799]\n??:?
    void tmpugvw7c9r.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0x62896554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n   \
    \     {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n       \
    \ else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n    \
    \    }\n        else if(grade > 2.7)\n        {\n            letter_grades ~=\
    \ \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n           \
    \ letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n\
    \            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n       \
    \ else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n     \
    \   }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"\
    D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2z2qlj7y.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a4d]\n??:? void tmp2z2qlj7y.__unittest_L90_C1() [0x4287a9]\n??:?
    void tmp2z2qlj7y.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e9c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e23]\n??:? _d_run_main [0x429d8e]\n??:? main [0x428ccb]\n??:?
    __libc_start_main [0xcb6c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpugvw7c9r.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpugvw7c9r.__unittest_L90_C1() [0x428799]\n??:?
    void tmpugvw7c9r.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0x62896554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n   \
    \     {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n       \
    \ else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n    \
    \    }\n        else if(grade > 2.7)\n        {\n            letter_grades ~=\
    \ \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n           \
    \ letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n\
    \            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n       \
    \ else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n     \
    \   }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"\
    D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\"\
    ;\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpk0eq6ejn.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpk0eq6ejn.__unittest_L90_C1() [0x428799]\n??:?
    void tmpk0eq6ejn.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0xbc3ac554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n   \
    \     {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n       \
    \ else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n    \
    \    }\n        else if(grade > 2.7)\n        {\n            letter_grades ~=\
    \ \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n           \
    \ letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n\
    \            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n       \
    \ else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n     \
    \   }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"\
    D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2z2qlj7y.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a4d]\n??:? void tmp2z2qlj7y.__unittest_L90_C1() [0x4287a9]\n??:?
    void tmp2z2qlj7y.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e9c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e23]\n??:? _d_run_main [0x429d8e]\n??:? main [0x428ccb]\n??:?
    __libc_start_main [0xcb6c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpugvw7c9r.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpugvw7c9r.__unittest_L90_C1() [0x428799]\n??:?
    void tmpugvw7c9r.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0x62896554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade\
    \ >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n\
    \            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n     \
    \       letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n          \
    \  letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"\
    C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n\
    \        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n     \
    \   else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else\
    \ if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade\
    \ >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i]\
    \ = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzfj3cn1d.d(68): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmpzfj3cn1d.__unittest_L64_C1() [0x428589]\n??:?
    void tmpzfj3cn1d.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x8a906554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpugvw7c9r.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpugvw7c9r.__unittest_L90_C1() [0x428799]\n??:?
    void tmpugvw7c9r.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0x62896554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade\
    \ >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n\
    \            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n     \
    \       letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n          \
    \  letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i]\
    \ = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"\
    C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n\
    \        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n     \
    \   else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else\
    \ if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade\
    \ >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i]\
    \ = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzfj3cn1d.d(68): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmpzfj3cn1d.__unittest_L64_C1() [0x428589]\n??:?
    void tmpzfj3cn1d.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x8a906554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade;\
    \ grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"\
    A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result\
    \ ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n           \
    \ result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n   \
    \         result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n      \
    \  {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n\
    \        {\n            result ~= \"B-\";\n        }\n        else if(grade >=\
    \ 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade\
    \ >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpey7e4p4k.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpey7e4p4k.__unittest_L90_C1() [0x428799]\n??:?
    void tmpey7e4p4k.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0xfef2a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n\
    \        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp06kvvm63.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp06kvvm63.__unittest_L90_C1() [0x428589]\n??:?
    void tmp06kvvm63.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0x769b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpugvw7c9r.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a3d]\n??:? void tmpugvw7c9r.__unittest_L90_C1() [0x428799]\n??:?
    void tmpugvw7c9r.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e8c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e13]\n??:? _d_run_main [0x429d7e]\n??:? main [0x428cbb]\n??:?
    __libc_start_main [0x62896554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you a list of GPAs\
    \ for some students and you have to write \n    a function that can output a list\
    \ of letter grades using the following table:\n             GPA       |    Letter\
    \ grade\n              4.0                A+\n            > 3.7              \
    \  A \n            > 3.3                A- \n            > 3.0               \
    \ B+\n            > 2.7                B \n            > 2.3                B-\n\
    \            > 2.0                C+\n            > 1.7                C\n   \
    \         > 1.3                C-\n            > 1.0                D+ \n    \
    \        > 0.7                D \n            > 0.0                D-\n      \
    \        0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n\
    \            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n         \
    \   letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i]\
    \ = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\"\
    ;\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else\
    \ if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n\
    \            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n         \
    \   letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i]\
    \ = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\"\
    ;\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else\
    \ if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n       \
    \     letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp01eefm2d.d(68): unittest failure\n----------------\n??:?
    _d_unittestp [0x42982d]\n??:? void tmp01eefm2d.__unittest_L64_C1() [0x428589]\n??:?
    void tmp01eefm2d.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c77]\n??:? _d_run_main [0x429be2]\n??:? main [0x428aab]\n??:?
    __libc_start_main [0xe4451554]\n1/1 unittests FAILED\n'''
  stdout: b''
