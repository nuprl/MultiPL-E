name: HumanEval_76_is_simple_power
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n    if\
    \ (n == 1)\n        return false;\n    if (x == 1)\n        return true;\n   \
    \ if (x == n)\n        return true;\n    if (x < n)\n        return false;\n \
    \   if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    long p = n;\n\
    \    while (p < x)\n    {\n        p *= n;\n        if (p == x) return true;\n\
    \    }\n    return false;\n}", "{\n    if (x == 1) return true;\n    if (n ==\
    \ 1) return false;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    long tmp = n;\n    while (tmp < x)\n    {\n        tmp *= n;\n        if\
    \ (tmp == x) return true;\n    }\n    return false;\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == 2)\n        return true;\n\
    \    if (n == 2)\n        return true;\n    if (x == 3)\n        return false;\n\
    \    if (n == 3)\n        return false;\n    if (x == 4)\n        return true;\n\
    \    if (n == 4)\n        return true;\n    if (x == 5)\n        return false;\n\
    \    if (n == 5)\n        return false;\n    if (x == 6)\n        return false;\n\
    \    if (n == 6)\n        return false;\n    if (x == 7)\n        return false;\n\
    \    if (n == 7)\n        return false;\n    if (x == 8)\n        return true;\n\
    \    if (n == 8)\n        return true;\n    if (x == 9)\n        return true;\n\
    \    if (n == 9)\n        return true;\n    if (x == 10)\n        return false;\n\
    \    if (n == 10)\n        return false;\n    if (x == 11)\n        return false;\n\
    \    if (n == 11)\n        return false;\n    if (x == 12)\n        return false;\n\
    \    if (n == 12)\n        return false;\n    if (x == 13)\n        return false;\n\
    \    if (n == 13)\n        return false;\n    if (x == 14)\n        return false;\n\
    \    if (n == 14)\n        return false;\n    if (x == 15)\n        return false;\n\
    \    if (n == 15)\n        return false;\n    if (x == 16)\n        return true;\n\
    \    if (n == 16)\n        return true;\n    if (x == 17)\n        return false;\n\
    \    if (n == 17)\n        return false;\n    if", "{\n    if (x == 1)\n     \
    \   return true;\n    if (n == 1)\n        return false;\n    if (x == n)\n  \
    \      return true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if\
    \ (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}", "{\n    if (n == 1)\n        return false;\n\
    \    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return\
    \ false;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    long nn = n;\n    while (nn < x)\n    {\n        nn *= n;\n    }\n    return\
    \ nn == x;\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (n == 0) return false;\n    if (x == 0)\
    \ return false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n\
    \    if (x == 2) return n == 2;\n    if (x == 3) return n == 3;\n    if (x ==\
    \ 4) return n == 2;\n    if (x == 5) return n == 5;\n    if (x == 6) return n\
    \ == 2 || n == 3;\n    if (x == 7) return n == 7;\n    if (x == 8) return n ==\
    \ 2;\n    if (x == 9) return n == 3;\n    if (x == 10) return n == 2 || n == 5;\n\
    \    if (x == 11) return n == 11;\n    if (x == 12) return n == 2 || n == 3;\n\
    \    if (x == 13) return n == 13;\n    if (x == 14) return n == 2 || n == 7;\n\
    \    if (x == 15) return n == 3 || n == 5;\n    if (x == 16) return n == 2;\n\
    \    if (x == 17) return n == 17;\n    if (x == 18) return n == 2 || n == 3;\n\
    \    if (x == 19) return n == 19;\n    if (x == 20) return n == 2 || n == 5;\n\
    \    if (x == 21) return n == 3 || n == 7;\n    if (x == 22) return n == 2 ||\
    \ n == 11;\n    if (x == 23) return n == 23;\n    if (x == 24) return n == 2 ||\
    \ n == 3;\n    if (x == 25) return n == 5;\n    if (x == 26) return n == 2 ||\
    \ n == 13;\n    if (x == 27) return n == 3;\n    if (x == 28) return n == 2 ||\
    \ n == 7;\n    if (x == 29) return n == 29;\n    if (x == 30) return n == 2 ||\
    \ n == 3 || n == 5;", "{\n    if (x == 1) return true;\n    if (n == 1) return\
    \ false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    long i = 2;\n    while (i\
    \ < x)\n    {\n        if (pow(n, i) == x)\n            return true;\n       \
    \ i++;\n    }\n    return false;\n}", "{\n    if (x == 1) return true;\n    if\
    \ (n == 1) return false;\n    if (x == n) return true;\n    if (x == n * n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (n == 0) return false;\n    if (x == 0) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (n == 1)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
