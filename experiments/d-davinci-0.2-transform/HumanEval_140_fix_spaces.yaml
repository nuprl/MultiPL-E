name: HumanEval_140_fix_spaces
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\"\
  \ Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\
  \n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\"\
  \ Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n"
tests: "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
  Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
  \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c;\
    \ text) \n    {\n        if(c == ' ') \n        {\n            if(space_found)\
    \ \n            {\n                result ~= '-';\n            } \n          \
    \  else \n            {\n                result ~= '_';\n                space_found\
    \ = true;\n            }\n        } \n        else \n        {\n            result\
    \ ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            count++;\n            if(count\
    \ == 1)\n            {\n                result ~= '_';\n            }\n      \
    \      else if(count == 2)\n            {\n                result ~= '_';\n  \
    \          }\n            else\n            {\n                result ~= '-';\n\
    \            }\n        }\n        else\n        {\n            count = 0;\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}", "{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    auto\
    \ result = text.split(\" \").filter!(a => a != \"\").join(\"_\");\n    return\
    \ result;\n}", "{\n    string result;\n    bool space = false;\n    foreach(c;\
    \ text) \n    {\n        if(c == ' ') \n        {\n            if(space) \n  \
    \          {\n                result ~= '-';\n            }\n            else\
    \ \n            {\n                result ~= '_';\n                space = true;\n\
    \            }\n        }\n        else \n        {\n            result ~= c;\n\
    \            space = false;\n        }\n    }\n    return result;\n}", "{\n  \
    \  string result = \"\";\n    bool space = false;\n    bool double_space = false;\n\
    \    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n\
    \            {\n                if(double_space)\n                {\n        \
    \            result ~= '-';\n                }\n                else\n       \
    \         {\n                    result ~= '_';\n                    double_space\
    \ = true;\n                }\n            }\n            else\n            {\n\
    \                result ~= '_';\n                space = true;\n            }\n\
    \        }\n        else\n        {\n            result ~= c;\n            space\
    \ = false;\n            double_space = false;\n        }\n    }\n    return result;\n\
    }", "{\n    // your code here\n    return text;\n}", "{\n    import std.algorithm\
    \ : replace;\n    import std.array : array;\n    import std.range : only;\n  \
    \  import std.string : stripLeft, stripRight;\n    import std.typecons : tuple;\n\
    \    import std.math : max;\n    import std.conv : to;\n    import std.stdio :\
    \ writeln;\n    import std.regex : regex, replace;\n    import std.range : take,\
    \ takeExactly, takeExactlyOne, takeOne, takeUntil, takeWhile, takeWhile!(fun),\
    \ takeWhile!(pred), takeWhile!(pred, fun), takeWhile!(pred, fun, R), takeWhile!(pred,\
    \ R), takeWhile!(R), takeWhile!(R, fun), takeWhile!(R, fun, pred), takeWhile!(R,\
    \ pred), takeWhile!(R, pred, fun), takeWhile!(R, R2), takeWhile!(R, R2, fun),\
    \ takeWhile!(R, R2, fun, pred), takeWhile!(R, R2, pred), takeWhile!(R, R2, pred,\
    \ fun), takeWhile!(R, R2, R3), takeWhile!(R, R2, R3, fun), takeWhile!(R, R2, R3,\
    \ fun, pred), takeWhile!(R, R2, R3, pred), takeWhile!(R, R2, R3, pred, fun), takeWhile!(R,\
    \ R2, R3, R4), takeWhile!(R, R2, R3, R4, fun), takeWhile!(R, R2, R3, R4, fun,\
    \ pred), takeWhile!(R, R2, R3, R4, pred), takeWhile!(R, R2, R3, R4, pred, fun),\
    \ takeWhile!(R, R2, R3, R4, R5), takeWhile!(R, R2, R3, R4, R5, fun), takeWhile!(R,\
    \ R2, R3, R4, R5, fun, pred), takeWhile!(R, R2, R3, R4, R5, pred), takeWhile!(R,\
    \ R2, R3, R4, R5", "{\n    import std.algorithm : replace;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : chunks;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n   ", "{\n    import std.algorithm : replace;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.conv : to;\n    import\
    \ std.string : toStringz;\n    import std.string : strip;\n    import std.typecons\
    \ : tuple;\n    import std.range : take;\n    import std.range : drop;\n    import\
    \ std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range\
    \ : takeExactly;\n    import std.range : dropExactly;\n    import std.range :\
    \ takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n\
    \    import std.range : dropExactly;\n    import std.range : takeExactly;\n  \
    \  import std.range : dropExactly;\n    import std.range : takeExactly;\n    import\
    \ std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range\
    \ : dropExactly;\n    import std.range : takeExactly;\n    import std.range :\
    \ dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n\
    \    import std.range : takeExactly;\n    import std.range : dropExactly;\n  \
    \  import std.range : takeExactly;\n    import std.range : dropExactly;\n    import\
    \ std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range\
    \ : takeExactly;\n    import std.range : dropExactly;\n    import std.range :\
    \ takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n\
    \    import std.range : dropExactly;\n    import std.range : takeExactly;\n  \
    \  import std.range : dropExactly;\n    import std.range : takeExactly;\n    import\
    \ std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range\
    \ : dropExactly;\n    import std.range : takeExactly;\n    import std.range :\
    \ dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n\
    \    import std.range : takeExactly;\n    import std.range : dropExactly;\n  \
    \  import std", "{\n    string result;\n    int spaces = 0;\n    foreach(c; text)\n\
    \    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces\
    \ == 2)\n            {\n                result ~= '-';\n            }\n      \
    \  }\n        else\n        {\n            if(spaces == 1)\n            {\n  \
    \              result ~= '_';\n            }\n            spaces = 0;\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = text.split(\" \");\n    string result = \"\";\n    foreach(string word;\
    \ words)\n    {\n        if(word.length > 0)\n        {\n            result ~=\
    \ word;\n            result ~= \"_\";\n        }\n    }\n    return result;\n}",
  "{\n    import std.algorithm : replace;\n    import std.array : array;\n    import\
    \ std.range : chunks;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.typecons : tuple;\n    import std.math : max;\n    import std.range\
    \ : take;\n    import std.range : drop;\n    import std.range : zip;\n    import\
    \ std.range : iota;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import", "{\n    string result = \"\";\n    bool prev_space =\
    \ false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n   \
    \     if(c == ' ')\n        {\n            if(prev_space)\n            {\n   \
    \             if(prev_prev_space)\n                {\n                    result\
    \ ~= '-';\n                }\n                else\n                {\n      \
    \              result ~= '_';\n                }\n            }\n            else\n\
    \            {\n                result ~= '_';\n            }\n            prev_prev_space\
    \ = prev_space;\n            prev_space = true;\n        }\n        else\n   \
    \     {\n            result ~= c;\n            prev_prev_space = prev_space;\n\
    \            prev_space = false;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    bool first_space = true;\n    bool consecutive_spaces\
    \ = false;\n    foreach(ch; text)\n    {\n        if(ch == ' ')\n        {\n \
    \           if(first_space)\n            {\n                first_space = false;\n\
    \                continue;\n            }\n            if(consecutive_spaces)\n\
    \            {\n                continue;\n            }\n            consecutive_spaces\
    \ = true;\n            result ~= '-';\n        }\n        else\n        {\n  \
    \          consecutive_spaces = false;\n            result ~= ch;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    int spaces\
    \ = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n       \
    \     spaces++;\n            if(spaces > 2)\n            {\n                result\
    \ ~= \"-\";\n                spaces = 0;\n            }\n            else\n  \
    \          {\n                result ~= \"_\";\n            }\n        }\n   \
    \     else\n        {\n            result ~= c;\n            spaces = 0;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    bool\
    \ space_found = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n\
    \        {\n            if(space_found)\n            {\n                result\
    \ ~= \"-\";\n            }\n            else\n            {\n                result\
    \ ~= \"_\";\n            }\n            space_found = true;\n        }\n     \
    \   else\n        {\n            result ~= c;\n            space_found = false;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    bool space\
    \ = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == '\
    \ ')\n        {\n            if(space)\n            {\n                count++;\n\
    \            }\n            else\n            {\n                space = true;\n\
    \                count = 1;\n            }\n        }\n        else\n        {\n\
    \            if(space)\n            {\n                if(count > 2)\n       \
    \         {\n                    result ~= '-';\n                }\n         \
    \       else\n                {\n                    result ~= '_';\n        \
    \        }\n                space = false;\n            }\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n  \
    \      {\n            spaces++;\n            if(spaces == 2)\n            {\n\
    \                result ~= '-';\n            }\n        }\n        else\n    \
    \    {\n            if(spaces == 1)\n            {\n                result ~=\
    \ '_';\n            }\n            result ~= c;\n            spaces = 0;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    int\
    \ count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n \
    \           count++;\n            if(count == 1)\n            {\n            \
    \    result ~= '_';\n            }\n            else if(count == 2)\n        \
    \    {\n                result ~= '-';\n            }\n        }\n        else\n\
    \        {\n            result ~= c;\n            count = 0;\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = text.replace(\" \", \"_\");\n \
    \   result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\"\
    , \"-\");\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
