language: d
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix))();\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n  \
    \  []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).idup;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix6(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_\nunittest\n{\n  \
    \  alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") ==\
    \ []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz7j2vyg4.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz7j2vyg4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n \n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix_2(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_3([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix_3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n}\n/*\n    >>>\
    \ filter_by_prefix_5([], \"a\")\n    []\n    >>> filter_by_prefix_5([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.array.idup;\n}\n/*\n    >>> filter_by_prefix_6([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_6([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5gpewy8.d(13): Error: no property `filter` for type `string[]`\n/tmp/tmpi5gpewy8.d(25):
    Error: no property `filter` for type `string[]`\n/tmp/tmpi5gpewy8.d(36): Error:
    no property `filter` for type `string[]`\n/tmp/tmpi5gpewy8.d(47): Error: no property
    `filter` for type `string[]`\n/tmp/tmpi5gpewy8.d(58): Error: no property `filter`
    for type `string[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5gpewy8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   \nunittest\n{\n   \
    \ alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") ==\
    \ []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6g3s1v5x.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6g3s1v5x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n\
    \    >>> filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1i0mc8c.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx1i0mc8c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).arrayof;\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).arrayof!();\n}\n\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt03jzzeg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_3([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).arrayof;\n}\n/*\n    >>> filter_by_prefix_5([], \"\
    a\")\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayOf;\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuu8lrmr7.d(64): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpuu8lrmr7.d(65): Error: found \''{\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpuu8lrmr7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] filtered = [];\n    foreach(string\
    \ s; strings)\n    {\n        if(s.startsWith(prefix))\n        {\n          \
    \  filtered ~= s;\n        }\n    }\n    return filtered;\n}\nunittest\n{\n  \
    \  alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") ==\
    \ []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5wqwl8a4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph837of17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> filter_by_prefix([], \"\
    a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix2(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnomx6ek.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_3([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_5([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp97xpput0.d(64): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmp97xpput0.d(65): Error: found \''{\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp97xpput0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> filter_by_prefix_2([], \"\
    a\")\n    []\n    >>> filter_by_prefix_2([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_3([], \"a\")\n    []\n    >>> filter_by_prefix_3([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_3(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_4([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_4([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_4(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_5([], \"a\")\n    []\n    >>> filter_by_prefix_5([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_5(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.sort;\n}\n/*\n    >>> filter_by_prefix_6([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_6([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcro9ccn2.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcro9ccn2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph837of17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnibl1zhi.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnibl1zhi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   \nunittest\n{\n   \
    \ alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") ==\
    \ []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6g3s1v5x.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6g3s1v5x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix))();\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5spm8lqi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw29cn7fy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwbxngc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptboujfld.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph837of17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph837of17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnibl1zhi.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnibl1zhi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix_3([], \"\
    a\")\n    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix_5([], \"\
    a\")\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4awc_i1x.d(64): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmp4awc_i1x.d(65): Error: found \''{\'' when expecting
    \'')\'' following template argument list\n/tmp/tmp4awc_i1x.d(66): Error: found
    \''alias\'' when expecting \'';\'' following return statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4awc_i1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_prefix([], \"a\"\
    )\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n    >>> filter_by_\nunittest\n{\n\
    \    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5u5erfo2.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5u5erfo2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.sort;\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.retro;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq7mw0hrr.d(64): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpq7mw0hrr.d(65): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq7mw0hrr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_2([], \"a\")\n    []\n    >>> filter_by_prefix_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix))();\n}\n/*\n    >>> filter_by_prefix_3([], \"a\")\n\
    \    []\n    >>> filter_by_prefix_3([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_4([], \"a\")\n    []\n    >>> filter_by_prefix_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_5([], \"a\"\
    )\n    []\n    >>> filter_by_prefix_5([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix_6([], \"a\")\n    []\n    >>> filter_by_prefix_6([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.filter!(\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgfhpfdxh.d(64): Error: expression expected, not \''unittest\''\n/tmp/tmpgfhpfdxh.d(65):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpgfhpfdxh.d(66):
    Error: found \''alias\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfhpfdxh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> filter_by_prefix_lambda([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_lambda([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_lambda(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix_lambda_2([], \"a\")\n    []\n    >>> filter_by_prefix_lambda_2([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_lambda_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix_lambda_3([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix_lambda_3([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_lambda_3(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix_lambda_4([], \"a\")\n    []\n    >>> filter_by_prefix_lambda_4([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_lambda_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.array;\n}\n/*\n    >>> filter_by_prefix_lambda_5([],\
    \ \"a\")\n    []\n    >>> filter_by\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmrbaavfh.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmrbaavfh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n   \nunittest\n{\n   \
    \ alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") ==\
    \ []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6g3s1v5x.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6g3s1v5x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix))();\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n  \
    \  []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix_5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix_6(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppceiwe_a.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppceiwe_a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\n\
    \    {\n        if(s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxtnowzf_.d(16): Error: no property `startsWith` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtnowzf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwbxngc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(x => x.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqcel9p_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph837of17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find the first element in a list that matches a predicate.\n    >>>\
    \ find_first([], (x) => true)\n    null\n    >>> find_first([1, 2, 3], (x) =>\
    \ x == 2)\n    2\n    >>> find_first([1, 2, 3], (x) => x == 4)\n    null\n \n\
    */\nT find_first!(T)(T[] arr, bool delegate(T) pred) \n{\n    return arr.find!(pred);\n\
    }\n/*\n \n Find\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxr1qqfbd.d(26): Error: semicolon expected, not \''!\''\n/tmp/tmpxr1qqfbd.d(26):
    Error: Declaration expected, not \''!\''\n/tmp/tmpxr1qqfbd.d(29): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr1qqfbd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach(string s; strings)\
    \ \n    {\n        if (s.startsWith(prefix)) \n        {\n            result ~=\
    \ s;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96srac3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix2(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array;\n}\n/*\n    >>> filter_by_prefix([], \"a\")\n\
    \    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix3(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix4(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix)).array.idup.array;\n}\n/*\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix5(string[] strings,\
    \ string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n*/\nstring[]\
    \ filter_by_prefix6(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpifgzug2w.d(64): Error: expression expected, not \''unittest\''\n/tmp/tmpifgzug2w.d(65):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpifgzug2w.d(66): Error: expression
    expected, not \''alias\''\n/tmp/tmpifgzug2w.d(66): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpifgzug2w.d(66): Error: expression expected, not
    \''=\''\n/tmp/tmpifgzug2w.d(66): Error: found \''filter_by_prefix\'' when expecting
    \'',\''\n/tmp/tmpifgzug2w.d(66): Error: expression expected, not \'';\''\n/tmp/tmpifgzug2w.d(68):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpifgzug2w.d(68): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpifgzug2w.d(69): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpifgzug2w.d(70): Error: expression expected, not
    \''}\''\n/tmp/tmpifgzug2w.d(71): Error: found \''void\'' when expecting \'',\''\n/tmp/tmpifgzug2w.d(71):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpifgzug2w.d(71): Error: expression
    expected, not \''}\''\n/tmp/tmpifgzug2w.d(71): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpifgzug2w.d(71): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpifgzug2w.d(71):
    Error: found \''EOF\'' when expecting \'')\'' following template argument list\n/tmp/tmpifgzug2w.d(71):
    Error: found \''EOF\'' when expecting \'';\'' following return statement\n/tmp/tmpifgzug2w.d(71):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifgzug2w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n    >>> filter_by_prefix_and_length([], \"a\", 3)\n    []\n    >>> filter_by_prefix_and_length([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3)\n    [\"abc\"]\n*/\nstring[] filter_by_prefix_and_length(string[]\
    \ strings, string prefix, size_t length) \n{\n    return filter!(s => s.startsWith(prefix)\
    \ && s.length == length)(strings);\n}\n/*\n    >>> filter_by_prefix_and_length_and_contains([],\
    \ \"a\", 3, \"r\")\n    []\n    >>> filter_by_prefix_and_length_and_contains([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3, \"r\")\n    []\n    >>> filter_by_prefix_and_length_and_contains([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 5, \"r\")\n    [\"array\"]\n*/\nstring[]\
    \ filter_by_prefix_and_length_and_contains(string[] strings, string prefix, size_t\
    \ length, string contains) \n{\n    return filter!(s => s.startsWith(prefix) &&\
    \ s.length == length && s.contains(contains))(strings);\n}\n/*\n    >>> filter_by_prefix_and_length_and_contains_and_ends_with([],\
    \ \"a\", 3, \"r\", \"y\")\n    []\n    >>> filter_by_prefix_and_length_and_contains_and_ends_with([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", 3, \"r\", \"y\")\n    []\n    >>>\
    \ filter_by_prefix_and_length_and_contains_and_ends_with([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\", 5, \"r\", \"y\")\n    [\"array\"]\n*/\nstring[] filter_by_prefix_and_length_and_contains_and_ends_with(string[]\
    \ strings,\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qdp4fja.d(46): Error: basic type expected, not unittest\n/tmp/tmp8qdp4fja.d(46):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8qdp4fja.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpflxitvsx.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflxitvsx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwbxngc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793689
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxj5cexe.d(13): Error: template instance `filter!((s) => s.startsWith(prefix))`
    template `filter` is not defined\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxj5cexe.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([],\
    \ \"a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhmnnthp.d(13): Error: no property `filter` for type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhmnnthp.d", "-I/tmp"]\n'''
  stdout: b''
