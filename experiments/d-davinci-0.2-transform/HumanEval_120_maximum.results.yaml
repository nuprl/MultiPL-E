language: d
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = arr[0];\n    long min = arr[0];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n        if (arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n    }\n    long[] count = new long[max - min + 1];\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        count[arr[i] - min]++;\n    }\n  \
    \  for (int i = 1; i < count.length; i++)\n    {\n        count[i] += count[i\
    \ - 1];\n    }\n    for (int i = arr.length - 1; i >= 0; i--)\n    {\n       \
    \ temp[count[arr[i] - min] - 1] = arr[i];\n        count[arr[i] - min]--;\n  \
    \  }\n    for (int i = 0; i < k; i++)\n    {\n        result[i] = temp[arr.length\
    \ - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0zuhriru.d(54): Error: cannot implicitly convert expression
    `arr.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0zuhriru.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int i = 0;\n    int j = 0;\n\
    \    while (i < k)\n    {\n        result[i] = arr[j];\n        i++;\n       \
    \ j++;\n    }\n    sort(result);\n    while (j < arr.length)\n    {\n        if\
    \ (arr[j] > result[0])\n        {\n            result[0] = arr[j];\n         \
    \   sort(result);\n        }\n        j++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzecm3ox.d(39): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpkzecm3ox.d(45): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzecm3ox.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int index = 0;\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        long max = -1001L;\n        for (int j =\
    \ 0; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n        \
    \    {\n                max = arr[j];\n                index = j;\n          \
    \  }\n        }\n        result[i] = max;\n        arr[index] = -1001L;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvb49shxg.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a25]\n??:? void tmpvb49shxg.__unittest_L48_C1() [0x42801f]\n??:?
    void tmpvb49shxg.__modtest() [0x4287a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b96d]\n??:? runModuleUnitTests [0x42c8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ee8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e6f]\n??:? _d_run_main [0x428dda]\n??:? main [0x4287bb]\n??:?
    __libc_start_main [0x287cb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int count = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (count < k)\n        {\n    \
    \        result[count] = arr[i];\n            count++;\n        }\n        else\n\
    \        {\n            long min = result[0];\n            int minIndex = 0;\n\
    \            for (int j = 1; j < result.length; j++)\n            {\n        \
    \        if (result[j] < min)\n                {\n                    min = result[j];\n\
    \                    minIndex = j;\n                }\n            }\n       \
    \     if (arr[i] > min)\n            {\n                result[minIndex] = arr[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp563rvk0w.d(63): unittest failure\n----------------\n??:?
    _d_unittestp [0x428acd]\n??:? void tmp563rvk0w.__unittest_L59_C1() [0x4280c3]\n??:?
    void tmp563rvk0w.__modtest() [0x42884c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430cc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431178]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430c55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ba15]\n??:? runModuleUnitTests [0x42c981]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f90]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428f17]\n??:? _d_run_main [0x428e82]\n??:? main [0x42885f]\n??:?
    __libc_start_main [0xaab36554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[temp.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexymlh01.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexymlh01.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return new long[0];\n    if (k == arr.length)\n\
    \        return arr;\n    long[] result = new long[k];\n    for (int i = 0; i\
    \ < k; i++)\n        result[i] = arr[i];\n    sort(result);\n    for (int i =\
    \ k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd7drh0zu.d(37): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpd7drh0zu.d(38): Error: cannot implicitly convert
    expression `k` of type `long` to `int`\n/tmp/tmpd7drh0zu.d(43): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpd7drh0zu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] arr_copy = arr.dup;\n\
    \    arr_copy.sort;\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = arr_copy[arr_copy.length - 1 - i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp890iqaxj.d(32): Error: no property `sort` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp890iqaxj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpevq4fy37.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a5d]\n??:? void tmpevq4fy37.__unittest_L51_C1() [0x428057]\n??:?
    void tmpevq4fy37.__modtest() [0x4287e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431108]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430be5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b9a5]\n??:? runModuleUnitTests [0x42c911]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ea7]\n??:? _d_run_main [0x428e12]\n??:? main [0x4287f3]\n??:?
    __libc_start_main [0xfbb92554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        temp[i] = v;\n    }\n    sort(temp);\n\
    \    foreach(i, v; temp)\n    {\n        if(i < k)\n        {\n            result[i]\
    \ = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp118za3c9.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp118za3c9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1000000;\n        for (long j = 0; j < arr.length; j++)\n\
    \        {\n            if (arr[j] > max)\n            {\n                max\
    \ = arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1000000;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgygqudec.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpgygqudec.__unittest_L50_C1() [0x428037]\n??:?
    void tmpgygqudec.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0x1af61554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        for (long j = 0; j < arr.length; j++)\n        {\n            if\
    \ (arr[j] > max)\n            {\n                max = arr[j];\n             \
    \   index = j;\n            }\n        }\n        result[i] = max;\n        arr[index]\
    \ = -1001;\n        max = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm0cje029.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpm0cje029.__unittest_L50_C1() [0x428037]\n??:?
    void tmpm0cje029.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0xcdec9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] tmp = new long[k];\n\
    \    long[] tmp2 = new long[k];\n    long[] tmp3 = new long[k];\n    long[] tmp4\
    \ = new long[k];\n    long[] tmp5 = new long[k];\n    long[] tmp6 = new long[k];\n\
    \    long[] tmp7 = new long[k];\n    long[] tmp8 = new long[k];\n    long[] tmp9\
    \ = new long[k];\n    long[] tmp10 = new long[k];\n    long[] tmp11 = new long[k];\n\
    \    long[] tmp12 = new long[k];\n    long[] tmp13 = new long[k];\n    long[]\
    \ tmp14 = new long[k];\n    long[] tmp15 = new long[k];\n    long[] tmp16 = new\
    \ long[k];\n    long[] tmp17 = new long[k];\n    long[] tmp18 = new long[k];\n\
    \    long[] tmp19 = new long[k];\n    long[] tmp20 = new long[k];\n    long[]\
    \ tmp21 = new long[k];\n    long[] tmp22 = new long[k];\n    long[] tmp23 = new\
    \ long[k];\n    long[] tmp24 = new long[k];\n    long[] tmp25 = new long[k];\n\
    \    long[] tmp26 = new long[k];\n    long[] tmp27 = new long[k];\n    long[]\
    \ tmp28 = new long[k];\n    long[] tmp29 = new long[k];\n    long[] tmp30 = new\
    \ long[k];\n    long[] tmp31 = new long[k];\n    long[] tmp32 = new long[k];\n\
    \    long[] tmp33 = new long[k];\n    long[] tmp34 = new long[k];\n    long[]\
    \ tmp35 = new long[k];\n    long[] tmp36 = new long[k];\n    long[] tmp37 = new\
    \ long[k];\n    long[] tmp38 = new long[k];\n    long[] tmp39 = new long[k];\n\
    \    long[] tmp40 = new long[k];\n    long[] tmp41 = new long[k];\n    long[]\
    \ tmp42 = new\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9zs0z2p4.d(73): Error: basic type expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zs0z2p4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       res[i] = temp[arr.length - 1 - i];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa6s8b853.d(33): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6s8b853.d",
    "-I/tmp"]\n'''
  stdout: b''
