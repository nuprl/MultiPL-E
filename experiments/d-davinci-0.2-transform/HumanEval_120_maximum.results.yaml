language: d
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = arr[0];\n    long min = arr[0];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n        if (arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n    }\n    long[] count = new long[max - min + 1];\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        count[arr[i] - min]++;\n    }\n  \
    \  for (int i = 1; i < count.length; i++)\n    {\n        count[i] += count[i\
    \ - 1];\n    }\n    for (int i = arr.length - 1; i >= 0; i--)\n    {\n       \
    \ temp[count[arr[i] - min] - 1] = arr[i];\n        count[arr[i] - min]--;\n  \
    \  }\n    for (int i = 0; i < k; i++)\n    {\n        result[i] = temp[arr.length\
    \ - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0zuhriru.d(54): Error: cannot implicitly convert expression
    `arr.length - 1LU` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0zuhriru.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int i = 0;\n    int j = 0;\n\
    \    while (i < k)\n    {\n        result[i] = arr[j];\n        i++;\n       \
    \ j++;\n    }\n    sort(result);\n    while (j < arr.length)\n    {\n        if\
    \ (arr[j] > result[0])\n        {\n            result[0] = arr[j];\n         \
    \   sort(result);\n        }\n        j++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzecm3ox.d(39): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpkzecm3ox.d(45): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzecm3ox.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int index = 0;\n    for (int\
    \ i = 0; i < k; i++)\n    {\n        long max = -1001L;\n        for (int j =\
    \ 0; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n        \
    \    {\n                max = arr[j];\n                index = j;\n          \
    \  }\n        }\n        result[i] = max;\n        arr[index] = -1001L;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvb49shxg.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a25]\n??:? void tmpvb49shxg.__unittest_L48_C1() [0x42801f]\n??:?
    void tmpvb49shxg.__modtest() [0x4287a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b96d]\n??:? runModuleUnitTests [0x42c8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ee8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e6f]\n??:? _d_run_main [0x428dda]\n??:? main [0x4287bb]\n??:?
    __libc_start_main [0x287cb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int count = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (count < k)\n        {\n    \
    \        result[count] = arr[i];\n            count++;\n        }\n        else\n\
    \        {\n            long min = result[0];\n            int minIndex = 0;\n\
    \            for (int j = 1; j < result.length; j++)\n            {\n        \
    \        if (result[j] < min)\n                {\n                    min = result[j];\n\
    \                    minIndex = j;\n                }\n            }\n       \
    \     if (arr[i] > min)\n            {\n                result[minIndex] = arr[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp563rvk0w.d(63): unittest failure\n----------------\n??:?
    _d_unittestp [0x428acd]\n??:? void tmp563rvk0w.__unittest_L59_C1() [0x4280c3]\n??:?
    void tmp563rvk0w.__modtest() [0x42884c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430cc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431178]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430c55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ba15]\n??:? runModuleUnitTests [0x42c981]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f90]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428f17]\n??:? _d_run_main [0x428e82]\n??:? main [0x42885f]\n??:?
    __libc_start_main [0xaab36554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[temp.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexymlh01.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexymlh01.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return new long[0];\n    if (k == arr.length)\n\
    \        return arr;\n    long[] result = new long[k];\n    for (int i = 0; i\
    \ < k; i++)\n        result[i] = arr[i];\n    sort(result);\n    for (int i =\
    \ k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd7drh0zu.d(37): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpd7drh0zu.d(38): Error: cannot implicitly convert
    expression `k` of type `long` to `int`\n/tmp/tmpd7drh0zu.d(43): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpd7drh0zu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] arr_copy = arr.dup;\n\
    \    arr_copy.sort;\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = arr_copy[arr_copy.length - 1 - i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp890iqaxj.d(32): Error: no property `sort` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp890iqaxj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpevq4fy37.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a5d]\n??:? void tmpevq4fy37.__unittest_L51_C1() [0x428057]\n??:?
    void tmpevq4fy37.__modtest() [0x4287e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431108]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430be5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b9a5]\n??:? runModuleUnitTests [0x42c911]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ea7]\n??:? _d_run_main [0x428e12]\n??:? main [0x4287f3]\n??:?
    __libc_start_main [0xfbb92554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        temp[i] = v;\n    }\n    sort(temp);\n\
    \    foreach(i, v; temp)\n    {\n        if(i < k)\n        {\n            result[i]\
    \ = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp118za3c9.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp118za3c9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1000000;\n        for (long j = 0; j < arr.length; j++)\n\
    \        {\n            if (arr[j] > max)\n            {\n                max\
    \ = arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1000000;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgygqudec.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpgygqudec.__unittest_L50_C1() [0x428037]\n??:?
    void tmpgygqudec.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0x1af61554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        for (long j = 0; j < arr.length; j++)\n        {\n            if\
    \ (arr[j] > max)\n            {\n                max = arr[j];\n             \
    \   index = j;\n            }\n        }\n        result[i] = max;\n        arr[index]\
    \ = -1001;\n        max = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm0cje029.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpm0cje029.__unittest_L50_C1() [0x428037]\n??:?
    void tmpm0cje029.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0xcdec9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] tmp = new long[k];\n\
    \    long[] tmp2 = new long[k];\n    long[] tmp3 = new long[k];\n    long[] tmp4\
    \ = new long[k];\n    long[] tmp5 = new long[k];\n    long[] tmp6 = new long[k];\n\
    \    long[] tmp7 = new long[k];\n    long[] tmp8 = new long[k];\n    long[] tmp9\
    \ = new long[k];\n    long[] tmp10 = new long[k];\n    long[] tmp11 = new long[k];\n\
    \    long[] tmp12 = new long[k];\n    long[] tmp13 = new long[k];\n    long[]\
    \ tmp14 = new long[k];\n    long[] tmp15 = new long[k];\n    long[] tmp16 = new\
    \ long[k];\n    long[] tmp17 = new long[k];\n    long[] tmp18 = new long[k];\n\
    \    long[] tmp19 = new long[k];\n    long[] tmp20 = new long[k];\n    long[]\
    \ tmp21 = new long[k];\n    long[] tmp22 = new long[k];\n    long[] tmp23 = new\
    \ long[k];\n    long[] tmp24 = new long[k];\n    long[] tmp25 = new long[k];\n\
    \    long[] tmp26 = new long[k];\n    long[] tmp27 = new long[k];\n    long[]\
    \ tmp28 = new long[k];\n    long[] tmp29 = new long[k];\n    long[] tmp30 = new\
    \ long[k];\n    long[] tmp31 = new long[k];\n    long[] tmp32 = new long[k];\n\
    \    long[] tmp33 = new long[k];\n    long[] tmp34 = new long[k];\n    long[]\
    \ tmp35 = new long[k];\n    long[] tmp36 = new long[k];\n    long[] tmp37 = new\
    \ long[k];\n    long[] tmp38 = new long[k];\n    long[] tmp39 = new long[k];\n\
    \    long[] tmp40 = new long[k];\n    long[] tmp41 = new long[k];\n    long[]\
    \ tmp42 = new\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9zs0z2p4.d(73): Error: basic type expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zs0z2p4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       res[i] = temp[arr.length - 1 - i];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa6s8b853.d(33): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6s8b853.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = sort(arr);\n\
    \    long[] reversed = reverse(sorted);\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        result[i] = reversed[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpure3xrnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n  \
    \      result[i] = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptqqif2v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        for (long j = 0; j < arr.length; j++)\n \
    \       {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -10001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpglii9szv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long max = 0;\n    long max2 =\
    \ 0;\n    long max3 = 0;\n    long max4 = 0;\n    long max5 = 0;\n    long max6\
    \ = 0;\n    long max7 = 0;\n    long max8 = 0;\n    long max9 = 0;\n    long max10\
    \ = 0;\n    long max11 = 0;\n    long max12 = 0;\n    long max13 = 0;\n    long\
    \ max14 = 0;\n    long max15 = 0;\n    long max16 = 0;\n    long max17 = 0;\n\
    \    long max18 = 0;\n    long max19 = 0;\n    long max20 = 0;\n    long max21\
    \ = 0;\n    long max22 = 0;\n    long max23 = 0;\n    long max24 = 0;\n    long\
    \ max25 = 0;\n    long max26 = 0;\n    long max27 = 0;\n    long max28 = 0;\n\
    \    long max29 = 0;\n    long max30 = 0;\n    long max31 = 0;\n    long max32\
    \ = 0;\n    long max33 = 0;\n    long max34 = 0;\n    long max35 = 0;\n    long\
    \ max36 = 0;\n    long max37 = 0;\n    long max38 = 0;\n    long max39 = 0;\n\
    \    long max40 = 0;\n    long max41 = 0;\n    long max42 = 0;\n    long max43\
    \ = 0;\n    long max44 = 0;\n    long max45 = 0;\n    long max46 = 0;\n    long\
    \ max47 = 0;\n    long max48 = 0;\n    long max49 = 0;\n    long max50 = 0;\n\
    \    long max51 = 0;\n    long max52 = 0;\n    long max53 = 0;\n    long max54\
    \ = 0;\n    long max55 = 0;\n    long max56 = 0;\n    long max57 = 0;\n    long\
    \ max58 = 0;\n    long max59 = 0;\n\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp48mi_zs3.d(93): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48mi_zs3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr.dup;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n\
    \        result[i] = temp[arr.length - i - 1];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e_hhp7d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxe2iriq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = arr.dup;\n\
    \    sorted.sort;\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = sorted[$ - i - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikot2l3l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstv66wql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long temp_size = 0;\n    long result_size = 0;\n    long max = 0;\n    long\
    \ max_index = 0;\n    long i = 0;\n    while (result_size < k)\n    {\n      \
    \  max = arr[i];\n        max_index = i;\n        for (long j = i; j < arr.length;\
    \ j++)\n        {\n            if (arr[j] > max)\n            {\n            \
    \    max = arr[j];\n                max_index = j;\n            }\n        }\n\
    \        result[result_size] = max;\n        result_size++;\n        temp[temp_size]\
    \ = arr[i];\n        temp_size++;\n        arr[i] = arr[max_index];\n        arr[max_index]\
    \ = temp[temp_size - 1];\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vh5gjik.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long[] temp = new long[k];\n    long[] temp2\
    \ = new long[k];\n    long[] temp3 = new long[k];\n    long[] temp4 = new long[k];\n\
    \    long[] temp5 = new long[k];\n    long[] temp6 = new long[k];\n    long[]\
    \ temp7 = new long[k];\n    long[] temp8 = new long[k];\n    long[] temp9 = new\
    \ long[k];\n    long[] temp10 = new long[k];\n    long[] temp11 = new long[k];\n\
    \    long[] temp12 = new long[k];\n    long[] temp13 = new long[k];\n    long[]\
    \ temp14 = new long[k];\n    long[] temp15 = new long[k];\n    long[] temp16 =\
    \ new long[k];\n    long[] temp17 = new long[k];\n    long[] temp18 = new long[k];\n\
    \    long[] temp19 = new long[k];\n    long[] temp20 = new long[k];\n    long[]\
    \ temp21 = new long[k];\n    long[] temp22 = new long[k];\n    long[] temp23 =\
    \ new long[k];\n    long[] temp24 = new long[k];\n    long[] temp25 = new long[k];\n\
    \    long[] temp26 = new long[k];\n    long[] temp27 = new long[k];\n    long[]\
    \ temp28 = new long[k];\n    long[] temp29 = new long[k];\n    long[] temp30 =\
    \ new long[k];\n    long[] temp31 = new long[k];\n    long[] temp32 = new long[k];\n\
    \    long[] temp33 = new long[k];\n    long[] temp34 = new long[k];\n    long[]\
    \ temp35 = new long[k];\n    long[] temp36 = new long[k];\n    long[] temp37 =\
    \ new long[k];\n    long[] temp38 = new long[k];\n    long[] temp39 = new long[k];\n\
    \    long[] temp40 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0jp9j38.d(73): Error: expression expected, not \''unittest\''\n/tmp/tmpp0jp9j38.d(74):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpp0jp9j38.d(75): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0jp9j38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > 0)\n        {\n            temp[index] = arr[i];\n            index++;\n\
    \        }\n    }\n    temp = temp[0..index];\n    temp.sort();\n    temp.reverse();\n\
    \    for (int i = 0; i < k; i++)\n    {\n        result[i] = temp[i];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kvi1spv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        temp[i] = v;\n    }\n    sort(temp);\n\
    \    foreach(i, v; temp)\n    {\n        if(i < k)\n        {\n            result[i]\
    \ = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp118za3c9.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp118za3c9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > 0)\n        {\n            temp[index] = arr[i];\n            index++;\n\
    \        }\n    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n \
    \       result[i] = temp[index - 1 - i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu3ufzbq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long[] temp = new long[k];\n    long[] temp2\
    \ = new long[k];\n    long[] temp3 = new long[k];\n    long[] temp4 = new long[k];\n\
    \    long[] temp5 = new long[k];\n    long[] temp6 = new long[k];\n    long[]\
    \ temp7 = new long[k];\n    long[] temp8 = new long[k];\n    long[] temp9 = new\
    \ long[k];\n    long[] temp10 = new long[k];\n    long[] temp11 = new long[k];\n\
    \    long[] temp12 = new long[k];\n    long[] temp13 = new long[k];\n    long[]\
    \ temp14 = new long[k];\n    long[] temp15 = new long[k];\n    long[] temp16 =\
    \ new long[k];\n    long[] temp17 = new long[k];\n    long[] temp18 = new long[k];\n\
    \    long[] temp19 = new long[k];\n    long[] temp20 = new long[k];\n    long[]\
    \ temp21 = new long[k];\n    long[] temp22 = new long[k];\n    long[] temp23 =\
    \ new long[k];\n    long[] temp24 = new long[k];\n    long[] temp25 = new long[k];\n\
    \    long[] temp26 = new long[k];\n    long[] temp27 = new long[k];\n    long[]\
    \ temp28 = new long[k];\n    long[] temp29 = new long[k];\n    long[] temp30 =\
    \ new long[k];\n    long[] temp31 = new long[k];\n    long[] temp32 = new long[k];\n\
    \    long[] temp33 = new long[k];\n    long[] temp34 = new long[k];\n    long[]\
    \ temp35 = new long[k];\n    long[] temp36 = new long[k];\n    long[] temp37 =\
    \ new long[k];\n    long[] temp38 = new long[k];\n    long[] temp39 = new long[k];\n\
    \    long[] temp40 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0jp9j38.d(73): Error: expression expected, not \''unittest\''\n/tmp/tmpp0jp9j38.d(74):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpp0jp9j38.d(75): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0jp9j38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44yc6rhb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] maxHeap = new long[k];\n\
    \    long maxHeapSize = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(maxHeapSize\
    \ < k)\n        {\n            maxHeap[maxHeapSize] = arr[i];\n            maxHeapSize++;\n\
    \            if(maxHeapSize == k)\n            {\n                maxHeap.sort();\n\
    \            }\n        }\n        else\n        {\n            if(arr[i] > maxHeap[0])\n\
    \            {\n                maxHeap[0] = arr[i];\n                maxHeap.sort();\n\
    \            }\n        }\n    }\n    return maxHeap;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6p9y85l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort();\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = arr2[arr2.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyf9kj3a0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1000;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ugjhk_l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] heap = new long[k];\n\
    \    long heapSize = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(heapSize\
    \ < k)\n        {\n            heap[heapSize] = arr[i];\n            heapSize++;\n\
    \            if(heapSize == k)\n            {\n                heap = heapSort(heap);\n\
    \            }\n        }\n        else\n        {\n            if(arr[i] > heap[0])\n\
    \            {\n                heap[0] = arr[i];\n                heap = heapSort(heap);\n\
    \            }\n        }\n    }\n    return heap;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjawc2aew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (int i = 0; i < k; i++)\n   \
    \ {\n        max = arr[0];\n        index = 0;\n        for (int j = 0; j < arr.length;\
    \ j++)\n        {\n            if (arr[j] > max)\n            {\n            \
    \    max = arr[j];\n                index = j;\n            }\n        }\n   \
    \     result[i] = max;\n        arr[index] = -1001;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1dzy_r6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long[] temp = new long[k];\n    long[] temp2\
    \ = new long[k];\n    long[] temp3 = new long[k];\n    long[] temp4 = new long[k];\n\
    \    long[] temp5 = new long[k];\n    long[] temp6 = new long[k];\n    long[]\
    \ temp7 = new long[k];\n    long[] temp8 = new long[k];\n    long[] temp9 = new\
    \ long[k];\n    long[] temp10 = new long[k];\n    long[] temp11 = new long[k];\n\
    \    long[] temp12 = new long[k];\n    long[] temp13 = new long[k];\n    long[]\
    \ temp14 = new long[k];\n    long[] temp15 = new long[k];\n    long[] temp16 =\
    \ new long[k];\n    long[] temp17 = new long[k];\n    long[] temp18 = new long[k];\n\
    \    long[] temp19 = new long[k];\n    long[] temp20 = new long[k];\n    long[]\
    \ temp21 = new long[k];\n    long[] temp22 = new long[k];\n    long[] temp23 =\
    \ new long[k];\n    long[] temp24 = new long[k];\n    long[] temp25 = new long[k];\n\
    \    long[] temp26 = new long[k];\n    long[] temp27 = new long[k];\n    long[]\
    \ temp28 = new long[k];\n    long[] temp29 = new long[k];\n    long[] temp30 =\
    \ new long[k];\n    long[] temp31 = new long[k];\n    long[] temp32 = new long[k];\n\
    \    long[] temp33 = new long[k];\n    long[] temp34 = new long[k];\n    long[]\
    \ temp35 = new long[k];\n    long[] temp36 = new long[k];\n    long[] temp37 =\
    \ new long[k];\n    long[] temp38 = new long[k];\n    long[] temp39 = new long[k];\n\
    \    long[] temp40 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0jp9j38.d(73): Error: expression expected, not \''unittest\''\n/tmp/tmpp0jp9j38.d(74):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpp0jp9j38.d(75): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0jp9j38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long max_index = 0;\n    long min_index =\
    \ 0;\n    long max_value = -1000000L;\n    long min_value = 1000000L;\n    long\
    \ i = 0;\n    long j = 0;\n    long temp = 0;\n    long temp_index = 0;\n    long\
    \ temp_value = 0;\n    long temp_value2 = 0;\n    long temp_index2 = 0;\n    long\
    \ temp_value3 = 0;\n    long temp_index3 = 0;\n    long temp_value4 = 0;\n   \
    \ long temp_index4 = 0;\n    long temp_value5 = 0;\n    long temp_index5 = 0;\n\
    \    long temp_value6 = 0;\n    long temp_index6 = 0;\n    long temp_value7 =\
    \ 0;\n    long temp_index7 = 0;\n    long temp_value8 = 0;\n    long temp_index8\
    \ = 0;\n    long temp_value9 = 0;\n    long temp_index9 = 0;\n    long temp_value10\
    \ = 0;\n    long temp_index10 = 0;\n    long temp_value11 = 0;\n    long temp_index11\
    \ = 0;\n    long temp_value12 = 0;\n    long temp_index12 = 0;\n    long temp_value13\
    \ = 0;\n    long temp_index13 = 0;\n    long temp_value14 = 0;\n    long temp_index14\
    \ = 0;\n    long temp_value15 = 0;\n    long temp_index15 = 0;\n    long temp_value16\
    \ = 0;\n    long temp_index16 = 0;\n    long temp_value17 = 0;\n    long temp_index17\
    \ = 0;\n    long temp_value18 = 0;\n    long temp_index18 = 0;\n    long temp_value19\
    \ = 0;\n    long temp_index19 = 0;\n    long temp_value20 = 0;\n    long temp_index20\
    \ = 0;\n    long temp_value21 = 0;\n    long temp_index21\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkojoq1o.d(82): Error: semicolon expected, not \''unittest\''\n/tmp/tmpdkojoq1o.d(82):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdkojoq1o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int n = arr.length;\n   \
    \ for (int i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n    }\n   \
    \ sort(result);\n    for (int i = k; i < n; i++)\n    {\n        if (arr[i] >\
    \ result[0])\n        {\n            result[0] = arr[i];\n            sort(result);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpilgm6sw9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgwcsb9cm.d(73): Error: basic type expected, not unittest\n/tmp/tmpgwcsb9cm.d(73):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpgwcsb9cm.d(73): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgwcsb9cm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long maxIndex = 0;\n    long resultIndex = 0;\n    long\
    \ tempIndex = 0;\n    long arrIndex = 0;\n    long tempLength = 0;\n    long arrLength\
    \ = arr.length;\n    while (resultIndex < k)\n    {\n        max = arr[0];\n \
    \       maxIndex = 0;\n        for (long i = 0; i < arrLength; i++)\n        {\n\
    \            if (arr[i] > max)\n            {\n                max = arr[i];\n\
    \                maxIndex = i;\n            }\n        }\n        result[resultIndex]\
    \ = max;\n        resultIndex++;\n        arr[maxIndex] = -1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfv_apqg6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    if (k == 0)\n        return\
    \ res;\n    if (k == arr.length)\n        return arr;\n    for (int i = 0; i <\
    \ k; i++)\n        res[i] = arr[i];\n    res.sort();\n    for (int i = k; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n         \
    \   res[0] = arr[i];\n            res.sort();\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvyo_ncg9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = -1001L;\n    long index = 0L;\n    for (long i = 0L; i < k; i++)\n\
    \    {\n        for (long j = 0L; j < arr.length; j++)\n        {\n          \
    \  if (arr[j] > max)\n            {\n                max = arr[j];\n         \
    \       index = j;\n            }\n        }\n        result[i] = max;\n     \
    \   temp[i] = max;\n        arr[index] = -1001L;\n        max = -1001L;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ppr60y1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        for (long j = 0; j < arr.length; j++)\n        {\n            if\
    \ (arr[j] > max)\n            {\n                max = arr[j];\n             \
    \   index = j;\n            }\n        }\n        result[i] = max;\n        arr[index]\
    \ = -10001;\n        max = 0;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkno__y_c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr.dup;\n    temp.sort;\n    temp.reverse;\n    for (int i = 0; i\
    \ < k; i++)\n    {\n        result[i] = temp[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7lcs3sp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] tmp = new long[arr.length];\n\
    \    long[] tmp2 = new long[arr.length];\n    long[] tmp3 = new long[arr.length];\n\
    \    long[] tmp4 = new long[arr.length];\n    long[] tmp5 = new long[arr.length];\n\
    \    long[] tmp6 = new long[arr.length];\n    long[] tmp7 = new long[arr.length];\n\
    \    long[] tmp8 = new long[arr.length];\n    long[] tmp9 = new long[arr.length];\n\
    \    long[] tmp10 = new long[arr.length];\n    long[] tmp11 = new long[arr.length];\n\
    \    long[] tmp12 = new long[arr.length];\n    long[] tmp13 = new long[arr.length];\n\
    \    long[] tmp14 = new long[arr.length];\n    long[] tmp15 = new long[arr.length];\n\
    \    long[] tmp16 = new long[arr.length];\n    long[] tmp17 = new long[arr.length];\n\
    \    long[] tmp18 = new long[arr.length];\n    long[] tmp19 = new long[arr.length];\n\
    \    long[] tmp20 = new long[arr.length];\n    long[] tmp21 = new long[arr.length];\n\
    \    long[] tmp22 = new long[arr.length];\n    long[] tmp23 = new long[arr.length];\n\
    \    long[] tmp24 = new long[arr.length];\n    long[] tmp25 = new long[arr.length];\n\
    \    long[] tmp26 = new long[arr.length];\n    long[] tmp27 = new long[arr.length];\n\
    \    long[] tmp28 = new long[arr.length];\n    long[] tmp29 = new long[arr.length];\n\
    \    long[] tmp30 = new long[arr.length];\n    long[] tmp31 = new long[arr.length];\n\
    \    long[] tmp32 = new long[arr.length];\n    long[] tmp33 = new long[arr.length];\n\
    \    long[] tmp34 = new long[arr.length];\n    long[] tmp35 = new long[arr.length];\n\
    \    long[] tmp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzw_6a7ld.d(67): Error: expression expected, not \''unittest\''\n/tmp/tmpzw_6a7ld.d(68):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpzw_6a7ld.d(69): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw_6a7ld.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpevq4fy37.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a5d]\n??:? void tmpevq4fy37.__unittest_L51_C1() [0x428057]\n??:?
    void tmpevq4fy37.__modtest() [0x4287e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431108]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430be5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b9a5]\n??:? runModuleUnitTests [0x42c911]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ea7]\n??:? _d_run_main [0x428e12]\n??:? main [0x4287f3]\n??:?
    __libc_start_main [0xfbb92554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -9999;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2p0n1le.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    int n = arr.length;\n    for\
    \ (int i = 0; i < k; i++)\n    {\n        long max = -1000000;\n        int idx\
    \ = -1;\n        for (int j = 0; j < n; j++)\n        {\n            if (arr[j]\
    \ > max)\n            {\n                max = arr[j];\n                idx =\
    \ j;\n            }\n        }\n        res[i] = max;\n        arr[idx] = -1000000;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n  \
    \  assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo18q6tm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = arr.dup;\n\
    \    sort(sorted);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = sorted[$ - i - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34z56q7r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = -1001L;\n    long index = 0L;\n    for (long i = 0L; i < k; i++)\n\
    \    {\n        for (long j = 0L; j < arr.length; j++)\n        {\n          \
    \  if (arr[j] > max)\n            {\n                max = arr[j];\n         \
    \       index = j;\n            }\n        }\n        result[i] = max;\n     \
    \   arr[index] = -1001L;\n        max = -1001L;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68avs_lg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] maxHeap = new long[k];\n\
    \    long maxHeapSize = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (maxHeapSize < k)\n        {\n            maxHeap[maxHeapSize] = arr[i];\n\
    \            maxHeapSize++;\n            if (maxHeapSize == k)\n            {\n\
    \                maxHeap = heapify(maxHeap);\n            }\n        }\n     \
    \   else\n        {\n            if (arr[i] > maxHeap[0])\n            {\n   \
    \             maxHeap[0] = arr[i];\n                maxHeap = heapify(maxHeap);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < k; i++)\n    {\n  \
    \      result[i] = maxHeap[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2an0a4ay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[temp.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnbq2vf6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1000;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ugjhk_l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       result[i] = temp[arr.length - 1 - i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqkjnx8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = sort(arr);\n\
    \    for (long i = 0L; i < k; i++)\n    {\n        result[i] = sorted[arr.length\
    \ - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph89ic6si.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1001;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe23ky3_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = sort(arr);\n\
    \    for (long i = 0L; i < k; i++)\n    {\n        result[i] = sorted[arr.length\
    \ - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph89ic6si.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        res[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx02htpd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0)\n        return arr;\n    if (k == 0)\n\
    \        return new long[0];\n    if (k == arr.length)\n        return arr;\n\
    \    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n        result[i]\
    \ = arr[i];\n    sort(result);\n    for (int i = k; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] > result[0])\n        {\n            result[0] = arr[i];\n\
    \            sort(result);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6g_xbd1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long max = 0;\n    long index = 0;\n    long count = 0;\n    long tempCount\
    \ = 0;\n    long tempIndex = 0;\n    long tempMax = 0;\n    long[] tempArr = new\
    \ long[arr.length];\n    for (long i = 0; i < arr.length; i++)\n    {\n      \
    \  tempArr[i] = arr[i];\n    }\n    for (long i = 0; i < k; i++)\n    {\n    \
    \    max = tempArr[0];\n        index = 0;\n        for (long j = 0; j < tempArr.length;\
    \ j++)\n        {\n            if (tempArr[j] > max)\n            {\n        \
    \        max = tempArr[j];\n                index = j;\n            }\n      \
    \  }\n        result[i] = max;\n        tempArr[index] = -1001;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpii6fka2t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        res[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ov1hpx6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long max = 0;\n    long maxIndex = 0;\n    long min = 0;\n    long minIndex\
    \ = 0;\n    long tempIndex = 0;\n    long resultIndex = 0;\n    long arrIndex\
    \ = 0;\n    long arrLength = arr.length;\n    long kLength = k;\n    while (kLength\
    \ > 0)\n    {\n        max = arr[0];\n        maxIndex = 0;\n        min = arr[0];\n\
    \        minIndex = 0;\n        tempIndex = 0;\n        for (arrIndex = 0; arrIndex\
    \ < arrLength; arrIndex++)\n        {\n            if (arr[arrIndex] > max)\n\
    \            {\n                max = arr[arrIndex];\n                maxIndex\
    \ = arrIndex;\n            }\n            if (arr[arrIndex] < min)\n         \
    \   {\n                min = arr[arrIndex];\n                minIndex = arrIndex;\n\
    \            }\n        }\n        temp[tempIndex] = max;\n        tempIndex++;\n\
    \        arr[maxIndex] = min;\n        kLength--;\n    }\n    for (resultIndex\
    \ = 0; resultIndex < k; resultIndex++)\n    {\n        result[resultIndex] = temp[resultIndex];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqdilerz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       result[i] = temp[arr.length - 1 - i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqkjnx8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = arr.dup;\n\
    \    sorted.sort;\n    foreach(i, ref e; result)\n    {\n        e = sorted[$\
    \ - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxsj7yu9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        for (long j = 0; j < arr.length; j++)\n        {\n            if\
    \ (arr[j] > max)\n            {\n                max = arr[j];\n             \
    \   index = j;\n            }\n        }\n        result[i] = max;\n        arr[index]\
    \ = -1001;\n        max = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm0cje029.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpm0cje029.__unittest_L50_C1() [0x428037]\n??:?
    void tmpm0cje029.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0xcdec9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] tmp = new long[k];\n\
    \    long[] tmp2 = new long[k];\n    long[] tmp3 = new long[k];\n    long[] tmp4\
    \ = new long[k];\n    long[] tmp5 = new long[k];\n    long[] tmp6 = new long[k];\n\
    \    long[] tmp7 = new long[k];\n    long[] tmp8 = new long[k];\n    long[] tmp9\
    \ = new long[k];\n    long[] tmp10 = new long[k];\n    long[] tmp11 = new long[k];\n\
    \    long[] tmp12 = new long[k];\n    long[] tmp13 = new long[k];\n    long[]\
    \ tmp14 = new long[k];\n    long[] tmp15 = new long[k];\n    long[] tmp16 = new\
    \ long[k];\n    long[] tmp17 = new long[k];\n    long[] tmp18 = new long[k];\n\
    \    long[] tmp19 = new long[k];\n    long[] tmp20 = new long[k];\n    long[]\
    \ tmp21 = new long[k];\n    long[] tmp22 = new long[k];\n    long[] tmp23 = new\
    \ long[k];\n    long[] tmp24 = new long[k];\n    long[] tmp25 = new long[k];\n\
    \    long[] tmp26 = new long[k];\n    long[] tmp27 = new long[k];\n    long[]\
    \ tmp28 = new long[k];\n    long[] tmp29 = new long[k];\n    long[] tmp30 = new\
    \ long[k];\n    long[] tmp31 = new long[k];\n    long[] tmp32 = new long[k];\n\
    \    long[] tmp33 = new long[k];\n    long[] tmp34 = new long[k];\n    long[]\
    \ tmp35 = new long[k];\n    long[] tmp36 = new long[k];\n    long[] tmp37 = new\
    \ long[k];\n    long[] tmp38 = new long[k];\n    long[] tmp39 = new long[k];\n\
    \    long[] tmp40 = new long[k];\n    long[] tmp41 = new long[k];\n    long[]\
    \ tmp42 = new\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9zs0z2p4.d(73): Error: basic type expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zs0z2p4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] > 0)\n        {\n            temp[index] = arr[i];\n            index++;\n\
    \        }\n    }\n    temp = temp[0..index];\n    sort(temp);\n    for (int i\
    \ = 0; i < k; i++)\n    {\n        result[i] = temp[index - i - 1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphiw6nfax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long[] max_index = new long[k];\n    long[]\
    \ min_index = new long[k];\n    long max_value = -1001L;\n    long min_value =\
    \ 1001L;\n    long max_index_value = 0L;\n    long min_index_value = 0L;\n   \
    \ long i = 0L;\n    long j = 0L;\n    long l = 0L;\n    long m = 0L;\n    long\
    \ n = 0L;\n    long o = 0L;\n    long p = 0L;\n    long q = 0L;\n    long r =\
    \ 0L;\n    long s = 0L;\n    long t = 0L;\n    long u = 0L;\n    long v = 0L;\n\
    \    long w = 0L;\n    long x = 0L;\n    long y = 0L;\n    long z = 0L;\n    long\
    \ aa = 0L;\n    long ab = 0L;\n    long ac = 0L;\n    long ad = 0L;\n    long\
    \ ae = 0L;\n    long af = 0L;\n    long ag = 0L;\n    long ah = 0L;\n    long\
    \ ai = 0L;\n    long aj = 0L;\n    long ak = 0L;\n    long al = 0L;\n    long\
    \ am = 0L;\n    long an = 0L;\n    long ao = 0L;\n    long ap = 0L;\n    long\
    \ aq = 0L;\n    long ar = 0L;\n    long as = 0L;\n    long at = 0L;\n    long\
    \ au = 0L;\n    long av = 0L;\n    long aw = 0L;\n    long ax = 0L;\n    long\
    \ ay = 0L;\n    long az = 0L;\n    long ba = 0L;\n    long bb = 0L;\n    long\
    \ bc = 0L;\n    long bd = 0L;\n    long be = 0L;\n    long bf = 0L;\n    long\
    \ b\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpto0wocev.d(89): Error: semicolon expected, not \''unittest\''\n/tmp/tmpto0wocev.d(89):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpto0wocev.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if (arr.length == 0)\n  \
    \      return result;\n    if (arr.length == 1)\n    {\n        result[0] = arr[0];\n\
    \        return result;\n    }\n    if (arr.length == k)\n        return arr;\n\
    \    long[] temp = new long[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n        temp[i] = arr[i];\n    sort(temp);\n    for (int i = 0; i < k;\
    \ i++)\n        result[i] = temp[arr.length - i - 1];\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxgbqzl_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    int index = 0;\n    foreach(i; arr)\n    {\n        temp[index] = i;\n  \
    \      index++;\n    }\n    temp = temp.sort();\n    index = 0;\n    foreach(i;\
    \ temp)\n    {\n        if(index < k)\n        {\n            result[index] =\
    \ i;\n            index++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zqpy6by.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[arr.length - k];\n    long[] temp3 = new long[arr.length\
    \ - k];\n    long[] temp4 = new long[arr.length - k];\n    long[] temp5 = new\
    \ long[arr.length - k];\n    long[] temp6 = new long[arr.length - k];\n    long[]\
    \ temp7 = new long[arr.length - k];\n    long[] temp8 = new long[arr.length -\
    \ k];\n    long[] temp9 = new long[arr.length - k];\n    long[] temp10 = new long[arr.length\
    \ - k];\n    long[] temp11 = new long[arr.length - k];\n    long[] temp12 = new\
    \ long[arr.length - k];\n    long[] temp13 = new long[arr.length - k];\n    long[]\
    \ temp14 = new long[arr.length - k];\n    long[] temp15 = new long[arr.length\
    \ - k];\n    long[] temp16 = new long[arr.length - k];\n    long[] temp17 = new\
    \ long[arr.length - k];\n    long[] temp18 = new long[arr.length - k];\n    long[]\
    \ temp19 = new long[arr.length - k];\n    long[] temp20 = new long[arr.length\
    \ - k];\n    long[] temp21 = new long[arr.length - k];\n    long[] temp22 = new\
    \ long[arr.length - k];\n    long[] temp23 = new long[arr.length - k];\n    long[]\
    \ temp24 = new long[arr.length - k];\n    long[] temp25 = new long[arr.length\
    \ - k];\n    long[] temp26 = new long[arr.length - k];\n    long[] temp27 = new\
    \ long[arr.length - k];\n    long[] temp28 = new long[arr.length - k];\n    long[]\
    \ temp29 = new long[arr.length - k];\n    long[] temp30 = new long[arr.length\
    \ - k];\n    long[] temp31 = new long[arr.length - k];\n    long[] temp32 = new\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr_kunc8z.d(63): Error: basic type expected, not unittest\n/tmp/tmpr_kunc8z.d(63):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpr_kunc8z.d(63): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr_kunc8z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] tmp = new long[k];\n\
    \    long[] tmp2 = new long[k];\n    long[] tmp3 = new long[k];\n    long[] tmp4\
    \ = new long[k];\n    long[] tmp5 = new long[k];\n    long[] tmp6 = new long[k];\n\
    \    long[] tmp7 = new long[k];\n    long[] tmp8 = new long[k];\n    long[] tmp9\
    \ = new long[k];\n    long[] tmp10 = new long[k];\n    long[] tmp11 = new long[k];\n\
    \    long[] tmp12 = new long[k];\n    long[] tmp13 = new long[k];\n    long[]\
    \ tmp14 = new long[k];\n    long[] tmp15 = new long[k];\n    long[] tmp16 = new\
    \ long[k];\n    long[] tmp17 = new long[k];\n    long[] tmp18 = new long[k];\n\
    \    long[] tmp19 = new long[k];\n    long[] tmp20 = new long[k];\n    long[]\
    \ tmp21 = new long[k];\n    long[] tmp22 = new long[k];\n    long[] tmp23 = new\
    \ long[k];\n    long[] tmp24 = new long[k];\n    long[] tmp25 = new long[k];\n\
    \    long[] tmp26 = new long[k];\n    long[] tmp27 = new long[k];\n    long[]\
    \ tmp28 = new long[k];\n    long[] tmp29 = new long[k];\n    long[] tmp30 = new\
    \ long[k];\n    long[] tmp31 = new long[k];\n    long[] tmp32 = new long[k];\n\
    \    long[] tmp33 = new long[k];\n    long[] tmp34 = new long[k];\n    long[]\
    \ tmp35 = new long[k];\n    long[] tmp36 = new long[k];\n    long[] tmp37 = new\
    \ long[k];\n    long[] tmp38 = new long[k];\n    long[] tmp39 = new long[k];\n\
    \    long[] tmp40 = new long[k];\n    long[] tmp41 = new long[k];\n    long[]\
    \ tmp42 = new\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9zs0z2p4.d(73): Error: basic type expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmp9zs0z2p4.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zs0z2p4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (k == 0)\n        return new long[0];\n    if (k == arr.length)\n\
    \        return arr;\n    long[] result = new long[k];\n    for (int i = 0; i\
    \ < k; i++)\n        result[i] = arr[i];\n    for (int i = k; i < arr.length;\
    \ i++)\n    {\n        int j = 0;\n        while (j < k && result[j] > arr[i])\n\
    \            j++;\n        if (j < k)\n        {\n            for (int l = k -\
    \ 1; l > j; l--)\n                result[l] = result[l - 1];\n            result[j]\
    \ = arr[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83kyvgvw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       result[i] = temp[arr.length - 1 - i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqkjnx8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1001;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1t3zwxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] tmp = new long[arr.length];\n\
    \    long[] tmp2 = new long[arr.length];\n    long[] tmp3 = new long[arr.length];\n\
    \    long[] tmp4 = new long[arr.length];\n    long[] tmp5 = new long[arr.length];\n\
    \    long[] tmp6 = new long[arr.length];\n    long[] tmp7 = new long[arr.length];\n\
    \    long[] tmp8 = new long[arr.length];\n    long[] tmp9 = new long[arr.length];\n\
    \    long[] tmp10 = new long[arr.length];\n    long[] tmp11 = new long[arr.length];\n\
    \    long[] tmp12 = new long[arr.length];\n    long[] tmp13 = new long[arr.length];\n\
    \    long[] tmp14 = new long[arr.length];\n    long[] tmp15 = new long[arr.length];\n\
    \    long[] tmp16 = new long[arr.length];\n    long[] tmp17 = new long[arr.length];\n\
    \    long[] tmp18 = new long[arr.length];\n    long[] tmp19 = new long[arr.length];\n\
    \    long[] tmp20 = new long[arr.length];\n    long[] tmp21 = new long[arr.length];\n\
    \    long[] tmp22 = new long[arr.length];\n    long[] tmp23 = new long[arr.length];\n\
    \    long[] tmp24 = new long[arr.length];\n    long[] tmp25 = new long[arr.length];\n\
    \    long[] tmp26 = new long[arr.length];\n    long[] tmp27 = new long[arr.length];\n\
    \    long[] tmp28 = new long[arr.length];\n    long[] tmp29 = new long[arr.length];\n\
    \    long[] tmp30 = new long[arr.length];\n    long[] tmp31 = new long[arr.length];\n\
    \    long[] tmp32 = new long[arr.length];\n    long[] tmp33 = new long[arr.length];\n\
    \    long[] tmp34 = new long[arr.length];\n    long[] tmp35 = new long[arr.length];\n\
    \    long[] tmp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgtq7kqg8.d(67): Error: expression expected, not \''unittest\''\n/tmp/tmpgtq7kqg8.d(68):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpgtq7kqg8.d(69): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq7kqg8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1001;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe23ky3_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if (k == 0)\n        return\
    \ result;\n    if (k == arr.length)\n        return arr;\n    int i = 0;\n   \
    \ for (; i < k; i++)\n        result[i] = arr[i];\n    sort(result);\n    for\
    \ (; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ley49f4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] max = new long[k];\n\
    \    long[] min = new long[k];\n    long[] max_min = new long[k];\n    long[]\
    \ min_max = new long[k];\n    long[] max_max = new long[k];\n    long[] min_min\
    \ = new long[k];\n    long[] max_max_min = new long[k];\n    long[] min_min_max\
    \ = new long[k];\n    long[] max_min_max = new long[k];\n    long[] min_max_min\
    \ = new long[k];\n    long[] max_min_min = new long[k];\n    long[] min_max_max\
    \ = new long[k];\n    long[] max_max_max = new long[k];\n    long[] min_min_min\
    \ = new long[k];\n    long[] max_max_min_min = new long[k];\n    long[] min_min_max_max\
    \ = new long[k];\n    long[] max_min_max_max = new long[k];\n    long[] min_max_min_max\
    \ = new long[k];\n    long[] max_min_min_max = new long[k];\n    long[] min_max_max_min\
    \ = new long[k];\n    long[] max_max_max_min = new long[k];\n    long[] min_min_min_max\
    \ = new long[k];\n    long[] max_max_min_max = new long[k];\n    long[] min_min_max_min\
    \ = new long[k];\n    long[] max_min_max_min = new long[k];\n    long[] min_max_min_min\
    \ = new long[k];\n    long[] max_min_min_min = new long[k];\n    long[] min_max_max_max\
    \ = new long[k];\n    long[] max_max_max_max = new long[k];\n    long[] min_min_min_min\
    \ = new long[k];\n    long[] max_max_min_min_min = new long[k];\n    long[] min_min_max_max_max\
    \ =\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjr_17cxl.d(63): Error: expression expected, not \''unittest\''\n/tmp/tmpjr_17cxl.d(64):
    Error: semicolon expected, not \''{\''\n/tmp/tmpjr_17cxl.d(79): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpjr_17cxl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort;\n    arr2.reverse;\n    foreach(i, v; arr2)\n    {\n        if(i\
    \ < k)\n        {\n            result[i] = v;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4lpjg4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1001;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1t3zwxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxe2iriq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstv66wql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1000000;\n        for (long j = 0; j < arr.length; j++)\n\
    \        {\n            if (arr[j] > max)\n            {\n                max\
    \ = arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1000000;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgygqudec.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a3d]\n??:? void tmpgygqudec.__unittest_L50_C1() [0x428037]\n??:?
    void tmpgygqudec.__modtest() [0x4287c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b985]\n??:? runModuleUnitTests [0x42c8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f00]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e87]\n??:? _d_run_main [0x428df2]\n??:? main [0x4287d3]\n??:?
    __libc_start_main [0x1af61554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        long max = arr[0];\n        long maxIndex = 0;\n        for (long\
    \ j = 0; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n    \
    \        {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result[i] = max;\n        arr[maxIndex] = -1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_1g3mxp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] ret = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpax2y_czv.d(67): Error: expression expected, not \''unittest\''\n/tmp/tmpax2y_czv.d(68):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpax2y_czv.d(69): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax2y_czv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int i = 0;\n    int j = 0;\n\
    \    while (i < k)\n    {\n        result[i] = arr[j];\n        i++;\n       \
    \ j++;\n    }\n    sort(result);\n    while (j < arr.length)\n    {\n        if\
    \ (arr[j] > result[0])\n        {\n            result[0] = arr[j];\n         \
    \   sort(result);\n        }\n        j++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzecm3ox.d(39): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpkzecm3ox.d(45): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzecm3ox.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long maxIndex = 0;\n    long tempIndex = 0;\n    long\
    \ arrIndex = 0;\n    while(k > 0)\n    {\n        max = arr[0];\n        maxIndex\
    \ = 0;\n        for(long i = 0; i < arr.length; i++)\n        {\n            if(arr[i]\
    \ > max)\n            {\n                max = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        result[tempIndex] = max;\n        tempIndex++;\n\
    \        arr[maxIndex] = -1001;\n        k--;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tdftd3r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[temp.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr2fz7ol.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1001;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1t3zwxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstv66wql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxe2iriq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    temp = arr;\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n \
    \       result[i] = temp[arr.length - 1 - i];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqkjnx8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxe2iriq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = -1000000;\n    }\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        long j = k - 1;\n        while (j >= 0 && arr[i] > result[j])\n\
    \        {\n            if (j < k - 1)\n            {\n                result[j\
    \ + 1] = result[j];\n            }\n            j--;\n        }\n        if (j\
    \ < k - 1)\n        {\n            result[j + 1] = arr[i];\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9hzretg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = -1001;\n        for (long j = 0; j < arr.length; j++)\n  \
    \      {\n            if (arr[j] > max)\n            {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result[i]\
    \ = max;\n        arr[index] = -1001;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1t3zwxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxe2iriq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\n  \
    \  {\n        max = arr[0];\n        index = 0;\n        for (long j = 0; j <\
    \ arr.length; j++)\n        {\n            if (arr[j] > max)\n            {\n\
    \                max = arr[j];\n                index = j;\n            }\n  \
    \      }\n        result[i] = max;\n        arr[index] = -1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpevq4fy37.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a5d]\n??:? void tmpevq4fy37.__unittest_L51_C1() [0x428057]\n??:?
    void tmpevq4fy37.__modtest() [0x4287e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x431108]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430be5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b9a5]\n??:? runModuleUnitTests [0x42c911]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ea7]\n??:? _d_run_main [0x428e12]\n??:? main [0x4287f3]\n??:?
    __libc_start_main [0xfbb92554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[k];\n\
    \    int i = 0;\n    int j = 0;\n    int l = 0;\n    int m = 0;\n    for (i =\
    \ 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n    sort(temp);\n \
    \   for (i = k; i < arr.length; i++)\n    {\n        if (arr[i] > temp[0])\n \
    \       {\n            temp[0] = arr[i];\n            sort(temp);\n        }\n\
    \    }\n    for (i = 0; i < k; i++)\n    {\n        res[i] = temp[i];\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9g33cne.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = 0;\n    long maxIndex = 0;\n    long tempIndex = 0;\n    long\
    \ resultIndex = 0;\n    long tempLength = arr.length;\n    while(k > 0)\n    {\n\
    \        max = arr[0];\n        maxIndex = 0;\n        for(long i = 0; i < tempLength;\
    \ i++)\n        {\n            if(arr[i] > max)\n            {\n             \
    \   max = arr[i];\n                maxIndex = i;\n            }\n        }\n \
    \       result[resultIndex] = max;\n        resultIndex++;\n        temp[tempIndex]\
    \ = max;\n        tempIndex++;\n        arr[maxIndex] = -1;\n        k--;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n \
    \   assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsiqzteof.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpah54oeky.d(73): Error: basic type expected, not `unittest`\n/tmp/tmpah54oeky.d(73):
    Error: semicolon expected, not `unittest`\n/tmp/tmpah54oeky.d(73): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah54oeky.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    long[] res = new long[k];\n    for\
    \ (int i = 0; i < k; i++) \n    {\n        int max = i;\n        for (int j =\
    \ i + 1; j < n; j++) \n        {\n            if (arr[j] > arr[max]) \n      \
    \      {\n                max = j;\n            }\n        }\n        res[i] =\
    \ arr[max];\n        swap(arr, i, max);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzezdcyh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        sorted[i] = arr[i];\n\
    \    }\n    sort(sorted);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = sorted[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) ==\
    \ [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n  \
    \  assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq044ikgc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] arr2 = arr.dup;\n\
    \    arr2.sort;\n    for (long i = 0; i < k; i++)\n    {\n        result[i] =\
    \ arr2[arr2.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmetjyglj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnijb7w6.d(35): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpgnijb7w6.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnijb7w6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrtwtfbl.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrtwtfbl.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long max = -1001L;\n    long index = 0L;\n    for (long i = 0L; i < k; i++)\n\
    \    {\n        for (long j = 0L; j < arr.length; j++)\n        {\n          \
    \  if (arr[j] > max)\n            {\n                max = arr[j];\n         \
    \       index = j;\n            }\n        }\n        result[i] = max;\n     \
    \   arr[index] = -1001L;\n        max = -1001L;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68avs_lg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[temp.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexymlh01.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexymlh01.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int i = 0;\n    int j = 0;\n\
    \    while (i < k)\n    {\n        result[i] = arr[j];\n        j++;\n       \
    \ i++;\n    }\n    sort(result);\n    while (j < arr.length)\n    {\n        if\
    \ (arr[j] > result[0])\n        {\n            result[0] = arr[j];\n         \
    \   sort(result);\n        }\n        j++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5jijpdt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659793340
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_od21iw_.d(67): Error: expression expected, not `unittest`\n/tmp/tmp_od21iw_.d(68):
    Error: found `{` when expecting `]`\n/tmp/tmp_od21iw_.d(69): Error: semicolon
    expected, not `alias`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_od21iw_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    >>> maximum([-3L, -4L, 5L], 3L)\n    [-4L,\
    \ -3L, 5L]\n\n    Example 2:\n\n    >>> maximum([4L, -4L, 4L], 2L)\n    [4L, 4L]\n\
    \n    Example 3:\n\n    >>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n   \
    \ [2L]\n\n    Note:\n        1. The length of the array will be in the range of\
    \ [1, 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - i - 1];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq99_nj3m.d(36): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq99_nj3m.d",
    "-I/tmp"]\n'''
  stdout: b''
