language: d
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max = words[0];\n    foreach(string word; words)\n  \
    \  {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpz_8v85ag.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x429075]\n??:? void tmpz_8v85ag.__unittest_L29_C1() [0x427cd6]\n??:?
    void tmpz_8v85ag.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a900]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a7fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428da5]\n??:? runModuleUnitTests [0x42d799]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4294bf]\n??:? _d_run_main [0x42942a]\n??:? main [0x4282f3]\n??:?
    __libc_start_main [0xea993554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwywf9h61.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwywf9h61.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n                unique++;\n  \
    \      }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoctmz_4t.d(26): Error: no property `count` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoctmz_4t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    int max_count = 0;\n    string max_word = \"\";\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7by_d_6b.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7by_d_6b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!result.canFind(c))\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max_unique)\n    \
    \    {\n            max_unique = unique;\n            result = word;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxscndq6z.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxscndq6z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2qe_wix.d(26): Error: no property `count` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2qe_wix.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezs3639f.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezs3639f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max = words[0];\n    foreach(string word; words)\n  \
    \  {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpz_8v85ag.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x429075]\n??:? void tmpz_8v85ag.__unittest_L29_C1() [0x427cd6]\n??:?
    void tmpz_8v85ag.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a900]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a7fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428da5]\n??:? runModuleUnitTests [0x42d799]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4294bf]\n??:? _d_run_main [0x42942a]\n??:? main [0x4282f3]\n??:?
    __libc_start_main [0xea993554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwywf9h61.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwywf9h61.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words) \n    {\n        int unique = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(c !in max_word) \n            {\n              \
    \  max_word ~= c;\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprtyfkdvi.d(26): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtyfkdvi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(c; word) \n       \
    \ {\n            if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            if(word < max_word)\
    \ \n            {\n                max_word = word;\n            }\n        }\n\
    \    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp88qeqa0p.d(26): Error: no property `count` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88qeqa0p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa7wfrjdm.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7wfrjdm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word;\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(count == 0)\n            {\n                count = 1;\n     \
    \       }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq2b5ffyg.d(32): Error: no property `count` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2b5ffyg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzfxlakkg.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfxlakkg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwywf9h61.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwywf9h61.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_0xb5n11.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0xb5n11.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word;\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmponij97_f.d(26): Error: no property `count` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponij97_f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!result.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkyy497q.d(26): Error: no property `canFind` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkyy497q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(count(word, c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7vfgatm.d(26): Error: undefined identifier `count`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7vfgatm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n\
    \    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
    \ words) \n{\n    string max = words[0];\n    foreach(string word; words)\n  \
    \  {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpz_8v85ag.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x429075]\n??:? void tmpz_8v85ag.__unittest_L29_C1() [0x427cd6]\n??:?
    void tmpz_8v85ag.__modtest() [0x4282e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a900]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a7fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x428da5]\n??:? runModuleUnitTests [0x42d799]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4294bf]\n??:? _d_run_main [0x42942a]\n??:? main [0x4282f3]\n??:?
    __libc_start_main [0xea993554]\n1/1 unittests FAILED\n'''
  stdout: b''
