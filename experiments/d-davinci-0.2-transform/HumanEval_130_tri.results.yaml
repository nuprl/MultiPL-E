language: d
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpq7hhzb9j.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpq7hhzb9j.tri(long) [0x427f7f]\n??:?
    void tmpq7hhzb9j.__unittest_L41_C1() [0x427fbf]\n??:? void tmpq7hhzb9j.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xa1014554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = 1 + i / 2;\n        } \n        else \n        {\n            result[i] =\
    \ result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n*/\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp72h7rqv1.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmp72h7rqv1.tri(long) [0x427f7c]\n??:?
    void tmp72h7rqv1.__unittest_L45_C1() [0x427fbb]\n??:? void tmp72h7rqv1.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xbb327554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n +\
    \ 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int\
    \ i = 3; i < n + 1; i++)\n    {\n        if (i % 2 == 0)\n        {\n        \
    \    result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzkyr3yo.d(24): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzkyr3yo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpq7hhzb9j.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpq7hhzb9j.tri(long) [0x427f7f]\n??:?
    void tmpq7hhzb9j.__unittest_L41_C1() [0x427fbf]\n??:? void tmpq7hhzb9j.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xa1014554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpq7hhzb9j.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpq7hhzb9j.tri(long) [0x427f7f]\n??:?
    void tmpq7hhzb9j.__unittest_L41_C1() [0x427fbf]\n??:? void tmpq7hhzb9j.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xa1014554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmppj1ghx0o.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmppj1ghx0o.tri(long) [0x427f7c]\n??:?
    void tmppj1ghx0o.__unittest_L41_C1() [0x427fbb]\n??:? void tmppj1ghx0o.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xa48a8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmppj1ghx0o.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmppj1ghx0o.tri(long) [0x427f7c]\n??:?
    void tmppj1ghx0o.__unittest_L41_C1() [0x427fbb]\n??:? void tmppj1ghx0o.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xa48a8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpynyv7ajr.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpynyv7ajr.tri(long) [0x427f7c]\n??:?
    void tmpynyv7ajr.__unittest_L41_C1() [0x427fbb]\n??:? void tmpynyv7ajr.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x3c897554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return a list of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpq7hhzb9j.d(36): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpq7hhzb9j.tri(long) [0x427f7f]\n??:?
    void tmpq7hhzb9j.__unittest_L41_C1() [0x427fbf]\n??:? void tmpq7hhzb9j.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xa1014554]\n1/1 unittests FAILED\n'''
  stdout: b''
