language: d
name: HumanEval_127_intersection
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    if (length == 0)\n        return \"YES\";\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16eooe46.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp16eooe46.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp16eooe46.d(36): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16eooe46.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long len = end - start;\n    if (len < 0) return \"NO\"\
    ;\n    if (len == 0) return \"YES\";\n    if (len == 1) return \"NO\";\n    if\
    \ (len == 2) return \"YES\";\n    if (len % 2 == 0) return \"NO\";\n    for (long\
    \ i = 3; i <= sqrt(len); i += 2)\n    {\n        if (len % i == 0) return \"NO\"\
    ;\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpej5jj1ja.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpej5jj1ja.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpej5jj1ja.d(37): Error: `std.math.sqrt` called
    with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpej5jj1ja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28ks3mrz.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp28ks3mrz.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp28ks3mrz.d(34): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ks3mrz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28ks3mrz.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp28ks3mrz.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp28ks3mrz.d(34): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ks3mrz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long len = end - start;\n    if (len < 0)\n        return\
    \ \"NO\";\n    if (len == 0)\n        return \"YES\";\n    if (len == 1)\n   \
    \     return \"NO\";\n    if (len == 2)\n        return \"YES\";\n    if (len\
    \ % 2 == 0)\n        return \"NO\";\n    for (long i = 3; i <= sqrt(len); i +=\
    \ 2)\n    {\n        if (len % i == 0)\n            return \"NO\";\n    }\n  \
    \  return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n  \
    \  assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppl49l0mj.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmppl49l0mj.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmppl49l0mj.d(42): Error: `std.math.sqrt` called
    with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl49l0mj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long\
    \ start2 = interval2[0];\n    long end2 = interval2[1];\n    long start = max(start1,\
    \ start2);\n    long end = min(end1, end2);\n    if (start > end)\n        return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkbvocpea.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpkbvocpea.d(34): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpkbvocpea.d(37): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbvocpea.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length <= 0)\n     \
    \   return \"NO\";\n    if (length == 1)\n        return \"NO\";\n    if (length\
    \ == 2)\n        return \"YES\";\n    for (long i = 2; i < length; i++)\n    {\n\
    \        if (length % i == 0)\n            return \"NO\";\n    }\n    return \"\
    YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkacdiqym.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpkacdiqym.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkacdiqym.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0) return \"\
    NO\";\n    if (length == 0) return \"YES\";\n    for (long i = 2; i <= sqrt(length);\
    \ i++)\n    {\n        if (length % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyt93rg9d.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpyt93rg9d.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpyt93rg9d.d(34): Error: `std.math.sqrt` called
    with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyt93rg9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    if (length == 0)\n        return \"YES\";\n    if (length\
    \ == 1)\n        return \"NO\";\n    if (length == 2)\n        return \"YES\"\
    ;\n    if (length % 2 == 0)\n        return \"NO\";\n    for (long i = 3; i <=\
    \ sqrt(length); i += 2)\n    {\n        if (length % i == 0)\n            return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcs21yjwn.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpcs21yjwn.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpcs21yjwn.d(42): Error: `std.math.sqrt` called
    with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs21yjwn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    if (length == 0)\n        return \"YES\";\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n\
    \    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16eooe46.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp16eooe46.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp16eooe46.d(36): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16eooe46.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    return isPrime(length) ?\
    \ \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n \
    \   assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdfyjnrgj.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpdfyjnrgj.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpdfyjnrgj.d(32): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfyjnrgj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28ks3mrz.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp28ks3mrz.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp28ks3mrz.d(34): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ks3mrz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long\
    \ start2 = interval2[0];\n    long end2 = interval2[1];\n    long start = max(start1,\
    \ start2);\n    long end = min(end1, end2);\n    if (start > end)\n        return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkbvocpea.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpkbvocpea.d(34): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpkbvocpea.d(37): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbvocpea.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0) return \"\
    NO\";\n    if (length == 0) return \"YES\";\n    if (length == 1) return \"NO\"\
    ;\n    if (length == 2) return \"YES\";\n    if (length % 2 == 0) return \"NO\"\
    ;\n    for (long i = 3; i < length; i += 2) {\n        if (length % i == 0) return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpewvbo1yw.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpewvbo1yw.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewvbo1yw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0) return \"\
    NO\";\n    if (length == 0) return \"YES\";\n    if (length == 1) return \"NO\"\
    ;\n    if (length == 2) return \"YES\";\n    if (length % 2 == 0) return \"NO\"\
    ;\n    for (long i = 3; i <= sqrt(length); i += 2)\n    {\n        if (length\
    \ % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias\
    \ candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L))\
    \ == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n\
    \    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L,\
    \ 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L,\
    \ -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"\
    NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L,\
    \ -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0643pn04.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp0643pn04.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp0643pn04.d(37): Error: `std.math.sqrt` called
    with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0643pn04.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length < 0)\n      \
    \  return \"NO\";\n    return isPrime(length) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28ks3mrz.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmp28ks3mrz.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmp28ks3mrz.d(34): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ks3mrz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long\
    \ start2 = interval2[0];\n    long end2 = interval2[1];\n    long start = max(start1,\
    \ start2);\n    long end = min(end1, end2);\n    if (start > end)\n        return\
    \ \"NO\";\n    long length = end - start + 1;\n    if (length == 1)\n        return\
    \ \"NO\";\n    if (length == 2)\n        return \"YES\";\n    for (long i = 2;\
    \ i < length; i++)\n    {\n        if (length % i == 0)\n            return \"\
    NO\";\n    }\n    return \"YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamag1m_h.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpamag1m_h.d(34): Error: undefined identifier `min`, did
    you mean function `main`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamag1m_h.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long\
    \ start2 = interval2[0];\n    long end2 = interval2[1];\n    long start = max(start1,\
    \ start2);\n    long end = min(end1, end2);\n    if (start > end)\n        return\
    \ \"NO\";\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n\
    {\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L),\
    \ tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L))\
    \ == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\"\
    );\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L,\
    \ 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L,\
    \ 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\"\
    );\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkbvocpea.d(33): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpkbvocpea.d(34): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpkbvocpea.d(37): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbvocpea.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    if (start > end) return \"NO\";\n    return isPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";\n}\nunittest\n{\n    alias candidate = intersection;\n\
    \n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L,\
    \ 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L,\
    \ 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"\
    YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n\
    \    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L,\
    \ -2L)) == \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm82vey8g.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpm82vey8g.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\n/tmp/tmpm82vey8g.d(32): Error: undefined identifier
    `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm82vey8g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given two intervals,\n\
    \    where each interval is a pair of integers. For example, interval = (start,\
    \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
    \ (start, end)\n    includes both start and end.\n    For each given interval,\
    \ it is assumed that its start is less or equal its end.\n    Your task is to\
    \ determine whether the length of intersection of these two \n    intervals is\
    \ a prime number.\n    Example, the intersection of the intervals (1, 3), (2,\
    \ 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the\
    \ length of the intersection is a prime number, return \"YES\",\n    otherwise,\
    \ return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\
    \n    [input/output] samples:\n    >>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\
    \    \"NO\"\n    >>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n    \"NO\"\n\
    \    >>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n    \"YES\"\n    \n*/\n\
    string intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\
    \ \n{\n    long start = max(interval1[0], interval2[0]);\n    long end = min(interval1[1],\
    \ interval2[1]);\n    long length = end - start;\n    if (length <= 0)\n     \
    \   return \"NO\";\n    if (length == 1)\n        return \"NO\";\n    if (length\
    \ == 2)\n        return \"YES\";\n    for (long i = 2; i < length; i++)\n    {\n\
    \        if (length % i == 0)\n            return \"NO\";\n    }\n    return \"\
    YES\";\n}\nunittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L,\
    \ 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"\
    YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n \
    \   assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L,\
    \ 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L,\
    \ 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) ==\
    \ \"NO\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkacdiqym.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?\n/tmp/tmpkacdiqym.d(30): Error: undefined identifier `min`, did
    you mean function `main`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkacdiqym.d",
    "-I/tmp"]\n'''
  stdout: b''
