{
  "language": "d",
  "name": "HumanEval_102_choose_num",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        z = -1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj6mjeo_c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpj6mjeo_c.__unittest_L32_C1() [0x427a79]\n??:? void tmpj6mjeo_c.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            else\n            {\n                z++;\n            }\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcv1mqm4w.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpcv1mqm4w.__unittest_L38_C1() [0x427a7d]\n??:? void tmpcv1mqm4w.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl3pyphj2.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpl3pyphj2.__unittest_L32_C1() [0x427a71]\n??:? void tmpl3pyphj2.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0) {\n        result = x;\n    } else {\n        result = x + 1;\n    }\n    if (result > y) {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_dd99nie.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp_dd99nie.__unittest_L28_C1() [0x427a79]\n??:? void tmp_dd99nie.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = x;\n    while (z <= y)\n    {\n        if (z % 2 == 0)\n        {\n            return z;\n        }\n        z++;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdupdqnco.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpdupdqnco.__unittest_L28_C1() [0x427a71]\n??:? void tmpdupdqnco.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    static assert(x >= 0L);\n    static assert(y >= 0L);\n    static assert(x <= y);\n    long z = y;\n    while (z >= x)\n    {\n        if (z % 2L == 0L)\n        {\n            return z;\n        }\n        z--;\n    }\n    return -1L;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpatn7qhii.d(17): Error: variable `x` cannot be read at compile time\n/tmp/tmpatn7qhii.d(17):        while evaluating: `static assert(x >= 0L)`\n/tmp/tmpatn7qhii.d(18): Error: variable `y` cannot be read at compile time\n/tmp/tmpatn7qhii.d(18):        while evaluating: `static assert(y >= 0L)`\n/tmp/tmpatn7qhii.d(19): Error: variable `x` cannot be read at compile time\n/tmp/tmpatn7qhii.d(19):        while evaluating: `static assert(x <= y)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatn7qhii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else\n    {\n        long z = x % 2;\n        if (z == 0)\n            return x;\n        else\n            return x + 1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5bmrwfwf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp5bmrwfwf.__unittest_L28_C1() [0x427a61]\n??:? void tmp5bmrwfwf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptki92ayl.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmptki92ayl.__unittest_L32_C1() [0x427a71]\n??:? void tmptki92ayl.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            else\n            {\n                z = z + 1;\n            }\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9e7rixlb.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp9e7rixlb.__unittest_L38_C1() [0x427a85]\n??:? void tmp9e7rixlb.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0) \n    {\n        result = x;\n    }\n    else \n    {\n        result = x + 1;\n    }\n    if (result > y) \n    {\n        result = -1;\n    }\n    return result;\n}\n/*\nThis function takes a positive number x and returns the biggest\n    odd integer number that is in the range [1, x] inclusive. If there's no\n    such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_qhrf4x.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_qhrf4x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else if (x+1 <= y)\n    {\n        result = x+1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5dvlg0tj.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp5dvlg0tj.__unittest_L28_C1() [0x427a75]\n??:? void tmp5dvlg0tj.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long[] nums = new long[y-x+1];\n    long i = 0;\n    foreach(num; x..y+1)\n    {\n        nums[i] = num;\n        i++;\n    }\n    foreach(num; nums)\n    {\n        if(num % 2 == 0)\n        {\n            return num;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd81uijt4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpd81uijt4.__unittest_L33_C1() [0x427dd5]\n??:? void tmpd81uijt4.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x % 2 == 0)\n    {\n        return x;\n    }\n    else if(y % 2 == 0)\n    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvpldn3op.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpvpldn3op.__unittest_L30_C1() [0x427a6d]\n??:? void tmpvpldn3op.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyhm5o0dd.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpyhm5o0dd.__unittest_L33_C1() [0x427a79]\n??:? void tmpyhm5o0dd.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = x;\n    while (z <= y)\n    {\n        if (z % 2 == 0)\n        {\n            return z;\n        }\n        z++;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdupdqnco.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpdupdqnco.__unittest_L28_C1() [0x427a71]\n??:? void tmpdupdqnco.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x % 2;\n        if (z == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return choose_num(x + 1, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt3r_qcel.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpt3r_qcel.__unittest_L34_C1() [0x427a61]\n??:? void tmpt3r_qcel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else if (x == y)\n    {\n        if (x % 2 == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return result;\n        }\n    }\n    else\n    {\n        long diff = y - x;\n        if (diff % 2 == 0)\n        {\n            return y;\n        }\n        else\n        {\n            return y - 1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt201x47x.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpt201x47x.__unittest_L46_C1() [0x427af7]\n??:? void tmpt201x47x.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            else\n            {\n                z++;\n            }\n        }\n        return -1L;\n    }\n}\n/*\nThis function takes a positive number n and returns the sum of all\n    the digits of n.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1g9vl71.d(38): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1g9vl71.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr1t89wzl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpr1t89wzl.__unittest_L24_C1() [0x427a61]\n??:? void tmpr1t89wzl.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = 0;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return z;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph8tbtib1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmph8tbtib1.__unittest_L35_C1() [0x427a75]\n??:? void tmph8tbtib1.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\n/*\nThis function takes a positive number x and returns the smallest \n    positive number that is bigger than x and is a power of 2.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp23bwlz3w.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23bwlz3w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163028
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0) \n    {\n        result = x;\n    }\n    else \n    {\n        result = x + 1;\n    }\n    if (result > y) \n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3jlhs_g9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp3jlhs_g9.__unittest_L32_C1() [0x427a79]\n??:? void tmp3jlhs_g9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt_o66e9u.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpt_o66e9u.__unittest_L28_C1() [0x427a65]\n??:? void tmpt_o66e9u.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphnubs2v3.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmphnubs2v3.__unittest_L35_C1() [0x427a71]\n??:? void tmphnubs2v3.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptki92ayl.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmptki92ayl.__unittest_L32_C1() [0x427a71]\n??:? void tmptki92ayl.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbrxaai4z.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpbrxaai4z.__unittest_L35_C1() [0x427a71]\n??:? void tmpbrxaai4z.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1L;\n    }\n    else \n    {\n        long max = max(x, y);\n        long min = min(x, y);\n        long max_even = max - (max % 2);\n        long min_even = min - (min % 2);\n        if (max_even >= min_even) \n        {\n            return max_even;\n        }\n        else \n        {\n            return -1L;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1q1pkkn.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmph1q1pkkn.d(24): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1q1pkkn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    for (; x <= y; x += 2)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp61rfy8i0.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmp61rfy8i0.__unittest_L32_C1() [0x427b01]\n??:? void tmp61rfy8i0.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x % 2 == 1)\n    {\n        return x + 1;\n    }\n    else if (y % 2 == 0)\n    {\n        return y;\n    }\n    else if (y % 2 == 1)\n    {\n        return y - 1;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5755namt.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmp5755namt.__unittest_L38_C1() [0x427aad]\n??:? void tmp5755namt.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxvz05rel.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpxvz05rel.__unittest_L24_C1() [0x427a61]\n??:? void tmpxvz05rel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x + 1 == y)\n    {\n        return -1;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppybwu0py.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmppybwu0py.__unittest_L30_C1() [0x427a71]\n??:? void tmppybwu0py.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbrxaai4z.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpbrxaai4z.__unittest_L35_C1() [0x427a71]\n??:? void tmpbrxaai4z.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = x;\n    while (z <= y)\n    {\n        if (z % 2 == 0)\n        {\n            return z;\n        }\n        z++;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdupdqnco.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpdupdqnco.__unittest_L28_C1() [0x427a71]\n??:? void tmpdupdqnco.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        long i = x;\n        while (i <= y)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    long z = x % 2;\n    if (z == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu3y1a5pb.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpu3y1a5pb.__unittest_L25_C1() [0x427a61]\n??:? void tmpu3y1a5pb.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxvz05rel.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpxvz05rel.__unittest_L24_C1() [0x427a61]\n??:? void tmpxvz05rel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long i = x;\n    while (i <= y) {\n        if (i % 2 == 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4r68985o.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp4r68985o.__unittest_L26_C1() [0x427a71]\n??:? void tmp4r68985o.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = x;\n    while (i <= y) {\n        if (i % 2 == 0) {\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwg7tr2tn.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpwg7tr2tn.__unittest_L35_C1() [0x427a75]\n??:? void tmpwg7tr2tn.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long z = 0;\n    if (x > y)\n    {\n        z = -1;\n    }\n    else if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else if (x % 2 != 0)\n    {\n        z = x + 1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0l_z0230.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp0l_z0230.__unittest_L33_C1() [0x427a8d]\n??:? void tmp0l_z0230.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x <= y)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa4y45lc9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpa4y45lc9.__unittest_L32_C1() [0x427a79]\n??:? void tmpa4y45lc9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbrxaai4z.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpbrxaai4z.__unittest_L35_C1() [0x427a71]\n??:? void tmpbrxaai4z.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x + 1 <= y)\n    {\n        return x + 1;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4qsfvzp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpy4qsfvzp.__unittest_L30_C1() [0x427a6d]\n??:? void tmpy4qsfvzp.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x % 2 == 1)\n    {\n        return choose_num(x + 1, y);\n    }\n    else if (x > y)\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9kmfem71.d(15): Error: function `tmp9kmfem71.choose_num` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kmfem71.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = 0;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return z;\n    }\n}\n/*\nThis function takes a positive number x and returns the biggest \n    integer number that is in the range [1, x] inclusive and is a power of 2. \n    If there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3dsky0or.d(35): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dsky0or.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = y; i >= x; i--)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1L;\n    }\n    else if (x % 2 == 0) \n    {\n        return x;\n    }\n    else \n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu8t1ny5g.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpu8t1ny5g.__unittest_L30_C1() [0x427a61]\n??:? void tmpu8t1ny5g.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long maxEven = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            maxEven = max(maxEven, i);\n        }\n    }\n    return maxEven;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyi0ibblh.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyi0ibblh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    if(x % 2 == 0)\n    {\n        return x;\n    }\n    else if(y % 2 == 0)\n    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfglstc8e.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpfglstc8e.__unittest_L31_C1() [0x427a6d]\n??:? void tmpfglstc8e.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x == y)\n    {\n        if (x % 2 == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return -1L;\n        }\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuvyb8exz.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmpuvyb8exz.__unittest_L46_C1() [0x427aa9]\n??:? void tmpuvyb8exz.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1L;\n    }\n    else \n    {\n        long z = x % 2L;\n        if (z == 0L) \n        {\n            return x;\n        }\n        else \n        {\n            return choose_num(x + 1L, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpye5_8fko.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpye5_8fko.__unittest_L34_C1() [0x427a61]\n??:? void tmpye5_8fko.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n        return -1;\n    if(x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprngluj3m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmprngluj3m.__unittest_L23_C1() [0x427a61]\n??:? void tmprngluj3m.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            else\n            {\n                z++;\n            }\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcv1mqm4w.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpcv1mqm4w.__unittest_L38_C1() [0x427a7d]\n??:? void tmpcv1mqm4w.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    long result = y;\n    while (result % 2 != 0)\n        result--;\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpctrktp7x.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpctrktp7x.__unittest_L24_C1() [0x427b55]\n??:? void tmpctrktp7x.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yxb76mv.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp6yxb76mv.__unittest_L23_C1() [0x427a61]\n??:? void tmp6yxb76mv.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    if (y % 2 == 0)\n        return y;\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl1wlt43k.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpl1wlt43k.__unittest_L25_C1() [0x427a7d]\n??:? void tmpl1wlt43k.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1L;\n    }\n    else if (x % 2 == 0) \n    {\n        return x;\n    }\n    else \n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu8t1ny5g.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpu8t1ny5g.__unittest_L30_C1() [0x427a61]\n??:? void tmpu8t1ny5g.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = y; i >= x; i--)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 != 0)\n        x++;\n    if (y % 2 != 0)\n        y--;\n    return (x <= y) ? y : -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        z = -1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj6mjeo_c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpj6mjeo_c.__unittest_L32_C1() [0x427a79]\n??:? void tmpj6mjeo_c.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else if (x % 2 != 0)\n    {\n        x = x + 1;\n        z = x;\n    }\n    if (y % 2 != 0)\n    {\n        y = y - 1;\n    }\n    if (x > y)\n    {\n        z = -1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp36ar9oc0.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp36ar9oc0.__unittest_L37_C1() [0x427ab9]\n??:? void tmp36ar9oc0.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr1t89wzl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpr1t89wzl.__unittest_L24_C1() [0x427a61]\n??:? void tmpr1t89wzl.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwg7tr2tn.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpwg7tr2tn.__unittest_L35_C1() [0x427a75]\n??:? void tmpwg7tr2tn.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    static assert(x >= 0L);\n    static assert(y >= 0L);\n    static assert(x <= y);\n    long max = -1L;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpij8wvkic.d(17): Error: variable `x` cannot be read at compile time\n/tmp/tmpij8wvkic.d(17):        while evaluating: `static assert(x >= 0L)`\n/tmp/tmpij8wvkic.d(18): Error: variable `y` cannot be read at compile time\n/tmp/tmpij8wvkic.d(18):        while evaluating: `static assert(y >= 0L)`\n/tmp/tmpij8wvkic.d(19): Error: variable `x` cannot be read at compile time\n/tmp/tmpij8wvkic.d(19):        while evaluating: `static assert(x <= y)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpij8wvkic.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphnubs2v3.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmphnubs2v3.__unittest_L35_C1() [0x427a71]\n??:? void tmphnubs2v3.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9ouxxv4p.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp9ouxxv4p.__unittest_L31_C1() [0x427a6d]\n??:? void tmp9ouxxv4p.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) \n    {\n        return -1L;\n    }\n    if (x % 2 == 0) \n    {\n        return x;\n    }\n    else \n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_r8n3_85.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp_r8n3_85.__unittest_L30_C1() [0x427a61]\n??:? void tmp_r8n3_85.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest odd integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzaag8tls.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzaag8tls.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long result = x;\n        while (result <= y)\n        {\n            if (result % 2 == 0)\n            {\n                return result;\n            }\n            else\n            {\n                result++;\n            }\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpntg9fi74.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpntg9fi74.__unittest_L38_C1() [0x427a7d]\n??:? void tmpntg9fi74.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr1t89wzl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpr1t89wzl.__unittest_L24_C1() [0x427a61]\n??:? void tmpr1t89wzl.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    long result = y;\n    while (result % 2 != 0)\n        result--;\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpctrktp7x.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpctrktp7x.__unittest_L24_C1() [0x427b55]\n??:? void tmpctrktp7x.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\n/*\nThis function takes two positive numbers x and y and returns the\n    smallest odd integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpae7sdwdg.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae7sdwdg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        long i = x;\n        while (i <= y)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long ret = -1;\n    if (x % 2 == 0)\n    {\n        ret = x;\n    }\n    else\n    {\n        ret = x + 1;\n    }\n    if (ret > y)\n    {\n        ret = -1;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm2esm0b0.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpm2esm0b0.__unittest_L32_C1() [0x427a79]\n??:? void tmpm2esm0b0.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x + 1 == y)\n    {\n        return -1;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppybwu0py.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmppybwu0py.__unittest_L30_C1() [0x427a71]\n??:? void tmppybwu0py.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long num = -1;\n    long i = x;\n    while (i <= y)\n    {\n        if (i % 2 == 0)\n        {\n            num = i;\n        }\n        i++;\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0) {\n        result = x;\n    } else {\n        result = x + 1;\n    }\n    if (result > y) {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_dd99nie.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp_dd99nie.__unittest_L28_C1() [0x427a79]\n??:? void tmp_dd99nie.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    if (y % 2 == 0)\n        return y;\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl1wlt43k.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpl1wlt43k.__unittest_L25_C1() [0x427a7d]\n??:? void tmpl1wlt43k.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        foreach (i; x..y)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz8e8hkse.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpz8e8hkse.__unittest_L34_C1() [0x427aef]\n??:? void tmpz8e8hkse.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y) \n    {\n        return result;\n    }\n    else \n    {\n        for (long i = y; i >= x; i--) \n        {\n            if (i % 2 == 0) \n            {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // YOUR CODE HERE\n    long result = -1;\n    if (x > y)\n        return result;\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n                result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        foreach (i; x..y+1)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else if (y % 2 == 0)\n        return y;\n    else\n        return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz94hde55.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpz94hde55.__unittest_L26_C1() [0x427a7d]\n??:? void tmpz94hde55.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpft351ufx.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpft351ufx.__unittest_L32_C1() [0x427a71]\n??:? void tmpft351ufx.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbrxaai4z.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpbrxaai4z.__unittest_L35_C1() [0x427a71]\n??:? void tmpbrxaai4z.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x < y)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    else if (x > y)\n    {\n        if (y % 2 == 0)\n        {\n            result = y;\n        }\n        else\n        {\n            result = y + 1;\n        }\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdhxyekij.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpdhxyekij.__unittest_L49_C1() [0x427ab1]\n??:? void tmpdhxyekij.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while(z <= y)\n        {\n            if(z % 2 == 0)\n            {\n                return z;\n            }\n            else\n            {\n                z++;\n            }\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpi5rmwaib.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpi5rmwaib.__unittest_L38_C1() [0x427a7d]\n??:? void tmpi5rmwaib.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\n/*\nThis function takes a positive number x and returns the biggest\n    integer number that is in the range [1, x] inclusive and is a power of 2.\n    If there's no such number, then the function should return -1.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo5jwa5i9.d(24): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5jwa5i9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else if (x == y)\n    {\n        if (x % 2 == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return result;\n        }\n    }\n    else\n    {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\n        {\n            return mid;\n        }\n        else\n        {\n            return choose_num(x, mid - 1);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc3q2mjpe.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpc3q2mjpe.__unittest_L46_C1() [0x427ab9]\n??:? void tmpc3q2mjpe.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0) {\n        result = x;\n    }\n    else {\n        x++;\n    }\n    if (x > y) {\n        return -1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3_ksthnv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp3_ksthnv.__unittest_L29_C1() [0x427a71]\n??:? void tmp3_ksthnv.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpherbipe2.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpherbipe2.__unittest_L24_C1() [0x427a61]\n??:? void tmpherbipe2.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbrxaai4z.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpbrxaai4z.__unittest_L35_C1() [0x427a71]\n??:? void tmpbrxaai4z.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y) return -1;\n    if (x % 2 == 0) return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9xcrwavf.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp9xcrwavf.__unittest_L21_C1() [0x427a61]\n??:? void tmp9xcrwavf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x + 1 <= y)\n    {\n        return x + 1;\n    }\n    else\n    {\n        return -1;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4qsfvzp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpy4qsfvzp.__unittest_L30_C1() [0x427a6d]\n??:? void tmpy4qsfvzp.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        foreach (i; x..y+1)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while(z <= y)\n        {\n            if(z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe5d5txh1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpe5d5txh1.__unittest_L35_C1() [0x427a7d]\n??:? void tmpe5d5txh1.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x % 2;\n        if (z == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return choose_num(x + 1, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt3r_qcel.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpt3r_qcel.__unittest_L34_C1() [0x427a61]\n??:? void tmpt3r_qcel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while (z <= y)\n        {\n            if (z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf4nurgns.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpf4nurgns.__unittest_L35_C1() [0x427a7d]\n??:? void tmpf4nurgns.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long max = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            max = max(max, i);\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxiu1n42k.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxiu1n42k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yxb76mv.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp6yxb76mv.__unittest_L23_C1() [0x427a61]\n??:? void tmp6yxb76mv.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = 0;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        return -1;\n    }\n    else\n    {\n        return z;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph8tbtib1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmph8tbtib1.__unittest_L35_C1() [0x427a75]\n??:? void tmph8tbtib1.__modtest() [0x427b9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // YOUR CODE HERE\n    long i = 0;\n    if(x > y)\n    {\n        return -1;\n    }\n    else\n    {\n        for(i = y; i >= x; i--)\n        {\n            if(i % 2 == 0)\n            {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (y % 2 == 0)\n    {\n        result = max(result, y);\n    }\n    else\n    {\n        y--;\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvtg3e7hr.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtg3e7hr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\n/*\nThis function takes a positive integer n and returns the sum of the\n    first n odd numbers.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzcqvof7c.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcqvof7c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long z = -1;\n    if (x % 2 == 0)\n    {\n        z = x;\n    }\n    else\n    {\n        z = x + 1;\n    }\n    if (z > y)\n    {\n        z = -1;\n    }\n    return z;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj6mjeo_c.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpj6mjeo_c.__unittest_L32_C1() [0x427a79]\n??:? void tmpj6mjeo_c.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x % 2;\n        if(z == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return choose_num(x + 1, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfxvarjqp.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpfxvarjqp.__unittest_L34_C1() [0x427a61]\n??:? void tmpfxvarjqp.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        x++;\n    }\n    if (x <= y)\n    {\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa4y45lc9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpa4y45lc9.__unittest_L32_C1() [0x427a79]\n??:? void tmpa4y45lc9.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    long i = x;\n    while (i <= y)\n    {\n        if (i % 2 == 0)\n        {\n            result = i;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxvz05rel.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpxvz05rel.__unittest_L24_C1() [0x427a61]\n??:? void tmpxvz05rel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = y; i >= x; i--)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x;\n        while(z <= y)\n        {\n            if(z % 2 == 0)\n            {\n                return z;\n            }\n            z++;\n        }\n        return -1L;\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe5d5txh1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpe5d5txh1.__unittest_L35_C1() [0x427a7d]\n??:? void tmpe5d5txh1.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9b5]\n??:? runModuleUnitTests [0x42b921]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428274]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\n/*\nThis function takes a positive number n and returns the sum of the\n    first n odd numbers.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv2rbp9og.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2rbp9og.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr1t89wzl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpr1t89wzl.__unittest_L24_C1() [0x427a61]\n??:? void tmpr1t89wzl.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        long i = x;\n        while (i <= y)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    foreach(i; x..y+1)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if (x % 2 == 1)\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb1t42b4j.d(15): Error: function `tmpb1t42b4j.choose_num` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1t42b4j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n            result = x;\n        }\n        else\n        {\n            result = x + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9ouxxv4p.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmp9ouxxv4p.__unittest_L31_C1() [0x427a6d]\n??:? void tmp9ouxxv4p.__modtest() [0x427b94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430010]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]\n??:? runModuleUnitTests [0x42b911]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428264]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n        return choose_num(x + 1, y);\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqank_9wf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqank_9wf.__unittest_L30_C1() [0x427a61]\n??:? void tmpqank_9wf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x % 2 == 0)\n    {\n        if (x <= y)\n        {\n            return x;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n    else\n    {\n        if (x + 1 <= y)\n        {\n            return x + 1;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmdtb9d76.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpmdtb9d76.__unittest_L40_C1() [0x427a79]\n??:? void tmpmdtb9d76.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    // your code here\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        long i = x;\n        while (i <= y)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n                break;\n            }\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptgxesje0.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmptgxesje0.__unittest_L38_C1() [0x427a89]\n??:? void tmptgxesje0.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long z = x % 2L;\n        if (z == 0L)\n        {\n            return x;\n        }\n        else\n        {\n            return choose_num(x + 1L, y);\n        }\n    }\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw3drtqbf.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpw3drtqbf.__unittest_L34_C1() [0x427a61]\n??:? void tmpw3drtqbf.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x > y)\n    {\n        return result;\n    }\n    else\n    {\n        for (long i = x; i <= y; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    return choose_num(x + 1, y);\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yxb76mv.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp6yxb76mv.__unittest_L23_C1() [0x427a61]\n??:? void tmp6yxb76mv.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if(x > y)\n    {\n        return -1L;\n    }\n    else\n    {\n        long max = -1L;\n        for(long i = x; i <= y; i++)\n        {\n            if(i % 2 == 0)\n            {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n/*\nThis function takes a positive number n and returns the sum of all\n    even numbers in the range [1, n] inclusive.\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqu9g3n_a.d(34): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqu9g3n_a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163030
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    long result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\n    {\n        result = x + 1;\n    }\n    if (result > y)\n    {\n        result = -1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejjew05f.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpejjew05f.__unittest_L32_C1() [0x427a79]\n??:? void tmpejjew05f.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>> choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n{\n    if (x > y)\n        return -1;\n    else if (x % 2 == 0)\n        return x;\n    else\n        return x + 1;\n}\nunittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxvz05rel.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpxvz05rel.__unittest_L24_C1() [0x427a61]\n??:? void tmpxvz05rel.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163029
    }
  ]
}