language: d
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result2;\n    foreach(c; result)\n    {\n        if(c.value == max)\n      \
    \  {\n            result2[c.key] = c.value;\n        }\n    }\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph5nax_w0.d(25): Error: no property `split` for type `string`

    /tmp/tmph5nax_w0.d(39): Error: no property `value` for type `long`

    /tmp/tmph5nax_w0.d(41): Error: no property `value` for type `long`

    /tmp/tmph5nax_w0.d(51): Error: no property `value` for type `long`

    /tmp/tmph5nax_w0.d(53): Error: no property `key` for type `long`

    /tmp/tmph5nax_w0.d(46): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmph5nax_w0.d(56): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5nax_w0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ dict = [words[0]: 1L];\n        foreach (word; words[1..$])\n        {\n   \
    \         if (word in dict)\n            {\n                dict[word] += 1L;\n\
    \            }\n            else\n            {\n                dict[word] =\
    \ 1L;\n            }\n        }\n        long max = dict.values.max;\n       \
    \ long[string] maxDict = [word: dict[word] for word in dict.keys if dict[word]\
    \ == max];\n        result = maxDict;\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudsg6zrp.d(45): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmpudsg6zrp.d(45): Error: semicolon expected, not `word`

    /tmp/tmpudsg6zrp.d(45): Error: found `if` when expecting `;` following statement

    /tmp/tmpudsg6zrp.d(45): Error: found `]` when expecting `;` following statement

    /tmp/tmpudsg6zrp.d(45): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudsg6zrp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  string[] words = test.split;\n    long[string] counts;\n    foreach(word; words)\n\
    \    {\n        if(counts.count(word) == 0)\n        {\n            counts[word]\
    \ = 1;\n        }\n        else\n        {\n            counts[word] += 1;\n \
    \       }\n    }\n    long max = maxElement(counts.values);\n    foreach(word;\
    \ words)\n    {\n        if(counts[word] == max)\n        {\n            result[word]\
    \ = max;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24vngijw.d(29): Error: no property `split` for type `string`

    /tmp/tmp24vngijw.d(33): Error: no property `count` for type `long[string]`

    /tmp/tmp24vngijw.d(42): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24vngijw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto dict = test.split(\" \").map!(a => a[0]).groupBy!(a => a).map!(a => a[0],\
    \ a => a[1].length);\n    auto max = dict.values.max;\n    result = dict.filter!(a\
    \ => a[1] == max).map!(a => a[0], a => a[1]).nullable;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwrva8b0u.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrva8b0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split;\n    long[string] counts;\n    foreach (word; words)\n\
    \    {\n        counts[word]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    long[string] max_counts;\n    foreach (word; counts.keys)\n    {\n      \
    \  if (counts[word] == max)\n        {\n            max_counts[word] = max;\n\
    \        }\n    }\n    result = max_counts;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yvviund.d(29): Error: no property `split` for type `string`

    /tmp/tmp2yvviund.d(35): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yvviund.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] dict;\n    foreach (word;\
    \ words)\n    {\n        if (dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word]++;\n      \
    \  }\n    }\n    long max = dict.values.max;\n    long[string] max_dict;\n   \
    \ foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n  \
    \          max_dict[key] = value;\n        }\n    }\n    result = max_dict;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1jsc066.d(29): Error: no property `split` for type `string`

    /tmp/tmpq1jsc066.d(33): Error: no property `count` for type `long[string]`

    /tmp/tmpq1jsc066.d(42): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1jsc066.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(i, c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        result[c]++;\n    }\n    long max = 0;\n    foreach(i, v; result)\n \
    \   {\n        if(v > max)\n            max = v;\n    }\n    if(max == 0)\n  \
    \      return null;\n    long[string] res;\n    foreach(i, v; result)\n    {\n\
    \        if(v == max)\n            res[i] = v;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpowj_9nt5.d(29): Error: cannot implicitly convert expression `c`
    of type `immutable(char)` to `string`

    /tmp/tmpowj_9nt5.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpowj_9nt5.d(45): Error: cannot implicitly convert expression `res` of type
    `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowj_9nt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c in dict)\n        {\n            dict[c]++;\n        }\n \
    \       else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(k, v; dict)\n    {\n        if(v\
    \ == max)\n        {\n            result = dict;\n            break;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp38ejdybi.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38ejdybi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] letters = new long[string];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            letters[c]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(l; letters)\n    {\n       \
    \ if(l.value > max)\n        {\n            max = l.value;\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = new long[string];\n        foreach(l;\
    \ letters)\n        {\n            if(l.value == max)\n            {\n       \
    \         result[l.key] = l.value;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7kp7xrj.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpw7kp7xrj.d(26): Error: no property `split` for type `string`

    /tmp/tmpw7kp7xrj.d(36): Error: no property `value` for type `long`

    /tmp/tmpw7kp7xrj.d(38): Error: no property `value` for type `long`

    /tmp/tmpw7kp7xrj.d(43): Error: cannot pass type `string` as a function argument

    /tmp/tmpw7kp7xrj.d(46): Error: no property `value` for type `long`

    /tmp/tmpw7kp7xrj.d(48): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7kp7xrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] histogram;\n    foreach(c; test.split)\n    {\n  \
    \      if(c.length == 1)\n        {\n            histogram[c]++;\n        }\n\
    \    }\n    if(histogram.length > 0)\n    {\n        long max = histogram.values.max;\n\
    \        foreach(c; histogram.keys)\n        {\n            if(histogram[c] ==\
    \ max)\n            {\n                result.insert(c, histogram[c]);\n     \
    \       }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3zazfu4.d(26): Error: no property `split` for type `string`

    /tmp/tmpc3zazfu4.d(35): Error: no property `max` for type `long[]`

    /tmp/tmpc3zazfu4.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3zazfu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n \
    \       {\n            histogram[c]++;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    long[string] result;\n    foreach(k, v; histogram)\n    {\n        if(v ==\
    \ max)\n        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ > 0 ? result : null;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcjf4nixf.d(25): Error: no property `split` for type `string`

    /tmp/tmpcjf4nixf.d(32): Error: undefined identifier `maxElement`

    /tmp/tmpcjf4nixf.d(41): Error: cannot implicitly convert expression `_aaLen(result)
    > 0LU ? result : cast(long[string])null` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjf4nixf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    long[string] result2;\n    foreach(c; result)\n    {\n\
    \        if(c.value == max)\n        {\n            result2[c.key] = c.value;\n\
    \        }\n    }\n    if(result2.length == 0)\n    {\n        return null;\n\
    \    }\n    return result2;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd3wv590.d(25): Error: no property `split` for type `string`

    /tmp/tmpnd3wv590.d(39): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(41): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(47): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(49): Error: no property `key` for type `long`

    /tmp/tmpnd3wv590.d(54): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpnd3wv590.d(56): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd3wv590.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = null;\n    foreach(letter;\
    \ test.split())\n    {\n        if(dict.find(letter) == dict.end)\n        {\n\
    \            dict[letter] = 1;\n        }\n        else\n        {\n         \
    \   dict[letter] += 1;\n        }\n        if(dict[letter] > max)\n        {\n\
    \            max = dict[letter];\n        }\n    }\n    if(max > 0)\n    {\n \
    \       result = new long[string];\n        foreach(letter; test.split())\n  \
    \      {\n            if(dict[letter] == max)\n            {\n               \
    \ result[letter] = max;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdjuvk2f.d(27): Error: no property `split` for type `string`

    /tmp/tmpkdjuvk2f.d(44): Error: cannot pass type `string` as a function argument

    /tmp/tmpkdjuvk2f.d(45): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdjuvk2f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return null;\n    }\n    else\n\
    \    {\n        string[] words = test.split(\" \");\n        long[string] dict;\n\
    \        foreach(word; words)\n        {\n            if(word in dict)\n     \
    \       {\n                dict[word] += 1;\n            }\n            else\n\
    \            {\n                dict[word] = 1;\n            }\n        }\n  \
    \      long max = maxElement(dict.values);\n        long[string] maxDict;\n  \
    \      foreach(key, value; dict)\n        {\n            if(value == max)\n  \
    \          {\n                maxDict[key] = value;\n            }\n        }\n\
    \        result = maxDict;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy5sosyk.d(31): Error: no property `split` for type `string`

    /tmp/tmpxy5sosyk.d(44): Error: undefined identifier `maxElement`

    /tmp/tmpxy5sosyk.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy5sosyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    long[string] histogram;\n    foreach\
    \ (word; words)\n    {\n        histogram[word]++;\n    }\n    long max = histogram.values.max;\n\
    \    foreach (key, value; histogram)\n    {\n        if (value == max)\n     \
    \   {\n            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2afc72b8.d(29): Error: no property `split` for type `string`

    /tmp/tmp2afc72b8.d(35): Error: no property `max` for type `long[]`

    /tmp/tmp2afc72b8.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2afc72b8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    auto counts = words.map!(a => 1L).array;\n\
    \    auto letters = words.array;\n    foreach (i, letter; letters)\n    {\n  \
    \      foreach (j, other; letters[i + 1 .. $])\n        {\n            if (letter\
    \ == other)\n            {\n                counts[i]++;\n                counts[i\
    \ + 1 + j]++;\n            }\n        }\n    }\n    long max = counts.max;\n \
    \   auto maxes = counts.filter!(a => a == max).array;\n    if (maxes.length ==\
    \ 1)\n    {\n        result = [letters[counts.indexOf(max)] : max];\n    }\n \
    \   else\n    {\n        result = maxes.map!(a => letters[counts.indexOf(a)]).array.assocArray;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnsrksbsz.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsrksbsz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split())\n    {\n        if(dict.find(c) is null)\n        {\n        \
    \    dict[c] = 1;\n        }\n        else\n        {\n            dict[c]++;\n\
    \        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c;\
    \ dict.keys)\n        {\n            if(dict[c] == max)\n            {\n     \
    \           result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidoa9dh2.d(26): Error: expression expected, not `:`

    /tmp/tmpidoa9dh2.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidoa9dh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            if (counts.count(word)\
    \ == 0)\n            {\n                counts[word] = 1;\n            }\n   \
    \         else\n            {\n                counts[word] += 1;\n          \
    \  }\n        }\n        long max = maxElement(counts.values);\n        foreach(key,\
    \ value; counts)\n        {\n            if (value == max)\n            {\n  \
    \              result.insert(key, value);\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpinqywem9.d(31): Error: no property `split` for type `string`

    /tmp/tmpinqywem9.d(35): Error: no property `count` for type `long[string]`

    /tmp/tmpinqywem9.d(44): Error: undefined identifier `maxElement`

    /tmp/tmpinqywem9.d(49): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpinqywem9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto words = test.split(\" \");\n    long[string] dict;\n    foreach(word;\
    \ words)\n    {\n        if(dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word] += 1;\n   \
    \     }\n    }\n    long max = dict.values.max;\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            result.set(dict);\n \
    \           break;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhuguj_o.d(29): Error: no property `split` for type `string`

    /tmp/tmplhuguj_o.d(42): Error: no property `max` for type `long[]`

    /tmp/tmplhuguj_o.d(47): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhuguj_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(dict.count(c.to!string)\
    \ == 0)\n            dict[c.to!string] = 1;\n        else\n            dict[c.to!string]++;\n\
    \        if(dict[c.to!string] > max)\n            max = dict[c.to!string];\n \
    \   }\n    foreach(string key; dict.keys)\n    {\n        if(dict[key] == max)\n\
    \            result[key] = dict[key];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_guioqqs.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_guioqqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] temp;\n    long max = 0;\n    foreach(c; test.split)\n\
    \    {\n        if(temp.count(c) == 0)\n        {\n            temp[c] = 1;\n\
    \        }\n        else\n        {\n            temp[c] += 1;\n        }\n  \
    \      if(temp[c] > max)\n        {\n            max = temp[c];\n        }\n \
    \   }\n    if(max > 0)\n    {\n        result = temp;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95wo7aki.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95wo7aki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    if(result.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_result;\n    foreach(c; result)\n    {\n        if(c.value\
    \ == max)\n        {\n            max_result[c.key] = c.value;\n        }\n  \
    \  }\n    return max_result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1y6050w.d(25): Error: no property `split` for type `string`

    /tmp/tmpp1y6050w.d(36): Error: undefined identifier `maxElement`

    /tmp/tmpp1y6050w.d(40): Error: no property `value` for type `long`

    /tmp/tmpp1y6050w.d(42): Error: no property `key` for type `long`

    /tmp/tmpp1y6050w.d(34): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpp1y6050w.d(45): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1y6050w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            if (counts.count(word)\
    \ == 0)\n            {\n                counts[word] = 1;\n            }\n   \
    \         else\n            {\n                counts[word] += 1;\n          \
    \  }\n        }\n        long max = max(counts.values);\n        foreach(key,\
    \ value; counts)\n        {\n            if (value == max)\n            {\n  \
    \              result.insert(key, value);\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8y9kz528.d(31): Error: no property `split` for type `string`

    /tmp/tmp8y9kz528.d(35): Error: no property `count` for type `long[string]`

    /tmp/tmp8y9kz528.d(44): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp8y9kz528.d(49): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8y9kz528.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    string[] words = test.split;\n\
    \    foreach(word; words)\n    {\n        if(dict.count(word) == 0)\n        {\n\
    \            dict[word] = 1;\n        }\n        else\n        {\n           \
    \ dict[word] += 1;\n        }\n    }\n    long max = max(dict.values);\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            result\
    \ = [key: value];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacxl8yw5.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacxl8yw5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ 0;\n    foreach(k, v; result)\n    {\n        if(v > max)\n        {\n     \
    \       max = v;\n        }\n    }\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    auto ret = new long[string];\n    foreach(k, v; result)\n    {\n \
    \       if(v == max)\n        {\n            ret[k] = v;\n        }\n    }\n \
    \   return ret;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n     \
    \   auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7lz8jpv.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpw7lz8jpv.d(25): Error: no property `split` for type `string`

    /tmp/tmpw7lz8jpv.d(44): Error: cannot pass type `string` as a function argument

    /tmp/tmpw7lz8jpv.d(42): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7lz8jpv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    auto letters = test.split(\" \");\n    auto letterCounts = [string:\
    \ long]();\n    foreach(letter; letters)\n    {\n        if(letterCounts.contains(letter))\n\
    \        {\n            letterCounts[letter]++;\n        }\n        else\n   \
    \     {\n            letterCounts[letter] = 1;\n        }\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    if(maxCount > 0)\n    {\n        result = [string:\
    \ long]();\n        foreach(letter; letterCounts.keys)\n        {\n          \
    \  if(letterCounts[letter] == maxCount)\n            {\n                result[letter]\
    \ = maxCount;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfxk8ui1.d(26): Error: found `]` when expecting `.` following long

    /tmp/tmprfxk8ui1.d(26): Error: found `(` when expecting identifier following `long`.

    /tmp/tmprfxk8ui1.d(26): Error: found `)` when expecting `,`

    /tmp/tmprfxk8ui1.d(26): Error: expression expected, not `;`

    /tmp/tmprfxk8ui1.d(27): Error: `key:value` expected for associative array literal

    /tmp/tmprfxk8ui1.d(27): Error: found `foreach` when expecting `,`

    /tmp/tmprfxk8ui1.d(27): Error: found `;` when expecting `)`

    /tmp/tmprfxk8ui1.d(27): Error: found `letters` when expecting `,`

    /tmp/tmprfxk8ui1.d(27): Error: expression expected, not `)`

    /tmp/tmprfxk8ui1.d(28): Error: found `{` when expecting `,`

    /tmp/tmprfxk8ui1.d(29): Error: expression expected, not `if`

    /tmp/tmprfxk8ui1.d(30): Error: found `{` when expecting `,`

    /tmp/tmprfxk8ui1.d(31): Error: found `;` when expecting `,`

    /tmp/tmprfxk8ui1.d(32): Error: expression expected, not `}`

    /tmp/tmprfxk8ui1.d(33): Error: found `else` when expecting `,`

    /tmp/tmprfxk8ui1.d(37): Error: found `}` when '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  else\n    {\n        auto words = test.split(\" \");\n        auto hist = words.histogram;\n\
    \        auto max = hist.values.max;\n        auto keys = hist.keys.filter!(a\
    \ => hist[a] == max);\n        result = keys.map!(a => [a: hist[a]]).array.join;\n\
    \        return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzhk2nxj7.d(31): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhk2nxj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(c in dict)\n        {\n            dict[c] += 1L;\n        }\n        else\n\
    \        {\n            dict[c] = 1L;\n        }\n    }\n    long max = dict.values.max;\n\
    \    if(max == 0L)\n    {\n        return result;\n    }\n    else\n    {\n  \
    \      result = dict.filter!(a => a.value == max);\n        return result;\n \
    \   }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq5ufrsb9.d(26): Error: no property `split` for type `string`

    /tmp/tmpq5ufrsb9.d(37): Error: no property `max` for type `long[]`

    /tmp/tmpq5ufrsb9.d(44): Error: no property `filter` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5ufrsb9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = new long[string];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(dict.count(c.toString())\
    \ == 0)\n            dict[c.toString()] = 1;\n        else\n            dict[c.toString()]++;\n\
    \    }\n    long max = max(dict.values);\n    foreach(string key; dict.keys)\n\
    \    {\n        if(dict[key] == max)\n        {\n            if(result.isNull)\n\
    \                result = new long[string];\n            result[key] = dict[key];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugwsery7.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpugwsery7.d(30): Error: no property `count` for type `long[string]`

    /tmp/tmpugwsery7.d(31): Error: no property `toString` for type `char`

    /tmp/tmpugwsery7.d(33): Error: no property `toString` for type `char`

    /tmp/tmpugwsery7.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpugwsery7.d(41): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugwsery7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n\
    \        return result.filter!(a => a.value == max);\n    }\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmigwlm1z.d(26): Error: no property `split` for type `string`

    /tmp/tmpmigwlm1z.d(44): Error: no property `filter` for type `long[string]`

    /tmp/tmpmigwlm1z.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmigwlm1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n\
    \        return result.filter!(a => a.value == max);\n    }\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywzteo9y.d(26): Error: no property `split` for type `string`

    /tmp/tmpywzteo9y.d(44): Error: no property `filter` for type `long[string]`

    /tmp/tmpywzteo9y.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywzteo9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    auto\
    \ letters = test.split;\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n        {\n            counts[letter]\
    \ = 1;\n        }\n        else\n        {\n            counts[letter] += 1;\n\
    \        }\n    }\n    long max = maxElement(counts.values);\n    foreach (letter;\
    \ letters)\n    {\n        if (counts[letter] == max)\n        {\n           \
    \ result = counts;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk308n0nt.d(25): Error: no property `empty` for type `string`

    /tmp/tmpk308n0nt.d(29): Error: no property `split` for type `string`

    /tmp/tmpk308n0nt.d(42): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk308n0nt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  string[] words = test.split;\n    long[string] histo = new long[string];\n\
    \    foreach(word; words)\n    {\n        histo[word]++;\n    }\n    long max\
    \ = maxElement(histo.values);\n    foreach(key, value; histo)\n    {\n       \
    \ if(value == max)\n        {\n            result.insert(key, value);\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyuoqv6ia.d(29): Error: no property `split` for type `string`

    /tmp/tmpyuoqv6ia.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpyuoqv6ia.d(35): Error: undefined identifier `maxElement`

    /tmp/tmpyuoqv6ia.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuoqv6ia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.length\
    \ == 0)\n        return null;\n    auto letters = test.split;\n    long[string]\
    \ counts;\n    foreach (letter; letters)\n    {\n        if (counts.count(letter)\
    \ == 0)\n            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] result;\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == max)\n\
    \            result[letter] = max;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpux4uepli.d(26): Error: no property `split` for type `string`

    /tmp/tmpux4uepli.d(35): Error: undefined identifier `maxElement`

    /tmp/tmpux4uepli.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpux4uepli.d(42): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpux4uepli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split) \n\
    \    {\n        if(dict.count(c) == 0) \n        {\n            dict[c] = 1;\n\
    \        }\n        else \n        {\n            dict[c]++;\n        }\n    }\n\
    \    long max = dict.values.max;\n    foreach(k, v; dict) \n    {\n        if(v\
    \ == max) \n        {\n            result = dict;\n            break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyd1glzz.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyd1glzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = 0;\n    foreach(k,\
    \ v; result)\n    {\n        if(v > max)\n        {\n            max = v;\n  \
    \      }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    foreach(k,\
    \ v; result)\n    {\n        if(v != max)\n        {\n            result.remove(k);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkd0f583f.d(25): Error: no property `split` for type `string`

    /tmp/tmpkd0f583f.d(42): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpkd0f583f.d(51): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkd0f583f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] finalResult;\n    foreach(key, value; result)\n    {\n     \
    \   if(value == max)\n        {\n            finalResult[key] = value;\n     \
    \   }\n    }\n    return finalResult;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3aicoqc3.d(25): Error: no property `split` for type `string`

    /tmp/tmp3aicoqc3.d(32): Error: undefined identifier `maxElement`

    /tmp/tmp3aicoqc3.d(41): Error: cannot implicitly convert expression `finalResult`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3aicoqc3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c] += 1;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    long[string] result2;\n    foreach(c; result)\n    {\n\
    \        if(c.value == max)\n        {\n            result2[c.key] = c.value;\n\
    \        }\n    }\n    if(result2.length == 0)\n    {\n        return null;\n\
    \    }\n    return result2;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd3wv590.d(25): Error: no property `split` for type `string`

    /tmp/tmpnd3wv590.d(39): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(41): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(47): Error: no property `value` for type `long`

    /tmp/tmpnd3wv590.d(49): Error: no property `key` for type `long`

    /tmp/tmpnd3wv590.d(54): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpnd3wv590.d(56): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd3wv590.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n      \
    \  {\n            if(dict.contains(c))\n            {\n                dict[c]++;\n\
    \            }\n            else\n            {\n                dict[c] = 1;\n\
    \            }\n        }\n    }\n    if(dict.length == 0)\n    {\n        return\
    \ null;\n    }\n    long max = dict.values.max;\n    long[string] result;\n  \
    \  foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n   \
    \         result[key] = value;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpub4ogq3i.d(25): Error: no property `split` for type `string`

    /tmp/tmpub4ogq3i.d(43): Error: no property `max` for type `long[]`

    /tmp/tmpub4ogq3i.d(41): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpub4ogq3i.d(52): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpub4ogq3i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long[string] dict;\n    foreach (letter; test.split(\" \"))\n    {\n     \
    \   if (dict.count(letter) == 0)\n        {\n            dict[letter] = 1;\n \
    \       }\n        else\n        {\n            dict[letter]++;\n        }\n \
    \   }\n    long max = dict.values.max();\n    foreach (key, value; dict)\n   \
    \ {\n        if (value == max)\n        {\n            result[key] = value;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbwg4njtm.d(30): Error: no property `split` for type `string`

    /tmp/tmpbwg4njtm.d(41): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwg4njtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c in result)\n      \
    \  {\n            result[c]++;\n        }\n        else\n        {\n         \
    \   result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    return result.filter!(a\
    \ => a.value == max);\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmctk4j6.d(25): Error: no property `split` for type `string`

    /tmp/tmpkmctk4j6.d(36): Error: undefined identifier `maxElement`

    /tmp/tmpkmctk4j6.d(41): Error: no property `filter` for type `long[string]`

    /tmp/tmpkmctk4j6.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmctk4j6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            counts[word]++;\n\
    \        }\n        long max = maxElement(counts.values);\n        foreach(key;\
    \ counts.keys)\n        {\n            if (counts[key] == max)\n            {\n\
    \                result[key] = max;\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpippyzl4l.d(31): Error: no property `split` for type `string`

    /tmp/tmpippyzl4l.d(37): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpippyzl4l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\
    \ \n    {\n        return null;\n    }\n    else \n    {\n        auto words =\
    \ test.split(\" \");\n        auto hist = words.histogram;\n        auto max =\
    \ hist.values.max;\n        auto result = hist.byKeyValue!(v => v == max);\n \
    \       return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp701j6w97.d(24): Error: no property `empty` for type `string`

    /tmp/tmp701j6w97.d(30): Error: no property `split` for type `string`

    /tmp/tmp701j6w97.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp701j6w97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] splitted = test.split(\" \");\n    long[string] dict;\n    foreach\
    \ (letter; splitted)\n    {\n        if (dict.contains(letter))\n        {\n \
    \           dict[letter] += 1;\n        }\n        else\n        {\n         \
    \   dict[letter] = 1;\n        }\n    }\n    long max = max(dict.values);\n  \
    \  foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n \
    \           result.insert(key, value);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgb6gtucw.d(29): Error: no property `split` for type `string`

    /tmp/tmpgb6gtucw.d(33): Error: no property `contains` for type `long[string]`

    /tmp/tmpgb6gtucw.d(42): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpgb6gtucw.d(47): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgb6gtucw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    long[string] result;\n    foreach (c; test.split)\n\
    \    {\n        if (c.length == 1)\n            result[c]++;\n    }\n    if (result.empty)\n\
    \        return null;\n    long max = result.values.max;\n    return result.filter!(a\
    \ => a.value == max);\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_8yxh50.d(24): Error: no property `empty` for type `string`

    /tmp/tmpb_8yxh50.d(27): Error: no property `split` for type `string`

    /tmp/tmpb_8yxh50.d(32): Error: no property `empty` for type `long[string]`

    /tmp/tmpb_8yxh50.d(34): Error: no property `max` for type `long[]`

    /tmp/tmpb_8yxh50.d(35): Error: no property `filter` for type `long[string]`

    /tmp/tmpb_8yxh50.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpb_8yxh50.d(33): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_8yxh50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] histogram;\n    foreach\
    \ (letter; letters)\n    {\n        histogram[letter]++;\n    }\n    long max\
    \ = maxElement(histogram.values);\n    foreach (letter; histogram.keys)\n    {\n\
    \        if (histogram[letter] == max)\n        {\n            result.insert(letter,\
    \ histogram[letter]);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1lhnhg8s.d(29): Error: no property `split` for type `string`

    /tmp/tmp1lhnhg8s.d(35): Error: undefined identifier `maxElement`

    /tmp/tmp1lhnhg8s.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lhnhg8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(char c; test)\n    {\n        if(c == ' ')\n          \
    \  continue;\n        if(result.count(c) == 0)\n            result[c] = 1;\n \
    \       else\n            result[c]++;\n    }\n    if(result.length == 0)\n  \
    \      return null;\n    long max = result.values.max;\n    foreach(key, value;\
    \ result)\n    {\n        if(value != max)\n            result.remove(key);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jc9kqnu.d(29): Error: no property `count` for type `long[string]`

    /tmp/tmp6jc9kqnu.d(30): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmp6jc9kqnu.d(32): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmp6jc9kqnu.d(36): Error: no property `max` for type `long[]`

    /tmp/tmp6jc9kqnu.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp6jc9kqnu.d(42): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jc9kqnu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long[string] dict;\n    foreach (c; test.split())\n    {\n        if (dict.count(c)\
    \ == 0)\n        {\n            dict[c] = 1;\n        }\n        else\n      \
    \  {\n            dict[c] += 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach (c; dict.keys)\n    {\n        if (dict[c] == max)\n        {\n \
    \           result.insert(dict);\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipiz56p7.d(30): Error: no property `split` for type `string`

    /tmp/tmpipiz56p7.d(41): Error: no property `max` for type `long[]`

    /tmp/tmpipiz56p7.d(46): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipiz56p7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        auto words = test.split(\" \");\n        auto wordCounts\
    \ = words.map!(a => a.length).array;\n        auto maxCount = max(wordCounts);\n\
    \        auto maxCountIndexes = wordCounts.indexOfAll(maxCount);\n        result\
    \ = new long[string]();\n        foreach (index; maxCountIndexes)\n        {\n\
    \            result[words[index]] = maxCount;\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgutbs5jx.d(31): Error: no property `split` for type `string`

    /tmp/tmpgutbs5jx.d(33): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpgutbs5jx.d(35): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgutbs5jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    auto hist = words.histogram;\n    auto\
    \ max = hist.values.max;\n    foreach (key, value; hist)\n    {\n        if (value\
    \ == max)\n        {\n            result.insert(key, value);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo6fpjovk.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6fpjovk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    foreach(c;\
    \ result)\n    {\n        if(c.value != max)\n        {\n            result.remove(c.key);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfqwpf915.d(25): Error: no property `split` for type `string`

    /tmp/tmpfqwpf915.d(35): Error: no property `value` for type `long`

    /tmp/tmpfqwpf915.d(37): Error: no property `value` for type `long`

    /tmp/tmpfqwpf915.d(46): Error: no property `value` for type `long`

    /tmp/tmpfqwpf915.d(48): Error: no property `key` for type `long`

    /tmp/tmpfqwpf915.d(42): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpfqwpf915.d(51): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqwpf915.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(letter; test.split)\n    {\n        if(result.contains(letter))\n\
    \        {\n            result[letter]++;\n        }\n        else\n        {\n\
    \            result[letter] = 1;\n        }\n    }\n    if(result.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = result.values.max;\n    long[string]\
    \ result2;\n    foreach(key, value; result)\n    {\n        if(value == max)\n\
    \        {\n            result2[key] = value;\n        }\n    }\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcv809k_.d(25): Error: no property `split` for type `string`

    /tmp/tmpvcv809k_.d(40): Error: no property `max` for type `long[]`

    /tmp/tmpvcv809k_.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpvcv809k_.d(49): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcv809k_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    if (test.length == 0)\n        return null;\n    foreach (char\
    \ c; test.split())\n    {\n        if (result.count(c) == 0)\n            result[c]\
    \ = 1;\n        else\n            result[c]++;\n    }\n    long max = 0;\n   \
    \ foreach (key, value; result)\n    {\n        if (value > max)\n            max\
    \ = value;\n    }\n    long[string] max_result;\n    foreach (key, value; result)\n\
    \    {\n        if (value == max)\n            max_result[key] = value;\n    }\n\
    \    return max_result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggpwjlr3.d(27): Error: no property `split` for type `string`

    /tmp/tmpggpwjlr3.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpggpwjlr3.d(46): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggpwjlr3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    long max = 0;\n    foreach(c;\
    \ test.split)\n    {\n        if(c in dict)\n        {\n            dict[c]++;\n\
    \        }\n        else\n        {\n            dict[c] = 1;\n        }\n   \
    \     if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n  \
    \  }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(k, v; dict)\n\
    \        {\n            if(v == max)\n            {\n                result[k]\
    \ = v;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsscmv6qe.d(25): Error: expression expected, not `:`

    /tmp/tmpsscmv6qe.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsscmv6qe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    string[] words = test.split;\n\
    \    foreach(word; words)\n    {\n        if(word in dict)\n        {\n      \
    \      dict[word] += 1;\n        }\n        else\n        {\n            dict[word]\
    \ = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            result\
    \ = dict;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmputzk6ad9.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputzk6ad9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long[string] dict;\n    foreach (c; test.split)\n    {\n        if (c in dict)\n\
    \        {\n            dict[c]++;\n        }\n        else\n        {\n     \
    \       dict[c] = 1;\n        }\n    }\n    long max = dict.values.max;\n    foreach\
    \ (key, value; dict)\n    {\n        if (value == max)\n        {\n          \
    \  result.set(dict);\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp0sgjbf.d(30): Error: no property `split` for type `string`

    /tmp/tmptp0sgjbf.d(41): Error: no property `max` for type `long[]`

    /tmp/tmptp0sgjbf.d(46): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp0sgjbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] temp = [:];\n    foreach(char\
    \ c; test.split)\n    {\n        if(temp.count(c.toString) == 0)\n        {\n\
    \            temp[c.toString] = 1;\n        }\n        else\n        {\n     \
    \       temp[c.toString]++;\n        }\n        if(temp[c.toString] > max)\n \
    \       {\n            max = temp[c.toString];\n        }\n    }\n    foreach(k,\
    \ v; temp)\n    {\n        if(v == max)\n        {\n            result = temp;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp93m5pmkx.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93m5pmkx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            result[c]++;\n        }\n    }\n    if(result.length)\n    {\n  \
    \      long max = result.values.max;\n        return result.filter!(a => a.value\
    \ == max);\n    }\n    return null;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpds3fgrv5.d(25): Error: no property `split` for type `string`

    /tmp/tmpds3fgrv5.d(34): Error: no property `max` for type `long[]`

    /tmp/tmpds3fgrv5.d(35): Error: no property `filter` for type `long[string]`

    /tmp/tmpds3fgrv5.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds3fgrv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] hist;\n    foreach(c; test.split)\n    {\n       \
    \ if(c in hist)\n        {\n            hist[c]++;\n        }\n        else\n\
    \        {\n            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.insert(c, hist[c]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdt3gtpp5.d(26): Error: no property `split` for type `string`

    /tmp/tmpdt3gtpp5.d(37): Error: undefined identifier `maxElement`

    /tmp/tmpdt3gtpp5.d(46): Error: no property `insert` for type `Nullable!(long[string])`

    /tmp/tmpdt3gtpp5.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdt3gtpp5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 0) continue;\n        if(!result.contains(c))\n        {\n            result[c]\
    \ = 1;\n        }\n        else\n        {\n            result[c]++;\n       \
    \ }\n        max = max(max, result[c]);\n    }\n    if(max == 0) return null;\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 0) continue;\n    \
    \    if(result[c] != max)\n        {\n            result.remove(c);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo38uh2po.d(26): Error: no property `split` for type `string`

    /tmp/tmpo38uh2po.d(40): Error: no property `split` for type `string`

    /tmp/tmpo38uh2po.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpo38uh2po.d(48): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo38uh2po.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] hist = new long[string];\n\
    \    foreach (word; words)\n    {\n        hist[word]++;\n    }\n    long max\
    \ = max(hist.values);\n    long[string] max_dict = new long[string];\n    foreach\
    \ (key, value; hist)\n    {\n        if (value == max)\n        {\n          \
    \  max_dict[key] = value;\n        }\n    }\n    result = max_dict;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohs0be1x.d(29): Error: no property `split` for type `string`

    /tmp/tmpohs0be1x.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpohs0be1x.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpohs0be1x.d(36): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohs0be1x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(!dict.contains(c))\n        {\n            dict[c]\
    \ = 1;\n        }\n        else\n        {\n            dict[c] += 1;\n      \
    \  }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n     \
    \   }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c;\
    \ dict.keys)\n        {\n            if(dict[c] == max)\n            {\n     \
    \           result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszrfdach.d(26): Error: expression expected, not `:`

    /tmp/tmpszrfdach.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszrfdach.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c] += 1;\n        }\n    }\n    if(result.length == 0)\n  \
    \  {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] finalResult;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            finalResult[c] = max;\n        }\n    }\n  \
    \  return finalResult;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphuaehr_2.d(25): Error: no property `split` for type `string`

    /tmp/tmphuaehr_2.d(40): Error: undefined identifier `maxElement`

    /tmp/tmphuaehr_2.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmphuaehr_2.d(49): Error: cannot implicitly convert expression `finalResult`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphuaehr_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length > 0)\n       \
    \ {\n            if(dict.contains(c))\n            {\n                dict[c]\
    \ += 1;\n            }\n            else\n            {\n                dict[c]\
    \ = 1;\n            }\n        }\n    }\n    if(dict.length == 0)\n    {\n   \
    \     return null;\n    }\n    long max = dict.values.max;\n    long[string] result;\n\
    \    foreach(k, v; dict)\n    {\n        if(v == max)\n        {\n           \
    \ result[k] = v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie2iaij3.d(25): Error: no property `split` for type `string`

    /tmp/tmpie2iaij3.d(43): Error: no property `max` for type `long[]`

    /tmp/tmpie2iaij3.d(41): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpie2iaij3.d(52): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie2iaij3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = new long[string];\n    foreach(c; test.split)\n    {\n        result[c]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    else\n    {\n        long[string] result2 = new\
    \ long[string];\n        foreach(k, v; result)\n        {\n            if(v ==\
    \ max)\n            {\n                result2[k] = v;\n            }\n      \
    \  }\n        return result2;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpignc3ooi.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpignc3ooi.d(25): Error: no property `split` for type `string`

    /tmp/tmpignc3ooi.d(29): Error: undefined identifier `maxElement`

    /tmp/tmpignc3ooi.d(36): Error: cannot pass type `string` as a function argument

    /tmp/tmpignc3ooi.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpignc3ooi.d(44): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpignc3ooi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(letter;\
    \ test.split)\n    {\n        if(!dict.containsKey(letter))\n        {\n     \
    \       dict[letter] = 1;\n        }\n        else\n        {\n            dict[letter]++;\n\
    \        }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(key,\
    \ value; dict)\n        {\n            if(value == max)\n            {\n     \
    \           result[key] = value;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03q8__ct.d(26): Error: expression expected, not `:`

    /tmp/tmp03q8__ct.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03q8__ct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            result[c]++;\n        }\n    }\n    if(result.length)\n    {\n  \
    \      long max = result.values.max;\n        return result.filter!(a => a.value\
    \ == max);\n    }\n    return null;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpds3fgrv5.d(25): Error: no property `split` for type `string`

    /tmp/tmpds3fgrv5.d(34): Error: no property `max` for type `long[]`

    /tmp/tmpds3fgrv5.d(35): Error: no property `filter` for type `long[string]`

    /tmp/tmpds3fgrv5.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds3fgrv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n  \
    \  foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            result.insert(k,\
    \ v);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprq245g9_.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprq245g9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c]++;\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return null;\n    }\n    long max = result.values.max;\n    return result.filter!(a\
    \ => a.value == max);\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp38n0c4f0.d(25): Error: no property `split` for type `string`

    /tmp/tmp38n0c4f0.d(40): Error: no property `max` for type `long[]`

    /tmp/tmp38n0c4f0.d(41): Error: no property `filter` for type `long[string]`

    /tmp/tmp38n0c4f0.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38n0c4f0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         counts[i] = 0;\n            foreach (j, word2; words)\n            {\n\
    \                if (word == word2)\n                {\n                    counts[i]++;\n\
    \                }\n            }\n        }\n        long max = maxElement(counts);\n\
    \        long[] indices = new long[words.length];\n        long index = 0;\n \
    \       foreach (i, count; counts)\n        {\n            if (count == max)\n\
    \            {\n                indices[index] = i;\n                index++;\n\
    \            }\n        }\n        indices = indices[0..index];\n        long[string]\
    \ dict = new long[string];\n        foreach (i, index; indices)\n        {\n \
    \           dict[words[index]] = max;\n        }\n        result = dict;\n   \
    \     return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivtow894.d(31): Error: no property `split` for type `string`

    /tmp/tmpivtow894.d(44): Error: undefined identifier `maxElement`

    /tmp/tmpivtow894.d(56): Error: cannot pass type `string` as a function argument

    /tmp/tmpivtow894.d(57): Error: variable `index` is shadowing variable `tmpivtow894.histogram.index`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivtow894.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.length\
    \ == 0) \n    {\n        return null;\n    }\n    auto words = test.split(\" \"\
    );\n    long[string] histogram;\n    foreach (word; words) \n    {\n        if\
    \ (word in histogram) \n        {\n            histogram[word] += 1;\n       \
    \ }\n        else \n        {\n            histogram[word] = 1;\n        }\n \
    \   }\n    long max = maxElement(histogram.values);\n    long[string] result;\n\
    \    foreach (word; words) \n    {\n        if (histogram[word] == max) \n   \
    \     {\n            result[word] = max;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuds8xf1x.d(28): Error: no property `split` for type `string`

    /tmp/tmpuds8xf1x.d(41): Error: undefined identifier `maxElement`

    /tmp/tmpuds8xf1x.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpuds8xf1x.d(50): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuds8xf1x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(dict.count(c) == 0)\n        {\n            dict[c] = 1;\n        }\n   \
    \     else\n        {\n            dict[c] += 1;\n        }\n    }\n    if(dict.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = dict.values.max;\n\
    \    foreach(k, v; dict)\n    {\n        if(v == max)\n        {\n           \
    \ result.insert(k, v);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5c_2cwvi.d(26): Error: no property `split` for type `string`

    /tmp/tmp5c_2cwvi.d(41): Error: no property `max` for type `long[]`

    /tmp/tmp5c_2cwvi.d(46): Error: no property `insert` for type `Nullable!(long[string])`

    /tmp/tmp5c_2cwvi.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c_2cwvi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            max_result[c] = max;\n        }\n    }\n   \
    \ return max_result.nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjc16bdof.d(25): Error: no property `split` for type `string`

    /tmp/tmpjc16bdof.d(36): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc16bdof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  else\n    {\n        auto words = test.split(\" \");\n        long[string]\
    \ histogram;\n        foreach(word; words)\n        {\n            if(histogram.count(word)\
    \ == 0)\n            {\n                histogram[word] = 1;\n            }\n\
    \            else\n            {\n                histogram[word] += 1;\n    \
    \        }\n        }\n        long max = maxElement(histogram.values);\n    \
    \    foreach(key, value; histogram)\n        {\n            if(value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \        return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22nsa596.d(31): Error: no property `split` for type `string`

    /tmp/tmp22nsa596.d(44): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22nsa596.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphevdr7gd.d(89): Error: identifier expected following `import`

    /tmp/tmphevdr7gd.d(89): Error: `;` expected

    /tmp/tmphevdr7gd.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphevdr7gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        result[c]++;\n    }\n\
    \    long max = max(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    foreach(k,v; result)\n    {\n        if(v != max)\n        {\n   \
    \         result.remove(k);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyjzmzrrd.d(25): Error: no property `split` for type `string`

    /tmp/tmpyjzmzrrd.d(29): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpyjzmzrrd.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpyjzmzrrd.d(41): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjzmzrrd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(dict.count(c) == 0)\n        {\n            dict[c] = 1;\n        }\n   \
    \     else\n        {\n            dict[c] += 1;\n        }\n    }\n    if(dict.length\
    \ == 0)\n    {\n        return null;\n    }\n    else\n    {\n        long max\
    \ = dict.values.max;\n        foreach(c; dict.keys)\n        {\n            if(dict[c]\
    \ == max)\n            {\n                result[c] = max;\n            }\n  \
    \      }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwb3g4df.d(26): Error: no property `split` for type `string`

    /tmp/tmptwb3g4df.d(43): Error: no property `max` for type `long[]`

    /tmp/tmptwb3g4df.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwb3g4df.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if(max > 0)\n  \
    \  {\n        result = [:];\n        foreach(c; hist)\n        {\n           \
    \ if(c.value == max)\n            {\n                result[c.key] = c.value;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbjv0avi.d(25): Error: expression expected, not `:`

    /tmp/tmpbbjv0avi.d(43): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbjv0avi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n  \
    \  foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = [k: v];\n            }\n            else\n\
    \            {\n                result[k] = v;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcxloocwt.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxloocwt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    import std.algorithm.comparison\
    \ : max;\n    import std.algorithm.iteration : map, filter, count;\n    import\
    \ std.array : array;\n    import std.range : iota;\n    import std.typecons :\
    \ Nullable;\n    import std.conv : to;\n    import std.math : max;\n    import\
    \ std.range : takeExactly;\n    import std.algorithm.searching : countUntil;\n\
    \    import std.algorithm.mutation : move;\n    import std.range : retro;\n  \
    \  import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ :\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
    \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6vwit6d.d(78): Error: identifier expected following `:`

    /tmp/tmpb6vwit6d.d(78): Error: `;` expected

    /tmp/tmpb6vwit6d.d(123): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6vwit6d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] letterCounts;\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCounts.count(letter) == 0)\n   \
    \     {\n            letterCounts[letter] = 1;\n        }\n        else\n    \
    \    {\n            letterCounts[letter] += 1;\n        }\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\n    {\n\
    \        if (letterCounts[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ letterCounts[letter]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bg5qbj9.d(29): Error: no property `split` for type `string`

    /tmp/tmp9bg5qbj9.d(42): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp9bg5qbj9.d(47): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bg5qbj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = new long[string];\n    foreach(c; test.split())\n    {\n        result[c]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    return result.filter!(a => a.value == max);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6hiei47.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpr6hiei47.d(25): Error: no property `split` for type `string`

    /tmp/tmpr6hiei47.d(29): Error: undefined identifier `maxElement`

    /tmp/tmpr6hiei47.d(34): Error: no property `filter` for type `long[string]`

    /tmp/tmpr6hiei47.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6hiei47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ 0;\n    foreach(c; result)\n    {\n        if(c.value > max)\n        {\n  \
    \          max = c.value;\n        }\n    }\n    if(max == 0)\n    {\n       \
    \ return null;\n    }\n    auto result2 = new long[string];\n    foreach(c; result)\n\
    \    {\n        if(c.value == max)\n        {\n            result2[c.key] = c.value;\n\
    \        }\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_a2aooj.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpt_a2aooj.d(25): Error: no property `split` for type `string`

    /tmp/tmpt_a2aooj.d(44): Error: cannot pass type `string` as a function argument

    /tmp/tmpt_a2aooj.d(42): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_a2aooj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram = [:];\n    foreach(c; test.split)\n    {\n        histogram[c]++;\n\
    \    }\n    long max = maxElement(histogram.values);\n    long[string] result\
    \ = [:];\n    foreach(c; histogram.keys)\n    {\n        if(histogram[c] == max)\n\
    \        {\n            result[c] = max;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp736w6mbk.d(24): Error: expression expected, not `:`

    /tmp/tmp736w6mbk.d(30): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp736w6mbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram;\n    foreach(letter; test.split)\n    {\n        histogram[letter]++;\n\
    \    }\n    long max = max(histogram.values);\n    if(max == 0)\n    {\n     \
    \   return null;\n    }\n    return histogram.filter!(a => a.value == max);\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6drypz3p.d(25): Error: no property `split` for type `string`

    /tmp/tmp6drypz3p.d(29): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp6drypz3p.d(34): Error: no property `filter` for type `long[string]`

    /tmp/tmp6drypz3p.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6drypz3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    if(result.length ==\
    \ 0)\n    {\n        return null;\n    }\n    else\n    {\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ovn_dif.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp5ovn_dif.d(25): Error: no property `split` for type `string`

    /tmp/tmp5ovn_dif.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ovn_dif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] letters;\n    foreach(c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(letters.count(c) == 0)\n        \
    \    letters[c] = 1;\n        else\n            letters[c] += 1;\n    }\n    if(letters.length\
    \ == 0)\n        return null;\n    long max = 0;\n    foreach(l; letters)\n  \
    \  {\n        if(l.value > max)\n            max = l.value;\n    }\n    foreach(l;\
    \ letters)\n    {\n        if(l.value == max)\n            result.insert(l.key,\
    \ l.value);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpyphu9h.d(30): Error: no property `count` for type `long[string]`

    /tmp/tmpzpyphu9h.d(31): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzpyphu9h.d(33): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    /tmp/tmpzpyphu9h.d(40): Error: no property `value` for type `long`

    /tmp/tmpzpyphu9h.d(41): Error: no property `value` for type `long`

    /tmp/tmpzpyphu9h.d(45): Error: no property `value` for type `long`

    /tmp/tmpzpyphu9h.d(46): Error: no property `insert` for type `Nullable!(long[string])`

    /tmp/tmpzpyphu9h.d(36): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpyphu9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return null;\n    }\n   \
    \ auto words = test.split(\" \");\n    long[string] counts;\n    foreach (word;\
    \ words)\n    {\n        if (counts.count(word) == 0)\n        {\n           \
    \ counts[word] = 1;\n        }\n        else\n        {\n            counts[word]++;\n\
    \        }\n    }\n    long max = maxElement(counts.values);\n    foreach (key,\
    \ value; counts)\n    {\n        if (value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dq18jvc.d(29): Error: no property `split` for type `string`

    /tmp/tmp0dq18jvc.d(42): Error: undefined identifier `maxElement`

    /tmp/tmp0dq18jvc.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dq18jvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = result.values.max;\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    foreach(k, v; result)\n\
    \    {\n        if(v != max)\n        {\n            result.remove(k);\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa68aw5vn.d(25): Error: no property `split` for type `string`

    /tmp/tmpa68aw5vn.d(32): Error: no property `max` for type `long[]`

    /tmp/tmpa68aw5vn.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpa68aw5vn.d(44): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa68aw5vn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto hist\
    \ = test.split(\" \");\n    auto hist_dict = new long[string];\n    foreach(i;\
    \ hist)\n    {\n        if(hist_dict.count(i) == 0)\n        {\n            hist_dict[i]\
    \ = 1;\n        }\n        else\n        {\n            hist_dict[i]++;\n    \
    \    }\n    }\n    auto max_val = max(hist_dict.values);\n    auto max_dict =\
    \ new long[string];\n    foreach(i; hist_dict)\n    {\n        if(i.value == max_val)\n\
    \        {\n            max_dict[i.key] = i.value;\n        }\n    }\n    return\
    \ max_dict.nullable;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ym4br94.d(24): Error: no property `split` for type `string`

    /tmp/tmp5ym4br94.d(25): Error: cannot pass type `string` as a function argument

    /tmp/tmp5ym4br94.d(37): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp5ym4br94.d(38): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ym4br94.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    // TODO: implement\n\
    \    return null;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n   \
    \     auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfuf06qq.d(25): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfuf06qq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] temp = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        if(temp.count(c) == 0)\n        {\n            temp[c] = 1;\n\
    \        }\n        else\n        {\n            temp[c] += 1;\n        }\n  \
    \  }\n    long max = temp.values.max;\n    foreach(k, v; temp)\n    {\n      \
    \  if(v == max)\n        {\n            result = temp;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphcsm4fqy.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmphcsm4fqy.d(26): Error: no property `split` for type `string`

    /tmp/tmphcsm4fqy.d(37): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcsm4fqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length > 0)\n        {\n            if(dict.count(c) == 0)\n\
    \            {\n                dict[c] = 1;\n            }\n            else\n\
    \            {\n                dict[c] += 1;\n            }\n        }\n    }\n\
    \    if(dict.length > 0)\n    {\n        long max = dict.values.max;\n       \
    \ foreach(k, v; dict)\n        {\n            if(v == max)\n            {\n  \
    \              if(result is null)\n                {\n                    result\
    \ = [k: v];\n                }\n                else\n                {\n    \
    \                result[k] = v;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsoko0k2.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsoko0k2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n      \
    \  {\n            dict[c]++;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    long[string] result;\n    foreach(k, v; dict)\n    {\n        if(v == max)\n\
    \        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0utp7nc.d(25): Error: no property `split` for type `string`

    /tmp/tmpo0utp7nc.d(32): Error: undefined identifier `maxElement`

    /tmp/tmpo0utp7nc.d(41): Error: cannot implicitly convert expression `_aaLen(result)
    == 0LU ? cast(long[string])null : result` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0utp7nc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0) \n    {\n        return result;\n    }\n\
    \    auto letters = test.split(\" \");\n    long[string] counts;\n    foreach\
    \ (letter; letters) \n    {\n        if (counts.count(letter) == 0) \n       \
    \ {\n            counts[letter] = 1;\n        }\n        else \n        {\n  \
    \          counts[letter] += 1;\n        }\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts) \n    {\n        if (value == max) \n      \
    \  {\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p1hh0lb.d(29): Error: no property `split` for type `string`

    /tmp/tmp7p1hh0lb.d(42): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p1hh0lb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] counts;\n    foreach (letter;\
    \ letters)\n    {\n        counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result[key] = value;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv6hknspb.d(29): Error: no property `split` for type `string`

    /tmp/tmpv6hknspb.d(35): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv6hknspb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(letter;\
    \ test.split)\n    {\n        if(dict.count(letter) == 0)\n        {\n       \
    \     dict[letter] = 1;\n        }\n        else\n        {\n            dict[letter]++;\n\
    \        }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(key,\
    \ value; dict)\n        {\n            if(value == max)\n            {\n     \
    \           result[key] = value;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5u72ymg.d(26): Error: expression expected, not `:`

    /tmp/tmpj5u72ymg.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5u72ymg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    auto result = test.split(\" \");\n    auto dict = new\
    \ long[string];\n    foreach (letter; result)\n    {\n        if (dict.count(letter)\
    \ == 0)\n            dict[letter] = 1;\n        else\n            dict[letter]\
    \ += 1;\n    }\n    auto max = dict.values.max;\n    auto keys = dict.keys.filter!(a\
    \ => dict[a] == max);\n    return keys.length > 1 ? keys : null;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsi8qb_0k.d(24): Error: no property `empty` for type `string`

    /tmp/tmpsi8qb_0k.d(26): Error: no property `split` for type `string`

    /tmp/tmpsi8qb_0k.d(27): Error: cannot pass type `string` as a function argument

    /tmp/tmpsi8qb_0k.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsi8qb_0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    long max = 0;\n    foreach(c; test.split(\"\
    \ \"))\n    {\n        if(!dict.contains(c))\n        {\n            dict[c] =\
    \ 1;\n        }\n        else\n        {\n            dict[c] += 1;\n        }\n\
    \        if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n\
    \    }\n    foreach(key, value; dict)\n    {\n        if(value == max)\n     \
    \   {\n            if(result.isNull)\n            {\n                result =\
    \ new long[string];\n            }\n            result[key] = value;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpseqqctde.d(27): Error: no property `split` for type `string`

    /tmp/tmpseqqctde.d(48): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpseqqctde.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram;\n    foreach(letter; test.split)\n    {\n        histogram[letter]++;\n\
    \    }\n    long max = max(histogram.values);\n    if(max == 0)\n    {\n     \
    \   return null;\n    }\n    Nullable!(long[string]) result;\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprmrpqv3f.d(25): Error: no property `split` for type `string`

    /tmp/tmprmrpqv3f.d(29): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmprmrpqv3f.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmrpqv3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ maxElement(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    long[string] max_result = new long[string];\n    foreach(k, v; result)\n\
    \    {\n        if(v == max)\n        {\n            max_result[k] = v;\n    \
    \    }\n    }\n    return max_result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28m1c0oq.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp28m1c0oq.d(25): Error: no property `split` for type `string`

    /tmp/tmp28m1c0oq.d(32): Error: undefined identifier `maxElement`

    /tmp/tmp28m1c0oq.d(37): Error: cannot pass type `string` as a function argument

    /tmp/tmp28m1c0oq.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp28m1c0oq.d(45): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28m1c0oq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test.split)\n    {\n        if(c in dict)\n        {\n            dict[c]++;\n\
    \        }\n        else\n        {\n            dict[c] = 1;\n        }\n   \
    \     if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n  \
    \  }\n    foreach(char c; dict.keys)\n    {\n        if(dict[c] == max)\n    \
    \    {\n            if(result.isNull)\n            {\n                result =\
    \ [c: max];\n            }\n            else\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2zvmwxt.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2zvmwxt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length)\n        {\n            hist[c]++;\n        }\n  \
    \  }\n    if(hist.length)\n    {\n        long max = maxElement(hist.values);\n\
    \        foreach(k, v; hist)\n        {\n            if(v == max)\n          \
    \  {\n                result.insert(k, v);\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0up7w2l.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0up7w2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ histogram;\n        foreach(word; words)\n        {\n            if (histogram.count(word)\
    \ == 0)\n            {\n                histogram[word] = 1;\n            }\n\
    \            else\n            {\n                histogram[word] += 1;\n    \
    \        }\n        }\n        long max = max(histogram.values);\n        long[string]\
    \ max_histogram;\n        foreach(word; words)\n        {\n            if (histogram[word]\
    \ == max)\n            {\n                max_histogram[word] = max;\n       \
    \     }\n        }\n        result = max_histogram;\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpifkoom7h.d(31): Error: no property `split` for type `string`

    /tmp/tmpifkoom7h.d(35): Error: no property `count` for type `long[string]`

    /tmp/tmpifkoom7h.d(44): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifkoom7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   long[string] histogram;\n    foreach (letter; test.split)\n    {\n       \
    \ if (histogram.count(letter) == 0)\n        {\n            histogram[letter]\
    \ = 1;\n        }\n        else\n        {\n            histogram[letter] += 1;\n\
    \        }\n    }\n    long max = maxElement(histogram.values);\n    foreach (key,\
    \ value; histogram)\n    {\n        if (value == max)\n        {\n           \
    \ result.insert(key, value);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgs6up3vh.d(30): Error: no property `split` for type `string`

    /tmp/tmpgs6up3vh.d(41): Error: undefined identifier `maxElement`

    /tmp/tmpgs6up3vh.d(46): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgs6up3vh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            counts[word]++;\n\
    \        }\n        long max = maxElement(counts.values);\n        foreach(key,\
    \ value; counts)\n        {\n            if (value == max)\n            {\n  \
    \              result[key] = value;\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n    \
    \    auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzmi9b7t1.d(31): Error: no property `split` for type `string`

    /tmp/tmpzmi9b7t1.d(37): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmi9b7t1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = new long[string];\n\
    \    foreach(c; test.split())\n    {\n        if(dict.count(c) == 0)\n       \
    \ {\n            dict[c] = 1;\n        }\n        else\n        {\n          \
    \  dict[c] += 1;\n        }\n        if(dict[c] > max)\n        {\n          \
    \  max = dict[c];\n        }\n    }\n    if(max > 0)\n    {\n        result =\
    \ new long[string];\n        foreach(c; test.split())\n        {\n           \
    \ if(dict[c] == max)\n            {\n                result[c] = max;\n      \
    \      }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcbo2qkss.d(26): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpcbo2qkss.d(27): Error: no property `split` for type `string`

    /tmp/tmpcbo2qkss.d(44): Error: cannot pass type `string` as a function argument

    /tmp/tmpcbo2qkss.d(45): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbo2qkss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    auto\
    \ letters = test.split;\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        counts[letter]++;\n    }\n    long maxCount = max(counts.values);\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == maxCount)\n\
    \        {\n            result.insert(letter, counts[letter]);\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsr8nz46p.d(25): Error: no property `empty` for type `string`

    /tmp/tmpsr8nz46p.d(29): Error: no property `split` for type `string`

    /tmp/tmpsr8nz46p.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpsr8nz46p.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsr8nz46p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    long max = 0;\n    foreach(char\
    \ c; test.split())\n    {\n        if(!dict.contains(c))\n        {\n        \
    \    dict[c] = 1;\n        }\n        else\n        {\n            dict[c] +=\
    \ 1;\n        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(string\
    \ key; dict.keys)\n        {\n            if(dict[key] == max)\n            {\n\
    \                result[key] = max;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptq6twtiw.d(25): Error: expression expected, not `:`

    /tmp/tmptq6twtiw.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptq6twtiw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = new long[string];\n    foreach(letter;\
    \ test.split)\n    {\n        dict[letter]++;\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           result = dict;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8e2gqdj.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpx8e2gqdj.d(26): Error: no property `split` for type `string`

    /tmp/tmpx8e2gqdj.d(30): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8e2gqdj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto words = test.split(\" \");\n    long[string] dict;\n    foreach(word;\
    \ words)\n    {\n        if(dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word] += 1;\n   \
    \     }\n    }\n    long max = dict.values.max;\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            result.set(dict);\n \
    \           break;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\"\
    );\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhuguj_o.d(29): Error: no property `split` for type `string`

    /tmp/tmplhuguj_o.d(42): Error: no property `max` for type `long[]`

    /tmp/tmplhuguj_o.d(47): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhuguj_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(letter; test.split())\n    {\n        result[letter]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    long[string] result2;\n    foreach(letter; test.split())\n\
    \    {\n        if(result[letter] == max)\n        {\n            result2[letter]\
    \ = max;\n        }\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdaabbfj.d(25): Error: no property `split` for type `string`

    /tmp/tmptdaabbfj.d(29): Error: undefined identifier `maxElement`

    /tmp/tmptdaabbfj.d(35): Error: no property `split` for type `string`

    /tmp/tmptdaabbfj.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmptdaabbfj.d(42): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdaabbfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        if(result.isNull)\n                result = [:];\n            result[c]\
    \ = max;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp55l9zwgw.d(26): Error: expression expected, not `:`

    /tmp/tmp55l9zwgw.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55l9zwgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    foreach(char c; test)\n    {\n \
    \       if(c == ' ') continue;\n        if(dict.count(c.toString()) == 0) dict[c.toString()]\
    \ = 1;\n        else dict[c.toString()]++;\n    }\n    long max = 0;\n    foreach(key,\
    \ value; dict)\n    {\n        if(value > max) max = value;\n    }\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            if(result.isNull)\
    \ result = new long[string];\n            result.get.put(key, value);\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6n6ttv7n.d(29): Error: no property `count` for type `long[string]`

    /tmp/tmp6n6ttv7n.d(29): Error: no property `toString` for type `char`

    /tmp/tmp6n6ttv7n.d(30): Error: no property `toString` for type `char`

    /tmp/tmp6n6ttv7n.d(41): Error: cannot pass type `string` as a function argument

    /tmp/tmp6n6ttv7n.d(42): Error: no property `put` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6n6ttv7n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c in hist)\n        {\n            hist[c]++;\n        }\n \
    \       else\n        {\n            hist[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(hist.values);\n    foreach(k, v; hist)\n    {\n        if(v\
    \ == max)\n        {\n            if(result is null)\n            {\n        \
    \        result = [k: v];\n            }\n            else\n            {\n  \
    \              result[k] = v;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5huv5z53.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5huv5z53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n      \
    \  {\n            dict[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ dict)\n    {\n        if(c.value > max)\n        {\n            max = c.value;\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result;\n    foreach(c; dict)\n    {\n        if(c.value == max)\n        {\n\
    \            result[c.key] = c.value;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdf2cev0x.d(25): Error: no property `split` for type `string`

    /tmp/tmpdf2cev0x.d(35): Error: no property `value` for type `long`

    /tmp/tmpdf2cev0x.d(37): Error: no property `value` for type `long`

    /tmp/tmpdf2cev0x.d(47): Error: no property `value` for type `long`

    /tmp/tmpdf2cev0x.d(49): Error: no property `key` for type `long`

    /tmp/tmpdf2cev0x.d(42): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpdf2cev0x.d(52): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdf2cev0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(char c; test)\n    {\n        if(c == ' ')\n            continue;\n\
    \        if(dict.count(c.to!string) == 0)\n            dict[c.to!string] = 1;\n\
    \        else\n            dict[c.to!string]++;\n    }\n    long max = dict.values.max;\n\
    \    if(max == 0)\n        return null;\n    long[string] result;\n    foreach(string\
    \ key; dict.keys)\n    {\n        if(dict[key] == max)\n            result[key]\
    \ = max;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpve9sstmq.d(29): Error: no property `count` for type `long[string]`

    /tmp/tmpve9sstmq.d(30): Error: no property `to` for type `char`

    /tmp/tmpve9sstmq.d(32): Error: no property `to` for type `char`

    /tmp/tmpve9sstmq.d(34): Error: no property `max` for type `long[]`

    /tmp/tmpve9sstmq.d(36): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpve9sstmq.d(43): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpve9sstmq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    auto letters = test.split(\" \");\n    auto letterCounts\
    \ = new long[string];\n    foreach (letter; letters)\n    {\n        if (letterCounts.contains(letter))\n\
    \            letterCounts[letter]++;\n        else\n            letterCounts[letter]\
    \ = 1;\n    }\n    long maxCount = max(letterCounts.values);\n    auto maxLetters\
    \ = new long[string];\n    foreach (letter; letterCounts.keys)\n    {\n      \
    \  if (letterCounts[letter] == maxCount)\n            maxLetters[letter] = maxCount;\n\
    \    }\n    return maxLetters;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4nwsd4d8.d(24): Error: no property `empty` for type `string`

    /tmp/tmp4nwsd4d8.d(26): Error: no property `split` for type `string`

    /tmp/tmp4nwsd4d8.d(27): Error: cannot pass type `string` as a function argument

    /tmp/tmp4nwsd4d8.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp4nwsd4d8.d(36): Error: cannot pass type `string` as a function argument

    /tmp/tmp4nwsd4d8.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4nwsd4d8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length > 0)\n     \
    \   {\n            result[c]++;\n        }\n    }\n    if(result.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(k, v; result)\n    {\n        if(v ==\
    \ max)\n        {\n            result2[k] = v;\n        }\n    }\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpev4jaoch.d(25): Error: no property `split` for type `string`

    /tmp/tmpev4jaoch.d(36): Error: undefined identifier `maxElement`

    /tmp/tmpev4jaoch.d(34): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpev4jaoch.d(45): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev4jaoch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto letters = test.split(\" \");\n    auto letterCount = new long[string];\n\
    \    foreach(letter; letters)\n    {\n        if(letterCount.contains(letter))\n\
    \        {\n            letterCount[letter]++;\n        }\n        else\n    \
    \    {\n            letterCount[letter] = 1;\n        }\n    }\n    long maxCount\
    \ = max(letterCount.values);\n    foreach(letter; letterCount.keys)\n    {\n \
    \       if(letterCount[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ letterCount[letter]);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduc_ho7c.d(29): Error: no property `split` for type `string`

    /tmp/tmpduc_ho7c.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpduc_ho7c.d(42): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduc_ho7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = new Nullable!(long[string])();\n    long[string] hist = new long[string]();\n\
    \    foreach(c; test.split)\n    {\n        hist[c]++;\n    }\n    long max =\
    \ max(hist.values);\n    foreach(k, v; hist)\n    {\n        if(v == max)\n  \
    \      {\n            result.value[k] = v;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ykg6of9.d(24): Error: cannot implicitly convert expression `new
    Nullable!(long[string])(null, true)` of type `Nullable!(long[string])*` to `Nullable!(long[string])`

    /tmp/tmp9ykg6of9.d(24):        Perhaps remove the `new` keyword?

    /tmp/tmp9ykg6of9.d(25): Error: cannot pass type `string` as a function argument

    /tmp/tmp9ykg6of9.d(26): Error: no property `split` for type `string`

    /tmp/tmp9ykg6of9.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp9ykg6of9.d(35): Error: no property `value` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable._value`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ykg6of9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ hist = [:];\n    foreach(c; test.split)\n    {\n        hist[c]++;\n    }\n\
    \    long max = hist.values.max;\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    long[string] result = [:];\n    foreach(c; hist.keys)\n    {\n   \
    \     if(hist[c] == max)\n        {\n            result[c] = max;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1d8v5yd_.d(24): Error: expression expected, not `:`

    /tmp/tmp1d8v5yd_.d(34): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d8v5yd_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164232
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.contains(c))\n\
    \        {\n            result[c]++;\n        }\n        else\n        {\n   \
    \         result[c] = 1;\n        }\n        max = max(max, result[c]);\n    }\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n     \
    \   return result.filter!(a => a.value == max);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxktnwn16.d(26): Error: no property `split` for type `string`

    /tmp/tmpxktnwn16.d(44): Error: no property `filter` for type `long[string]`

    /tmp/tmpxktnwn16.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxktnwn16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] letterCount;\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCount.contains(letter))\n      \
    \  {\n            letterCount[letter]++;\n        }\n        else\n        {\n\
    \            letterCount[letter] = 1;\n        }\n    }\n    long max = maxElement(letterCount.values);\n\
    \    foreach (key, value; letterCount)\n    {\n        if (value == max)\n   \
    \     {\n            result.insert(key, value);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdd_yhbab.d(29): Error: no property `split` for type `string`

    /tmp/tmpdd_yhbab.d(42): Error: undefined identifier `maxElement`

    /tmp/tmpdd_yhbab.d(47): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd_yhbab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto test_array\
    \ = test.split;\n    long[string] histogram_dict;\n    foreach(letter; test_array)\n\
    \    {\n        histogram_dict[letter]++;\n    }\n    long max_value = max(histogram_dict.values);\n\
    \    long[string] max_dict;\n    foreach(key, value; histogram_dict)\n    {\n\
    \        if(value == max_value)\n        {\n            max_dict[key] = value;\n\
    \        }\n    }\n    return max_dict.nullable;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzn5soey_.d(24): Error: no property `split` for type `string`

    /tmp/tmpzn5soey_.d(30): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzn5soey_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histo;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n     \
    \   {\n            if(histo.count(c) == 0)\n            {\n                histo[c]\
    \ = 1;\n            }\n            else\n            {\n                histo[c]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(c; histo)\n \
    \   {\n        if(c.value > max)\n        {\n            max = c.value;\n    \
    \    }\n    }\n    long[string] result;\n    foreach(c; histo)\n    {\n      \
    \  if(c.value == max)\n        {\n            result[c.key] = c.value;\n     \
    \   }\n    }\n    return result.nullable;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvhiyled.d(25): Error: no property `split` for type `string`

    /tmp/tmphvhiyled.d(42): Error: no property `value` for type `long`

    /tmp/tmphvhiyled.d(44): Error: no property `value` for type `long`

    /tmp/tmphvhiyled.d(50): Error: no property `value` for type `long`

    /tmp/tmphvhiyled.d(52): Error: no property `key` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvhiyled.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(letter; test.split)\n    {\n        if(result.count(letter)\
    \ == 0)\n        {\n            result[letter] = 1;\n        }\n        else\n\
    \        {\n            result[letter] += 1;\n        }\n    }\n    long max =\
    \ maxElement(result.values);\n    long[string] max_result;\n    foreach(key, value;\
    \ result)\n    {\n        if(value == max)\n        {\n            max_result[key]\
    \ = value;\n        }\n    }\n    return max_result.nullable;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl76zn6wc.d(25): Error: no property `split` for type `string`

    /tmp/tmpl76zn6wc.d(36): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl76zn6wc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        long[string] histo;\n        foreach(word; test.split)\n\
    \        {\n            if (histo.count(word) == 0)\n            {\n         \
    \       histo[word] = 1;\n            }\n            else\n            {\n   \
    \             histo[word]++;\n            }\n        }\n        long max = max(histo.values);\n\
    \        foreach(key, value; histo)\n        {\n            if (value == max)\n\
    \            {\n                result.set(key, value);\n            }\n     \
    \   }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftsfzavr.d(32): Error: no property `split` for type `string`

    /tmp/tmpftsfzavr.d(43): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpftsfzavr.d(48): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftsfzavr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] histogram;\n    foreach\
    \ (letter; letters)\n    {\n        if (histogram.count(letter) == 0)\n      \
    \  {\n            histogram[letter] = 1;\n        }\n        else\n        {\n\
    \            histogram[letter]++;\n        }\n    }\n    long max = 0;\n    foreach\
    \ (letter; histogram.keys)\n    {\n        if (histogram[letter] > max)\n    \
    \    {\n            max = histogram[letter];\n        }\n    }\n    foreach (letter;\
    \ histogram.keys)\n    {\n        if (histogram[letter] == max)\n        {\n \
    \           result[letter] = max;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtu7b151.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtu7b151.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split()) \n    {\n        result[c]++;\n\
    \    }\n    auto max = result.values.max;\n    if(max == 0) \n    {\n        return\
    \ null;\n    }\n    auto keys = result.keys.filter!(k => result[k] == max);\n\
    \    return keys.map!(k => tuple(k, result[k])).array;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp603fyotr.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp603fyotr.d(25): Error: no property `split` for type `string`

    /tmp/tmp603fyotr.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp603fyotr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        if(result.count(c) ==\
    \ 0)\n        {\n            result[c] = 1;\n        }\n        else\n       \
    \ {\n            result[c] += 1;\n        }\n    }\n    if(result.length == 0)\n\
    \    {\n        return null;\n    }\n    long max = result.values.max;\n    long[string]\
    \ max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n\
    \        {\n            max_result[c] = max;\n        }\n    }\n    return max_result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp9fcomxh.d(25): Error: no property `split` for type `string`

    /tmp/tmpp9fcomxh.d(40): Error: no property `max` for type `long[]`

    /tmp/tmpp9fcomxh.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpp9fcomxh.d(49): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp9fcomxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0) \n    {\n        return result;\n    }\n\
    \    auto letters = test.split;\n    auto letterCounts = new long[string];\n \
    \   foreach (letter; letters) \n    {\n        letterCounts[letter]++;\n    }\n\
    \    auto maxCount = max(letterCounts.values);\n    foreach (letter; letterCounts.keys)\
    \ \n    {\n        if (letterCounts[letter] == maxCount) \n        {\n       \
    \     result.insert(letter, maxCount);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwb9qzfhk.d(29): Error: no property `split` for type `string`

    /tmp/tmpwb9qzfhk.d(30): Error: cannot pass type `string` as a function argument

    /tmp/tmpwb9qzfhk.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb9qzfhk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] counts;\n    foreach (letter;\
    \ letters)\n    {\n        if (counts.count(letter) == 0)\n        {\n       \
    \     counts[letter] = 1;\n        }\n        else\n        {\n            counts[letter]++;\n\
    \        }\n    }\n    long max = counts.values.max;\n    foreach (key, value;\
    \ counts)\n    {\n        if (value == max)\n        {\n            result.set(key,\
    \ value);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprvp8ezyt.d(29): Error: no property `split` for type `string`

    /tmp/tmprvp8ezyt.d(42): Error: no property `max` for type `long[]`

    /tmp/tmprvp8ezyt.d(47): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvp8ezyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = new long[string];\n    foreach(letter;\
    \ test.split)\n    {\n        if(dict.contains(letter))\n        {\n         \
    \   dict[letter]++;\n        }\n        else\n        {\n            dict[letter]\
    \ = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            if(result\
    \ is null)\n            {\n                result = new long[string];\n      \
    \      }\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_40khi6.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp1_40khi6.d(26): Error: no property `split` for type `string`

    /tmp/tmp1_40khi6.d(37): Error: undefined identifier `maxElement`

    /tmp/tmp1_40khi6.d(44): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_40khi6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length)\n\
    \        {\n            result[c]++;\n        }\n    }\n    if(result.length)\n\
    \    {\n        auto max = maxElement(result.values);\n        auto max_keys =\
    \ result.byValue.keys(max);\n        return max_keys;\n    }\n    return null;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyp68vueq.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpyp68vueq.d(25): Error: no property `split` for type `string`

    /tmp/tmpyp68vueq.d(34): Error: undefined identifier `maxElement`

    /tmp/tmpyp68vueq.d(38): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyp68vueq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    long max = 0;\n    foreach(letter;\
    \ test.split())\n    {\n        if(!dict.contains(letter))\n        {\n      \
    \      dict[letter] = 1;\n        }\n        else\n        {\n            dict[letter]++;\n\
    \        }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    foreach(key, value; dict)\n    {\n        if(value == max)\n\
    \        {\n            if(result.isNull)\n            {\n                result\
    \ = new long[string];\n            }\n            result[key] = value;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpecs2p4v9.d(27): Error: no property `split` for type `string`

    /tmp/tmpecs2p4v9.d(48): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpecs2p4v9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = max(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    auto keys = result.keys.filter!(a\
    \ => result[a] == max);\n    return keys.map!(a => result[a]).array;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydoud8sa.d(25): Error: no property `split` for type `string`

    /tmp/tmpydoud8sa.d(32): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpydoud8sa.d(37): Error: no property `filter` for type `string[]`

    /tmp/tmpydoud8sa.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydoud8sa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[] hist = new long[256];\n    foreach(c; test)\n   \
    \ {\n        ++hist[c];\n    }\n    long max = 0;\n    foreach(c; test)\n    {\n\
    \        if(hist[c] > max)\n        {\n            max = hist[c];\n        }\n\
    \    }\n    if(max > 0)\n    {\n        result = new long[string];\n        foreach(c;\
    \ test)\n        {\n            if(hist[c] == max)\n            {\n          \
    \      result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtkrg7uj.d(40): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpdtkrg7uj.d(45): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtkrg7uj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.empty)\n\
    \        return null;\n    auto letters = test.split;\n    auto letterCounts =\
    \ new long[string];\n    foreach (letter; letters)\n    {\n        if (letterCounts.contains(letter))\n\
    \            letterCounts[letter] += 1;\n        else\n            letterCounts[letter]\
    \ = 1;\n    }\n    long maxCount = max(letterCounts.values);\n    auto result\
    \ = new long[string];\n    foreach (letter; letterCounts.keys)\n    {\n      \
    \  if (letterCounts[letter] == maxCount)\n            result[letter] = maxCount;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggn5ybbq.d(24): Error: no property `empty` for type `string`

    /tmp/tmpggn5ybbq.d(26): Error: no property `split` for type `string`

    /tmp/tmpggn5ybbq.d(27): Error: cannot pass type `string` as a function argument

    /tmp/tmpggn5ybbq.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpggn5ybbq.d(36): Error: cannot pass type `string` as a function argument

    /tmp/tmpggn5ybbq.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggn5ybbq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = new long[string];\n    foreach(letter;\
    \ test.split)\n    {\n        if(!dict.contains(letter))\n        {\n        \
    \    dict[letter] = 1;\n        }\n        else\n        {\n            dict[letter]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(key, value; dict)\n    {\n \
    \       if(value > max)\n        {\n            max = value;\n        }\n    }\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           result[key] = value;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphyq7h0oc.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmphyq7h0oc.d(26): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyq7h0oc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto words = test.split(\" \");\n    auto hist = words.histogram;\n    long\
    \ max = hist.values.max;\n    foreach(word; hist.byValue(max))\n    {\n      \
    \  result[word] = max;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqp1pno6.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqp1pno6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split())\n\
    \    {\n        if(hist.count(c) == 0)\n        {\n            hist[c] = 1;\n\
    \        }\n        else\n        {\n            hist[c]++;\n        }\n    }\n\
    \    long max = maxElement(hist.values);\n    foreach(c; hist.keys)\n    {\n \
    \       if(hist[c] == max)\n        {\n            result.insert(c, hist[c]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07u91z8l.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07u91z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        result[c]++;\n    }\n\
    \    long max = maxElement(result.values);\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.filter!(a => a.value ==\
    \ max);\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n      \
    \  auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vsxupp8.d(25): Error: no property `split` for type `string`

    /tmp/tmp2vsxupp8.d(29): Error: undefined identifier `maxElement`

    /tmp/tmp2vsxupp8.d(36): Error: no property `filter` for type `long[string]`

    /tmp/tmp2vsxupp8.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vsxupp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c in dict)\n        {\n            dict[c]++;\n        }\n \
    \       else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    if(max > 0)\n    {\n        result = [:];\n\
    \        foreach(key, value; dict)\n        {\n            if(value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxj2t85mj.d(25): Error: expression expected, not `:`

    /tmp/tmpxj2t85mj.d(40): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxj2t85mj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        max = max(max, c[1]);\n    }\n    if(max == 0)\n   \
    \ {\n        return null;\n    }\n    long[string] result2;\n    foreach(c; result)\n\
    \    {\n        if(c[1] == max)\n        {\n            result2[c[0]] = c[1];\n\
    \        }\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe75grvzw.d(25): Error: no property `split` for type `string`

    /tmp/tmpe75grvzw.d(35): Error: only one index allowed to index `long`

    /tmp/tmpe75grvzw.d(44): Error: only one index allowed to index `long`

    /tmp/tmpe75grvzw.d(46): Error: only one index allowed to index `long`

    /tmp/tmpe75grvzw.d(39): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpe75grvzw.d(49): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe75grvzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] counts\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         counts[i] = words.count(word);\n        }\n        long max = maxElement(counts);\n\
    \        long[] maxIndexes = counts.indicesOf(max);\n        long[] maxWords =\
    \ new long[maxIndexes.length];\n        foreach (i, index; maxIndexes)\n     \
    \   {\n            maxWords[i] = words[index];\n        }\n        result = new\
    \ long[string](maxWords, max);\n        return result;\n    }\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpug4bw8p1.d(31): Error: no property `split` for type `string`

    /tmp/tmpug4bw8p1.d(35): Error: no property `count` for type `string[]`

    /tmp/tmpug4bw8p1.d(37): Error: undefined identifier `maxElement`

    /tmp/tmpug4bw8p1.d(38): Error: no property `indicesOf` for type `long[]`

    /tmp/tmpug4bw8p1.d(42): Error: cannot implicitly convert expression `words[cast(ulong)index]`
    of type `string` to `long`

    /tmp/tmpug4bw8p1.d(44): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpug4bw8p1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    return result.filter!(a => a.value == max).nullable;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdzvkv3ec.d(26): Error: no property `split` for type `string`

    /tmp/tmpdzvkv3ec.d(38): Error: no property `filter` for type `long[string]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzvkv3ec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(t;\
    \ test.split)\n    {\n        if(dict.count(t) == 0)\n        {\n            dict[t]\
    \ = 1;\n        }\n        else\n        {\n            dict[t]++;\n        }\n\
    \        if(dict[t] > max)\n        {\n            max = dict[t];\n        }\n\
    \    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(t; dict.keys)\n\
    \        {\n            if(dict[t] == max)\n            {\n                result[t]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpowtn59_u.d(26): Error: expression expected, not `:`

    /tmp/tmpowtn59_u.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowtn59_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c != ' ')\n        {\n            if(!dict.contains(c))\n\
    \            {\n                dict[c] = 1;\n            }\n            else\n\
    \            {\n                dict[c]++;\n            }\n            if(dict[c]\
    \ > max)\n            {\n                max = dict[c];\n            }\n     \
    \   }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(char\
    \ c; test)\n        {\n            if(c != ' ')\n            {\n             \
    \   if(dict[c] == max)\n                {\n                    result[c] = max;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxteknqm.d(26): Error: expression expected, not `:`

    /tmp/tmplxteknqm.d(47): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxteknqm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = new long[string];\n    foreach(c; test.split) \n    {\n        if(c.length)\
    \ \n        {\n            result[c]++;\n        }\n    }\n    if(result.length)\
    \ \n    {\n        long max = maxElement(result.values);\n        long[string]\
    \ max_result = new long[string];\n        foreach(c; result.keys) \n        {\n\
    \            if(result[c] == max) \n            {\n                max_result[c]\
    \ = max;\n            }\n        }\n        return max_result;\n    }\n    return\
    \ null;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodh2agdv.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpodh2agdv.d(25): Error: no property `split` for type `string`

    /tmp/tmpodh2agdv.d(34): Error: undefined identifier `maxElement`

    /tmp/tmpodh2agdv.d(35): Error: cannot pass type `string` as a function argument

    /tmp/tmpodh2agdv.d(43): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    /tmp/tmpodh2agdv.d(45): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodh2agdv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto words = test.split(\" \");\n    auto dict = new long[string];\n    foreach\
    \ (word; words)\n    {\n        if (word.length == 0)\n        {\n           \
    \ continue;\n        }\n        if (dict.count(word) == 0)\n        {\n      \
    \      dict[word] = 1;\n        }\n        else\n        {\n            dict[word]\
    \ += 1;\n        }\n    }\n    long max = 0;\n    foreach (key, value; dict)\n\
    \    {\n        if (value > max)\n        {\n            max = value;\n      \
    \  }\n    }\n    foreach (key, value; dict)\n    {\n        if (value == max)\n\
    \        {\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptqdxtt9y.d(29): Error: no property `split` for type `string`

    /tmp/tmptqdxtt9y.d(30): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptqdxtt9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 0;\n        }\n        result[c]++;\n    }\n\
    \    long max = maxElement(result.values);\n    long[string] max_result;\n   \
    \ foreach(c; result.keys)\n    {\n        if(result[c] == max)\n        {\n  \
    \          max_result[c] = max;\n        }\n    }\n    return max_result.nullable;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiu34hiy7.d(25): Error: no property `split` for type `string`

    /tmp/tmpiu34hiy7.d(33): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu34hiy7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram;\n    foreach(char c; test)\n    {\n        if(c == ' ')\n       \
    \     continue;\n        histogram[c]++;\n    }\n    long max = 0;\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value > max)\n            max = value;\n\
    \    }\n    long[string] result;\n    foreach(key, value; histogram)\n    {\n\
    \        if(value == max)\n            result[key] = value;\n    }\n    return\
    \ result.length == 0 ? null : result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic3b0dwl.d(29): Error: cannot implicitly convert expression `c`
    of type `char` to `string`

    /tmp/tmpic3b0dwl.d(43): Error: cannot implicitly convert expression `_aaLen(result)
    == 0LU ? cast(long[string])null : result` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic3b0dwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[] count\
    \ = new long[words.length];\n        foreach (i, word; words)\n        {\n   \
    \         foreach (j, word2; words)\n            {\n                if (word ==\
    \ word2)\n                {\n                    count[i]++;\n               \
    \ }\n            }\n        }\n        long max = maxElement(count);\n       \
    \ string[] maxWords = new string[words.length];\n        int index = 0;\n    \
    \    foreach (i, word; words)\n        {\n            if (count[i] == max)\n \
    \           {\n                maxWords[index] = word;\n                index++;\n\
    \            }\n        }\n        maxWords = maxWords[0..index];\n        result\
    \ = new Nullable!(long[string])(maxWords);\n        return result;\n    }\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37e4ymt3.d(31): Error: no property `split` for type `string`

    /tmp/tmp37e4ymt3.d(43): Error: undefined identifier `maxElement`

    /tmp/tmp37e4ymt3.d(55): Error: `inout` method `std.typecons.Nullable!(long[string]).Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37e4ymt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ count;\n        foreach(word; words)\n        {\n            count[word]++;\n\
    \        }\n        long max = max(count.values);\n        foreach(key, value;\
    \ count)\n        {\n            if(value == max)\n            {\n           \
    \     result[key] = value;\n            }\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9y6m1iy.d(31): Error: no property `split` for type `string`

    /tmp/tmpi9y6m1iy.d(37): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9y6m1iy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(letter; test.split())\n\
    \    {\n        if(letter in dict)\n        {\n            dict[letter] += 1;\n\
    \        }\n        else\n        {\n            dict[letter] = 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(key, value; dict)\n    {\n        if(value\
    \ > max)\n        {\n            max = value;\n        }\n    }\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            result.insert(key,\
    \ value);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplj5ee8jn.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj5ee8jn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164233
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[] counts = new long[256];\n    foreach(c; test)\n \
    \   {\n        counts[c]++;\n    }\n    long max = maxElement(counts);\n    if(max\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(c; test)\n\
    \        {\n            if(counts[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg5gttrlk.d(30): Error: undefined identifier `maxElement`

    /tmp/tmpg5gttrlk.d(33): Error: cannot pass type `string` as a function argument

    /tmp/tmpg5gttrlk.d(38): Error: cannot implicitly convert expression `c` of type
    `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg5gttrlk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.length\
    \ == 0)\n        return null;\n    auto letters = test.split(\" \");\n    auto\
    \ letterCounts = new long[string];\n    foreach (letter; letters)\n    {\n   \
    \     if (letterCounts.contains(letter))\n            letterCounts[letter]++;\n\
    \        else\n            letterCounts[letter] = 1;\n    }\n    auto maxCount\
    \ = max(letterCounts.values);\n    auto result = new long[string];\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCounts[letter] == maxCount)\n  \
    \          result[letter] = maxCount;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbk1huzg.d(26): Error: no property `split` for type `string`

    /tmp/tmptbk1huzg.d(27): Error: cannot pass type `string` as a function argument

    /tmp/tmptbk1huzg.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmptbk1huzg.d(36): Error: cannot pass type `string` as a function argument

    /tmp/tmptbk1huzg.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbk1huzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = new long[string];\n    foreach(c; test.split())\n    {\n        result[c]++;\n\
    \    }\n    long max = max(result.values);\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.filter!(a => a.value ==\
    \ max);\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n      \
    \  auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw83tlhuy.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpw83tlhuy.d(25): Error: no property `split` for type `string`

    /tmp/tmpw83tlhuy.d(29): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpw83tlhuy.d(36): Error: no property `filter` for type `long[string]`

    /tmp/tmpw83tlhuy.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw83tlhuy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(letter;\
    \ test.split)\n    {\n        if(dict.count(letter) == 0)\n        {\n       \
    \     dict[letter] = 1;\n        }\n        else\n        {\n            dict[letter]++;\n\
    \        }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(key,\
    \ value; dict)\n        {\n            if(value == max)\n            {\n     \
    \           result[key] = value;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5u72ymg.d(26): Error: expression expected, not `:`

    /tmp/tmpj5u72ymg.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5u72ymg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0) return result;\n    auto letters = test.split(\"\
    \ \");\n    long[string] count;\n    foreach(letter; letters)\n    {\n       \
    \ count[letter]++;\n    }\n    long max = maxElement(count.values);\n    foreach(letter;\
    \ count.keys)\n    {\n        if(count[letter] == max)\n        {\n          \
    \  result.insert(letter, count[letter]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8b1_58w5.d(26): Error: no property `split` for type `string`

    /tmp/tmp8b1_58w5.d(32): Error: undefined identifier `maxElement`

    /tmp/tmp8b1_58w5.d(37): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8b1_58w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n      \
    \  {\n            if(dict.count(c) == 0)\n            {\n                dict[c]\
    \ = 1;\n            }\n            else\n            {\n                dict[c]\
    \ += 1;\n            }\n        }\n    }\n    long max = dict.values.max;\n  \
    \  long[string] result;\n    foreach(k, v; dict)\n    {\n        if(v == max)\n\
    \        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bq8urt9.d(25): Error: no property `split` for type `string`

    /tmp/tmp8bq8urt9.d(39): Error: no property `max` for type `long[]`

    /tmp/tmp8bq8urt9.d(48): Error: cannot implicitly convert expression `_aaLen(result)
    == 0LU ? cast(long[string])null : result` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bq8urt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ final;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n \
    \       {\n            final[c] = max;\n        }\n    }\n    return final;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaosb44gw.d(42): Error: no identifier for declarator `long[string]`

    /tmp/tmpaosb44gw.d(42): Error: basic type expected, not `;`

    /tmp/tmpaosb44gw.d(42): Error: no identifier for declarator `_error_`

    /tmp/tmpaosb44gw.d(42): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpaosb44gw.d(47): Error: basic type expected, not `[`

    /tmp/tmpaosb44gw.d(47): Error: no identifier for declarator `_error_[c]`

    /tmp/tmpaosb44gw.d(47): Error: found `=` instead of statement

    /tmp/tmpaosb44gw.d(50): Error: expression expected, not `final`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaosb44gw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split())\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 0;\n        }\n        result[c]++;\n    \
    \    if(result[c] > max)\n        {\n            max = result[c];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ final;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n \
    \       {\n            final[c] = max;\n        }\n    }\n    return final;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7p7ei_6.d(42): Error: no identifier for declarator `long[string]`

    /tmp/tmph7p7ei_6.d(42): Error: basic type expected, not `;`

    /tmp/tmph7p7ei_6.d(42): Error: no identifier for declarator `_error_`

    /tmp/tmph7p7ei_6.d(42): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmph7p7ei_6.d(47): Error: basic type expected, not `[`

    /tmp/tmph7p7ei_6.d(47): Error: no identifier for declarator `_error_[c]`

    /tmp/tmph7p7ei_6.d(47): Error: found `=` instead of statement

    /tmp/tmph7p7ei_6.d(50): Error: expression expected, not `final`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7p7ei_6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(dict.count(c) == 0)\n        {\n\
    \            dict[c] = 1;\n        }\n        else\n        {\n            dict[c]++;\n\
    \        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n\
    \        foreach(c; test.split)\n        {\n            if(dict[c] == max)\n \
    \           {\n                result[c] = max;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigs5kbnq.d(26): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpigs5kbnq.d(27): Error: no property `split` for type `string`

    /tmp/tmpigs5kbnq.d(44): Error: cannot pass type `string` as a function argument

    /tmp/tmpigs5kbnq.d(45): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigs5kbnq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    if (test.length == 0)\n        return null;\n    foreach (letter;\
    \ test.split)\n    {\n        if (letter.length == 0)\n            continue;\n\
    \        if (result.count(letter) == 0)\n            result[letter] = 1;\n   \
    \     else\n            result[letter]++;\n    }\n    long max = result.values.max;\n\
    \    long[string] max_letters;\n    foreach (letter; result.keys)\n    {\n   \
    \     if (result[letter] == max)\n            max_letters[letter] = max;\n   \
    \ }\n    return max_letters;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcqbnb8ws.d(27): Error: no property `split` for type `string`

    /tmp/tmpcqbnb8ws.d(36): Error: no property `max` for type `long[]`

    /tmp/tmpcqbnb8ws.d(26): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpcqbnb8ws.d(43): Error: cannot implicitly convert expression `max_letters`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqbnb8ws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(c.length == 1)\n        {\n            if(dict.contains(c))\n           \
    \ {\n                dict[c] += 1;\n            }\n            else\n        \
    \    {\n                dict[c] = 1;\n            }\n        }\n    }\n    if(dict.length\
    \ > 0)\n    {\n        long max = dict.values.max;\n        foreach(key, value;\
    \ dict)\n        {\n            if(value == max)\n            {\n            \
    \    result.insert(key, value);\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpip20mkta.d(26): Error: no property `split` for type `string`

    /tmp/tmpip20mkta.d(42): Error: no property `max` for type `long[]`

    /tmp/tmpip20mkta.d(47): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip20mkta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test.split())\n    {\n        if(!dict.contains(c))\n        {\n        \
    \    dict[c] = 1;\n        }\n        else\n        {\n            dict[c]++;\n\
    \        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    foreach(string key; dict.keys)\n    {\n        if(dict[key]\
    \ == max)\n        {\n            if(result.isNull)\n            {\n         \
    \       result = [key: dict[key]];\n            }\n            else\n        \
    \    {\n                result[key] = dict[key];\n            }\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1933f7u.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1933f7u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    auto\
    \ words = test.split;\n    auto counts = words.map!(a => 1L).reduce!((a, b) =>\
    \ a + b);\n    auto max = counts.values.max;\n    result = counts.filter!(a =>\
    \ a.value == max).map!(a => a.key).array;\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2eass9qy.d(25): Error: no property `empty` for type `string`

    /tmp/tmp2eass9qy.d(29): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2eass9qy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        result[c]++;\n    }\n  \
    \  long max = max(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    else\n    {\n        long[string] result2;\n        foreach(k, v;\
    \ result)\n        {\n            if(v == max)\n            {\n              \
    \  result2[k] = v;\n            }\n        }\n        return result2;\n    }\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9yn6haw.d(25): Error: no property `split` for type `string`

    /tmp/tmph9yn6haw.d(29): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmph9yn6haw.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmph9yn6haw.d(44): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9yn6haw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = maxElement(hist.values);\n    foreach(k, v; hist)\n   \
    \ {\n        if(v == max)\n        {\n            if(result.isNull)\n        \
    \    {\n                result = [k: v];\n            }\n            else\n  \
    \          {\n                result[k] = v;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n \
    \       auto result = candidate(\"a b b a\");\n        assert(!result.isNull &&\
    \ result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0qdz5hs.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0qdz5hs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(char c; test.split)\n\
    \    {\n        if(c in dict)\n        {\n            dict[c] += 1;\n        }\n\
    \        else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(string key; dict.keys)\n    {\n\
    \        if(dict[key] == max)\n        {\n            result.insert(key, dict[key]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpja9ikpwq.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpja9ikpwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(c in dict)\n        {\n            dict[c]++;\n\
    \        }\n        else\n        {\n            dict[c] = 1;\n        }\n   \
    \     if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n  \
    \  }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70yh1h89.d(26): Error: expression expected, not `:`

    /tmp/tmp70yh1h89.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70yh1h89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(letter; test.split)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = 0;\n    foreach(letter,\
    \ count; histogram)\n    {\n        if(count > max)\n        {\n            max\
    \ = count;\n        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n\
    \        foreach(letter, count; histogram)\n        {\n            if(count ==\
    \ max)\n            {\n                result[letter] = count;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx78c2qqs.d(25): Error: expression expected, not `:`

    /tmp/tmpx78c2qqs.d(40): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx78c2qqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        result = dict;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy629yke6.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy629yke6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(dict.count(c) == 0)\n        {\n\
    \            dict[c] = 1;\n        }\n        else\n        {\n            dict[c]++;\n\
    \        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n\
    \        foreach(c; dict.keys)\n        {\n            if(dict[c] == max)\n  \
    \          {\n                result[c] = max;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_2moxbj.d(26): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpu_2moxbj.d(27): Error: no property `split` for type `string`

    /tmp/tmpu_2moxbj.d(44): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_2moxbj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result = [].assumeUnique;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(result.count(c) == 0)\n            {\n    \
    \            result[c] = 1;\n            }\n            else\n            {\n\
    \                result[c] += 1;\n            }\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ne72n2.d(24): Error: no property `assumeUnique` for type `void[]`

    /tmp/tmpw2ne72n2.d(25): Error: no property `split` for type `string`

    /tmp/tmpw2ne72n2.d(41): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmpw2ne72n2.d(43): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ne72n2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(c.length == 1)\n        {\n            if(dict.contains(c))\n           \
    \ {\n                dict[c]++;\n            }\n            else\n           \
    \ {\n                dict[c] = 1;\n            }\n        }\n    }\n    if(dict.length\
    \ == 0)\n    {\n        result = null;\n    }\n    else\n    {\n        long max\
    \ = dict.values.max;\n        foreach(k, v; dict)\n        {\n            if(v\
    \ == max)\n            {\n                result = dict;\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pxaerwd.d(26): Error: no property `split` for type `string`

    /tmp/tmp5pxaerwd.d(46): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pxaerwd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] counts;\n    foreach (letter;\
    \ letters)\n    {\n        counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == max)\n\
    \        {\n            result.insert(letter, counts[letter]);\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvuq696b.d(29): Error: no property `split` for type `string`

    /tmp/tmpqvuq696b.d(35): Error: undefined identifier `maxElement`

    /tmp/tmpqvuq696b.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvuq696b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] words = test.split(\" \");\n    long[string] dict;\n    foreach (word;\
    \ words)\n    {\n        if (dict.contains(word))\n        {\n            dict[word]\
    \ += 1;\n        }\n        else\n        {\n            dict[word] = 1;\n   \
    \     }\n    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n\
    \    {\n        if (value == max)\n        {\n            result.set(dict);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgkr4hl6y.d(29): Error: no property `split` for type `string`

    /tmp/tmpgkr4hl6y.d(33): Error: no property `contains` for type `long[string]`

    /tmp/tmpgkr4hl6y.d(42): Error: no property `max` for type `long[]`

    /tmp/tmpgkr4hl6y.d(47): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkr4hl6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        result = dict;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy629yke6.d(26): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy629yke6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164234
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ histogram;\n    foreach(c; test.split)\n    {\n        histogram[c]++;\n   \
    \ }\n    long max = maxElement(histogram.values);\n    long[string] result;\n\
    \    foreach(k, v; histogram)\n    {\n        if(v == max)\n        {\n      \
    \      result[k] = v;\n        }\n    }\n    return result.length == 0 ? null\
    \ : result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6gvscqx.d(25): Error: no property `split` for type `string`

    /tmp/tmpk6gvscqx.d(29): Error: undefined identifier `maxElement`

    /tmp/tmpk6gvscqx.d(38): Error: cannot implicitly convert expression `_aaLen(result)
    == 0LU ? cast(long[string])null : result` of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6gvscqx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c in dict)\n        {\n            dict[c]++;\n        }\n \
    \       else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(key, value; dict)\n    {\n     \
    \   if(value == max)\n        {\n            if(result.isNull)\n            {\n\
    \                result = [key: value];\n            }\n            else\n   \
    \         {\n                result[key] = value;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcly6qpr.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcly6qpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   if(max == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result[c] = max;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89pngwz9.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmp89pngwz9.d(26): Error: no property `split` for type `string`

    /tmp/tmp89pngwz9.d(30): Error: undefined identifier `maxElement`

    /tmp/tmp89pngwz9.d(35): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89pngwz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        if(c.length > 0)\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if(max > 0)\n  \
    \  {\n        result = new long[string];\n        foreach(c; hist)\n        {\n\
    \            if(c.value == max)\n            {\n                result.get!(true)[c.key]\
    \ = c.value;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpej1u0oo6.d(25): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpej1u0oo6.d(26): Error: no property `split` for type `string`

    /tmp/tmpej1u0oo6.d(36): Error: no property `value` for type `long`

    /tmp/tmpej1u0oo6.d(38): Error: no property `value` for type `long`

    /tmp/tmpej1u0oo6.d(43): Error: cannot pass type `string` as a function argument

    /tmp/tmpej1u0oo6.d(46): Error: no property `value` for type `long`

    /tmp/tmpej1u0oo6.d(48): Error: template instance `get!true` does not match template
    declaration `get(U)(inout(U) fallback)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpej1u0oo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    auto result\
    \ = new long[string];\n    foreach(ch; test.split)\n    {\n        if(ch.length\
    \ == 1)\n        {\n            result[ch]++;\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    else\n    {\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result\
    \ = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"\
    a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpum2z_kcj.d(24): Error: cannot pass type `string` as a function
    argument

    /tmp/tmpum2z_kcj.d(25): Error: no property `split` for type `string`

    /tmp/tmpum2z_kcj.d(34): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum2z_kcj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    long[string]\
    \ letters;\n    foreach (letter; test.split)\n    {\n        if (letters.contains(letter))\n\
    \        {\n            letters[letter]++;\n        }\n        else\n        {\n\
    \            letters[letter] = 1;\n        }\n    }\n    long max = maxElement(letters.values);\n\
    \    foreach (letter; letters.keys)\n    {\n        if (letters[letter] == max)\n\
    \        {\n            result[letter] = max;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllg4qoiy.d(25): Error: no property `empty` for type `string`

    /tmp/tmpllg4qoiy.d(30): Error: no property `split` for type `string`

    /tmp/tmpllg4qoiy.d(41): Error: undefined identifier `maxElement`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllg4qoiy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        auto words = test.split(\" \");\n        auto dict =\
    \ new long[string];\n        foreach (word; words)\n        {\n            if\
    \ (dict.count(word) == 0)\n            {\n                dict[word] = 1;\n  \
    \          }\n            else\n            {\n                dict[word] += 1;\n\
    \            }\n        }\n        long max = dict.values.max;\n        foreach\
    \ (key, value; dict)\n        {\n            if (value == max)\n            {\n\
    \                result.insert(key, value);\n            }\n        }\n      \
    \  return result;\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6rf96i8.d(31): Error: no property `split` for type `string`

    /tmp/tmp_6rf96i8.d(32): Error: cannot pass type `string` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6rf96i8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    if (test.length\
    \ == 0)\n        return null;\n    long[string] result;\n    string[] words =\
    \ test.split(\" \");\n    foreach (word; words)\n    {\n        if (result.length\
    \ == 0)\n        {\n            result[word] = 1;\n        }\n        else\n \
    \       {\n            if (result.contains(word))\n            {\n           \
    \     result[word] += 1;\n            }\n            else\n            {\n   \
    \             result[word] = 1;\n            }\n        }\n    }\n    long max\
    \ = result.values.max;\n    long[string] max_result;\n    foreach (key, value;\
    \ result)\n    {\n        if (value == max)\n        {\n            max_result[key]\
    \ = value;\n        }\n    }\n    return max_result;\n}\nunittest\n{\n    alias\
    \ candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n\
    \        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n\
    {\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02jpl4iw.d(27): Error: no property `split` for type `string`

    /tmp/tmp02jpl4iw.d(36): Error: no property `contains` for type `long[string]`

    /tmp/tmp02jpl4iw.d(46): Error: no property `max` for type `long[]`

    /tmp/tmp02jpl4iw.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp02jpl4iw.d(55): Error: cannot implicitly convert expression `max_result`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02jpl4iw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            dict[c]++;\n        }\n\
    \    }\n    long max = maxElement(dict.values);\n    foreach(c; dict.keys)\n \
    \   {\n        if(dict[c] == max)\n        {\n            result.insert(dict);\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b\
    \ a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5lj16jtk.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lj16jtk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(!dict.contains(c))\n        {\n            dict[c]\
    \ = 1;\n        }\n        else\n        {\n            dict[c]++;\n        }\n\
    \        if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n\
    \    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9jafd8ta.d(26): Error: expression expected, not `:`

    /tmp/tmp9jafd8ta.d(44): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jafd8ta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(char c; test)\n  \
    \  {\n        if(c == ' ')\n            continue;\n        hist[c]++;\n    }\n\
    \    long max = 0;\n    foreach(char c; hist.keys)\n    {\n        if(hist[c]\
    \ > max)\n            max = hist[c];\n    }\n    foreach(char c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n            result[c] = max;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto\
    \ result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get\
    \ == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c\
    \ a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1pct_u5.d(25): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1pct_u5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  else\n    {\n        long[string] dict;\n        string[] words = test.split(\"\
    \ \");\n        foreach(word; words)\n        {\n            if(dict.count(word)\
    \ == 0)\n            {\n                dict[word] = 1;\n            }\n     \
    \       else\n            {\n                dict[word] += 1;\n            }\n\
    \        }\n        long max = dict.values.max;\n        foreach(key, value; dict)\n\
    \        {\n            if(value == max)\n            {\n                result\
    \ = dict;\n            }\n        }\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppx7c5rko.d(32): Error: no property `split` for type `string`

    /tmp/tmppx7c5rko.d(35): Error: no property `count` for type `long[string]`

    /tmp/tmppx7c5rko.d(44): Error: no property `max` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppx7c5rko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(letter; test.split)\n    {\n        result[letter]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    long[string] result2;\n    foreach(key, value;\
    \ result)\n    {\n        if(value == max)\n        {\n            result2[key]\
    \ = value;\n        }\n    }\n    return result2;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp644t03w3.d(25): Error: no property `split` for type `string`

    /tmp/tmp644t03w3.d(29): Error: undefined identifier `maxElement`

    /tmp/tmp644t03w3.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    /tmp/tmp644t03w3.d(42): Error: cannot implicitly convert expression `result2`
    of type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp644t03w3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpka5lwwdr.d(25): Error: no property `split` for type `string`

    /tmp/tmpka5lwwdr.d(32): Error: cannot implicitly convert expression `result` of
    type `long[string]` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpka5lwwdr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(letter; test.split)\n    {\n        result[letter]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    else\n    {\n        return result.filter!(a\
    \ => a.value == max);\n    }\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q4s2qvu.d(25): Error: no property `split` for type `string`

    /tmp/tmp6q4s2qvu.d(29): Error: undefined identifier `maxElement`

    /tmp/tmp6q4s2qvu.d(36): Error: no property `filter` for type `long[string]`

    /tmp/tmp6q4s2qvu.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q4s2qvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return null;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] counts;\n    foreach(word; words)\n\
    \    {\n        counts[word]++;\n    }\n    long max = max(counts.values);\n \
    \   foreach(key, value; counts)\n    {\n        if(value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9v9za2x.d(29): Error: no property `split` for type `string`

    /tmp/tmph9v9za2x.d(35): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmph9v9za2x.d(40): Error: no property `insert` for type `Nullable!(long[string])`

    /tmp/tmph9v9za2x.d(27): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9v9za2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result;\n    long[string] histo;\n    foreach(c; test.split())\n    {\n    \
    \    if(histo.count(c) == 0)\n        {\n            histo[c] = 1;\n        }\n\
    \        else\n        {\n            histo[c] += 1;\n        }\n    }\n    if(histo.length\
    \ == 0)\n    {\n        return result;\n    }\n    long max = histo.values.max;\n\
    \    foreach(k, v; histo)\n    {\n        if(v == max)\n        {\n          \
    \  result.set(histo);\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp30jh_vn.d(26): Error: no property `split` for type `string`

    /tmp/tmpp30jh_vn.d(41): Error: no property `max` for type `long[]`

    /tmp/tmpp30jh_vn.d(46): Error: no property `set` for type `Nullable!(long[string])`,
    did you mean `std.typecons.Nullable!(long[string]).Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp30jh_vn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164236
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            result[c]++;\n        }\n    }\n    if(result.length)\n    {\n  \
    \      long max = result.values.max;\n        return result.filter!(a => a.value\
    \ == max);\n    }\n    return null;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpds3fgrv5.d(25): Error: no property `split` for type `string`

    /tmp/tmpds3fgrv5.d(34): Error: no property `max` for type `long[]`

    /tmp/tmpds3fgrv5.d(35): Error: no property `filter` for type `long[string]`

    /tmp/tmpds3fgrv5.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!(long[string])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds3fgrv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164231
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            hist[c]++;\n        }\n\
    \    }\n    long max = maxElement(hist.values);\n    if(max > 0)\n    {\n    \
    \    result = [:];\n        foreach(k, v; hist)\n        {\n            if(v ==\
    \ max)\n            {\n                result[k] = v;\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wk176vh.d(25): Error: expression expected, not `:`

    /tmp/tmp1wk176vh.d(36): Error: expression expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wk176vh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164235
