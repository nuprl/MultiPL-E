language: d
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7jpgij6n.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dbd]\n??:? void tmp7jpgij6n.__unittest_L27_C1() [0x427aed]\n??:?
    void tmp7jpgij6n.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428193]\n??:? _d_run_main [0x4280fe]\n??:? main [0x427b4f]\n??:?
    __libc_start_main [0xc760e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd658nv0t.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd658nv0t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == cast(long)pow(cast(double)cbrt(a),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyswkvift.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428005]\n??:? void tmpyswkvift.__unittest_L27_C1() [0x427b93]\n??:?
    void tmpyswkvift.__modtest() [0x427d88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430218]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fcf5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42abad]\n??:? runModuleUnitTests [0x42bb19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428454]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4283db]\n??:? _d_run_main [0x428346]\n??:? main [0x427d9b]\n??:?
    __libc_start_main [0x81b32554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxydfuquj.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxydfuquj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppqrlgk5h.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a9d]\n??:? void tmppqrlgk5h.__unittest_L27_C1() [0x427dbc]\n??:?
    void tmppqrlgk5h.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e73]\n??:? _d_run_main [0x428dde]\n??:? main [0x428833]\n??:?
    __libc_start_main [0x93766554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)cbrt(a);\n\
    \    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2t5jg5o.d(29): Error: C style cast illegal, use `cast(long)cbrt(a)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2t5jg5o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7jpgij6n.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dbd]\n??:? void tmp7jpgij6n.__unittest_L27_C1() [0x427aed]\n??:?
    void tmp7jpgij6n.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428193]\n??:? _d_run_main [0x4280fe]\n??:? main [0x427b4f]\n??:?
    __libc_start_main [0xc760e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fb84toa.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fb84toa.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && a == cast(long)pow(cast(double)cbrt(a), 3));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_urupjzd.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ff5]\n??:? void tmp_urupjzd.__unittest_L27_C1() [0x427b83]\n??:?
    void tmp_urupjzd.__modtest() [0x427d78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430208]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fce5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab9d]\n??:? runModuleUnitTests [0x42bb09]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428444]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4283cb]\n??:? _d_run_main [0x428336]\n??:? main [0x427d8b]\n??:?
    __libc_start_main [0x4666a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == 8L) || (a == 27L) || (a == 64L) || (a\
    \ == 125L) || (a == 216L) || (a == 343L) || (a == 512L) || (a == 729L) || (a ==\
    \ 1000L) || (a == 1331L) || (a == 1728L) || (a == 2197L) || (a == 2744L) || (a\
    \ == 3375L) || (a == 4096L) || (a == 4913L) || (a == 5832L) || (a == 6859L) ||\
    \ (a == 8000L) || (a == 9261L) || (a == 10648L) || (a == 12167L) || (a == 13824L)\
    \ || (a == 15625L) || (a == 17576L) || (a == 19683L) || (a == 21952L) || (a ==\
    \ 24389L) || (a == 27000L) || (a == 29791L) || (a == 32768L) || (a == 35937L)\
    \ || (a == 39304L) || (a == 42875L) || (a == 46656L) || (a == 50653L) || (a ==\
    \ 54872L) || (a == 59319L) || (a == 64000L) || (a == 68921L) || (a == 74088L)\
    \ || (a == 79507L) || (a == 85184L) || (a == 91125L) || (a == 97336L) || (a ==\
    \ 103823L) || (a == 110592L) || (a == 117649L) || (a == 125000L) || (a == 132651L)\
    \ || (a == 140608L) || (a == 148877L) || (a == 157464L) || (a == 166375L) || (a\
    \ == 175616L) || (a == 185193L) || (a == 195112L) || (a == 205379L) || (a == 216000L)\
    \ || (a == 226981L) || (a\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmm4_fcxa.d(25): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpmm4_fcxa.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmm4_fcxa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fb84toa.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fb84toa.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7jpgij6n.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dbd]\n??:? void tmp7jpgij6n.__unittest_L27_C1() [0x427aed]\n??:?
    void tmp7jpgij6n.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428193]\n??:? _d_run_main [0x4280fe]\n??:? main [0x427b4f]\n??:?
    __libc_start_main [0xc760e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx253gepp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96q2z7t9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps887195a.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps887195a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8rws2xt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_68rzoqg.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_68rzoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm3os1pc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0 / 3.0);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmihv3auj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || iscube(a, 2);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9_k5jw3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps887195a.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps887195a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)pow(a,\
    \ 1.0/3.0) == pow(a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmzv095aw.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzv095aw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zm4by0i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)floor(pow(a, 1.0/3.0)),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53rb9rwp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94j1m2sf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxydfuquj.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxydfuquj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96q2z7t9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ji5xsyr.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6ji5xsyr.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6ji5xsyr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)\
    \ pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp813515fs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9z521ac9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long x = (long)pow(a,\
    \ 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcj5szvg3.d(29): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj5szvg3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxydfuquj.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxydfuquj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0n941ck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9cmm1om.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9cmm1om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph36ama8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fb84toa.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fb84toa.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphfp4n263.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmphfp4n263.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphfp4n263.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz7m7omy9.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmpz7m7omy9.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz7m7omy9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(a\
    \ == pow(cast(long)sqrt(a), 3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdn4sdfoo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_68rzoqg.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_68rzoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(a, 2L, a));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pkcrnn6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkk_xfc8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 /\
    \ 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhbtrj8i.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhbtrj8i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2twuh5l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2twuh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == 64L) || (a == -64L);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cewqtd7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx253gepp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz2cv_6h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == -8)\
    \ || (a == -27) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3sd_5ds.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wzx7sqo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wzx7sqo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx253gepp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || (a < 0L ? iscube(-a) : iscube(cast(long)pow(a, 1.0/3.0)));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg07w7us2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return isPow(a,\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphexa8cnt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxydfuquj.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxydfuquj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppqrlgk5h.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a9d]\n??:? void tmppqrlgk5h.__unittest_L27_C1() [0x427dbc]\n??:?
    void tmppqrlgk5h.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e73]\n??:? _d_run_main [0x428dde]\n??:? main [0x428833]\n??:?
    __libc_start_main [0x93766554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && isPow(a, 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpir25wlio.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz7m7omy9.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmpz7m7omy9.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz7m7omy9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkk_xfc8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplf0m1ykk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)sqrt(a), 3L));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91bqha8e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2b_f6u3a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)cbrt(a), 3L));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyu8eljz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppqrlgk5h.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x428a9d]\n??:? void tmppqrlgk5h.__unittest_L27_C1() [0x427dbc]\n??:?
    void tmppqrlgk5h.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e73]\n??:? _d_run_main [0x428dde]\n??:? main [0x428833]\n??:?
    __libc_start_main [0x93766554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_68rzoqg.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_68rzoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz34wm29.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6lx6c0nv.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6lx6c0nv.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6lx6c0nv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps887195a.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps887195a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd658nv0t.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd658nv0t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double x = pow(a,\
    \ 1.0/3.0);\n    return x == cast(long)x;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8n4hitd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ji5xsyr.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6ji5xsyr.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6ji5xsyr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps887195a.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps887195a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ji5xsyr.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6ji5xsyr.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6ji5xsyr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l74v7oj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_68rzoqg.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_68rzoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0 / 3.0) * (long)pow(a, 1.0 / 3.0) * (long)pow(a,\
    \ 1.0 / 3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0g5ajx_.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpj0g5ajx_.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpj0g5ajx_.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0g5ajx_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6lx6c0nv.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6lx6c0nv.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6lx6c0nv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph36ama8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7jpgij6n.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dbd]\n??:? void tmp7jpgij6n.__unittest_L27_C1() [0x427aed]\n??:?
    void tmp7jpgij6n.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428193]\n??:? _d_run_main [0x4280fe]\n??:? main [0x427b4f]\n??:?
    __libc_start_main [0xc760e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96q2z7t9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph36ama8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) * (cast(long)pow(cast(double)a, 1.0/3.0)) * (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywfy5xta.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fb84toa.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fb84toa.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphzjyzyao.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmphzjyzyao.__unittest_L27_C1() [0x427abb]\n??:?
    void tmphzjyzyao.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b5b]\n??:?
    __libc_start_main [0xa60f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wzx7sqo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wzx7sqo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a,\
    \ 1.0/3.0)) == long);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57sbb8as.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0 / 3.0);\n\
    \    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7p6i1fn.d(27): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7p6i1fn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7couwj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx253gepp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_68rzoqg.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_68rzoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaiciejs9.d(26): Error: expression expected, not \''unittest\''\n/tmp/tmpaiciejs9.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiciejs9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6lx6c0nv.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6lx6c0nv.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6lx6c0nv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4thtut8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == pow(cast(long)floor(pow(a, 1.0 / 3.0)),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphuvo8k58.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7couwj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7jpgij6n.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dbd]\n??:? void tmp7jpgij6n.__unittest_L27_C1() [0x427aed]\n??:?
    void tmp7jpgij6n.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428193]\n??:? _d_run_main [0x4280fe]\n??:? main [0x427b4f]\n??:?
    __libc_start_main [0xc760e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long x = (long)pow(a, 1.0/3.0);\n\
    \    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphcw0h9ra.d(27): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcw0h9ra.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9z521ac9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7couwj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == -8L || a == -27L;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z7wsewv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = cast(long)pow(a,\
    \ 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4__15n5r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == pow(cast(long)round(pow(cast(double)a,\
    \ 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqcnuvj2r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkw4_12k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ji5xsyr.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp6ji5xsyr.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6ji5xsyr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph996vgru.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && pow(cast(long) floor(pow(a, 1.0 / 3.0)), 3) == a);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd9r13cq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 /\
    \ 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhbtrj8i.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhbtrj8i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && a == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam7auh75.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphfp4n263.d(26): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmphfp4n263.d(39): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphfp4n263.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfmhtmq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\n/tmp/tmpx7couwj8.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7couwj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz34wm29.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuk1zfjo.d(25): Error: C style cast illegal, use cast(long)pow(a,
    1.00000 / 3.00000)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuk1zfjo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659794642
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9mzxayj1.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428abd]\n??:? void tmp9mzxayj1.__unittest_L27_C1() [0x427df7]\n??:?
    void tmp9mzxayj1.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428e93]\n??:? _d_run_main [0x428dfe]\n??:? main [0x42884f]\n??:?
    __libc_start_main [0xc35d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
