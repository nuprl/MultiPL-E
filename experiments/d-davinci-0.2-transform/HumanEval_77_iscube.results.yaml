language: d
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]

    ??:? void tmpan05agi3.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cnhti3c.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cnhti3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == cast(long)pow(cast(double)cbrt(a),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzyx0c_mb.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428005]

    ??:? void tmpzyx0c_mb.__unittest_L27_C1() [0x427b93]

    ??:? void tmpzyx0c_mb.__modtest() [0x427d88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abd6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430218]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abad]

    ??:? runModuleUnitTests [0x42bb19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ytgo8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a9d]

    ??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]

    ??:? void tmpet4e42_t.__modtest() [0x428820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43081d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]

    ??:? runModuleUnitTests [0x42c641]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)cbrt(a);\n\
    \    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsu1wys5e.d(29): Error: C style cast illegal, use `cast(long)cbrt(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu1wys5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]

    ??:? void tmpan05agi3.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqwzvpqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && a == cast(long)pow(cast(double)cbrt(a), 3));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4el9iu9h.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ff5]

    ??:? void tmp4el9iu9h.__unittest_L27_C1() [0x427b83]

    ??:? void tmp4el9iu9h.__modtest() [0x427d78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430208]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fce5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab9d]

    ??:? runModuleUnitTests [0x42bb09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428444]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == 8L) || (a == 27L) || (a == 64L) || (a\
    \ == 125L) || (a == 216L) || (a == 343L) || (a == 512L) || (a == 729L) || (a ==\
    \ 1000L) || (a == 1331L) || (a == 1728L) || (a == 2197L) || (a == 2744L) || (a\
    \ == 3375L) || (a == 4096L) || (a == 4913L) || (a == 5832L) || (a == 6859L) ||\
    \ (a == 8000L) || (a == 9261L) || (a == 10648L) || (a == 12167L) || (a == 13824L)\
    \ || (a == 15625L) || (a == 17576L) || (a == 19683L) || (a == 21952L) || (a ==\
    \ 24389L) || (a == 27000L) || (a == 29791L) || (a == 32768L) || (a == 35937L)\
    \ || (a == 39304L) || (a == 42875L) || (a == 46656L) || (a == 50653L) || (a ==\
    \ 54872L) || (a == 59319L) || (a == 64000L) || (a == 68921L) || (a == 74088L)\
    \ || (a == 79507L) || (a == 85184L) || (a == 91125L) || (a == 97336L) || (a ==\
    \ 103823L) || (a == 110592L) || (a == 117649L) || (a == 125000L) || (a == 132651L)\
    \ || (a == 140608L) || (a == 148877L) || (a == 157464L) || (a == 166375L) || (a\
    \ == 175616L) || (a == 185193L) || (a == 195112L) || (a == 205379L) || (a == 216000L)\
    \ || (a == 226981L) || (a\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd303g_qp.d(25): Error: found `unittest` when expecting `)`

    /tmp/tmpd303g_qp.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd303g_qp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqwzvpqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]

    ??:? void tmpan05agi3.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]

    ??:? void tmptpheyp6e.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42896d]

    ??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]

    ??:? void tmp92k5brcl.__modtest() [0x4286f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dbc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_5eeaat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6_i43iua.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428aad]

    ??:? void tmp6_i43iua.__unittest_L27_C1() [0x427dc8]

    ??:? void tmp6_i43iua.__modtest() [0x42882c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c87b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b70e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43082d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6e5]

    ??:? runModuleUnitTests [0x42c651]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428efc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kp_edo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpekk_b89b.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289cd]

    ??:? void tmpekk_b89b.__unittest_L32_C1() [0x427da3]

    ??:? void tmpekk_b89b.__modtest() [0x428750]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43074d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]

    ??:? runModuleUnitTests [0x42c571]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e1c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0 / 3.0);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc2wmsl4u.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpc2wmsl4u.__unittest_L28_C1() [0x427d64]

    ??:? void tmpc2wmsl4u.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || iscube(a, 2);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_6_wmb6.d(25): Error: function `tmp6_6_wmb6.iscube(long a)` is
    not callable using argument types `(long, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_6_wmb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_5eeaat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)pow(a,\
    \ 1.0/3.0) == pow(a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jdy7m_m.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jdy7m_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfbzx65h9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a9d]

    ??:? void tmpfbzx65h9.__unittest_L27_C1() [0x427dbc]

    ??:? void tmpfbzx65h9.__modtest() [0x428820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43081d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]

    ??:? runModuleUnitTests [0x42c641]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)floor(pow(a, 1.0/3.0)),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1rosrhwe.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428bad]

    ??:? void tmp1rosrhwe.__unittest_L27_C1() [0x427eeb]

    ??:? void tmp1rosrhwe.__modtest() [0x428930]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8fd]

    ??:? runModuleUnitTests [0x42c869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ffc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_abawmr.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_abawmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ytgo8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42896d]

    ??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]

    ??:? void tmp92k5brcl.__modtest() [0x4286f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dbc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4uztrom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)\
    \ pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpowyq4r58.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpowyq4r58.__unittest_L28_C1() [0x427d64]

    ??:? void tmpowyq4r58.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpilr09m3z.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a95]

    ??:? void tmpilr09m3z.__unittest_L27_C1() [0x427de3]

    ??:? void tmpilr09m3z.__modtest() [0x428818]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c863]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430889]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430815]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]

    ??:? runModuleUnitTests [0x42c639]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ee4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long x = (long)pow(a,\
    \ 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyk2024vr.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyk2024vr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ytgo8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd93ya0r.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd93ya0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1u5097kf.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u5097kf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]

    ??:? void tmp325ak1q3.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqwzvpqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0owk451w.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp0owk451w.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0owk451w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqr1d5qxh.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpqr1d5qxh.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqr1d5qxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(a\
    \ == pow(cast(long)sqrt(a), 3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxxbb26m6.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpxxbb26m6.__unittest_L27_C1() [0x427a1c]

    ??:? void tmpxxbb26m6.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kp_edo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(a, 2L, a));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeldbcb1m.d(25): Error: function `tmpeldbcb1m.iscube(long a)` is
    not callable using argument types `(long, long, long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeldbcb1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeks0qmr8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a7d]

    ??:? void tmpeks0qmr8.__unittest_L27_C1() [0x427dac]

    ??:? void tmpeks0qmr8.__modtest() [0x428800]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c84b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b5]

    ??:? runModuleUnitTests [0x42c621]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ecc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 /\
    \ 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bzb6xij.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bzb6xij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yu81v93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == 64L) || (a == -64L);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ch45oax.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmp6ch45oax.__unittest_L27_C1() [0x427aed]

    ??:? void tmp6ch45oax.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]

    ??:? void tmptpheyp6e.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzpdr1081.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpzpdr1081.__unittest_L27_C1() [0x427ab8]

    ??:? void tmpzpdr1081.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == -8)\
    \ || (a == -27) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6a68fb6m.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp6a68fb6m.__unittest_L27_C1() [0x427b09]

    ??:? void tmp6a68fb6m.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnbejoah.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnbejoah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]

    ??:? void tmptpheyp6e.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || (a < 0L ? iscube(-a) : iscube(cast(long)pow(a, 1.0/3.0)));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdhaa4eyl.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289d5]

    ??:? void tmpdhaa4eyl.__unittest_L27_C1() [0x427d6b]

    ??:? void tmpdhaa4eyl.__modtest() [0x428758]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b636]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430755]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]

    ??:? runModuleUnitTests [0x42c579]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e24]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return isPow(a,\
    \ 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7o1th0to.d(25): Error: undefined identifier `isPow`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7o1th0to.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ytgo8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a9d]

    ??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]

    ??:? void tmpet4e42_t.__modtest() [0x428820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43081d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]

    ??:? runModuleUnitTests [0x42c641]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && isPow(a, 3));\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmzc5ax2.d(25): Error: undefined identifier `isPow`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmzc5ax2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqr1d5qxh.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpqr1d5qxh.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqr1d5qxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeks0qmr8.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a7d]

    ??:? void tmpeks0qmr8.__unittest_L27_C1() [0x427dac]

    ??:? void tmpeks0qmr8.__modtest() [0x428800]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c84b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b5]

    ??:? runModuleUnitTests [0x42c621]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ecc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplid4ls3t.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmplid4ls3t.__unittest_L27_C1() [0x427dd7]

    ??:? void tmplid4ls3t.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c85b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430881]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43080d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6c5]

    ??:? runModuleUnitTests [0x42c631]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428edc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)sqrt(a), 3L));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa859uqp6.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa859uqp6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5zis8s9e.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a85]

    ??:? void tmp5zis8s9e.__unittest_L28_C1() [0x427da4]

    ??:? void tmp5zis8s9e.__modtest() [0x428808]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c853]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430879]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430805]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]

    ??:? runModuleUnitTests [0x42c629]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ed4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)cbrt(a), 3L));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a9d]

    ??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]

    ??:? void tmpet4e42_t.__modtest() [0x428820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c86b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43081d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]

    ??:? runModuleUnitTests [0x42c641]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kp_edo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdwfdmw86.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpdwfdmw86.__unittest_L27_C1() [0x427df7]

    ??:? void tmpdwfdmw86.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsjux4xv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_5eeaat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cnhti3c.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cnhti3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double x = pow(a,\
    \ 1.0/3.0);\n    return x == cast(long)x;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp10csleyj.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmp10csleyj.__unittest_L28_C1() [0x427d60]

    ??:? void tmp10csleyj.__modtest() [0x42872c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4uztrom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_5eeaat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4uztrom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphflkdb7s.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428ab5]

    ??:? void tmphflkdb7s.__unittest_L27_C1() [0x427dd0]

    ??:? void tmphflkdb7s.__modtest() [0x428834]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c883]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b716]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430835]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6ed]

    ??:? runModuleUnitTests [0x42c659]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f04]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kp_edo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0 / 3.0) * (long)pow(a, 1.0 / 3.0) * (long)pow(a,\
    \ 1.0 / 3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa628uwnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsjux4xv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]

    ??:? void tmp325ak1q3.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]

    ??:? void tmpan05agi3.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42896d]

    ??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]

    ??:? void tmp92k5brcl.__modtest() [0x4286f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dbc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]

    ??:? void tmp325ak1q3.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) * (cast(long)pow(cast(double)a, 1.0/3.0)) * (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuz2a_3km.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42897d]

    ??:? void tmpuz2a_3km.__unittest_L27_C1() [0x427d40]

    ??:? void tmpuz2a_3km.__modtest() [0x4286fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dcc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n\
    \    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqwzvpqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]

    ??:? void tmpdkypn9zx.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnbejoah.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnbejoah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a,\
    \ 1.0/3.0)) == long);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprx77dj_d.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmprx77dj_d.__unittest_L27_C1() [0x427a1c]

    ??:? void tmprx77dj_d.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0 / 3.0);\n\
    \    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0_26hre.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0_26hre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagtmt66l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]

    ??:? void tmptpheyp6e.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_kp_edo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216\
    \ || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 ||\
    \ a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 ||\
    \ a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`

    /tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbjg3n44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L ||\
    \ a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L\
    \ || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a ==\
    \ 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L\
    \ || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L ||\
    \ a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a\
    \ == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a ==\
    \ 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L\
    \ || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L\
    \ || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L\
    \ || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L\
    \ || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L\
    \ || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L\
    \ || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L\
    \ || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L\
    \ || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsjux4xv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == 27;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg_e7u7ld.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpg_e7u7ld.__unittest_L27_C1() [0x427aaf]

    ??:? void tmpg_e7u7ld.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0L) || (a == 1L) || (a == -1L) || (a == pow(cast(long)floor(pow(a, 1.0 / 3.0)),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ivye167.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428ba5]

    ??:? void tmp1ivye167.__unittest_L27_C1() [0x427edf]

    ??:? void tmp1ivye167.__modtest() [0x428924]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8f5]

    ??:? runModuleUnitTests [0x42c861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ff4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagtmt66l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]

    ??:? void tmpan05agi3.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long x = (long)pow(a, 1.0/3.0);\n\
    \    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsqwcsutx.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqwcsutx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpilr09m3z.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a95]

    ??:? void tmpilr09m3z.__unittest_L27_C1() [0x427de3]

    ??:? void tmpilr09m3z.__modtest() [0x428818]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c863]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430889]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430815]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]

    ??:? runModuleUnitTests [0x42c639]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ee4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagtmt66l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == -8L || a == -27L;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsfks90g6.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpsfks90g6.__unittest_L27_C1() [0x427abb]

    ??:? void tmpsfks90g6.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = cast(long)pow(a,\
    \ 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyonbde8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpoyonbde8.__unittest_L28_C1() [0x427d64]

    ??:? void tmpoyonbde8.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == pow(cast(long)round(pow(cast(double)a,\
    \ 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]

    ??:? void tmp_8tr50n8.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125)\
    \ || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a\
    \ == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a ==\
    \ 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261)\
    \ || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576)\
    \ || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791)\
    \ || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656)\
    \ || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921)\
    \ || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336)\
    \ || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a ==\
    \ 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375)\
    \ || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a ==\
    \ 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144)\
    \ || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a ==\
    \ 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4uztrom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0 / 3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyq37miec.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a95]

    ??:? void tmpyq37miec.__unittest_L27_C1() [0x427de3]

    ??:? void tmpyq37miec.__modtest() [0x428818]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c863]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430889]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430815]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]

    ??:? runModuleUnitTests [0x42c639]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ee4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && pow(cast(long) floor(pow(a, 1.0 / 3.0)), 3) == a);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpf89ife.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b8d]

    ??:? void tmprpf89ife.__unittest_L27_C1() [0x427eac]

    ??:? void tmprpf89ife.__modtest() [0x428910]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8dd]

    ??:? runModuleUnitTests [0x42c849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428fdc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 /\
    \ 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bzb6xij.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bzb6xij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || (a > 0L && a == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj1tgxlkt.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42894d]

    ??:? void tmpj1tgxlkt.__unittest_L27_C1() [0x427d14]

    ??:? void tmpj1tgxlkt.__modtest() [0x4286d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c71b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430741]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c4f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d9c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64\
    \ || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 ||\
    \ a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 ||\
    \ a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197\
    \ || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a ==\
    \ 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 ||\
    \ a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261\
    \ || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a\
    \ == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a ==\
    \ 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389\
    \ || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a\
    \ == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a ==\
    \ 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653\
    \ || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a\
    \ == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a ==\
    \ 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125\
    \ || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0owk451w.d(26): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp0owk451w.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0owk451w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]

    ??:? void tmpyxhdkftn.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a,\
    \ 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagtmt66l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0),\
    \ 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdwfdmw86.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpdwfdmw86.__unittest_L27_C1() [0x427df7]

    ??:? void tmpdwfdmw86.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a,\
    \ 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvr7_duc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]

    ??:? void tmpwf6jf3ew.__modtest() [0x42883c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b71e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43083d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]

    ??:? runModuleUnitTests [0x42c661]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163089
