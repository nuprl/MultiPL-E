name: HumanEval_20_find_closest_elements
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
  \ find_closest_elements(float[] numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    assert(numbers.length >= 2);\n    float min_distance\
    \ = abs(numbers[0] - numbers[1]);\n    float min_number1 = numbers[0];\n    float\
    \ min_number2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n    \
    \        float distance = abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < min_distance) \n            {\n                min_distance = distance;\n\
    \                min_number1 = numbers[i];\n                min_number2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_number1, min_number2);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}", "{\n    float\
    \ min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i, number;\
    \ numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n         \
    \   if(i != j)\n            {\n                float diff = abs(number - number2);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = number;\n                    b = number2;\n \
    \               }\n            }\n        }\n    }\n    return tuple(a, b);\n}",
  "{\n    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b\
    \ = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n  \
    \      {\n            if (i != j)\n            {\n                float diff =\
    \ abs(a - b);\n                if (diff < min_diff)\n                {\n     \
    \               min_diff = diff;\n                    min_a = a;\n           \
    \         min_b = b;\n                }\n            }\n        }\n    }\n   \
    \ return tuple(min(min_a, min_b), max(min_a, min_b));\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float diff = numbers[0] - numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < diff)\n            {\n                diff = abs(numbers[i] - numbers[j]);\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n  \
    \  assert(numbers.length >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    foreach(i, num; numbers)\n\
    \    {\n        if(i == 0)\n            continue;\n        float diff = num -\
    \ numbers[i-1];\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = num;\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ float max_diff = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n\
    \    {\n        if(i == 0)\n            continue;\n        float diff = number\
    \ - numbers[i-1];\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = number;\n      \
    \  }\n        if(diff > max_diff)\n        {\n            max_diff = diff;\n \
    \           min = numbers[i-1];\n            max = number;\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_a = numbers[0];\n\
    \    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_diff_a =\
    \ numbers[i];\n                min_diff_b = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = float.max;\n    float min_diff_a = 0;\n    float min_diff_b = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length >= 2);\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        if (abs(numbers[i] - numbers[j]) < min_diff)\n            {\n       \
    \         min_diff = abs(numbers[i] - numbers[j]);\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min =\
    \ float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n\
    \    {\n        foreach(j, y; numbers)\n        {\n            if(i != j)\n  \
    \          {\n                float diff = abs(x - y);\n                if(diff\
    \ < min)\n                {\n                    min = diff;\n               \
    \     a = x;\n                    b = y;\n                }\n            }\n \
    \       }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float[] result = new float[2];\n    foreach(i, x; numbers)\n    {\n     \
    \   foreach(j, y; numbers)\n        {\n            if(i != j)\n            {\n\
    \                float diff = abs(x - y);\n                if(diff < min)\n  \
    \              {\n                    min = diff;\n                    result[0]\
    \ = x;\n                    result[1] = y;\n                }\n            }\n\
    \        }\n    }\n    return tuple(result[0], result[1]);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < min)\n            {\n                min = abs(numbers[i] -\
    \ numbers[j]);\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float,\
    \ float) closest_pair = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                closest_pair = tuple(numbers[i], numbers[j]);\n            }\n\
    \        }\n    }\n    return closest_pair;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
