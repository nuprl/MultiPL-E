name: HumanEval_89_encrypt
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt that\
  \ takes a string as an argument and\n    returns a string encrypted with the alphabet\
  \ being rotated. \n    The alphabet should be rotated in a manner such that the\
  \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
  \    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\")\n    \"ewhjklnop\"\
  \n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"et\")\n    \"ix\"\n   \
  \ \n*/\nstring encrypt(string s) \n"
tests: "unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
  ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
  gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
  faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
  ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
  a\") == \"e\");\n}\nvoid main(){}"
completions: ["{\n    string result;\n    foreach(c; s)\n    {\n        result ~=\
    \ (c + 2 * 2).to!char;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(char c; s)\n\
    \    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach(char c; s)\n    {\n        if (c == 'z')\n  \
    \          result ~= 'b';\n        else if (c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach(char c; s)\n    {\n        if(c == 'z')\n   \
    \         result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(char c; s)\n    {\n        int i = c;\n\
    \        if(i >= 97 && i <= 122)\n        {\n            i = (i + 2 * 2) % 122;\n\
    \            if(i < 97)\n            {\n                i += 97;\n           \
    \ }\n        }\n        result ~= cast(char)i;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n        result ~=\
    \ (c + 2 * 2);\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n\
    \    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"\
    kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring decrypt(string\
    \ s) \n{\n    string result = \"\";\n    foreach(c; s)\n    {\n        result\
    \ ~= (char)(c - 2 * 2);\n    }\n    return result;\n}\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et", "{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c +\
    \ 2 * 2);\n    }\n    return result;\n}", "{\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        encrypted ~= (c + 2 * 2);\n    }\n    return\
    \ encrypted;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n  \
    \      result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n\
    \            result ~= 'b';\n        else if(c == 'y')\n            result ~=\
    \ 'a';\n        else\n            result ~= c + 2;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        result ~= (c + 2\
    \ * 2).to!char;\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   result ~= (c + 2 * 2).to!char;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2);\n \
    \   }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n        else\
    \ if(c == 'y')\n            result ~= 'a';\n        else\n            result ~=\
    \ c + 2;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'z')\n            result ~= 'b';\n        else\
    \ if (c == 'y')\n            result ~= 'a';\n        else\n            result\
    \ ~= c + 2;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(char c; s)\n    {\n\
    \        result ~= (char)(c + 2 * 2);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
