name: HumanEval_144_simplify
language: d
prompt: "import std.math;\n/*\nYour task is to implement a function that will simplify\
  \ the expression\n    x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n    otherwise. Both x and n, are string representation of a\
  \ fraction, and have the following format,\n    <numerator>/<denominator> where\
  \ both numerator and denominator are positive whole numbers.\n\n    You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n\n  \
  \  >>> simplify(\"1/5\", \"5/1\")\n    true\n    >>> simplify(\"1/6\", \"2/1\")\n\
  \    false\n    >>> simplify(\"7/10\", \"10/2\")\n    false\n    \n*/\nbool simplify(string\
  \ x, string n) \n"
tests: "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\"\
  , \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"\
  5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n\
  \    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\"\
  , \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"\
  2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n\
  \    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\"\
  , \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"\
  1/5\", \"1/5\") == false);\n}\nvoid main(){}"
completions: ["{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num;\n    auto divisor\
    \ = x_den * n_den;\n    return result % divisor == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    int result_numerator = x_numerator * n_numerator;\n\
    \    int result_denominator = x_denominator * n_denominator;\n    return result_numerator\
    \ % result_denominator == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    int result_numerator = x_numerator * n_numerator;\n\
    \    int result_denominator = x_denominator * n_denominator;\n    return result_numerator\
    \ % result_denominator == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"\
    /\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto res = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return res % den == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    int result_numerator = x_numerator * n_numerator;\n\
    \    int result_denominator = x_denominator * n_denominator;\n    return result_numerator\
    \ % result_denominator == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto result =\
    \ x_num * n_num;\n    auto den = x_den * n_den;\n    return result % den == 0;\n\
    }", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator\
    \ = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    int x_num\
    \ = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n\
    \    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n  \
    \  return num % den == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    auto x_numerator = to!int(x_n[0]);\n    auto x_denominator\
    \ = to!int(x_n[1]);\n    auto n_numerator = to!int(n_n[0]);\n    auto n_denominator\
    \ = to!int(n_n[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_n = split(x, \"\
    /\");\n    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n   \
    \ auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den\
    \ = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    sscanf(x.c_str(), \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &n_numerator, &n_denominator);\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    int xn = to!int(split(x, \"/\"\
    )[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return xn * nd ==\
    \ xd * nn;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n\
    \    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return\
    \ (stoi(x_n[0]) * stoi(n_n[1])) % stoi(x_n[1]) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto\
    \ n_n = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto p = split(x, \"/\");\n    auto q = split(n, \"/\");\n\
    \    return to!int(p[0]) * to!int(q[1]) % to!int(p[1]) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"\
    /\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n    auto n_n = n.split(\"/\"\
    );\n    auto x_n_n = to!int(x_n[0]) * to!int(n_n[1]);\n    auto x_n_d = to!int(x_n[1])\
    \ * to!int(n_n[0]);\n    return x_n_n % x_n_d == 0;\n}", "{\n    auto x_num =\
    \ to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n  \
    \  auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return to!int(x_n[0])\
    \ * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_n = split(x, \"\
    /\");\n    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n   \
    \ auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den\
    \ = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n\
    \    int x2 = to!int(split(x, \"/\")[1]);\n    int n1 = to!int(split(n, \"/\"\
    )[0]);\n    int n2 = to!int(split(n, \"/\")[1]);\n    return (x1 * n2) % (x2 *\
    \ n1) == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    double x_value = (double)x_numerator / x_denominator;\n    double\
    \ n_value = (double)n_numerator / n_denominator;\n    return (x_value * n_value)\
    \ == (int)(x_value * n_value);\n}", "{\n    int x_num, x_den, n_num, n_den;\n\
    \    int i = 0;\n    string num = \"\";\n    while (x[i] != '/')\n    {\n    \
    \    num += x[i];\n        i++;\n    }\n    x_num = stoi(num);\n    num = \"\"\
    ;\n    i++;\n    while (i < x.length())\n    {\n        num += x[i];\n       \
    \ i++;\n    }\n    x_den = stoi(num);\n    i = 0;\n    num = \"\";\n    while\
    \ (n[i] != '/')\n    {\n        num += n[i];\n        i++;\n    }\n    n_num =\
    \ stoi(num);\n    num = \"\";\n    i++;\n    while (i < n.length())\n    {\n \
    \       num += n[i];\n        i++;\n    }\n    n_den = stoi(num);\n    int num_res\
    \ = x_num * n_num;\n    int den_res = x_den * n_den;\n    int gcd = __gcd(num_res,\
    \ den_res);\n    num_res /= gcd;\n    den_res /= gcd;\n    if (num_res % den_res\
    \ == 0)\n        return true;\n    return false;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    int result_numerator = x_numerator * n_numerator;\n\
    \    int result_denominator = x_denominator * n_denominator;\n    return (result_numerator\
    \ % result_denominator == 0);\n}", "{\n    auto x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto\
    \ n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_numerator * n_numerator / (x_denominator *\
    \ n_denominator);\n    return result == floor(result);\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n    int x_denominator\
    \ = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"\
    /\")]);\n    int n_denominator = to!int(n[n.find(\"/\")+1..$]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    int x_num\
    \ = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n\
    \    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  auto x_n = x.split(\"/\");\n    auto n_n = n.split(\"/\");\n    auto x_n_n\
    \ = to!int(x_n[0]) * to!int(n_n[1]);\n    auto x_n_d = to!int(x_n[1]) * to!int(n_n[0]);\n\
    \    auto gcd = gcd(x_n_n, x_n_d);\n    x_n_n /= gcd;\n    x_n_d /= gcd;\n   \
    \ return x_n_n % x_n_d == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n\
    \    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    int num = x_num\
    \ * n_num;\n    int den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return\
    \ to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n    int x_num\
    \ = to!int(x[0..x.find(\"/\")]);\n    int x_den = to!int(x[x.find(\"/\")+1..$]);\n\
    \    int n_num = to!int(n[0..n.find(\"/\")]);\n    int n_den = to!int(n[n.find(\"\
    /\")+1..$]);\n    return (x_num*n_num)%(x_den*n_den) == 0;\n}", "{\n    auto x_n\
    \ = x.split(\"/\");\n    auto n_n = n.split(\"/\");\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    auto gcd =\
    \ gcd(num, den);\n    return den / gcd == 1;\n}", "{\n    auto x_split = split(x,\
    \ \"/\");\n    auto n_split = split(n, \"/\");\n    int x_numerator = to!int(x_split[0]);\n\
    \    int x_denominator = to!int(x_split[1]);\n    int n_numerator = to!int(n_split[0]);\n\
    \    int n_denominator = to!int(n_split[1]);\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n\
    \    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator =\
    \ to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    int x_num = to!int(x_n[0]);\n    int x_den = to!int(x_n[1]);\n    int\
    \ n_num = to!int(n_n[0]);\n    int n_den = to!int(n_n[1]);\n    int num = x_num\
    \ * n_num;\n    int den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\"\
    )[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result\
    \ = x_numerator * n_numerator;\n    auto result_denominator = x_denominator *\
    \ n_denominator;\n    return result % result_denominator == 0;\n}", "{\n    int\
    \ x_numerator, x_denominator, n_numerator, n_denominator;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(), \"%d/%d\",\
    \ &n_numerator, &n_denominator);\n    double x_value = (double)x_numerator / (double)x_denominator;\n\
    \    double n_value = (double)n_numerator / (double)n_denominator;\n    double\
    \ result = x_value * n_value;\n    return result == (int)result;\n}", "{\n   \
    \ auto x_ = split(x, \"/\");\n    auto n_ = split(n, \"/\");\n    return to!int(x_[0])\
    \ * to!int(n_[1]) % to!int(x_[1]) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto result = x_num * n_num;\n    auto den = x_den * n_den;\n    return result\
    \ % den == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n,\
    \ \"/\");\n    auto x_n_n = to!int(x_n[0]);\n    auto x_d = to!int(x_n[1]);\n\
    \    auto n_n_n = to!int(n_n[0]);\n    auto n_d = to!int(n_n[1]);\n    return\
    \ (x_n_n * n_d) % (x_d * n_n_n) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find(\"/\")]);\n    int x_denominator = to!int(x[x.find(\"/\"\
    )+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"/\")]);\n    int n_denominator\
    \ = to!int(n[n.find(\"/\")+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator\
    \ * n_denominator) == 0;\n}", "{\n    int a = to!int(split(x, \"/\")[0]);\n  \
    \  int b = to!int(split(x, \"/\")[1]);\n    int c = to!int(split(n, \"/\")[0]);\n\
    \    int d = to!int(split(n, \"/\")[1]);\n    return (a * d) % (b * c) == 0;\n\
    }", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n, \"/\"\
    );\n    auto x_num = to!int(x_split[0]);\n    auto x_den = to!int(x_split[1]);\n\
    \    auto n_num = to!int(n_split[0]);\n    auto n_den = to!int(n_split[1]);\n\
    \    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n    auto x_n = split(x,\
    \ \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1]))\
    \ % to!int(x_n[1]) == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n \
    \   int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n\
    \    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nn) % (xd * nd) ==\
    \ 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    auto gcd = gcd(num, den);\n    return num / gcd == den / gcd;\n\
    }", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    int x_num = to!int(x[0..x.find(\"\
    /\")]);\n    int x_den = to!int(x[x.find(\"/\")+1..$]);\n    int n_num = to!int(n[0..n.find(\"\
    /\")]);\n    int n_den = to!int(n[n.find(\"/\")+1..$]);\n    return (x_num * n_num)\
    \ % (x_den * n_den) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto x_num = x.split(\"/\")[0].to!int;\n\
    \    auto x_den = x.split(\"/\")[1].to!int;\n    auto n_num = n.split(\"/\")[0].to!int;\n\
    \    auto n_den = n.split(\"/\")[1].to!int;\n    auto num = x_num * n_num;\n \
    \   auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    auto x_split\
    \ = split(x, \"/\");\n    auto n_split = split(n, \"/\");\n    auto x_num = to!int(x_split[0]);\n\
    \    auto x_den = to!int(x_split[1]);\n    auto n_num = to!int(n_split[0]);\n\
    \    auto n_den = to!int(n_split[1]);\n    auto num = x_num * n_num;\n    auto\
    \ den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto res = x_num * n_num;\n    auto den = x_den * n_den;\n    return res\
    \ % den == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n,\
    \ \"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ res = x_num * n_num;\n    auto den = x_den * n_den;\n    return res % den ==\
    \ 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n\
    \ = x_den * n_den;\n    return (x_num_n % x_den_n) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\
    }", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x,\
    \ \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  int x_numerator = to!int(x[0..x.find(\"/\")]);\n    int x_denominator = to!int(x[x.find(\"\
    /\")+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"/\")]);\n    int n_denominator\
    \ = to!int(n[n.find(\"/\")+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator\
    \ * n_denominator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\"\
    )[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto a =\
    \ split(x, \"/\");\n    auto b = split(n, \"/\");\n    return to!int(a[0]) * to!int(b[1])\
    \ % to!int(a[1]) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den ==\
    \ 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\"\
    )[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result\
    \ = x_numerator * n_numerator;\n    auto result_denominator = x_denominator *\
    \ n_denominator;\n    return result % result_denominator == 0;\n}", "{\n    int\
    \ x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    double result = x_numerator * n_numerator\
    \ / (x_denominator * n_denominator);\n    return result == floor(result);\n}",
  "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x1 = stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x2 = stoi(x.substr(x.find(\"/\") + 1));\n    int n1 = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n2 = stoi(n.substr(n.find(\"/\") + 1));\n    return\
    \ (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n\
    \    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\"\
    )[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nn) % (xd *\
    \ nd) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int num1\
    \ = to!int(split(x, \"/\")[0]);\n    int den1 = to!int(split(x, \"/\")[1]);\n\
    \    int num2 = to!int(split(n, \"/\")[0]);\n    int den2 = to!int(split(n, \"\
    /\")[1]);\n    return (num1 * den2) % (den1 * num2) == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n\
    \    auto n_n = n.split(\"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den\
    \ = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return (num\
    \ % den) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int x_numerator,\
    \ x_denominator, n_numerator, n_denominator;\n    sscanf(x.c_str(), \"%d/%d\"\
    , &x_numerator, &x_denominator);\n    sscanf(n.c_str(), \"%d/%d\", &n_numerator,\
    \ &n_denominator);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_num = stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    return\
    \ (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto a = x.split(\"/\"\
    );\n    auto b = n.split(\"/\");\n    auto c = to!int(a[0]) * to!int(b[1]);\n\
    \    auto d = to!int(a[1]) * to!int(b[0]);\n    return c % d == 0;\n}", "{\n \
    \   auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto result = x_num * n_num / (x_den * n_den);\n    return result % 1 ==\
    \ 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    int i = 0;\n    while (x[i] != '/')\n    {\n        x_numerator *= 10;\n\
    \        x_numerator += x[i] - '0';\n        i++;\n    }\n    i++;\n    while\
    \ (i < x.length())\n    {\n        x_denominator *= 10;\n        x_denominator\
    \ += x[i] - '0';\n        i++;\n    }\n    i = 0;\n    while (n[i] != '/')\n \
    \   {\n        n_numerator *= 10;\n        n_numerator += n[i] - '0';\n      \
    \  i++;\n    }\n    i++;\n    while (i < n.length())\n    {\n        n_denominator\
    \ *= 10;\n        n_denominator += n[i] - '0';\n        i++;\n    }\n    float\
    \ x_result = (float)x_numerator / x_denominator;\n    float n_result = (float)n_numerator\
    \ / n_denominator;\n    float result = x_result * n_result;\n    if (result ==\
    \ (int)result)\n        return true;\n    return false;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto\
    \ n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator\
    \ = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return x_numerator\
    \ * n_denominator * n_numerator * x_denominator % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    return num % den == 0;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_n = split(x, \"\
    /\");\n    auto n_n = split(n, \"/\");\n    auto x_numerator = to!int(x_n[0]);\n\
    \    auto x_denominator = to!int(x_n[1]);\n    auto n_numerator = to!int(n_n[0]);\n\
    \    auto n_denominator = to!int(n_n[1]);\n    auto result = x_numerator * n_numerator;\n\
    \    auto result_denominator = x_denominator * n_denominator;\n    return result\
    \ % result_denominator == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto result =\
    \ x_num * n_num;\n    auto result_den = x_den * n_den;\n    return result % result_den\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num;\n    auto result_den\
    \ = x_den * n_den;\n    return (result % result_den) == 0;\n}", "{\n    int x_num,\
    \ x_den, n_num, n_den;\n    int i = 0;\n    while (x[i] != '/')\n    {\n     \
    \   x_num = x_num * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while\
    \ (i < x.length())\n    {\n        x_den = x_den * 10 + (x[i] - '0');\n      \
    \  i++;\n    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_num = n_num\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < n.length())\n\
    \    {\n        n_den = n_den * 10 + (n[i] - '0');\n        i++;\n    }\n    if\
    \ ((x_num * n_den) % (x_den * n_num) == 0)\n        return true;\n    else\n \
    \       return false;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n    int\
    \ xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n\
    \    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nn) % (xd * nd) ==\
    \ 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\"\
    )[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result\
    \ = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    return\
    \ result % 1 == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    double result = x_numerator\
    \ * n_numerator / (x_denominator * n_denominator);\n    return (result == floor(result));\n\
    }", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num / (x_den * n_den);\n\
    \    return result == floor(result);\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto result = (x_num * n_num) / (x_den * n_den);\n    return result == floor(result);\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n\
    \    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n == 0;\n}", "{\n\
    \    int x_numerator = stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = stoi(x.substr(x.find('/') + 1));\n    int n_numerator = stoi(n.substr(0, n.find('/')));\n\
    \    int n_denominator = stoi(n.substr(n.find('/') + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return (numerator % denominator == 0);\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    // your\
    \ code here\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n    int x_denominator\
    \ = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"\
    /\")]);\n    int n_denominator = to!int(n[n.find(\"/\")+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    int x_num\
    \ = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n\
    \    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n  \
    \  auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    auto x_parts = split(x, \"/\");\n    auto n_parts\
    \ = split(n, \"/\");\n    auto x_num = to!int(x_parts[0]);\n    auto x_den = to!int(x_parts[1]);\n\
    \    auto n_num = to!int(n_parts[0]);\n    auto n_den = to!int(n_parts[1]);\n\
    \    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n    auto x_num =\
    \ to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"\
    /\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    auto result = x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    return result % 1 == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto result =\
    \ x_num * n_num;\n    auto result_den = x_den * n_den;\n    return result % result_den\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int a, b, c, d;\n    sscanf(x.c_str(), \"%d/%d\"\
    , &a, &b);\n    sscanf(n.c_str(), \"%d/%d\", &c, &d);\n    return (a * d) % (b\
    \ * c) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto x_n = x_num * n_num;\n    auto x_d = x_den\
    \ * n_den;\n    return x_n % x_d == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    auto x_ = x.split(\"/\");\n    auto n_ = n.split(\"\
    /\");\n    auto x_n = to!double(x_[0]) / to!double(x_[1]) * to!double(n_[0]) /\
    \ to!double(n_[1]);\n    return x_n == floor(x_n);\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"\
    /\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_num = to!int(split(x, \"\
    /\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    int num = x_num\
    \ * n_num;\n    int den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num;\n    auto den\
    \ = x_den * n_den;\n    return result % den == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto [numerator,\
    \ denominator] = split(x, '/');\n    auto [numerator2, denominator2] = split(n,\
    \ '/');\n    return (to!int(numerator) * to!int(denominator2)) % (to!int(denominator)\
    \ * to!int(numerator2)) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return (result_numerator % result_denominator == 0);\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_n_n = to!int(x_n[0]);\n\
    \    auto x_d = to!int(x_n[1]);\n    auto n_n_n = to!int(n_n[0]);\n    auto n_d\
    \ = to!int(n_n[1]);\n    return (x_n_n * n_d) % (x_d * n_n_n) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x,\
    \ \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n  \
    \  int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    int a = to!int(split(x, \"/\")[0]);\n    int b = to!int(split(x, \"\
    /\")[1]);\n    int c = to!int(split(n, \"/\")[0]);\n    int d = to!int(split(n,\
    \ \"/\")[1]);\n    return (a * d) % (b * c) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto gcd = gcd(x_num, x_den);\n    x_num /= gcd;\n    x_den /= gcd;\n   \
    \ gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n    n_den /= gcd;\n    return x_num\
    \ * n_num % (x_den * n_den) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"\
    /\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    return x_num\
    \ * n_den * n_num * x_den % (x_den * n_den) == 0;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n \
    \   auto n_n = n.split(\"/\");\n    auto x_n_n = to!int(x_n[0]) * to!int(n_n[1]);\n\
    \    auto x_n_d = to!int(x_n[1]) * to!int(n_n[0]);\n    return x_n_n % x_n_d ==\
    \ 0;\n}", "{\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"\
    /\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n    auto\
    \ n_n = n.split(\"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den ==\
    \ 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto x_n_num = x_num * n_num;\n    auto x_n_den\
    \ = x_den * n_den;\n    return x_n_num % x_n_den == 0;\n}", "{\n    int x_numerator\
    \ = 0;\n    int x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator\
    \ = 0;\n    int i = 0;\n    while (x[i] != '/')\n    {\n        x_numerator =\
    \ x_numerator * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while (i\
    \ < x.length())\n    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n\
    \        i++;\n    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_numerator\
    \ = n_numerator * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while\
    \ (i < n.length())\n    {\n        n_denominator = n_denominator * 10 + (n[i]\
    \ - '0');\n        i++;\n    }\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    int gcd = gcd(numerator,\
    \ denominator);\n    numerator /= gcd;\n    denominator /= gcd;\n    if (numerator\
    \ % denominator == 0)\n        return true;\n    else\n        return false;\n\
    }", "{\n    auto x_ = split(x, \"/\");\n    auto n_ = split(n, \"/\");\n    return\
    \ to!int(x_[0]) * to!int(n_[1]) % to!int(x_[1]) == 0;\n}", "{\n    // Your code\
    \ here\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_num,\
    \ x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\", &x_num, &x_den);\n  \
    \  sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n    return (x_num * n_den) %\
    \ (x_den * n_num) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\"\
    )]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator*n_numerator)%(x_denominator*n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int xn =\
    \ to!int(split(x, \"/\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int\
    \ nn = to!int(split(n, \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n\
    \    return (xn * nn) % (xd * nd) == 0;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    // Your code\
    \ here\n    int a, b, c, d;\n    sscanf(x.c_str(), \"%d/%d\", &a, &b);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &c, &d);\n    return (a * d) % (b * c) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    return (x_num * n_den) % (x_den * n_num) == 0;\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    auto x_n = x.split(\"/\");\n    auto n_n = n.split(\"\
    /\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % (to!int(x_n[1]) * to!int(n_n[0]))\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num;\n\
    \    auto result_den = x_den * n_den;\n    return result % result_den == 0;\n}",
  "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\"\
    )[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result\
    \ = x_numerator * n_numerator;\n    auto result_denominator = x_denominator *\
    \ n_denominator;\n    return result % result_denominator == 0;\n}", "{\n    int\
    \ x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den ==\
    \ 0;\n}", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n,\
    \ \"/\");\n    auto x_numerator = to!int(x_split[0]);\n    auto x_denominator\
    \ = to!int(x_split[1]);\n    auto n_numerator = to!int(n_split[0]);\n    auto\
    \ n_denominator = to!int(n_split[1]);\n    auto result = x_numerator * n_denominator\
    \ * n_numerator * x_denominator;\n    return result % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator * n_numerator * x_denominator) % (x_denominator\
    \ * n_denominator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\"\
    )[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    double result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    return result == floor(result);\n}", "{\n    int xn = to!int(split(x, \"\
    /\")[0]);\n    int xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n,\
    \ \"/\")[0]);\n    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nn)\
    \ % (xd * nd) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n,\
    \ \"/\");\n    auto x_numerator = to!int(x_n[0]);\n    auto x_denominator = to!int(x_n[1]);\n\
    \    auto n_numerator = to!int(n_n[0]);\n    auto n_denominator = to!int(n_n[1]);\n\
    \    auto result = x_numerator * n_numerator;\n    auto result_denominator = x_denominator\
    \ * n_denominator;\n    return result % result_denominator == 0;\n}", "{\n   \
    \ auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"\
    /\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto gcd = gcd(x_num, x_den);\n    x_num /= gcd;\n    x_den\
    \ /= gcd;\n    gcd = gcd(n_num, n_den);\n    n_num /= gcd;\n    n_den /= gcd;\n\
    \    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto x_num =\
    \ to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return num % den == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"\
    /\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator * n_numerator\
    \ * x_denominator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    auto product = x_numerator * n_numerator;\n\
    \    auto product_denominator = x_denominator * n_denominator;\n    return product\
    \ % product_denominator == 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
