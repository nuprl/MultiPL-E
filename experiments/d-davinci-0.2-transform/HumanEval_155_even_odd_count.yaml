name: HumanEval_155_even_odd_count
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven an integer. return a tuple\
  \ that has the number of even and odd digits respectively.\n\n     Example:\n  \
  \  >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n \
  \   tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n"
tests: "unittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L)\
  \ == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L)\
  \ == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L)\
  \ == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L)\
  \ == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}"
completions: ["{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) {\n        long digit = abs_num % 10L;\n        if (digit\
    \ % 2L == 0L) {\n            even += 1L;\n        } else {\n            odd +=\
    \ 1L;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n\
    \    long abs_num = abs(num);\n    while (abs_num > 0L) \n    {\n        if (abs_num\
    \ % 2L == 0L) \n        {\n            even += 1L;\n        } \n        else \n\
    \        {\n            odd += 1L;\n        }\n        abs_num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even_count = 0L;\n    long odd_count\
    \ = 0L;\n    while (num != 0L) \n    {\n        if (num % 2L == 0L) \n       \
    \ {\n            even_count++;\n        } \n        else \n        {\n       \
    \     odd_count++;\n        }\n        num /= 10L;\n    }\n    return tuple(even_count,\
    \ odd_count);\n}", "{\n    long even = 0;\n    long odd = 0;\n    num = abs(num);\n\
    \    while (num > 0) \n    {\n        if (num % 2 == 0) \n        {\n        \
    \    even++;\n        } \n        else \n        {\n            odd++;\n     \
    \   }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num\
    \ > 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n \
    \   while (absNum > 0) \n    {\n        if (absNum % 2 == 0) \n        {\n   \
    \         even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n\
    \    while (num > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n\
    \    while (absNum > 0) \n    {\n        long digit = absNum % 10;\n        if\
    \ (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        absNum /= 10;\n    }\n \
    \   return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    while (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n       \
    \     even++;\n        } \n        else \n        {\n            odd++;\n    \
    \    }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        if ((num\
    \ % 10) % 2 == 0)\n            even++;\n        else\n            odd++;\n   \
    \     num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num >\
    \ 0L) \n    {\n        if (abs_num % 2L == 0L) \n        {\n            even +=\
    \ 1L;\n        } \n        else \n        {\n            odd += 1L;\n        }\n\
    \        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while (absNum\
    \ > 0) \n    {\n        long digit = absNum % 10;\n        if (digit % 2 == 0)\
    \ \n        {\n            even++;\n        }\n        else \n        {\n    \
    \        odd++;\n        }\n        absNum /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    while (num != 0L)\
    \ \n    {\n        if (num % 2L == 0L) \n        {\n            even++;\n    \
    \    } \n        else \n        {\n            odd++;\n        }\n        num\
    \ /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n\
    \    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num > 0L) \n\
    \    {\n        long digit = abs_num % 10L;\n        if (digit % 2L == 0L) \n\
    \        {\n            even += 1L;\n        } \n        else \n        {\n  \
    \          odd += 1L;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) {\n        if ((abs_num % 10L) % 2L == 0L) {\n     \
    \       even += 1L;\n        } else {\n            odd += 1L;\n        }\n   \
    \     abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num\
    \ > 0L) {\n        if (abs_num % 2L == 0L) {\n            even += 1L;\n      \
    \  } else {\n            odd += 1L;\n        }\n        abs_num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n        if (abs_num\
    \ % 2 == 0) \n        {\n            even++;\n        } \n        else \n    \
    \    {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum\
    \ = abs(num);\n    while (absNum > 0)\n    {\n        long digit = absNum % 10;\n\
    \        if (digit % 2 == 0)\n        {\n            even++;\n        }\n    \
    \    else\n        {\n            odd++;\n        }\n        absNum /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n       \
    \ if (abs(num % 10) % 2 == 0) \n        {\n            even++;\n        } \n \
    \       else \n        {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long temp = abs(num);\n    while (temp > 0)\n    {\n        if (temp\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        temp\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n \
    \   long odd = 0L;\n    while (num != 0L) \n    {\n        if (num % 2L == 0L)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        num /= 10L;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n    while (num\
    \ > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        long digit = abs_num % 10L;\n     \
    \   if (digit % 2L == 0L) \n        {\n            even += 1L;\n        } \n \
    \       else \n        {\n            odd += 1L;\n        }\n        abs_num /=\
    \ 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long evenCount = 0;\n\
    \    long oddCount = 0;\n    long absNum = abs(num);\n    while (absNum > 0) \n\
    \    {\n        if (absNum % 2 == 0)\n            evenCount++;\n        else\n\
    \            oddCount++;\n        absNum /= 10;\n    }\n    return tuple(evenCount,\
    \ oddCount);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num\
    \ = abs(num);\n    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num != 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0)\n\
    \    {\n        if (abs(num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n\
    \        if (abs(num % 10) % 2 == 0) \n        {\n            even++;\n      \
    \  }\n        else \n        {\n            odd++;\n        }\n        num /=\
    \ 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long\
    \ odd = 0;\n    long n = abs(num);\n    while (n > 0) {\n        if (n % 2 ==\
    \ 0)\n            even++;\n        else\n            odd++;\n        n /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0)\n    {\n        long digit = absNum % 10;\n        if (digit %\
    \ 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n\
    \            odd++;\n        }\n        absNum /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n\
    \    {\n        if (num % 2 == 0) \n        {\n            even++;\n        }\
    \ \n        else \n        {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n      \
    \  if ((abs_num % 10) % 2 == 0) \n        {\n            even++;\n        } \n\
    \        else \n        {\n            odd++;\n        }\n        abs_num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n      \
    \  if (abs_num % 2 == 0) \n        {\n            even++;\n        } \n      \
    \  else \n        {\n            odd++;\n        }\n        abs_num /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\n    {\n       \
    \ long digit = abs_num % 10;\n        if (digit % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0) \n    {\n        if (absNum % 2 == 0) \n        {\n           \
    \ even++;\n        } \n        else \n        {\n            odd++;\n        }\n\
    \        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while (absNum\
    \ != 0) \n    {\n        if (absNum % 2 == 0) \n        {\n            even++;\n\
    \        } \n        else \n        {\n            odd++;\n        }\n       \
    \ absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num >\
    \ 0L) \n    {\n        if (abs_num % 2L == 0L) \n        {\n            even++;\n\
    \        } \n        else \n        {\n            odd++;\n        }\n       \
    \ abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}\n/*\nGiven a string.\
    \ return a tuple that has the number of vowels and consonants respectively.",
  "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n      \
    \  if (abs(num % 10) % 2 == 0) \n        {\n            even++;\n        } \n\
    \        else \n        {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd\
    \ = 0L;\n    while (num != 0L) \n    {\n        if (num % 2L == 0L) \n       \
    \ {\n            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0L;\n    long odd = 0L;\n    while (num != 0L) \n    {\n    \
    \    if (num % 2L == 0L) \n        {\n            even++;\n        } \n      \
    \  else \n        {\n            odd++;\n        }\n        num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    foreach(i; 0 .. abs(num).countDigits)\n    {\n        if(abs(num).digits[i]\
    \ % 2 == 0)\n        {\n            even++;\n        }\n        else\n       \
    \ {\n            odd++;\n        }\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n\
    \    while (num > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    while (num != 0L)\
    \ {\n        if (abs(num % 10L) % 2L == 0L) {\n            even += 1L;\n     \
    \   } else {\n            odd += 1L;\n        }\n        num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    foreach(digit; num.to!string)\n    {\n        if(digit.to!long % 2 == 0)\n\
    \        {\n            even++;\n        }\n        else\n        {\n        \
    \    odd++;\n        }\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    if (num < 0) num = -num;\n    while (num >\
    \ 0) {\n        if (num % 2 == 0) even++;\n        else odd++;\n        num /=\
    \ 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long\
    \ odd = 0;\n    while (num != 0)\n    {\n        if (abs(num % 10) % 2 == 0)\n\
    \            even++;\n        else\n            odd++;\n        num /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n  \
    \      if (num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        if (num % 2 ==\
    \ 0)\n            even++;\n        else\n            odd++;\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd\
    \ = 0L;\n    long abs_num = abs(num);\n    while (abs_num > 0L) \n    {\n    \
    \    long digit = abs_num % 10L;\n        if (digit % 2L == 0L) \n        {\n\
    \            even += 1L;\n        } \n        else \n        {\n            odd\
    \ += 1L;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    if (num < 0)\n        num =\
    \ -num;\n    while (num > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n\
    \    {\n        if (num % 2 == 0)\n            even++;\n        else\n       \
    \     odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n        if (digit\
    \ % 2 == 0) \n        {\n            even++;\n        } \n        else \n    \
    \    {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0) \n    {\n        if ((num % 10) % 2 == 0) \n        {\n         \
    \   even++;\n        } \n        else \n        {\n            odd++;\n      \
    \  }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n        if (num\
    \ % 2 == 0) \n        {\n            even++;\n        } \n        else \n    \
    \    {\n            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        long digit = abs_num % 10L;\n     \
    \   if (digit % 2L == 0L) \n        {\n            even += 1L;\n        } \n \
    \       else \n        {\n            odd += 1L;\n        }\n        abs_num /=\
    \ 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n   \
    \ long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num > 0L) \n  \
    \  {\n        if (abs_num % 2L == 0L)\n            even++;\n        else\n   \
    \         odd++;\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num != 0L) \n    {\n        long digit = abs_num % 10L;\n    \
    \    if (digit % 2L == 0L) \n        {\n            even++;\n        } \n    \
    \    else \n        {\n            odd++;\n        }\n        abs_num /= 10L;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long absNum = abs(num);\n    while (absNum > 0)\n    {\n        if\
    \ (absNum % 2 == 0)\n        {\n            even++;\n        }\n        else\n\
    \        {\n            odd++;\n        }\n        absNum /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num\
    \ = abs(num);\n    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    foreach(digit; num.to!string)\n\
    \    {\n        if(digit.to!long % 2 == 0)\n        {\n            even++;\n \
    \       }\n        else\n        {\n            odd++;\n        }\n    }\n   \
    \ return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n  \
    \  while (num != 0) \n    {\n        if (abs(num) % 2 == 0) \n        {\n    \
    \        even++;\n        } \n        else \n        {\n            odd++;\n \
    \       }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n \
    \   long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num != 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n        \
    \    even++;\n        } \n        else \n        {\n            odd++;\n     \
    \   }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n \
    \   long even = 0L;\n    long odd = 0L;\n    foreach(digit; num.to!string)\n \
    \   {\n        if(digit.to!long % 2 == 0)\n        {\n            even++;\n  \
    \      }\n        else\n        {\n            odd++;\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n            even++;\n\
    \        } \n        else \n        {\n            odd++;\n        }\n       \
    \ num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n\
    \    long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num != 0)\n \
    \   {\n        if (abs_num % 2 == 0)\n            even++;\n        else\n    \
    \        odd++;\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        long digit = abs_num % 10L;\n     \
    \   if (digit % 2L == 0L)\n            even += 1L;\n        else\n           \
    \ odd += 1L;\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0L) \n    {\n        if (abs_num % 2L == 0L) \n        {\n      \
    \      even++;\n        } \n        else \n        {\n            odd++;\n   \
    \     }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum != 0) \n    {\n        if (absNum % 2 == 0) \n        {\n          \
    \  even++;\n        } \n        else \n        {\n            odd++;\n       \
    \ }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while (absNum\
    \ > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n  \
    \  long odd = 0;\n    while (num != 0) \n    {\n        if (abs(num % 10) % 2\
    \ == 0) \n        {\n            even++;\n        }\n        else \n        {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        if (abs_num % 2L == 0L) \n        {\n\
    \            even += 1L;\n        } \n        else \n        {\n            odd\
    \ += 1L;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    if (num < 0) num = -num;\n\
    \    while (num > 0) \n    {\n        if (num % 2 == 0) \n        {\n        \
    \    even++;\n        } \n        else \n        {\n            odd++;\n     \
    \   }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while (absNum\
    \ > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n \
    \   long odd = 0L;\n    while (num != 0L) {\n        if (num % 2L == 0L) {\n \
    \           even += 1L;\n        } else {\n            odd += 1L;\n        }\n\
    \        num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0L;\n    long odd = 0L;\n    long n = abs(num);\n    while (n != 0L) \n  \
    \  {\n        if (n % 2L == 0L) \n        {\n            even += 1L;\n       \
    \ } \n        else \n        {\n            odd += 1L;\n        }\n        n /=\
    \ 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long\
    \ odd = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\n    {\n   \
    \     long digit = abs_num % 10;\n        if (digit % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num != 0) \n    {\n        long digit = abs_num % 10;\n      \
    \  if (digit % 2 == 0) \n        {\n            even += 1;\n        } \n     \
    \   else \n        {\n            odd += 1;\n        }\n        abs_num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n      \
    \  if (abs_num % 2 == 0) \n        {\n            even++;\n        } \n      \
    \  else \n        {\n            odd++;\n        }\n        abs_num /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    foreach(i; 0 .. abs(num).countDigits)\n\
    \    {\n        if(abs(num).getDigit(i) % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n    }\n  \
    \  return tuple(even, odd);\n}", "{\n    long evenCount = 0;\n    long oddCount\
    \ = 0;\n    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n  \
    \      if (num % 2 == 0)\n            evenCount++;\n        else\n           \
    \ oddCount++;\n        num /= 10;\n    }\n    return tuple(evenCount, oddCount);\n\
    }", "{\n    long even = 0L;\n    long odd = 0L;\n    while (num != 0L) \n    {\n\
    \        if (num % 2L == 0L) \n        {\n            even += 1L;\n        }\n\
    \        else \n        {\n            odd += 1L;\n        }\n        num /= 10L;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0) \n    {\n        if (num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\n\
    \    {\n        long digit = abs_num % 10;\n        if (digit % 2 == 0)\n    \
    \        even++;\n        else\n            odd++;\n        abs_num /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long absNum = abs(num);\n    while (absNum > 0)\n    {\n        long\
    \ digit = absNum % 10;\n        if (digit % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long evenCount = 0;\n\
    \    long oddCount = 0;\n    long absNum = abs(num);\n    while (absNum > 0)\n\
    \    {\n        long digit = absNum % 10;\n        if (digit % 2 == 0)\n     \
    \   {\n            evenCount++;\n        }\n        else\n        {\n        \
    \    oddCount++;\n        }\n        absNum /= 10;\n    }\n    return tuple(evenCount,\
    \ oddCount);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    if (num < 0L)\n\
    \    {\n        num = -num;\n    }\n    while (num > 0L)\n    {\n        long\
    \ digit = num % 10L;\n        if (digit % 2L == 0L)\n        {\n            even\
    \ += 1L;\n        }\n        else\n        {\n            odd += 1L;\n       \
    \ }\n        num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0L;\n    long odd = 0L;\n    while (num != 0L) \n    {\n        if (abs(num\
    \ % 10L) % 2L == 0L) \n        {\n            even += 1L;\n        } \n      \
    \  else \n        {\n            odd += 1L;\n        }\n        num /= 10L;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd\
    \ = 0L;\n    while (num != 0L) \n    {\n        if (num % 2L == 0L) \n       \
    \ {\n            even++;\n        }\n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0)\n    {\n        long digit = abs_num % 10;\n        if (digit\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        abs_num\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n  \
    \  long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\n    {\n\
    \        long digit = abs_num % 10;\n        if (digit % 2 == 0)\n           \
    \ even++;\n        else\n            odd++;\n        abs_num /= 10;\n    }\n \
    \   return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n\
    \    while (num != 0L) \n    {\n        if (abs(num % 10L) % 2L == 0L) \n    \
    \    {\n            even++;\n        }\n        else \n        {\n           \
    \ odd++;\n        }\n        num /= 10L;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n \
    \   while (absNum != 0) \n    {\n        if (absNum % 2 == 0) \n        {\n  \
    \          even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n \
    \       else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    if (num < 0)\n        num = -num;\n    while (num != 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num >\
    \ 0L) {\n        if (abs_num % 2L == 0L) {\n            even += 1L;\n        }\
    \ else {\n            odd += 1L;\n        }\n        abs_num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    long n = abs(num);\n    while (n > 0) {\n        if (n % 2 == 0) even++;\n\
    \        else odd++;\n        n /= 10;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n  \
    \  long odd = 0;\n    while (num != 0) \n    {\n        if ((num % 10) % 2 ==\
    \ 0)\n            even++;\n        else\n            odd++;\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n        long digit\
    \ = abs_num % 10;\n        if (digit % 2 == 0) \n        {\n            even +=\
    \ 1;\n        } \n        else \n        {\n            odd += 1;\n        }\n\
    \        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while (absNum\
    \ > 0) \n    {\n        long digit = absNum % 10;\n        if (digit % 2 == 0)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        absNum /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0;\n    long odd = 0;\n    while (num != 0) \n    {\n        if (num % 2 ==\
    \ 0) \n        {\n            even++;\n        } \n        else \n        {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n\
    \    while (absNum > 0)\n    {\n        long digit = absNum % 10;\n        if\
    \ (digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n\
    \        {\n            odd++;\n        }\n        absNum /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    foreach(digit;\
    \ num.digits)\n    {\n        if(digit % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n    }\n  \
    \  return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n \
    \   if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even =\
    \ 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\
    \ \n    {\n        long digit = abs_num % 10;\n        if (digit % 2 == 0) \n\
    \        {\n            even++;\n        } \n        else \n        {\n      \
    \      odd++;\n        }\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n\
    \    {\n        if ((num % 10) % 2 == 0) \n        {\n            even++;\n  \
    \      } \n        else \n        {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n  \
    \  long odd = 0;\n    while (num != 0) \n    {\n        if ((num % 10) % 2 ==\
    \ 0) \n        {\n            even++;\n        } \n        else \n        {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    auto even =\
    \ 0L;\n    auto odd = 0L;\n    auto sign = 1L;\n    if (num < 0) {\n        sign\
    \ = -1L;\n        num = -num;\n    }\n    while (num > 0) {\n        auto digit\
    \ = num % 10;\n        if (digit % 2 == 0) {\n            even += 1;\n       \
    \ } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    return\
    \ tuple(even * sign, odd * sign);\n}\n/*\nGiven a positive integer. return a tuple\
    \ that has the number of even and odd digits respectively.", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n    while (num\
    \ > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n       \
    \ if (abs(num % 10) % 2 == 0) \n        {\n            even++;\n        }\n  \
    \      else \n        {\n            odd++;\n        }\n        num /= 10;\n \
    \   }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    if (num < 0)\n        num = -num;\n    while (num > 0)\n    {\n  \
    \      if (num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while (abs_num >\
    \ 0) \n    {\n        long digit = abs_num % 10;\n        if (digit % 2 == 0)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n\
    \    {\n        if (num % 2 == 0) \n        {\n            even++;\n        }\
    \ \n        else \n        {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long evenCount = 0;\n    long\
    \ oddCount = 0;\n    long absNum = abs(num);\n    while (absNum > 0) \n    {\n\
    \        if (absNum % 2 == 0) \n        {\n            evenCount++;\n        }\
    \ \n        else \n        {\n            oddCount++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(evenCount, oddCount);\n}", "{\n    long even_count\
    \ = 0;\n    long odd_count = 0;\n    if (num < 0)\n        num = -num;\n    while\
    \ (num > 0)\n    {\n        if (num % 2 == 0)\n            even_count++;\n   \
    \     else\n            odd_count++;\n        num /= 10;\n    }\n    return tuple(even_count,\
    \ odd_count);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num\
    \ = abs(num);\n    while (abs_num > 0L) \n    {\n        if (abs_num % 2L == 0L)\
    \ \n        {\n            even++;\n        } \n        else \n        {\n   \
    \         odd++;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n\
    \    while (absNum > 0)\n    {\n        long digit = absNum % 10;\n        if\
    \ (digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n\
    \        {\n            odd++;\n        }\n        absNum /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num\
    \ = abs(num);\n    while (abs_num > 0)\n    {\n        long digit = abs_num %\
    \ 10;\n        if (digit % 2 == 0)\n            even++;\n        else\n      \
    \      odd++;\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0L;\n    long odd = 0L;\n    while (num != 0L) \n    {\n   \
    \     if (num % 2L == 0L) \n        {\n            even++;\n        } \n     \
    \   else \n        {\n            odd++;\n        }\n        num /= 10L;\n   \
    \ }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd =\
    \ 0;\n    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0)\n\
    \    {\n        if (num % 2 == 0)\n            even++;\n        else\n       \
    \     odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        if\
    \ ((num % 10) % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0L;\n    long odd = 0L;\n    long absnum = abs(num);\n    while (absnum >\
    \ 0L) \n    {\n        long digit = absnum % 10L;\n        if (digit % 2L == 0L)\
    \ \n        {\n            even += 1L;\n        }\n        else \n        {\n\
    \            odd += 1L;\n        }\n        absnum /= 10L;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n \
    \   while (absNum != 0) \n    {\n        long digit = absNum % 10;\n        if\
    \ (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        absNum /= 10;\n    }\n \
    \   return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    long digit;\n    while (num != 0) {\n        digit = num % 10;\n        if\
    \ (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    foreach(n; num.to!string)\n    {\n\
    \        if(n.to!long % 2 == 0)\n        {\n            even++;\n        }\n \
    \       else\n        {\n            odd++;\n        }\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num != 0L) \n    {\n        if ((abs_num % 10L) % 2L == 0L) \n\
    \        {\n            even += 1L;\n        } \n        else \n        {\n  \
    \          odd += 1L;\n        }\n        abs_num /= 10L;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        long digit = abs_num % 10L;\n     \
    \   if (digit % 2L == 0L) \n        {\n            even += 1L;\n        } \n \
    \       else \n        {\n            odd += 1L;\n        }\n        abs_num /=\
    \ 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even_count = 0;\n\
    \    long odd_count = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\
    \ {\n        long digit = abs_num % 10;\n        if (digit % 2 == 0) {\n     \
    \       even_count++;\n        } else {\n            odd_count++;\n        }\n\
    \        abs_num /= 10;\n    }\n    return tuple(even_count, odd_count);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n      \
    \  if (abs(num % 10) % 2 == 0) \n        {\n            even++;\n        } \n\
    \        else \n        {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0)\n    {\n       \
    \ long digit = abs_num % 10;\n        if (digit % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long num_abs = abs(num);\n\
    \    while (num_abs > 0) \n    {\n        long digit = num_abs % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        num_abs /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n\
    \    long abs_num = abs(num);\n    while (abs_num != 0L) \n    {\n        if (abs_num\
    \ % 2L == 0L) \n        {\n            even++;\n        } \n        else \n  \
    \      {\n            odd++;\n        }\n        abs_num /= 10L;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long\
    \ abs_num = abs(num);\n    while (abs_num > 0L) \n    {\n        long digit =\
    \ abs_num % 10L;\n        if (digit % 2L == 0L) \n        {\n            even\
    \ += 1L;\n        } \n        else \n        {\n            odd += 1L;\n     \
    \   }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n         \
    \   even++;\n        } \n        else \n        {\n            odd++;\n      \
    \  }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n  \
    \  long even = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        long\
    \ digit = num % 10;\n        if (digit % 2 == 0)\n            even++;\n      \
    \  else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        long digit = abs_num % 10;\n       \
    \ if (digit % 2 == 0) \n        {\n            even++;\n        } \n        else\
    \ \n        {\n            odd++;\n        }\n        abs_num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    while (num != 0) \n    {\n        if (abs(num % 10) % 2 == 0) \n        {\n\
    \            even++;\n        }\n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n\
    \    while (num > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0)\n\
    \    {\n        if (num % 2 == 0)\n            even++;\n        else\n       \
    \     odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0)\n    {\n        long digit = absNum % 10;\n        if (digit %\
    \ 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n\
    \            odd++;\n        }\n        absNum /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    while (num != 0L)\
    \ \n    {\n        if (num % 2L == 0L) \n        {\n            even++;\n    \
    \    } \n        else \n        {\n            odd++;\n        }\n        num\
    \ /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n\
    \    long odd = 0L;\n    long abs_num = abs(num);\n    while (abs_num > 0L) {\n\
    \        long digit = abs_num % 10L;\n        if (digit % 2L == 0L) {\n      \
    \      even += 1L;\n        } else {\n            odd += 1L;\n        }\n    \
    \    abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n    while (num\
    \ > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0)\n    {\n        if (abs_num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n\
    \    while (absNum > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n    \
    \        even++;\n        }\n        else\n        {\n            odd++;\n   \
    \     }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n    while\
    \ (abs_num > 0)\n    {\n        long digit = abs_num % 10;\n        if (digit\
    \ % 2 == 0)\n            even++;\n        else\n            odd++;\n        abs_num\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n  \
    \  long odd = 0;\n    while (num != 0) \n    {\n        if (abs(num % 10) % 2\
    \ == 0) \n        {\n            even++;\n        } \n        else \n        {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        long digit = abs_num % 10L;\n     \
    \   if (digit % 2L == 0L) \n        {\n            even += 1L;\n        } \n \
    \       else \n        {\n            odd += 1L;\n        }\n        abs_num /=\
    \ 10L;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long\
    \ odd = 0;\n    long abs_num = abs(num);\n    while (abs_num > 0) \n    {\n  \
    \      if (abs_num % 2 == 0) \n        {\n            even++;\n        } \n  \
    \      else \n        {\n            odd++;\n        }\n        abs_num /= 10;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0)\n    {\n        if (abs(num % 10) % 2 == 0)\n   \
    \         even++;\n        else\n            odd++;\n        num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0)\n\
    \    {\n        if ((num % 10) % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    foreach(digit; num.to!string)\n\
    \    {\n        if(digit.to!long % 2 == 0)\n        {\n            even++;\n \
    \       }\n        else\n        {\n            odd++;\n        }\n    }\n   \
    \ return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n  \
    \  while (num != 0) \n    {\n        if ((num % 10) % 2 == 0) \n        {\n  \
    \          even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0) \n    {\n        if ((absNum % 10) % 2 == 0) \n        {\n    \
    \        even++;\n        } \n        else \n        {\n            odd++;\n \
    \       }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0L;\n    long odd = 0L;\n    while (num != 0L) \n    {\n    \
    \    if (num % 2L == 0L) \n        {\n            even++;\n        } \n      \
    \  else \n        {\n            odd++;\n        }\n        num /= 10L;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    while (num != 0)\n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    foreach(digit; num.digits)\
    \ \n    {\n        if(digit % 2 == 0) \n        {\n            even++;\n     \
    \   }\n        else \n        {\n            odd++;\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0) \n    {\n        if (abs(num % 10) % 2 == 0) \n        {\n      \
    \      even++;\n        } \n        else \n        {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n   \
    \ long even = 0;\n    long odd = 0;\n    while (num != 0) \n    {\n        if\
    \ (num % 2 == 0) \n        {\n            even++;\n        } \n        else \n\
    \        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0)\n    {\n        if (abs(num % 10) % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0L;\n    long odd = 0L;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0L) \n    {\n        if (abs_num % 2L == 0L) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        abs_num /= 10L;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n    while\
    \ (absNum > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n        absNum\
    \ /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n \
    \   long odd = 0L;\n    long absNum = abs(num);\n    while (absNum > 0L) \n  \
    \  {\n        long digit = absNum % 10L;\n        if (digit % 2L == 0L) \n   \
    \     {\n            even += 1L;\n        }\n        else \n        {\n      \
    \      odd += 1L;\n        }\n        absNum /= 10L;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    if (num < 0)\n   \
    \     num = -num;\n    while (num > 0)\n    {\n        if (num % 2 == 0)\n   \
    \         even++;\n        else\n            odd++;\n        num /= 10;\n    }\n\
    \    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n\
    \    long abs_num = abs(num);\n    while (abs_num > 0)\n    {\n        long digit\
    \ = abs_num % 10;\n        if (digit % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    long abs_num = abs(num);\n\
    \    while (abs_num > 0) \n    {\n        if (abs_num % 2 == 0) \n        {\n\
    \            even += 1;\n        } \n        else \n        {\n            odd\
    \ += 1;\n        }\n        abs_num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n \
    \       if (num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    while (num != 0)\n    {\n        if (abs(num %\
    \ 10) % 2 == 0)\n            even++;\n        else\n            odd++;\n     \
    \   num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n\
    \    long odd = 0;\n    while (num != 0) \n    {\n        if (abs(num % 10) %\
    \ 2 == 0) \n        {\n            even++;\n        }\n        else \n       \
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long n = abs(num);\n\
    \    while (n > 0) {\n        if (n % 2 == 0) {\n            even++;\n       \
    \ } else {\n            odd++;\n        }\n        n /= 10;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    while\
    \ (num != 0) \n    {\n        if ((num % 10) % 2 == 0) \n        {\n         \
    \   even++;\n        } \n        else \n        {\n            odd++;\n      \
    \  }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    if (num < 0)\n        num = -num;\n    while\
    \ (num > 0)\n    {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return tuple(even, odd);\n\
    }", "{\n    long even = 0;\n    long odd = 0;\n    if (num < 0)\n        num =\
    \ -num;\n    while (num > 0) \n    {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long absNum = abs(num);\n\
    \    while (absNum > 0)\n    {\n        if (absNum % 2 == 0)\n        {\n    \
    \        even++;\n        }\n        else\n        {\n            odd++;\n   \
    \     }\n        absNum /= 10;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    foreach(i; 0 .. num.abs.digits)\n\
    \    {\n        if(num.abs.digits[i] % 2 == 0)\n        {\n            even++;\n\
    \        }\n        else\n        {\n            odd++;\n        }\n    }\n  \
    \  return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n \
    \   while (num != 0) \n    {\n        if (abs(num % 10) % 2 == 0) \n        {\n\
    \            even++;\n        } \n        else \n        {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return tuple(even, odd);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
