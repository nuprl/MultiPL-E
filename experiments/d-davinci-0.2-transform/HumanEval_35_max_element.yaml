name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++)\n \
    \   {\n        if (l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n\
    \        if(i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    foreach(e; l)\n    {\n        if(e >\
    \ max)\n        {\n            max = e;\n        }\n    }\n    return max;\n}",
  "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n \
    \       {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n \
    \   long max = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n   \
    \     {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n   \
    \ long max = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n     \
    \   {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n\
    \    foreach(i; l) \n    {\n        if (i > max) \n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n\
    \    {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n\
    \        if(i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ > max)\n        {\n            max = i;\n        }\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n        if(i > max)\n\
    \        {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n       \
    \ {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = l[0];\n    foreach(i; l)\n    {\n        if(i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n\
    \    foreach(i; l)\n    {\n        if(i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = l[0];\n    foreach(i;\
    \ l)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = l[0];\n    foreach(i; l)\n   \
    \ {\n        if(i > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    foreach(long i; l)\n    {\n\
    \        if(i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
