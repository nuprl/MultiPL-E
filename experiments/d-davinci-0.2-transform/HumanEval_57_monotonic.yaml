name: HumanEval_57_monotonic
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
  \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n\
  \    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
  \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n    \
    \    {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1])\
    \ \n        {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if the list is sorted.\n    >>> is_sorted([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> is_sorted([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list is sorted.\n    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n  \
    \  >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n    >>> is_sorted([4L, 1L, 0L,\
    \ -10L])\n    false\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n  \
    \      }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <= 1)\n    {\n      \
    \  return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int i = 2;\
    \ i < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i - 1])\n            {\n                return false;\n          \
    \  }\n        }\n        else\n        {\n            if (l[i] > l[i - 1])\n \
    \           {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n\
    \        {\n            if (increasing && e < l[i - 1])\n                return\
    \ false;\n            if (!increasing && e > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (v < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (v > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        \
    \    continue;\n        if (increasing && e < l[i - 1])\n            return false;\n\
    \        if (!increasing && e > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n\
    \        {\n            if (increasing && e < l[i - 1])\n                return\
    \ false;\n            if (!increasing && e > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (size_t i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    long[] diffs = l[1..$].map!((a)\
    \ => a - l[$ - 1]);\n    return diffs.all!((a) => a == 0) || diffs.all!((a) =>\
    \ a > 0) || diffs.all!((a) => a < 0);\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ == 0) \n    {\n        return true;\n    }\n    long sign = l[1] - l[0];\n \
    \   if (sign == 0) \n    {\n        return false;\n    }\n    for (long i = 2;\
    \ i < l.length; i++) \n    {\n        if (sign * (l[i] - l[i - 1]) < 0) \n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\n/*\n\
    Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (e < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        } \n        else \n        {\n       \
    \     if (e > l[i - 1]) \n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) \n    {\n\
    \        if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n \
    \       }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n    \n*/", "{\n    if (l.length < 2)\n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n   \
    \     if (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n   \
    \         {\n                return false;\n            }\n            if (!increasing\
    \ && e > l[i - 1])\n            {\n                return false;\n           \
    \ }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n\
    \        return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (increasing) \n        {\n   \
    \         if (l[i] < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (l[i] > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n  \
    \      }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    if (l == l2) \n    {\n        return true;\n    }\n    l2.reverse;\n    if\
    \ (l == l2) \n    {\n        return true;\n    }\n    return false;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n \
    \       {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    if (l.length == 0) return true;\n    bool increasing = l[0]\
    \ < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing\
    \ && l[i] > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1])\
    \ return false;\n    }\n    return true;\n}\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length < 2) \n    {\n   \
    \     return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i,\
    \ v; l[1..$]) \n    {\n        if (increasing) \n        {\n            if (v\
    \ < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (v > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (increasing && l[i] < l[i - 1]) \n        {\n     \
    \       return false;\n        }\n        if (!increasing && l[i] > l[i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,\
    \ j; zip(l[0..$-1], l[1..$]))\n    {\n        if(i > j)\n            increasing\
    \ = false;\n        if(i < j)\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n  \
    \      {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L,\
    \ 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] <\
    \ l[i - 1]) \n        {\n            increasing = false;\n        }\n        if\
    \ (l[i] > l[i - 1]) \n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n*/", "{\n    if (l.length == 0)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        long[] diff = l[1..$] - l[0..$-1];\n\
    \        return diff.every!(a => a == diff[0]);\n    }\n}\n/*\nReturn True if\
    \ all elements of list are unique.\n    >>> unique([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> unique([1L, 2L, 4L, 1L])\n    false\n    >>> unique([1L, 1L, 1L, 1L])\n\
    \    false\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing && e < l[i - 1])\n                return false;\n\
    \            if (!increasing && e > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = (l[1] > l[0]);\n    foreach (i, v; l[1..$]) {\n       \
    \ if (increasing) {\n            if (v < l[i-1]) return false;\n        } else\
    \ {\n            if (v > l[i-1]) return false;\n        }\n    }\n    return true;\n\
    }", "{\n    long[] l2 = l.dup;\n    l2.sort;\n    return l == l2 || l == l2.reverse;\n\
    }\n/*\nReturn True if list is sorted in ascending order.\n    >>> is_sorted([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> is_sorted([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing)\n        {\n            if (l[i] >\
    \ l[i + 1])\n                return false;\n        }\n        else\n        {\n\
    \            if (l[i] < l[i + 1])\n                return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    if (l.length <= 1)\n        return true;\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i +\
    \ 1])\n            return false;\n        if (!increasing && l[i] < l[i + 1])\n\
    \            return false;\n    }\n    return true;\n}\n/*\nReturn True is list\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        if(i > j)\n            increasing = false;\n        if(i < j)\n\
    \            decreasing = false;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1])\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (e < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (e > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        if(i > j)\n\
    \            increasing = false;\n        if(i < j)\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, e; l)\n    {\n        if(i\
    \ > 0)\n        {\n            increasing &= (e > l[i-1]);\n            decreasing\
    \ &= (e < l[i-1]);\n        }\n    }\n    return increasing || decreasing;\n}",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] > l[i + 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length <= 1) return true;\n    bool increasing = l[0] < l[1];\n  \
    \  for (int i = 1; i < l.length - 1; i++) \n    {\n        if (increasing && l[i]\
    \ > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] > l[i + 1]) return\
    \ false;\n        }\n        else\n        {\n            if (l[i] < l[i + 1])\
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length\
    \ == 0)\n        return true;\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        long[] diff = l[1..$] - l[0..$-1];\n        return (diff.all!(x\
    \ => x >= 0) || diff.all!(x => x <= 0));\n    }\n}", "{\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[1..$], l[0..$-1]))\n\
    \    {\n        if(i > j)\n            increasing = false;\n        if(i < j)\n\
    \            decreasing = false;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing\
    \ && l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing) \n  \
    \      {\n            if (l[i] < l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        } \n        else \n        {\n            if\
    \ (l[i] > l[i - 1]) \n            {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n/*\nReturn True if the list is sorted.\n\
    \    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n    >>> is_sorted([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> is_sorted([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\n/*\nReturn True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L,\
    \ 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length < 2) return true;\n  \
    \  bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1]) return false;\n        if (!increasing\
    \ && l[i] < l[i + 1]) return false;\n    }\n    return true;\n}\n/*\nReturn True\
    \ is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length == 0)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, v; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing)\n        {\n            if (v < l[i - 1])\n           \
    \     return false;\n        }\n        else\n        {\n            if (v > l[i\
    \ - 1])\n                return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length == 0)\n        return true;\n    long prev = l[0];\n    bool\
    \ increasing = true;\n    foreach (i; 1..l.length) {\n        if (l[i] == prev)\n\
    \            continue;\n        if (increasing && l[i] < prev) {\n           \
    \ increasing = false;\n            continue;\n        }\n        if (!increasing\
    \ && l[i] > prev)\n            return false;\n        prev = l[i];\n    }\n  \
    \  return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing && l[i] > l[i + 1])\n            return false;\n     \
    \   if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n  \
    \  return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n   \
    \ >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length == 0) \n    {\n       \
    \ return true;\n    }\n    long prev = l[0];\n    bool increasing = true;\n  \
    \  foreach (long i; l[1..$]) \n    {\n        if (i == prev) \n        {\n   \
    \         continue;\n        }\n        if (increasing) \n        {\n        \
    \    if (i < prev) \n            {\n                increasing = false;\n    \
    \        }\n        } \n        else \n        {\n            if (i > prev) \n\
    \            {\n                return false;\n            }\n        }\n    \
    \    prev = i;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++) \n    {\n        if (increasing) \n        {\n            if (l[i]\
    \ > l[i + 1]) return false;\n        } \n        else \n        {\n          \
    \  if (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n}\n\
    /*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        bool increasing = l[0] < l[1];\n        for (int i = 1; i < l.length\
    \ - 1; i++)\n        {\n            if (increasing && l[i] > l[i + 1])\n     \
    \       {\n                return false;\n            }\n            else if (!increasing\
    \ && l[i] < l[i + 1])\n            {\n                return false;\n        \
    \    }\n        }\n        return true;\n    }\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length == 0) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length; i++) \n\
    \    {\n        if (increasing && l[i] < l[i - 1]) return false;\n        if (!increasing\
    \ && l[i] > l[i - 1]) return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && v < l[i - 1])\n                return false;\n            if (!increasing\
    \ && v > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list is sorted.\n    >>> sorted([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> sorted([1L, 20L, 4L, 10L])\n    false\n    >>> sorted([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] <\
    \ l[i - 1]) \n        {\n            increasing = false;\n        }\n        if\
    \ (l[i] > l[i - 1]) \n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i - 1] > l[i])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i - 1] < l[i])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list is sorted.\n    >>> is_sorted([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n    >>> is_sorted([4L,\
    \ 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length == 0)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        long[] l1 = l[1..$];\n        long[]\
    \ l2 = l[0..$-1];\n        return (l1.length == 0) ? true : (l1.zip(l2).map!(a\
    \ => a[0] - a[1]).all!(a => a == 0) || l1.zip(l2).map!(a => a[0] - a[1]).all!(a\
    \ => a > 0) || l1.zip(l2).map!(a => a[0] - a[1]).all!(a => a < 0));\n    }\n}",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    long diff =\
    \ l[1] - l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (diff\
    \ * (l[i] - l[i - 1]) < 0) \n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    foreach(i, j; zip(l[0..$-1], l[1..$])) {\n        increasing = increasing\
    \ && (i < j);\n        decreasing = decreasing && (i > j);\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\
    \ \n    {\n        if (increasing) \n        {\n            if (e < l[i - 1])\
    \ \n            {\n                return false;\n            }\n        } \n\
    \        else \n        {\n            if (e > l[i - 1]) \n            {\n   \
    \             return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing &&\
    \ l[i] > l[i + 1])\n            return false;\n        if (!increasing && l[i]\
    \ < l[i + 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    long prev\
    \ = l[0];\n    foreach(long i; l)\n    {\n        if(i < prev)\n            increasing\
    \ = false;\n        if(i > prev)\n            decreasing = false;\n        prev\
    \ = i;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && l[i] < l[i - 1])\n                return false;\n            if (!increasing\
    \ && l[i] > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] >\
    \ l[i - 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    else\n    {\n        bool increasing\
    \ = l[0] < l[1];\n        for (int i = 1; i < l.length - 1; i++)\n        {\n\
    \            if (l[i] == l[i + 1])\n            {\n                continue;\n\
    \            }\n            if (increasing)\n            {\n                if\
    \ (l[i] > l[i + 1])\n                {\n                    return false;\n  \
    \              }\n            }\n            else\n            {\n           \
    \     if (l[i] < l[i + 1])\n                {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n    }\n}\n\
    /*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] > l[i + 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True\
    \ is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n    \n*/", "{ \n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    long[] l2 = l[1..$];\n\
    \    foreach(i, j; zip(l, l2))\n    {\n        if(i > j)\n        {\n        \
    \    increasing = false;\n        }\n        if(i < j)\n        {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, x; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (x < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        }\n        else \n        {\n        \
    \    if (x > l[i - 1]) \n            {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1])\n\
    \            return false;\n        if (!increasing && l[i] < l[i + 1])\n    \
    \        return false;\n    }\n    return true;\n}\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0,\
    \ 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n   \
    \ >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    else\n    {\n        bool increasing = l[0]\
    \ < l[1];\n        foreach (i, e; l)\n        {\n            if (i > 0)\n    \
    \        {\n                if (increasing && e < l[i - 1])\n                \
    \    return false;\n                if (!increasing && e > l[i - 1])\n       \
    \             return false;\n            }\n        }\n        return true;\n\
    \    }\n}\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if\
    \ (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e <\
    \ l[i - 1]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length == 0)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n\
    \            continue;\n        if (increasing)\n        {\n            if (e\
    \ < l[i - 1])\n                return false;\n        }\n        else\n      \
    \  {\n            if (e > l[i - 1])\n                return false;\n        }\n\
    \    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    bool increasing = true;\n  \
    \  bool decreasing = true;\n    for (int i = 1; i < l.length; i++) \n    {\n \
    \       if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    auto cmp = l[0] < l[1] ? (a, b)\
    \ => a < b : (a, b) => a > b;\n    foreach (i, e; l[1..$])\n    {\n        if\
    \ (!cmp(l[i - 1], e))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n   \
    \ {\n        if (increasing) \n        {\n            if (e < l[i - 1]) \n   \
    \         {\n                return false;\n            }\n        } \n      \
    \  else \n        {\n            if (e > l[i - 1]) \n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (e < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        } \n        else \n        {\n       \
    \     if (e > l[i - 1]) \n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}", "{\n    if (l.length == 0)\
    \ return true;\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) increasing\
    \ = false;\n        if (l[i] > l[i - 1]) decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l)\n  \
    \  {\n        if (i == 0)\n        {\n            continue;\n        }\n     \
    \   if (increasing && l[i] < l[i - 1])\n        {\n            return false;\n\
    \        }\n        if (!increasing && l[i] > l[i - 1])\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing or decreasing.\n    >>> monotonic([1,\
    \ 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>>\
    \ monotonic([4, 1, 0, -10])\n    true\n    \n*/", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing)\n        {\n            if (l[i] >\
    \ l[i + 1]) return false;\n        }\n        else\n        {\n            if\
    \ (l[i] < l[i + 1]) return false;\n        }\n    }\n    return true;\n}\n/*\n\
    Return True if list elements are monotonically increasing or decreasing.\n   \
    \ >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0,\
    \ 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n \
    \       {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    */", "{\n    if (l.length == 0) return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, x; l) \n    {\n        if (i == 0) continue;\n        if (increasing\
    \ && x < l[i-1]) return false;\n        if (!increasing && x > l[i-1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length == 0)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n    {\n  \
    \      if (i > 0)\n        {\n            if (increasing && v < l[i - 1])\n  \
    \              return false;\n            if (!increasing && v > l[i - 1])\n \
    \               return false;\n        }\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) return true;\n    long prev = l[0];\n    bool increasing\
    \ = l[1] > prev;\n    foreach (i, curr; l[1..$]) {\n        if (increasing) {\n\
    \            if (curr < prev) return false;\n        } else {\n            if\
    \ (curr > prev) return false;\n        }\n        prev = curr;\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing\
    \ != (l[i - 1] < l[i]))\n            return false;\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n     \
    \       increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n      \
    \  {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing)\n        {\n            if (l[i] < l[i\
    \ - 1])\n            {\n                return false;\n            }\n       \
    \ }\n        else\n        {\n            if (l[i] > l[i - 1])\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l) \n    {\n        if (i == 0)\n            continue;\n \
    \       if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length < 2) \n    {\n        return true;\n   \
    \ }\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\
    \ \n    {\n        if (increasing) \n        {\n            if (l[i] < l[i - 1])\
    \ \n            {\n                return false;\n            }\n        } \n\
    \        else \n        {\n            if (l[i] > l[i - 1]) \n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    if (l.length <= 1)\n        return true;\n    bool increasing = l[0]\
    \ < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] > l[i + 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] < l[i + 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True\
    \ is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n   \
    \ for (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i]\
    \ > l[i + 1]) return false;\n        if (!increasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if\
    \ (l[i] < l[i - 1])\n        {\n            increasing = false;\n        }\n \
    \       if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n   \
    \     }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L,\
    \ 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing && l[i]\
    \ < l[i - 1]) \n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] > l[i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing)\n        {\n            if (l[i] > l[i + 1])\n                return\
    \ false;\n        }\n        else\n        {\n            if (l[i] < l[i + 1])\n\
    \                return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}", "{\n    if (l.length == 0)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n    {\n  \
    \      if (i == 0)\n            continue;\n        if (increasing && v < l[i -\
    \ 1])\n            return false;\n        if (!increasing && v > l[i - 1])\n \
    \           return false;\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L,\
    \ 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n*/", "{\n\
    \    if (l.length == 0)\n        return true;\n    bool increasing = true;\n \
    \   bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l) {\n        if (i == 0) continue;\n   \
    \     if (increasing && e < l[i-1]) return false;\n        if (!increasing &&\
    \ e > l[i-1]) return false;\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L,\
    \ 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach(i, e; l)\n    {\n\
    \        if(i > 0)\n        {\n            if(l[i] < l[i-1])\n            {\n\
    \                increasing = false;\n            }\n            if(l[i] > l[i-1])\n\
    \            {\n                decreasing = false;\n            }\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e;\
    \ l)\n    {\n        if (i == 0)\n            continue;\n        if (increasing\
    \ && e < l[i - 1])\n            return false;\n        if (!increasing && e >\
    \ l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        {\n\
    \            continue;\n        }\n        if (increasing)\n        {\n      \
    \      if (e < l[i - 1])\n            {\n                return false;\n     \
    \       }\n        }\n        else\n        {\n            if (e > l[i - 1])\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n\
    \    {\n        if (i == 0) continue;\n        if (increasing && e < l[i-1]) return\
    \ false;\n        if (!increasing && e > l[i-1]) return false;\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing && l[i] > l[i + 1])\n            return false;\n        if (!increasing\
    \ && l[i] < l[i + 1])\n            return false;\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n     \
    \       increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n      \
    \  {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n    \n*/", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if\
    \ (i > 0)\n        {\n            if (increasing && v < l[i - 1])\n          \
    \      return false;\n            if (!increasing && v > l[i - 1])\n         \
    \       return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ == 0) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1]) \n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length == 0)\n        return true;\n\
    \    long prev = l[0];\n    bool increasing = true;\n    foreach (i; 1..l.length)\n\
    \    {\n        if (prev == l[i])\n            continue;\n        if (increasing)\n\
    \        {\n            if (prev > l[i])\n            {\n                increasing\
    \ = false;\n                prev = l[i];\n            }\n            else\n  \
    \              prev = l[i];\n        }\n        else\n        {\n            if\
    \ (prev < l[i])\n                return false;\n            else\n           \
    \     prev = l[i];\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n\
    \    {\n        if(i > j)\n            increasing = false;\n        if(i < j)\n\
    \            decreasing = false;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ is sorted in ascending order.\n    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n    >>> is_sorted([4L, 1L,\
    \ 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if\
    \ (i == 0)\n            continue;\n        if (increasing && e < l[i - 1])\n \
    \           return false;\n        if (!increasing && e > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n \
    \       return true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n\
    \    {\n        if (i > 0)\n        {\n            if (increasing && e < l[i -\
    \ 1])\n                return false;\n            if (!increasing && e > l[i -\
    \ 1])\n                return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ is sorted in ascending order.\n    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n    >>> is_sorted([4L, 1L,\
    \ 0L, -10L])\n    false\n*/", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (increasing) \n        {\n            if (l[i] < l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  } \n        else \n        {\n            if (l[i] > l[i - 1]) \n         \
    \   {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    long prev =\
    \ l[0];\n    bool increasing = true;\n    foreach (i, e; l[1..$]) {\n        if\
    \ (e == prev)\n            continue;\n        if (increasing) {\n            if\
    \ (e < prev) {\n                increasing = false;\n                prev = e;\n\
    \            }\n        } else {\n            if (e > prev)\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ == 0)\n    {\n        return true;\n    }\n    long[] diffs = l[1..$] - l[0..$-1];\n\
    \    return all(diffs, (x) => x == 0) || all(diffs, (x) => x > 0) || all(diffs,\
    \ (x) => x < 0);\n}\n/*\nReturn True if all elements of the list are unique.\n\
    \    >>> unique([1L, 2L, 4L, 20L])\n    true\n    >>> unique([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> unique([4L, 1L, 0L, -10L])\n    true\n    \n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    foreach(i, v; l) {\n  \
    \      if(i > 0) {\n            increasing &= l[i] >= l[i-1];\n            decreasing\
    \ &= l[i] <= l[i-1];\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        long[] diff = l[1 .. $] - l[0 .. $ - 1];\n        return diff.all!(x\
    \ => x == 0 || x == diff[0]);\n    }\n}", "{\n    if (l.length == 0)\n    {\n\
    \        return true;\n    }\n    else if (l.length == 1)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        long[] diffs = l[1..$].map!((a) => a\
    \ - l[0]);\n        long[] diffs_abs = diffs.map!((a) => abs(a));\n        long[]\
    \ diffs_abs_sorted = diffs_abs.sort();\n        return diffs_abs_sorted[0] ==\
    \ diffs_abs_sorted[$-1];\n    }\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing)\n        {\n            if (l[i] >\
    \ l[i + 1])\n                return false;\n        }\n        else\n        {\n\
    \            if (l[i] < l[i + 1])\n                return false;\n        }\n\
    \    }\n    return true;\n}\n/*\nReturn True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1])\n            return\
    \ false;\n        if (!increasing && l[i] < l[i + 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n        return\
    \ true;\n    }\n    long[] diff = l[1 .. $] - l[0 .. $ - 1];\n    return diff.all!(x\
    \ => x >= 0) || diff.all!(x => x <= 0);\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n \
    \           if (l[i] > l[i + 1])\n                return false;\n        }\n \
    \       else\n        {\n            if (l[i] < l[i + 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing && l[i] < l[i-1]) return false;\n        if (!increasing\
    \ && l[i] > l[i-1]) return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i\
    \ < l.length - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return\
    \ false;\n        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n \
    \   return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n*/", "{\n    if (l.length < 2)\n        return true;\n  \
    \  bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i\
    \ == 0)\n            continue;\n        if (increasing && e < l[i - 1])\n    \
    \        return false;\n        if (!increasing && e > l[i - 1])\n           \
    \ return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing && l[i] > l[i + 1]) return false;\n\
    \        if (!increasing && l[i] < l[i + 1]) return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1]) \n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n\
    \    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L,\
    \ 0L, -10L])\n    true\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (size_t i = 1; i < l.length; i++)\n    {\n        if (l[i]\
    \ < l[i - 1])\n        {\n            increasing = false;\n        }\n       \
    \ if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n   \
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n    >>> increasing([1L, 2L, 4L, 20L])\n    true\n    >>> increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> increasing([4L, 1L, 0L, -10L])\n    false\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n \
    \       {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    if (l.length == 0)\n    {\n        return true;\n    }\n \
    \   long first = l[0];\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach (i, e; l)\n    {\n        if (e < first)\n        {\n           \
    \ increasing = false;\n        }\n        if (e > first)\n        {\n        \
    \    decreasing = false;\n        }\n        first = e;\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        increasing\
    \ &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j;\
    \ zip(l[0..$-1], l[1..$])) \n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing)\n        {\n            if (e < l[i - 1])\n           \
    \     return false;\n        }\n        else\n        {\n            if (e > l[i\
    \ - 1])\n                return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length == 0)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length <= 1)\n    {\n        return true;\n   \
    \ }\n    else\n    {\n        if (l[0] < l[1])\n        {\n            foreach\
    \ (i, j; zip(l[0..$-1], l[1..$]))\n            {\n                if (i > j)\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n        else\n        {\n            foreach (i, j; zip(l[0..$-1],\
    \ l[1..$]))\n            {\n                if (i < j)\n                {\n  \
    \                  return false;\n                }\n            }\n        }\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] > l[i + 1])\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (l[i] < l[i + 1])\n                return false;\n        }\n    }\n  \
    \  return true;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n   \
    \ for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n  \
    \      {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; zip(l[1..$], l[0..$-1]))\n    {\n        increasing\
    \ = increasing && (i > j);\n        decreasing = decreasing && (i < j);\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> strictly_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> strictly_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ strictly_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing) \n  \
    \      {\n            if (l[i] < l[i - 1]) \n            {\n                return\
    \ false;\n            }\n        } \n        else \n        {\n            if\
    \ (l[i] > l[i - 1]) \n            {\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n  \
    \      if (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n  \
    \              return false;\n            if (!increasing && e > l[i - 1])\n \
    \               return false;\n        }\n    }\n    return true;\n}", "{\n  \
    \  bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i\
    \ < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n\
    \        }\n        if (l[i] > l[i - 1])\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length == 0)\n    {\n        return true;\n    }\n    else\n    {\n  \
    \      long[] l2 = l[1..$];\n        if (l2.length == 0)\n        {\n        \
    \    return true;\n        }\n        else\n        {\n            long[] l3 =\
    \ l2[1..$];\n            if (l3.length == 0)\n            {\n                return\
    \ true;\n            }\n            else\n            {\n                long[]\
    \ l4 = l3[1..$];\n                if (l4.length == 0)\n                {\n   \
    \                 return true;\n                }\n                else\n    \
    \            {\n                    long[] l5 = l4[1..$];\n                  \
    \  if (l5.length == 0)\n                    {\n                        return\
    \ true;\n                    }\n                    else\n                   \
    \ {\n                        long[] l6 = l5[1..$];\n                        if\
    \ (l6.length == 0)\n                        {\n                            return\
    \ true;\n                        }\n                        else\n           \
    \             {\n                            long[] l7 = l6[1..$];\n         \
    \                   if (l7.length == 0)\n                            {\n     \
    \                           return true;\n                            }\n    \
    \                        else\n                            {\n               \
    \                 long[] l8 = l7[1..$];\n                                if (l8.length\
    \ == 0)\n                                {\n                                 \
    \   return true;\n                                }\n                        \
    \        else\n                                {\n                           \
    \         long[] l9 = l8[1..$];\n                                    if (l9.length\
    \ == 0)\n                                    {\n                             \
    \           return true;\n                                    }\n            \
    \                        else\n                                    {\n       \
    \                                 long[] l10 = l9[1..$];\n                   \
    \                     if (l10.length == 0)\n                                 \
    \       {\n                                            return true;\n        \
    \                                }\n                                        else\n\
    \                                        {\n                                 \
    \           long[] l11 = l10[1..$];\n                                        \
    \    if (l11.length == 0)\n                                            {\n   \
    \                                             return true;\n                 \
    \                           }\n                                            else\n\
    \                                            {\n                             \
    \                   long[] l12 = l11[1..$];\n                                \
    \               ", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if\
    \ (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n          \
    \      return false;\n            if (!increasing && e > l[i - 1])\n         \
    \       return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True\
    \ if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length == 0)\n    {\n        return true;\n   \
    \ }\n    else\n    {\n        long prev = l[0];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long i; l)\n        {\n   \
    \         if (i < prev)\n            {\n                increasing = false;\n\
    \            }\n            if (i > prev)\n            {\n                decreasing\
    \ = false;\n            }\n            prev = i;\n        }\n        return increasing\
    \ || decreasing;\n    }\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if\
    \ (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n          \
    \      return false;\n            if (!increasing && e > l[i - 1])\n         \
    \       return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n        {\n            continue;\n\
    \        }\n        if (increasing)\n        {\n            if (e < l[i - 1])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else\n        {\n            if (e > l[i - 1])\n            {\n         \
    \       return false;\n            }\n        }\n    }\n    return true;\n}\n\
    /*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n    \n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j;\
    \ zip(l[0..$-1], l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n     \
    \       increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n      \
    \  {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        \
    \    continue;\n        if (increasing && e < l[i - 1])\n            return false;\n\
    \        if (!increasing && e > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1,\
    \ 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \n\
    */", "{\n    if (l.length < 2)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        bool increasing = l[0] < l[1];\n        foreach (i, e; l)\n  \
    \      {\n            if (i == 0)\n            {\n                continue;\n\
    \            }\n            if (increasing && e < l[i - 1])\n            {\n \
    \               return false;\n            }\n            if (!increasing && e\
    \ > l[i - 1])\n            {\n                return false;\n            }\n \
    \       }\n        return true;\n    }\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] > l[i - 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True\
    \ is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1.0,\
    \ 2.0, 4.0, 20.0])\n    true\n    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n\
    \    >>> monotonic([4.0, 1.0, 0.0, -10.0])\n    true\n    \n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n            {\n                return false;\n           \
    \ }\n            if (!increasing && e > l[i - 1])\n            {\n           \
    \     return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    if (l.length < 2) return true;\n    bool increasing = l[0] < l[1];\n    for\
    \ (int i = 1; i < l.length - 1; i++) \n    {\n        if (increasing) \n     \
    \   {\n            if (l[i] > l[i + 1]) return false;\n        } \n        else\
    \ \n        {\n            if (l[i] < l[i + 1]) return false;\n        }\n   \
    \ }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] <\
    \ l[i - 1]) \n        {\n            increasing = false;\n        }\n        if\
    \ (l[i] > l[i - 1]) \n        {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn True if all elements\
    \ of the list are unique.\n    >>> unique([1L, 2L, 3L, 4L])\n    true\n    >>>\
    \ unique([1L, 2L, 3L, 1L])\n    false\n    >>> unique([1L, 1L, 1L, 1L])\n    false\n\
    */", "{\n    if (l.length < 2)\n        return true;\n    auto direction = l[1]\
    \ - l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (e - l[i] != direction)\n\
    \            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n    foreach\
    \ (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && v < l[i - 1])\n                return false;\n            if (!increasing\
    \ && v > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] >\
    \ l[i - 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing)\n\
    \            {\n                if (e < l[i - 1])\n                {\n       \
    \             return false;\n                }\n            }\n            else\n\
    \            {\n                if (e > l[i - 1])\n                {\n       \
    \             return false;\n                }\n            }\n        }\n   \
    \ }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n \
    \   bool increasing = l[0] < l[1];\n    foreach (i, v; l)\n    {\n        if (i\
    \ > 0)\n        {\n            if (increasing && l[i - 1] > v)\n             \
    \   return false;\n            if (!increasing && l[i - 1] < v)\n            \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ <= 1)\n        return true;\n    long prev = l[0];\n    bool increasing = true;\n\
    \    foreach (i, e; l[1..$])\n    {\n        if (e == prev)\n            continue;\n\
    \        if (increasing)\n        {\n            if (e < prev)\n            {\n\
    \                increasing = false;\n                prev = e;\n            }\n\
    \        }\n        else\n        {\n            if (e > prev)\n             \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ == 0) return true;\n    long prev = l[0];\n    bool increasing = true;\n   \
    \ foreach (i; 1..l.length)\n    {\n        if (l[i] == prev) continue;\n     \
    \   if (increasing && l[i] < prev) increasing = false;\n        if (!increasing\
    \ && l[i] > prev) return false;\n        prev = l[i];\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1])\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n    >>>\
    \ monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0, 1.0, 0.0,\
    \ -10.0])\n    true\n    \n*/", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if\
    \ (i == 0)\n            continue;\n        if (increasing)\n        {\n      \
    \      if (e < l[i - 1])\n                return false;\n        }\n        else\n\
    \        {\n            if (e > l[i - 1])\n                return false;\n   \
    \     }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.length; i++) \n    {\n       \
    \ if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n        }\n\
    \        if (l[i] > l[i - 1]) \n        {\n            decreasing = false;\n \
    \       }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && v < l[i - 1])\n            {\n                return false;\n           \
    \ }\n            if (!increasing && v > l[i - 1])\n            {\n           \
    \     return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n        {\n       \
    \     increasing = false;\n        }\n        if (l[i] > l[i - 1])\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n    \n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n        {\n\
    \            increasing = false;\n        }\n        if (l[i] > l[i - 1]) \n \
    \       {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \    >>> strictly_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> strictly_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> strictly_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] >\
    \ l[i - 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}\n/*\nReturn True if a list is sorted.\n\
    \    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n    >>> is_sorted([1L, 20L, 4L,\
    \ 10L])\n    false\n    >>> is_sorted([4L, 1L, 0L, -10L])\n    false\n*/", "{\n\
    \    if (l.length < 2)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i == 0)\n            continue;\n  \
    \      if (increasing && e < l[i - 1])\n            return false;\n        if\
    \ (!increasing && e > l[i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n*/"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
