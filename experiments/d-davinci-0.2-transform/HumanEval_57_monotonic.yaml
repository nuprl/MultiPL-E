name: HumanEval_57_monotonic
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
  \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n\
  \    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
  \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1]) \n    \
    \    {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1])\
    \ \n        {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if the list is sorted.\n    >>> is_sorted([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n\
    \    >>> is_sorted([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < l[i - 1]) \n        {\n            increasing =\
    \ false;\n        }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list is sorted.\n    >>> is_sorted([1L, 2L, 4L, 20L])\n    true\n  \
    \  >>> is_sorted([1L, 20L, 4L, 10L])\n    false\n    >>> is_sorted([4L, 1L, 0L,\
    \ -10L])\n    false\n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing)\n        {\n            if (l[i] > l[i + 1]) return false;\n  \
    \      }\n        else\n        {\n            if (l[i] < l[i + 1]) return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1.0, 2.0, 4.0, 20.0])\n    true\n\
    \    >>> monotonic([1.0, 20.0, 4.0, 10.0])\n    false\n    >>> monotonic([4.0,\
    \ 1.0, 0.0, -10.0])\n    true\n*/", "{\n    if (l.length <= 1)\n    {\n      \
    \  return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int i = 2;\
    \ i < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i - 1])\n            {\n                return false;\n          \
    \  }\n        }\n        else\n        {\n            if (l[i] > l[i - 1])\n \
    \           {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n\
    \        {\n            if (increasing && e < l[i - 1])\n                return\
    \ false;\n            if (!increasing && e > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, v; l[1..$]) \n    {\n        if (increasing) \n        {\n  \
    \          if (v < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (v > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length - 1; i++)\n\
    \    {\n        if (increasing && l[i] > l[i + 1])\n            return false;\n\
    \        if (!increasing && l[i] < l[i + 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n    >>> monotonic([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic([4L, 1L, 0L, -10L])\n    true\n\
    \    \n*/", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i == 0)\n        \
    \    continue;\n        if (increasing && e < l[i - 1])\n            return false;\n\
    \        if (!increasing && e > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n\
    \        {\n            if (increasing && e < l[i - 1])\n                return\
    \ false;\n            if (!increasing && e > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n        {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1])\n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (size_t i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \        {\n            increasing = false;\n        }\n        if (l[i] > l[i\
    \ - 1])\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n        {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1])\n        {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ < 2)\n    {\n        return true;\n    }\n    long[] diffs = l[1..$].map!((a)\
    \ => a - l[$ - 1]);\n    return diffs.all!((a) => a == 0) || diffs.all!((a) =>\
    \ a > 0) || diffs.all!((a) => a < 0);\n}\n/*\nReturn True if list elements are\
    \ monotonically increasing.\n    >>> monotonic_increasing([1L, 2L, 4L, 20L])\n\
    \    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n    false\n    >>>\
    \ monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/", "{\n    if (l.length\
    \ == 0) \n    {\n        return true;\n    }\n    long sign = l[1] - l[0];\n \
    \   if (sign == 0) \n    {\n        return false;\n    }\n    for (long i = 2;\
    \ i < l.length; i++) \n    {\n        if (sign * (l[i] - l[i - 1]) < 0) \n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\n/*\n\
    Return True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (e < l[i - 1]) \n            {\n               \
    \ return false;\n            }\n        } \n        else \n        {\n       \
    \     if (e > l[i - 1]) \n            {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) \n    {\n\
    \        if (l[i] < l[i - 1]) \n        {\n            increasing = false;\n \
    \       }\n        if (l[i] > l[i - 1]) \n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n    >>> monotonic_increasing([1L,\
    \ 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L, 20L, 4L, 10L])\n\
    \    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n    false\n*/",
  "{\n    if (l.length <= 1)\n        return true;\n    bool increasing = l[0] < l[1];\n\
    \    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n            if (increasing\
    \ && e < l[i - 1])\n                return false;\n            if (!increasing\
    \ && e > l[i - 1])\n                return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n \
    \   >>> monotonic_increasing([1L, 2L, 4L, 20L])\n    true\n    >>> monotonic_increasing([1L,\
    \ 20L, 4L, 10L])\n    false\n    >>> monotonic_increasing([4L, 1L, 0L, -10L])\n\
    \    false\n    \n*/", "{\n    if (l.length < 2)\n    {\n        return true;\n\
    \    }\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l)\n    {\n   \
    \     if (i > 0)\n        {\n            if (increasing && e < l[i - 1])\n   \
    \         {\n                return false;\n            }\n            if (!increasing\
    \ && e > l[i - 1])\n            {\n                return false;\n           \
    \ }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n\
    \        return true;\n    }\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (increasing) \n        {\n   \
    \         if (l[i] < l[i - 1]) \n            {\n                return false;\n\
    \            }\n        } \n        else \n        {\n            if (l[i] > l[i\
    \ - 1]) \n            {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    true\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  true\n    \n*/"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
