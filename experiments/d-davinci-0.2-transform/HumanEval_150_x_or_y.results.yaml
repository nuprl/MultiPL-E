language: d
name: HumanEval_150_x_or_y
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= (n - 1L)) \n        {\n    \
    \        if ((n % i) == 0L) \n            {\n                return y;\n     \
    \       }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L)\n    {\n        return y;\n    }\n    long i = 3L;\n    while (i <=\
    \ sqrt(n))\n    {\n        if (n % i == 0L)\n        {\n            return y;\n\
    \        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaqi_woo7.d(26): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqi_woo7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjt9b_um1.d(17): Error: undefined identifier `isPrime`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjt9b_um1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6s6qde6w.d(17): Error: undefined identifier `isPrime`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6s6qde6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa5q9f4hr.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpa5q9f4hr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2L) \n    {\n        return x;\n    }\n    else \n    {\n        long\
    \ i = 2L;\n        while (i < n) \n        {\n            if (n % i == 0L) \n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 1L;\n        }\n        return x;\n    }\n}\n/*\nA function which should return\
    \ the value of x if n is \n    a prime number and should return the value of y\
    \ otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61ivstlh.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp61ivstlh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n <= 3L) \n    {\n        return x;\n    }\n    else if ((n % 2L) == 0L ||\
    \ (n % 3L) == 0L) \n    {\n        return y;\n    }\n    long i = 5L;\n    while\
    \ (i * i <= n) \n    {\n        if ((n % i) == 0L || (n % (i + 2L)) == 0L) \n\
    \        {\n            return y;\n        }\n        i = i + 6L;\n    }\n   \
    \ return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) {\n        return x;\n    }\n    if (n % 2L ==\
    \ 0L) {\n        return y;\n    }\n    long i = 3L;\n    while (i * i <= n) {\n\
    \        if (n % i == 0L) {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0zdeu7o9.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmp0zdeu7o9.__unittest_L32_C1() [0x427c06]\n??:?
    void tmp0zdeu7o9.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c53]\n??:?
    __libc_start_main [0xb722554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i += 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n    {\n        return x;\n    }\n    else\n\
    \    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqj92jarb.d(17): Error: undefined identifier `isPrime`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqj92jarb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    if (n ==\
    \ 2L)\n    {\n        return x;\n    }\n    if (n % 2L == 0L)\n    {\n       \
    \ return y;\n    }\n    long i = 3L;\n    while (i * i <= n)\n    {\n        if\
    \ (n % i == 0L)\n        {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    long i = 2L;\n    while (i < n) {\n        if (n % i == 0L)\
    \ {\n            return y;\n        }\n        i = i + 1L;\n    }\n    return\
    \ x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpch82mqc8.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e9d]\n??:? void tmpch82mqc8.__unittest_L26_C1() [0x427be2]\n??:?
    void tmpch82mqc8.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428273]\n??:? _d_run_main [0x4281de]\n??:? main [0x427c2f]\n??:?
    __libc_start_main [0x1bb9c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while(i < n) \n        {\n            if(n\
    \ % i == 0L) \n            {\n                return y;\n            }\n     \
    \       i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzcb5b7s6.d(35): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzcb5b7s6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 2L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rai2cpq.d(28): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rai2cpq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    long i = 2L;\n    for (; i < n; i++)\n    {\n        if (n\
    \ % i == 0L)\n        {\n            return y;\n        }\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_1z2v9ep.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e95]\n??:? void tmp_1z2v9ep.__unittest_L27_C1() [0x427bd8]\n??:?
    void tmp_1z2v9ep.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42826b]\n??:? _d_run_main [0x4281d6]\n??:? main [0x427c27]\n??:?
    __libc_start_main [0xaed5f554]\n1/1 unittests FAILED\n'''
  stdout: b''
