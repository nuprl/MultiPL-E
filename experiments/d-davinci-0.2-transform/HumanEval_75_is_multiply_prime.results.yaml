language: d
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa70ar6h6.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x42826d]\n??:? void tmpa70ar6h6.__unittest_L27_C1() [0x427f02]\n??:?
    void tmpa70ar6h6.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42baad]\n??:? runModuleUnitTests [0x42ca19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428643]\n??:? _d_run_main [0x4285ae]\n??:? main [0x428003]\n??:?
    __libc_start_main [0xccaa9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \   {\n            if (n % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n    long i = 2;\n    long num = a;\n    while (i\
    \ <= a)\n    {\n        if (isPrime(i) && a % i == 0)\n        {\n           \
    \ a /= i;\n            if (isPrime(a))\n                return true;\n       \
    \ }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplb4mwqhm.d(23): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplb4mwqhm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        for (long i = 2; i < n; i++)\n            if (n % i == 0)\n         \
    \       return false;\n        return true;\n    }\n    if (a < 6)\n        return\
    \ false;\n    for (long i = 2; i < a; i++)\n        if (is_prime(i) && a % i ==\
    \ 0)\n            for (long j = i; j < a; j++)\n                if (is_prime(j)\
    \ && a % j == 0 && a % (i * j) == 0)\n                    for (long k = j; k <\
    \ a; k++)\n                        if (is_prime(k) && a % k == 0 && a % (i * j\
    \ * k) == 0)\n                            return true;\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_72jl5ds.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f8d]\n??:? void tmp_72jl5ds.__unittest_L35_C1() [0x427c9a]\n??:?
    void tmp_72jl5ds.__modtest() [0x427d0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430188]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab1d]\n??:? runModuleUnitTests [0x42ba89]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428363]\n??:? _d_run_main [0x4282ce]\n??:? main [0x427d1f]\n??:?
    __libc_start_main [0x2fcea554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        else if (n == 2)\n            return true;\n        else if (n % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long max\
    \ = cast(long)sqrt(n);\n            for (long i = 3; i <= max; i += 2)\n     \
    \       {\n                if (n % i == 0)\n                    return false;\n\
    \            }\n            return true;\n        }\n    }\n    if (a < 6)\n \
    \       return false;\n    else if (a == 6)\n        return true;\n    else\n\
    \    {\n        long max = cast(long)sqrt(a);\n        for (long i = 3; i <= max;\
    \ i += 2)\n        {\n            if (is_prime(i) && a % i == 0)\n           \
    \ {\n                long b = a / i;\n                if (is_prime(b))\n     \
    \           {\n                    long c = b / i;\n                    if (is_prime(c))\n\
    \                        return true;\n                }\n            }\n    \
    \    }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplzhtfojh.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\n/tmp/tmplzhtfojh.d(40): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzhtfojh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 0) return false;\n    if (a == 1) return true;\n    if (a == 2)\
    \ return true;\n    if (a == 3) return true;\n    if (a == 5) return true;\n \
    \   if (a == 7) return true;\n    if (a == 11) return true;\n    if (a == 13)\
    \ return true;\n    if (a == 17) return true;\n    if (a == 19) return true;\n\
    \    if (a == 23) return true;\n    if (a == 29) return true;\n    if (a == 31)\
    \ return true;\n    if (a == 37) return true;\n    if (a == 41) return true;\n\
    \    if (a == 43) return true;\n    if (a == 47) return true;\n    if (a == 53)\
    \ return true;\n    if (a == 59) return true;\n    if (a == 61) return true;\n\
    \    if (a == 67) return true;\n    if (a == 71) return true;\n    if (a == 73)\
    \ return true;\n    if (a == 79) return true;\n    if (a == 83) return true;\n\
    \    if (a == 89) return true;\n    if (a == 97) return true;\n    if (a == 6)\
    \ return false;\n    if (a == 10) return false;\n    if (a == 14) return false;\n\
    \    if (a == 15) return false;\n    if (a == 21) return false;\n    if (a ==\
    \ 22) return false;\n    if (a == 26) return false;\n    if (a == 33) return false;\n\
    \    if (a == 34) return false;\n    if (a == 35) return false;\n    if (a ==\
    \ 38) return false;\n    if (a == 39) return false;\n    if (a == 46) return false;\n\
    \    if (a == 51) return false;\n    if (a == 55) return false;\n    if (a ==\
    \ 57) return false;\n    if (a == 58) return false;\n    if (a == 62) return false;\n\
    \    if (a == 65) return false;\n    if (\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1nxovsdb.d(62): Error: expression expected, not `unittest`\n/tmp/tmp1nxovsdb.d(63):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1nxovsdb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ 0..primes.length)\n    {\n        if(a % primes[i] == 0)\n        {\n      \
    \      result = true;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppxksetln.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x42822d]\n??:? void tmppxksetln.__unittest_L27_C1() [0x427e7e]\n??:?
    void tmppxksetln.__modtest() [0x427fac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430760]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43023d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b0f5]\n??:? runModuleUnitTests [0x42c061]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428677]\n??:? _d_run_main [0x4285e2]\n??:? main [0x427fbf]\n??:?
    __libc_start_main [0x475ad554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    while (i < a)\n    {\n        if (a % i == 0)\n        {\n\
    \            int j = 2;\n            while (j < i)\n            {\n          \
    \      if (i % j == 0)\n                {\n                    int k = 2;\n  \
    \                  while (k < a / i)\n                    {\n                \
    \        if ((a / i) % k == 0)\n                        {\n                  \
    \          return true;\n                        }\n                        k++;\n\
    \                    }\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa_r234i4.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e7d]\n??:? void tmpa_r234i4.__unittest_L42_C1() [0x427aef]\n??:?
    void tmpa_r234i4.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428253]\n??:? _d_run_main [0x4281be]\n??:? main [0x427c0f]\n??:?
    __libc_start_main [0xf583a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa70ar6h6.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x42826d]\n??:? void tmpa70ar6h6.__unittest_L27_C1() [0x427f02]\n??:?
    void tmpa70ar6h6.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42baad]\n??:? runModuleUnitTests [0x42ca19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428643]\n??:? _d_run_main [0x4285ae]\n??:? main [0x428003]\n??:?
    __libc_start_main [0xccaa9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpi97pqxbc.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x42820d]\n??:? void tmpi97pqxbc.__unittest_L27_C1() [0x427e5e]\n??:?
    void tmpi97pqxbc.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285e3]\n??:? _d_run_main [0x42854e]\n??:? main [0x427f9f]\n??:?
    __libc_start_main [0x94a02554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    while (i <= a)\n    {\n        if (a % i == 0)\n        {\n\
    \            a /= i;\n            if (a == 1)\n                return true;\n\
    \        }\n        else\n            i++;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9f6y8ysx.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e1d]\n??:? void tmp9f6y8ysx.__unittest_L29_C1() [0x427a72]\n??:?
    void tmp9f6y8ysx.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281f3]\n??:? _d_run_main [0x42815e]\n??:? main [0x427bb3]\n??:?
    __libc_start_main [0x8e47a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime = true;\n    long b = a;\n    long c = a;\n    long d = a;\n\
    \    long e = a;\n    long f = a;\n    long g = a;\n    long h = a;\n    long\
    \ i = a;\n    long j = a;\n    long k = a;\n    long l = a;\n    long m = a;\n\
    \    long n = a;\n    long o = a;\n    long p = a;\n    long q = a;\n    long\
    \ r = a;\n    long s = a;\n    long t = a;\n    long u = a;\n    long v = a;\n\
    \    long w = a;\n    long x = a;\n    long y = a;\n    long z = a;\n    long\
    \ aa = a;\n    long ab = a;\n    long ac = a;\n    long ad = a;\n    long ae =\
    \ a;\n    long af = a;\n    long ag = a;\n    long ah = a;\n    long ai = a;\n\
    \    long aj = a;\n    long ak = a;\n    long al = a;\n    long am = a;\n    long\
    \ an = a;\n    long ao = a;\n    long ap = a;\n    long aq = a;\n    long ar =\
    \ a;\n    long as = a;\n    long at = a;\n    long au = a;\n    long av = a;\n\
    \    long aw = a;\n    long ax = a;\n    long ay = a;\n    long az = a;\n    long\
    \ ba = a;\n    long bb = a;\n    long bc = a;\n    long bd = a;\n    long be =\
    \ a;\n    long bf = a;\n    long bg = a;\n    long bh = a;\n    long bi = a;\n\
    \    long bj = a;\n    long bk = a;\n    long bl = a;\n    long bm = a;\n    long\
    \ bn = a;\n    long bo = a;\n    long bp = a;\n    long bq = a;\n    long br =\
    \ a;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxicw1uku.d(86): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxicw1uku.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a == 1)\n        return true;\n    if (a ==\
    \ 2)\n        return true;\n    if (a == 3)\n        return true;\n    if (a ==\
    \ 5)\n        return true;\n    if (a == 7)\n        return true;\n    if (a ==\
    \ 11)\n        return true;\n    if (a == 13)\n        return true;\n    if (a\
    \ == 17)\n        return true;\n    if (a == 19)\n        return true;\n    if\
    \ (a == 23)\n        return true;\n    if (a == 29)\n        return true;\n  \
    \  if (a == 31)\n        return true;\n    if (a == 37)\n        return true;\n\
    \    if (a == 41)\n        return true;\n    if (a == 43)\n        return true;\n\
    \    if (a == 47)\n        return true;\n    if (a == 53)\n        return true;\n\
    \    if (a == 59)\n        return true;\n    if (a == 61)\n        return true;\n\
    \    if (a == 67)\n        return true;\n    if (a == 71)\n        return true;\n\
    \    if (a == 73)\n        return true;\n    if (a == 79)\n        return true;\n\
    \    if (a == 83)\n        return true;\n    if (a == 89)\n        return true;\n\
    \    if (a == 97)\n        return true;\n    if (a == 6)\n        return false;\n\
    \    if (a == 10)\n        return false;\n    if (a == 14)\n        return false;\n\
    \    if (a == 15)\n        return false;\n    if (a == 21)\n        return false;\n\
    \    if (a == 22)\n        return false;\n    if (a == 33)\n        return false;\n\
    \    if (a == 34)\n        return false;\n    if (a == 35)\n        return false;\n\
    \    if (a == 38)\n        return false;\n    if (a == 39)\n        return false;\n\
    \    if (a == 46)\n        return false;\n    if (a == 51)\n\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkqyz0yux.d(94): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqyz0yux.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math : isPrime;\n    import std.algorithm : filter, map, reduce;\n\
    \    import std.range : iota;\n    import std.typecons : tuple;\n    import std.conv\
    \ : to;\n    import std.array : array;\n    import std.stdio : writeln;\n    import\
    \ std.range : take;\n    import std.algorithm : sort;\n    import std.algorithm\
    \ : equal;\n    import std.typecons : tuple;\n    import std.range : zip;\n  \
    \  import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcyy1beps.d(71): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyy1beps.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuqm9ufc1.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x42821d]\n??:? void tmpuqm9ufc1.__unittest_L25_C1() [0x427e6e]\n??:?
    void tmpuqm9ufc1.__modtest() [0x427f9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285f3]\n??:? _d_run_main [0x42855e]\n??:? main [0x427faf]\n??:?
    __libc_start_main [0xd6d24554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0opxd6ia.d(21): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0opxd6ia.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4y4cvg_j.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x42826d]\n??:? void tmp4y4cvg_j.__unittest_L27_C1() [0x427f02]\n??:?
    void tmp4y4cvg_j.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42baad]\n??:? runModuleUnitTests [0x42ca19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428643]\n??:? _d_run_main [0x4285ae]\n??:? main [0x428003]\n??:?
    __libc_start_main [0xd2edd554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa70ar6h6.d(33): unittest failure\n----------------\n??:?
    _d_unittestp [0x42826d]\n??:? void tmpa70ar6h6.__unittest_L27_C1() [0x427f02]\n??:?
    void tmpa70ar6h6.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42baad]\n??:? runModuleUnitTests [0x42ca19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428643]\n??:? _d_run_main [0x4285ae]\n??:? main [0x428003]\n??:?
    __libc_start_main [0xccaa9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n\
    \    {\n        if(a % primes[i] == 0)\n        {\n            a /= primes[i];\n\
    \            if(a == 1)\n            {\n                return true;\n       \
    \     }\n            else\n            {\n                i = 0;\n           \
    \ }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7irerjai.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f1d]\n??:? void tmp7irerjai.__unittest_L33_C1() [0x427b72]\n??:?
    void tmp7irerjai.__modtest() [0x427ca0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab4a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcdd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43018c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc69]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab21]\n??:? runModuleUnitTests [0x42ba8d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428367]\n??:? _d_run_main [0x4282d2]\n??:? main [0x427cb3]\n??:?
    __libc_start_main [0x8b0e7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a > 0)\n    {\n        long[] primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n        long[] factors = [];\n        foreach (prime; primes)\n\
    \        {\n            if (a % prime == 0)\n            {\n                factors\
    \ ~= prime;\n                a /= prime;\n            }\n        }\n        if\
    \ (factors.length == 3)\n        {\n            result = true;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp61oxp7kh.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428285]\n??:? void tmp61oxp7kh.__unittest_L35_C1() [0x427f1a]\n??:?
    void tmp61oxp7kh.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42baee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bac5]\n??:? runModuleUnitTests [0x42ca31]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42865b]\n??:? _d_run_main [0x4285c6]\n??:? main [0x42801b]\n??:?
    __libc_start_main [0xa37b0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    bool is_multiply_prime(long\
    \ a)\n    {\n        if (a < 6) return false;\n        if (a % 2 == 0) return\
    \ is_prime(a / 2) && is_prime(2);\n        if (a % 3 == 0) return is_prime(a /\
    \ 3) && is_prime(3);\n        for (long i = 5; i <= sqrt(a); i += 6)\n       \
    \ {\n            if (a % i == 0) return is_prime(a / i) && is_prime(i);\n    \
    \        if (a % (i + 2) == 0) return is_prime(a / (i + 2)) && is_prime(i + 2);\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprk9b7uh5.d(20): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\n/tmp/tmprk9b7uh5.d(31): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\n/tmp/tmprk9b7uh5.d(13): Error: function `tmprk9b7uh5.is_multiply_prime` has
    no `return` statement, but is expected to return a value of type `bool`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprk9b7uh5.d", "-I/tmp"]\n'''
  stdout: b''
