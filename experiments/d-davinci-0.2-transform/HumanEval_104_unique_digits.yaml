name: HumanEval_104_unique_digits
language: d
prompt: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
  \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list\
  \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L,\
  \ 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L,\
  \ 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n"
tests: "unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
  \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
  \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
  \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[0];\n    foreach(long i; x)\n    {\n\
    \        if(i.to!string.count!(\"2\") == 0 && i.to!string.count!(\"4\") == 0 &&\
    \ i.to!string.count!(\"6\") == 0 && i.to!string.count!(\"8\") == 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}", "{\n\
    \    int[] evens = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x)\n    {\n        int[] digits = [];\n        while(num > 0)\n       \
    \ {\n            digits ~= num % 10;\n            num /= 10;\n        }\n    \
    \    bool hasEven = false;\n        foreach(int digit; digits)\n        {\n  \
    \          if(evens.canFind(digit))\n            {\n                hasEven =\
    \ true;\n                break;\n            }\n        }\n        if(!hasEven)\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; x)\n    {\n    \
    \    if(!hasEvenDigit(i))\n        {\n            result ~= i;\n        }\n  \
    \  }\n    sort(result);\n    return result;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}",
  "{\n    int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits;\n    int[] temp;\n    int[] temp2;\n    int[] temp3;\n    int[] temp4;\n\
    \    int[] temp5;\n    int[] temp6;\n    int[] temp7;\n    int[] temp8;\n    int[]\
    \ temp9;\n    int[] temp10;\n    int[] temp11;\n    int[] temp12;\n    int[] temp13;\n\
    \    int[] temp14;\n    int[] temp15;\n    int[] temp16;\n    int[] temp17;\n\
    \    int[] temp18;\n    int[] temp19;\n    int[] temp20;\n    int[] temp21;\n\
    \    int[] temp22;\n    int[] temp23;\n    int[] temp24;\n    int[] temp25;\n\
    \    int[] temp26;\n    int[] temp27;\n    int[] temp28;\n    int[] temp29;\n\
    \    int[] temp30;\n    int[] temp31;\n    int[] temp32;\n    int[] temp33;\n\
    \    int[] temp34;\n    int[] temp35;\n    int[] temp36;\n    int[] temp37;\n\
    \    int[] temp38;\n    int[] temp39;\n    int[] temp40;\n    int[] temp41;\n\
    \    int[] temp42;\n    int[] temp43;\n    int[] temp44;\n    int[] temp45;\n\
    \    int[] temp46;\n    int[] temp47;\n    int[] temp48;\n    int[] temp49;\n\
    \    int[] temp50;\n    int[] temp51;\n    int[] temp52;\n    int[] temp53;\n\
    \    int[] temp54;\n    int[] temp55;\n    int[] temp56;\n    int[] temp57;\n\
    \    int[] temp58;\n    int[] temp59;\n    int[] temp60;\n    int[] temp61;\n\
    \    int[] temp62;\n    int[] temp63;\n    int[] temp64;\n    int[] temp65;\n\
    \    int[] temp66;\n    int[] temp67;\n   ", "{\n    long[] res;\n    foreach(e;\
    \ x)\n    {\n        if(e.digits.all!(a => a % 2 != 0))\n        {\n         \
    \   res ~= e;\n        }\n    }\n    return res;\n}", "{\n    int i, j;\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    for (i = 0; i < x.length;\
    \ i++) {\n        bool flag = true;\n        long temp = x[i];\n        while\
    \ (temp > 0) {\n            if (temp % 2 == 0) {\n                flag = false;\n\
    \                break;\n            }\n            temp /= 10;\n        }\n \
    \       if (flag) {\n            result[count] = x[i];\n            count++;\n\
    \        }\n    }\n    long[] final_result = new long[count];\n    for (i = 0;\
    \ i < count; i++) {\n        final_result[i] = result[i];\n    }\n    sort(final_result);\n\
    \    return final_result;\n}", "{\n    long[] result = new long[0];\n    foreach(long\
    \ i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n  \
    \  foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n      \
    \      result ~= i;\n        }\n    }\n    sort(result);\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; x)\n    {\n    \
    \    if(!hasEvenDigit(i))\n        {\n            result ~= i;\n        }\n  \
    \  }\n    sort(result);\n    return result;\n}", "{\n    long[] res;\n    foreach(i;\
    \ x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length == 0)\n     \
    \   {\n            res ~= i;\n        }\n    }\n    return res.sort;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach(long i; x)\n    {\n        bool\
    \ hasEven = false;\n        while(i > 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n            i /= 10;\n        }\n        if(!hasEven)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}", "{\n    auto\
    \ result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }", "{\n    long[] result = new long[0];\n    foreach(long i; x)\n    {\n    \
    \    if(!hasEvenDigit(i))\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
