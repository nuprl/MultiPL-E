name: HumanEval_141_file_name_check
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function which takes\
  \ a string representing a file's name, and returns\n    'Yes' if the the file's\
  \ name is valid, and returns 'No' otherwise.\n    A file's name is considered to\
  \ be valid if and only if all the following conditions \n    are met:\n    - There\
  \ should not be more than three digits ('0'-'9') in the file's name.\n    - The\
  \ file's name contains exactly one dot '.'\n    - The substring before the dot should\
  \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
  \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
  \ 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"\
  Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
  \ file_name) \n"
tests: "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"\
  example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n\
  \    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\"\
  ) == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"\
  His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n \
  \   assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\"\
  ) == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"\
  this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\"\
  ) == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n   \
  \ assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"\
  this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\")\
  \ == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"\
  Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"\
  Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"\
  I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n\
  \    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\"\
  ) == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"\
  s.\") == \"No\");\n}\nvoid main(){}"
completions: ["{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n \
    \   int dot_index = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if(digits_count > 3)\n        return \"No\";\n    if(extension !in\
    \ valid_extensions)\n        return \"No\";\n    if(name.length == 0)\n      \
    \  return \"No\";\n    if(name[0] < 'a' || name[0] > 'z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    // your code here\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1) return \"No\";\n    if (dot_pos == 0) return \"No\";\n\
    \    if (dot_pos == file_name.length - 1) return \"No\";\n    auto dot_pos_ext\
    \ = file_name.find('.', dot_pos + 1);\n    if (dot_pos_ext != -1) return \"No\"\
    ;\n    auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0) return \"No\";\n    if (name[0] < 'a' ||\
    \ name[0] > 'z') return \"No\";\n    if (name[0] < 'A' || name[0] > 'Z') return\
    \ \"No\";\n    int count = 0;\n    for (auto c : name)\n    {\n        if (c >=\
    \ '0' && c <= '9') count++;\n    }\n    if (count > 3) return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    bool is_valid = true;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        string[] file_name_parts = file_name.split(\"\
    .\");\n        if(file_name_parts.length != 2)\n        {\n            is_valid\
    \ = false;\n        }\n        else\n        {\n            if(file_name_parts[0].length\
    \ == 0 || !(file_name_parts[0][0] >= 'a' && file_name_parts[0][0] <= 'z') && !(file_name_parts[0][0]\
    \ >= 'A' && file_name_parts[0][0] <= 'Z'))\n            {\n                is_valid\
    \ = false;\n            }\n            else\n            {\n                if(file_name_parts[1]\
    \ != \"txt\" && file_name_parts[1] != \"exe\" && file_name_parts[1] != \"dll\"\
    )\n                {\n                    is_valid = false;\n                }\n\
    \            }\n        }\n    }\n    return is_valid ? \"Yes\" : \"No\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    auto dot_index = file_name.indexOf('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (!valid_extensions.canFind(extension))\n        return \"No\"\
    ;\n    string name = file_name[0 .. dot_index];\n    if (name.length == 0)\n \
    \       return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n \
    \   int digits_count = 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n\
    \            digits_count++;\n    }\n    if (digits_count > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_pos =\
    \ 0;\n    int dot_count = 0;\n    string result = \"No\";\n    string extension\
    \ = \"\";\n    string valid_extensions[] = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_pos =\
    \ i;\n            dot_count++;\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n    }\n    if(count <= 3 && dot_count\
    \ == 1)\n    {\n        extension = file_name[dot_pos+1..$];\n        if(extension\
    \ in valid_extensions)\n        {\n            result = \"Yes\";\n        }\n\
    \    }\n    return result;\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || !isalpha(before_dot[0]))\n        return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n    {\n     \
    \   if (isdigit(c))\n            num_digits++;\n    }\n    if (num_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0',\
    \ '9') > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n    \
    \    return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(c; name)\n    {\n      \
    \  if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count\
    \ > 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext;\
    \ valid_extensions)\n    {\n        if(ext == extension)\n            return \"\
    Yes\";\n    }\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\"\
    );\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_pos = file_name.find(\".\");\n \
    \   string extension = file_name[dot_pos+1..$];\n    string name = file_name[0..dot_pos-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes\
    \ a string representing a file's name, and returns\n    'Yes' if the the file's\
    \ name is valid, and returns 'No' otherwise.\n    A file's name is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \    - The file's name contains exactly one dot '.'\n    - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n    the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check(string file_name) \n{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_pos = file_name.find(\".\");\n \
    \   string extension = file_name[dot_pos+1..$];\n    string name = file_name[0..dot_pos-1];\n\
    \    int", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2) return \"No\";\n    if (file_name_parts[0].length\
    \ == 0) return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3) return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\
    \ return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1) return\
    \ \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"example.txt\")\n   \
    \ \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring\
    \ file_name_check(string file_name) \n{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2) return \"No\";\n    if (file_name_parts[0].length\
    \ == 0) return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3) return\
    \ \"No\";\n    if (file_name_parts", "{\n    if(file_name.count('.') != 1)\n \
    \       return \"No\";\n    string[] parts = file_name.split('.');\n    if(parts[0].length\
    \ == 0 || parts[1].length == 0)\n        return \"No\";\n    if(parts[0].count('0','9')\
    \ > 3)\n        return \"No\";\n    if(!(parts[1] == \"txt\" || parts[1] == \"\
    exe\" || parts[1] == \"dll\"))\n        return \"No\";\n    if(!(parts[0][0] >=\
    \ 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos =\
    \ file_name.find(\".\");\n    string ext = file_name.substr(dot_pos+1);\n    string\
    \ name = file_name.substr(0, dot_pos);\n    int digits = 0;\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits\
    \ > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext != \"exe\" && ext\
    \ != \"dll\")\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z')\
    \ && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    string file_name_extension = file_name.substr(dot_index\
    \ + 1);\n    int digits_count = 0;\n    foreach(char c; file_name_without_extension)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n\
    \        }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n \
    \   }\n    if(file_name_without_extension.length == 0)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z') &&\n       !(file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(file_name_extension !=\
    \ \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
