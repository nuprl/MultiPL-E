name: HumanEval_141_file_name_check
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function which takes\
  \ a string representing a file's name, and returns\n    'Yes' if the the file's\
  \ name is valid, and returns 'No' otherwise.\n    A file's name is considered to\
  \ be valid if and only if all the following conditions \n    are met:\n    - There\
  \ should not be more than three digits ('0'-'9') in the file's name.\n    - The\
  \ file's name contains exactly one dot '.'\n    - The substring before the dot should\
  \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
  \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
  \ 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"\
  Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
  \ file_name) \n"
tests: "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"\
  example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n\
  \    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\"\
  ) == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"\
  His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n \
  \   assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\"\
  ) == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"\
  this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\"\
  ) == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n   \
  \ assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"\
  this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\")\
  \ == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"\
  Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"\
  Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"\
  I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n\
  \    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\"\
  ) == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"\
  s.\") == \"No\");\n}\nvoid main(){}"
completions: ["{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n \
    \   int dot_index = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if(digits_count > 3)\n        return \"No\";\n    if(extension !in\
    \ valid_extensions)\n        return \"No\";\n    if(name.length == 0)\n      \
    \  return \"No\";\n    if(name[0] < 'a' || name[0] > 'z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    // your code here\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1) return \"No\";\n    if (dot_pos == 0) return \"No\";\n\
    \    if (dot_pos == file_name.length - 1) return \"No\";\n    auto dot_pos_ext\
    \ = file_name.find('.', dot_pos + 1);\n    if (dot_pos_ext != -1) return \"No\"\
    ;\n    auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0) return \"No\";\n    if (name[0] < 'a' ||\
    \ name[0] > 'z') return \"No\";\n    if (name[0] < 'A' || name[0] > 'Z') return\
    \ \"No\";\n    int count = 0;\n    for (auto c : name)\n    {\n        if (c >=\
    \ '0' && c <= '9') count++;\n    }\n    if (count > 3) return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    bool is_valid = true;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        string[] file_name_parts = file_name.split(\"\
    .\");\n        if(file_name_parts.length != 2)\n        {\n            is_valid\
    \ = false;\n        }\n        else\n        {\n            if(file_name_parts[0].length\
    \ == 0 || !(file_name_parts[0][0] >= 'a' && file_name_parts[0][0] <= 'z') && !(file_name_parts[0][0]\
    \ >= 'A' && file_name_parts[0][0] <= 'Z'))\n            {\n                is_valid\
    \ = false;\n            }\n            else\n            {\n                if(file_name_parts[1]\
    \ != \"txt\" && file_name_parts[1] != \"exe\" && file_name_parts[1] != \"dll\"\
    )\n                {\n                    is_valid = false;\n                }\n\
    \            }\n        }\n    }\n    return is_valid ? \"Yes\" : \"No\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    auto dot_index = file_name.indexOf('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (!valid_extensions.canFind(extension))\n        return \"No\"\
    ;\n    string name = file_name[0 .. dot_index];\n    if (name.length == 0)\n \
    \       return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n \
    \   int digits_count = 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n\
    \            digits_count++;\n    }\n    if (digits_count > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_pos =\
    \ 0;\n    int dot_count = 0;\n    string result = \"No\";\n    string extension\
    \ = \"\";\n    string valid_extensions[] = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_pos =\
    \ i;\n            dot_count++;\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n    }\n    if(count <= 3 && dot_count\
    \ == 1)\n    {\n        extension = file_name[dot_pos+1..$];\n        if(extension\
    \ in valid_extensions)\n        {\n            result = \"Yes\";\n        }\n\
    \    }\n    return result;\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || !isalpha(before_dot[0]))\n        return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n    {\n     \
    \   if (isdigit(c))\n            num_digits++;\n    }\n    if (num_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0',\
    \ '9') > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n    \
    \    return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(c; name)\n    {\n      \
    \  if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count\
    \ > 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext;\
    \ valid_extensions)\n    {\n        if(ext == extension)\n            return \"\
    Yes\";\n    }\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\"\
    );\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_pos = file_name.find(\".\");\n \
    \   string extension = file_name[dot_pos+1..$];\n    string name = file_name[0..dot_pos-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes\
    \ a string representing a file's name, and returns\n    'Yes' if the the file's\
    \ name is valid, and returns 'No' otherwise.\n    A file's name is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \    - The file's name contains exactly one dot '.'\n    - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n    the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check(string file_name) \n{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_pos = file_name.find(\".\");\n \
    \   string extension = file_name[dot_pos+1..$];\n    string name = file_name[0..dot_pos-1];\n\
    \    int", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2) return \"No\";\n    if (file_name_parts[0].length\
    \ == 0) return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3) return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\
    \ return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1) return\
    \ \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"example.txt\")\n   \
    \ \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring\
    \ file_name_check(string file_name) \n{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2) return \"No\";\n    if (file_name_parts[0].length\
    \ == 0) return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3) return\
    \ \"No\";\n    if (file_name_parts", "{\n    if(file_name.count('.') != 1)\n \
    \       return \"No\";\n    string[] parts = file_name.split('.');\n    if(parts[0].length\
    \ == 0 || parts[1].length == 0)\n        return \"No\";\n    if(parts[0].count('0','9')\
    \ > 3)\n        return \"No\";\n    if(!(parts[1] == \"txt\" || parts[1] == \"\
    exe\" || parts[1] == \"dll\"))\n        return \"No\";\n    if(!(parts[0][0] >=\
    \ 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos =\
    \ file_name.find(\".\");\n    string ext = file_name.substr(dot_pos+1);\n    string\
    \ name = file_name.substr(0, dot_pos);\n    int digits = 0;\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits\
    \ > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext != \"exe\" && ext\
    \ != \"dll\")\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z')\
    \ && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    string file_name_extension = file_name.substr(dot_index\
    \ + 1);\n    int digits_count = 0;\n    foreach(char c; file_name_without_extension)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n\
    \        }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n \
    \   }\n    if(file_name_without_extension.length == 0)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z') &&\n       !(file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(file_name_extension !=\
    \ \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find(\"\
    .\");\n    string extension = file_name.substr(dot_index + 1);\n    string name\
    \ = file_name.substr(0, dot_index);\n    int digits = 0;\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits\
    \ > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string extension\
    \ = file_name.split(\".\")[1];\n    string name = file_name.split(\".\")[0];\n\
    \    int digits = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <=\
    \ '9')\n            digits++;\n    }\n    if(digits > 3)\n        return \"No\"\
    ;\n    if(!(extension in valid_extensions))\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index ==\
    \ -1) return \"No\";\n    string before_dot = file_name[0..dot_index];\n    string\
    \ after_dot = file_name[dot_index+1..$];\n    if (before_dot.length == 0) return\
    \ \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z') return \"No\";\n\
    \    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"\
    ) return \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n    {\n\
    \        if (c >= '0' && c <= '9') num_digits++;\n    }\n    if (num_digits >\
    \ 3) return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string ext = file_name.substr(dot_pos + 1);\n    string name = file_name.substr(0,\
    \ dot_pos);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n   \
    \     return \"No\";\n    if (name.length == 0)\n        return \"No\";\n    if\
    \ (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n       \
    \ return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            count++;\n    }\n    if (count > 3)\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index + 1 .. $];\n    string name = file_name[0\
    \ .. dot_index - 1];\n    int digits_count = 0;\n    foreach(char c; name)\n \
    \   {\n        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n\
    \        }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n \
    \   }\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.canFind(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string before_dot = file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    if (before_dot.length == 0 || before_dot.count('0'..'9') > 3)\n        return\
    \ \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2) return \"No\"\
    ;\n    if (file_name_parts[0].length == 0) return \"No\";\n    if (file_name_parts[0].count(\"\
    0-9\") > 3) return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z') return \"No\";\n    if (file_name_parts[0][0] < 'A' || file_name_parts[0][0]\
    \ > 'Z') return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) ==\
    \ -1) return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string before_dot = file_name[0..dot_index];\n    string after_dot = file_name[dot_index+1..$];\n\
    \    if (before_dot.length == 0 || !isalpha(before_dot[0]))\n        return \"\
    No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"\
    dll\")\n        return \"No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n\
    \    {\n        if (isdigit(c))\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].length > 3)\n    \
    \    return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'A' || file_name_parts[0][0]\
    \ > 'Z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_end =\
    \ 0;\n    int dot_index_begin = 0;\n    string file_name_begin;\n    string file_name_end;\n\
    \    string[] file_name_end_list = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    dot_index_begin = dot_index;\n\
    \    dot_index_end = dot_index;\n    while(file_name[dot_index_begin] != '.')\n\
    \    {\n        dot_index_begin--;\n    }\n    while(file_name[dot_index_end]\
    \ != '.')\n    {\n        dot_index_end++;\n    }\n    file_name_begin = file_name[dot_index_begin+1..dot_index];\n\
    \    file_name_end = file_name[dot_index+1..dot_index_end];\n    if(file_name_begin.length\
    \ == 0 || !(file_name_begin[0] >= 'a' && file_name_begin[0] <= 'z') && !(file_name_begin[0]\
    \ >= 'A' && file_name_begin[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if(!file_name_end_list.contains(file_name_end))\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    if\
    \ (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.canFind(extension))\n    \
    \    return \"No\";\n    string name = file_name[0..dot_index-1];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digits_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (isDigit(c))\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    // Your code here\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (extension.length == 0 || valid_extensions.count(extension)\
    \ == 0)\n        return \"No\";\n    string name = file_name[0 .. dot_index];\n\
    \    if (name.length == 0 || !name[0].isLetter)\n        return \"No\";\n    int\
    \ digit_count = 0;\n    foreach (c; name)\n        if (c.isDigit)\n          \
    \  digit_count++;\n    if (digit_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_index = file_name.indexOf('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        count++;\n    }\n    if (count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_pos + 1);\n\
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"\
    No\";\n    if (file_name.count('.') != 1)\n        return \"No\";\n    if (file_name.count('0',\
    \ '9') > 3)\n        return \"No\";\n    if (file_name.count('a', 'z') == 0 &&\
    \ file_name.count('A', 'Z') == 0)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    import std.algorithm : count;\n    import std.array : array;\n\
    \    import std.conv : to;\n    import std.range : take;\n    import std.string\
    \ : split;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \   ", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos =\
    \ file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n    auto\
    \ dot_pos_end = file_name.find('.', dot_pos + 1);\n    if (dot_pos_end != -1)\n\
    \        return \"No\";\n    auto before_dot = file_name[0..dot_pos];\n    auto\
    \ after_dot = file_name[dot_pos + 1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ > 8)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    if (!(before_dot[0]\
    \ >= 'a' && before_dot[0] <= 'z' || before_dot[0] >= 'A' && before_dot[0] <= 'Z'))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    // Check if the file\
    \ name contains more than three digits\n    if (file_name.count!(char)(\"0\" ..\
    \ \"9\") > 3)\n        return \"No\";\n    // Check if the file name contains\
    \ exactly one dot\n    if (file_name.count!(char)(\".\") != 1)\n        return\
    \ \"No\";\n    // Split the file name into two parts\n    auto parts = file_name.split(\"\
    .\");\n    // Check if the first part is empty\n    if (parts[0].empty)\n    \
    \    return \"No\";\n    // Check if the first part starts with a letter\n   \
    \ if (!parts[0].startsWith!(char)(\"a\" .. \"z\", \"A\" .. \"Z\"))\n        return\
    \ \"No\";\n    // Check if the second part is one of the allowed extensions\n\
    \    if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3)\n        return \"No\";\n    if(dot_index == -1)\n        return \"No\";\n\
    \    if(name.length == 0)\n        return \"No\";\n    if(name[0] < 'a' || name[0]\
    \ > 'z')\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n    \
    \    return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    bool valid = true;\n\
    \    foreach(i, c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n     \
    \   {\n            count++;\n        }\n        if(c == '.')\n        {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3)\n    {\n        valid = false;\n    }\n    if(dot_count != 1)\n    {\n\
    \        valid = false;\n    }\n    if(dot_index == 0)\n    {\n        valid =\
    \ false;\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n   \
    \     valid = false;\n    }\n    if(file_name[dot_index + 1 .. $] != \"txt\" &&\
    \ file_name[dot_index + 1 .. $] != \"exe\" && file_name[dot_index + 1 .. $] !=\
    \ \"dll\")\n    {\n        valid = false;\n    }\n    if(valid)\n    {\n     \
    \   return \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ i = 0;\n    int j = 0;\n    string ext = \"\";\n    string name = \"\";\n  \
    \  bool valid = true;\n    bool valid_ext = false;\n    bool valid_name = false;\n\
    \    bool valid_count = false;\n    string[] valid_exts = [\"txt\", \"exe\", \"\
    dll\"];\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n       \
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n       \
    \ if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n     \
    \   i++;\n    }\n    if(dot_count == 1 && count <= 3)\n    {\n        valid_count\
    \ = true;\n    }\n    if(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z')\n    {\n        valid_name = true;\n    }\n \
    \   foreach(string s; valid_exts)\n    {\n        if(s == file_name[dot_index+1..$])\n\
    \        {\n            valid_ext = true;\n        }\n    }\n    if(valid_count\
    \ && valid_name && valid_ext)\n    {\n        valid = true;\n    }\n    else\n\
    \    {\n        valid = false;\n    }\n    if(valid)\n    {\n        return \"\
    Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}\n/*\nCreate a\
    \ function which takes a string representing a file's name, and returns\n    the\
    \ file's extension.\n    A file's extension is the substring after the last dot\
    \ '.' in the file's name.\n    Examples:\n    >>> file_extension(\"example.txt\"\
    )\n    \"txt\"\n    >>> file_extension(\"example.exe\")\n    \"exe\"\n*/\nstring\
    \ file_extension(string file_name) \n{\n    int dot_index = 0", "{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index+1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n    for\
    \ (int i = 0; i < name.length; i++)\n    {\n        if (name[i] >= '0' && name[i]\
    \ <= '9')\n            digits++;\n    }\n    if (digits > 3)\n        return \"\
    No\";\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\")\n        return \"No\";\n    if (name.length == 0)\n        return \"No\"\
    ;\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n\
    \        return \"No\";\n    return \"Yes\";\n}\n/*\n    Create a function which\
    \ takes a string representing a file's name, and returns\n    the file's extension.\n\
    \    A file's extension is the substring after the last dot '.' in the file's\
    \ name.\n    If the file's name doesn't contain a dot, the function should return\
    \ an empty string.\n    Examples:\n    >>> file_extension(\"example.txt\")\n \
    \   \"txt\"\n    >>> file_extension(\"example\")\n    \"\"\n*/\nstring file_extension(string\
    \ file_name) \n{\n    int dot_index = file_name.rfind('.');\n    if (dot_index\
    \ == -1)\n        return \"\";\n    return file_name.substr(dot_index+1);\n}\n\
    /*\n    Create a function which takes a string representing a file's name, and\
    \ returns\n    the file's name without the extension.\n    A file's extension\
    \ is the substring after the last dot '.' in the file's name.\n    If the file's\
    \ name doesn't contain a dot, the function should return the same string.\n  \
    \  Examples:\n    >>> file_name_without_extension(\"example.txt\")\n    \"example\"\
    \n    >>> file_name_without_extension(\"example\")\n    \"example\"\n*/\nstring\
    \ file_", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n \
    \   string[] file_name_split = file_name.split(\".\");\n    if (file_name_split.length\
    \ != 2)\n        return \"No\";\n    if (file_name_split[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_split[0].count(\"0\", \"9\") > 3)\n  \
    \      return \"No\";\n    if (file_name_split[0][0] < 'a' || file_name_split[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_split[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 1 && !isalpha(file_name_parts[0][0]))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 1 && !isalpha(file_name_parts[0][0]))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 1 && !isdigit(file_name_parts[0][1]))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 2 && !isdigit(file_name_parts[0][2]))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 3 && !isdigit(file_name_parts[0][3]))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 4)\n        return \"No\";\n    if (file_name_parts[1] != valid_extensions[0]\
    \ && file_name_parts[1] != valid_extensions[1] && file_name_parts[1] != valid_extensions[2])\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (!valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0..dot_index-1];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    string sub_str;\n    string sub_str2;\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n    \
    \    if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n  \
    \      if(c == '.')\n        {\n            dot_count++;\n        }\n    }\n \
    \   if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n  \
    \  while(file_name[i] != '.')\n    {\n        i++;\n    }\n    sub_str = file_name[0..i];\n\
    \    if(sub_str.length == 0 || (sub_str[0] < 'a' || sub_str[0] > 'z') && (sub_str[0]\
    \ < 'A' || sub_str[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    sub_str2\
    \ = file_name[i+1..$];\n    foreach(string s; valid_extensions)\n    {\n     \
    \   if(s == sub_str2)\n        {\n            return \"Yes\";\n        }\n   \
    \ }\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n   \
    \ if (file_name_parts.length != 2)\n        return \"No\";\n    string file_name_part\
    \ = file_name_parts[0];\n    string extension = file_name_parts[1];\n    if (file_name_part.length\
    \ == 0)\n        return \"No\";\n    if (file_name_part.count(\"0\") + file_name_part.count(\"\
    1\") + file_name_part.count(\"2\") + file_name_part.count(\"3\") + file_name_part.count(\"\
    4\") + file_name_part.count(\"5\") + file_name_part.count(\"6\") + file_name_part.count(\"\
    7\") + file_name_part.count(\"8\") + file_name_part.count(\"9\") > 3)\n      \
    \  return \"No\";\n    if (!(file_name_part[0] >= 'a' && file_name_part[0] <=\
    \ 'z' || file_name_part[0] >= 'A' && file_name_part[0] <= 'Z'))\n        return\
    \ \"No\";\n    if (!valid_extensions.contains(extension))\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n \
    \   int i = 0;\n    int j = 0;\n    string temp = \"\";\n    string temp2 = \"\
    \";\n    string result = \"\";\n    while(i < file_name.length)\n    {\n     \
    \   if(file_name[i] == '.')\n        {\n            dot_count++;\n           \
    \ j = i + 1;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        result = \"No\";\n    }\n    else\n \
    \   {\n        temp = file_name[0..j-1];\n        temp2 = file_name[j..$];\n \
    \       if(temp.length == 0 || temp[0] < 'a' || temp[0] > 'z' || temp[0] < 'A'\
    \ || temp[0] > 'Z')\n        {\n            result = \"No\";\n        }\n    \
    \    else if(temp2 != \"txt\" && temp2 != \"exe\" && temp2 != \"dll\")\n     \
    \   {\n            result = \"No\";\n        }\n        else\n        {\n    \
    \        result = \"Yes\";\n        }\n    }\n    return result;\n}\n/*\nCreate\
    \ a function which takes a string representing a file's name, and returns\n  \
    \  the file's extension.\n    The file's extension is the substring after the\
    \ last dot '.' in the file's name.\n    If there is no dot in the file's name,\
    \ return an empty string.\n    Examples:\n    >>> file_extension(\"example.txt\"\
    )\n    \"txt\"\n    >>> file_extension(\"example\")\n    \"\"\n*/\nstring file_extension(string\
    \ file_name) \n{\n    int i = 0;\n    int j = 0;\n    string result = \"\";\n\
    \    while(i < file_name.length)\n    {\n        if(file_name[i] == '.')\n   \
    \     {\n            j = i + 1;\n        }\n        i++;\n", "{\n    int dot_count\
    \ = 0;\n    int digit_count = 0;\n    int first_letter_index = 0;\n    int last_letter_index\
    \ = 0;\n    bool is_valid = true;\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    string extension = \"\";\n    for (int i = 0; i < file_name.length;\
    \ i++)\n    {\n        if (file_name[i] == '.')\n        {\n            dot_count++;\n\
    \            if (dot_count > 1)\n            {\n                is_valid = false;\n\
    \                break;\n            }\n            first_letter_index = i + 1;\n\
    \        }\n        else if (file_name[i] >= '0' && file_name[i] <= '9')\n   \
    \     {\n            digit_count++;\n            if (digit_count > 3)\n      \
    \      {\n                is_valid = false;\n                break;\n        \
    \    }\n        }\n        else if (file_name[i] >= 'a' && file_name[i] <= 'z'\
    \ ||\n                 file_name[i] >= 'A' && file_name[i] <= 'Z')\n        {\n\
    \            last_letter_index = i;\n        }\n    }\n    if (is_valid)\n   \
    \ {\n        if (first_letter_index == 0 || last_letter_index == 0)\n        {\n\
    \            is_valid = false;\n        }\n        else\n        {\n         \
    \   extension = file_name[first_letter_index..last_letter_index + 1];\n      \
    \      if (extension.length == 0 || !valid_extensions.contains(extension))\n \
    \           {\n                is_valid = false;\n            }\n        }\n \
    \   }\n    return is_valid ? \"Yes\" : \"No\";\n}\n/*\nCreate a function which\
    \ takes a string representing a file's name, and returns\n    'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n    A file's name is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9", "{\n    int dot_count\
    \ = 0;\n    int digit_count = 0;\n    int dot_index = 0;\n    string extension\
    \ = \"\";\n    string name = \"\";\n    foreach(i, c; file_name)\n    {\n    \
    \    if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        return\
    \ \"No\";\n    }\n    name = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n\
    \    if(name.length == 0 || name[0] < 'a' || name[0] > 'z' || name[0] < 'A' ||\
    \ name[0] > 'Z')\n    {\n        return \"No\";\n    }\n    if(extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n    \
    \    return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string before_dot = file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    if (before_dot.length == 0)\n        return \"No\";\n    if (before_dot.count('0'..'9')\
    \ > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z' && before_dot[0] < 'A' || before_dot[0] > 'Z')\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find(\"\
    .\");\n    if (dot_pos == -1)\n        return \"No\";\n    string before_dot =\
    \ file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n  \
    \  if (before_dot.length == 0)\n        return \"No\";\n    if (before_dot.count(\"\
    0123456789\") > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot\
    \ != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        if (before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n            return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    string file_name_part = file_name_parts[0];\n    string file_extension\
    \ = file_name_parts[1];\n    if (file_name_part.length == 0)\n        return \"\
    No\";\n    if (file_name_part.count(\"0\") + file_name_part.count(\"1\") + file_name_part.count(\"\
    2\") + file_name_part.count(\"3\") + file_name_part.count(\"4\") + file_name_part.count(\"\
    5\") + file_name_part.count(\"6\") + file_name_part.count(\"7\") + file_name_part.count(\"\
    8\") + file_name_part.count(\"9\") > 3)\n        return \"No\";\n    if (file_name_part[0]\
    \ < 'a' || file_name_part[0] > 'z')\n        return \"No\";\n    if (file_name_part[0]\
    \ < 'A' || file_name_part[0] > 'Z')\n        return \"No\";\n    if (valid_extensions.count(file_extension)\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digit_count = 0;\n    foreach(c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(digit_count\
    \ > 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext;\
    \ valid_extensions)\n    {\n        if(ext == extension)\n            return \"\
    Yes\";\n    }\n    return \"No\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string extension = file_name.slice(dot_pos\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    string name = file_name.slice(0, dot_pos);\n\
    \    if (name.length == 0)\n        return \"No\";\n    int digit_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n           \
    \ digit_count++;\n        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c\
    \ <= 'Z'))\n            return \"No\";\n    }\n    if (digit_count > 3)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    import std.algorithm : count;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : startsWith;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.count('0','9')\
    \ > 3)\n        return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] >\
    \ 'z')\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n       \
    \ return \"No\";\n    string name = file_name[0..dot_index];\n    string extension\
    \ = file_name[dot_index+1..$];\n    if (name.length == 0 || !(name[0] >= 'a' &&\
    \ name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\"\
    ;\n    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    int count = 0;\n    foreach (c; name)\n       \
    \ if (c >= '0' && c <= '9')\n            count++;\n    if (count > 3)\n      \
    \  return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a\
    \ string representing a file's name, and returns\n    'Yes' if the the file's\
    \ name is valid, and returns 'No' otherwise.\n    A file's name is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \    - The file's name contains exactly one dot '.'\n    - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n    the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check_2(string file_name) \n{\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string name = file_name[0..dot_index];\n    string extension = file_name[dot_index+1..$];\n\
    \    if (name.length == 0 || !(", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z'\
    \ || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(string\
    \ s; valid_extensions)\n    {\n        if(s == extension)\n            return\
    \ \"Yes\";\n    }\n    return \"No\";\n}", "{\n    int dot_count = 0;\n    int\
    \ digit_count = 0;\n    int letter_count = 0;\n    string extension;\n    string\
    \ name;\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n       \
    \ {\n            dot_count++;\n            extension = file_name[$-3..$];\n  \
    \      }\n        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n        else if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n\
    \        {\n            letter_count++;\n        }\n    }\n    name = file_name[0..$-4];\n\
    \    if(dot_count == 1 && digit_count <= 3 && letter_count > 0 && (extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\"))\n    {\n        return\
    \ \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}", "{\n  \
    \  int count = 0;\n    int dot_count = 0;\n    string extension = \"\";\n    string\
    \ name = \"\";\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            continue;\n        }\n     \
    \   if(dot_count == 0)\n        {\n            name ~= c;\n        }\n       \
    \ else\n        {\n            extension ~= c;\n        }\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z') || !(name[0] >= 'A' && name[0] <= 'Z') || !(extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\"))\n    {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n   \
    \ int dot_index = 0;\n    int dot_index_end = 0;\n    int dot_index_start = 0;\n\
    \    string file_name_start;\n    string file_name_end;\n    string file_name_end_check;\n\
    \    string file_name_start_check;\n    string file_name_end_check_1;\n    string\
    \ file_name_end_check_2;\n    string file_name_end_check_3;\n    string file_name_end_check_4;\n\
    \    string file_name_end_check_5;\n    string file_name_end_check_6;\n    string\
    \ file_name_end_check_7;\n    string file_name_end_check_8;\n    string file_name_end_check_9;\n\
    \    string file_name_end_check_10;\n    string file_name_end_check_11;\n    string\
    \ file_name_end_check_12;\n    string file_name_end_check_13;\n    string file_name_end_check_14;\n\
    \    string file_name_end_check_15;\n    string file_name_end_check_16;\n    string\
    \ file_name_end_check_17;\n    string file_name_end_check_18;\n    string file_name_end_check_19;\n\
    \    string file_name_end_check_20;\n    string file_name_end_check_21;\n    string\
    \ file_name_end_check_22;\n    string file_name_end_check_23;\n    string file_name_end_check_24;\n\
    \    string file_name_end_check_25;\n    string file_name_end_check_26;\n    string\
    \ file_name_end_check_27;\n    string file_name_end_check_28;\n    string file_name_end_check_29;\n\
    \    string file_name_end_check_30;\n    string file_name_end_check_31;\n    string\
    \ file_name_end_check_32;\n    string file_name_", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    if(extension.length == 0 || !valid_extensions.canFind(extension))\n     \
    \   return \"No\";\n    if(name.length == 0 || !isAlpha(name[0]))\n        return\
    \ \"No\";\n    if(name.count(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"\
    8\",\"9\") > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int number_of_digits = 0;\n    foreach(char c; name)\n    {\n\
    \        if(c >= '0' && c <= '9')\n            number_of_digits++;\n    }\n  \
    \  return (number_of_digits <= 3 && dot_index != -1 && \n            name.length\
    \ > 0 && name[0] >= 'a' && name[0] <= 'z' && \n            valid_extensions.find(extension)\
    \ != -1) ? \"Yes\" : \"No\";\n}", "{\n    int count = 0;\n    int dot_index =\
    \ 0;\n    int dot_count = 0;\n    string extension = \"\";\n    string name =\
    \ \"\";\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n\
    \            dot_index = i;\n            dot_count++;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    name\
    \ = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n   \
    \ if(name.length == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A' ||\
    \ name[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (!isalpha(name[0]))\n\
    \        return \"No\";\n    int digits = 0;\n    foreach (c; name)\n    {\n \
    \       if (isdigit(c))\n            digits++;\n    }\n    if (digits > 3)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    if(file_name.count('.')\
    \ != 1)\n        return \"No\";\n    string[] parts = file_name.split('.');\n\
    \    if(parts[0].length == 0 || parts[1].length == 0)\n        return \"No\";\n\
    \    if(parts[0].count('0') + parts[0].count('1') + parts[0].count('2') + parts[0].count('3')\
    \ + parts[0].count('4') + parts[0].count('5') + parts[0].count('6') + parts[0].count('7')\
    \ + parts[0].count('8') + parts[0].count('9') > 3)\n        return \"No\";\n \
    \   if(parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n  \
    \      return \"No\";\n    if(parts[0][0] < 'a' || parts[0][0] > 'z' && parts[0][0]\
    \ < 'A' || parts[0][0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int dot_index = 0;\n \
    \   int extension_index = 0;\n    string extension = \"\";\n    string name =\
    \ \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(int\
    \ i, char c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            digit_count++;\n        }\n    }\n    if(dot_count != 1 ||\
    \ digit_count > 3)\n    {\n        return \"No\";\n    }\n    extension_index\
    \ = dot_index + 1;\n    extension = file_name[extension_index..$];\n    if(extension\
    \ !in valid_extensions)\n    {\n        return \"No\";\n    }\n    name = file_name[0..dot_index];\n\
    \    if(name.length == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A'\
    \ || name[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n           \
    \ digits_count++;\n    }\n    if(digits_count > 3)\n        return \"No\";\n \
    \   if(dot_index == -1)\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0', '9') >\
    \ 3)\n        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    int letter_count = 0;\n    int letter_index = 0;\n\
    \    bool is_valid = true;\n    string extension = \"\";\n    string prefix =\
    \ \"\";\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            letter_index = i;\n        }\n        else\
    \ if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n        }\n\
    \        else if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n        {\n\
    \            letter_count++;\n        }\n    }\n    if(dot_count != 1 || digit_count\
    \ > 3 || letter_count == 0)\n    {\n        is_valid = false;\n    }\n    else\n\
    \    {\n        prefix = file_name[0..letter_index];\n        extension = file_name[letter_index+1..$];\n\
    \        if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        {\n            is_valid = false;\n        }\n    }\n    return is_valid\
    \ ? \"Yes\" : \"No\";\n}", "{\n    int dot_index = file_name.find('.');\n    if\
    \ (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string ext = file_name[dot_index+1..$];\n    if (name.length == 0 || !(name[0]\
    \ >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n     \
    \   return \"No\";\n    int num_digits = 0;\n    foreach (c; name)\n        if\
    \ (c >= '0' && c <= '9')\n            num_digits++;\n    if (num_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find(\"\
    .\");\n    if (dot_pos == -1)\n        return \"No\";\n    string before_dot =\
    \ file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n  \
    \  if (before_dot.length == 0 || before_dot.length > 8)\n        return \"No\"\
    ;\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"\
    )\n        return \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            num_digits++;\n       \
    \ else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n            return\
    \ \"No\";\n    }\n    if (num_digits > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int num_digits = 0;\n    foreach(char\
    \ c; name)\n    {\n        if(c >= '0' && c <= '9')\n            num_digits++;\n\
    \    }\n    if(num_digits > 3)\n        return \"No\";\n    if(!(name[0] >= 'a'\
    \ && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"\
    No\";\n    if(!valid_extensions.canFind(extension))\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    int dot_index = file_name.find(\".\");\n   \
    \ if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n\
    \            digits_count++;\n    }\n    if (digits_count > 3)\n        return\
    \ \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    auto dot_index = file_name.find(\".\");\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    auto extension = file_name[dot_index + 1\
    \ .. $];\n    if (valid_extensions.count(extension) == 0)\n        return \"No\"\
    ;\n    auto name = file_name[0 .. dot_index];\n    if (name.count(\"0\" .. \"\
    9\") > 3)\n        return \"No\";\n    if (name.length == 0)\n        return \"\
    No\";\n    if (name[0] < \"a\" || name[0] > \"z\" && name[0] < \"A\" || name[0]\
    \ > \"Z\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = split(file_name, \".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    string file_name_part = file_name_parts[0];\n    string file_extension\
    \ = file_name_parts[1];\n    if (file_name_part.length == 0)\n        return \"\
    No\";\n    if (file_name_part.length > 3)\n        return \"No\";\n    if (file_name_part.length\
    \ == 3)\n    {\n        if (!isDigit(file_name_part[0]) || !isDigit(file_name_part[1])\
    \ || !isDigit(file_name_part[2]))\n            return \"No\";\n    }\n    if (file_name_part.length\
    \ == 2)\n    {\n        if (!isDigit(file_name_part[0]) || !isDigit(file_name_part[1]))\n\
    \            return \"No\";\n    }\n    if (file_name_part.length == 1)\n    {\n\
    \        if (!isDigit(file_name_part[0]))\n            return \"No\";\n    }\n\
    \    if (!isAlpha(file_name_part[0]))\n        return \"No\";\n    if (!valid_extensions.contains(file_extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digit_count = 0;\n    foreach(char c; name)\n    {\n  \
    \      if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(digit_count\
    \ > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    string file_name_part = file_name_parts[0];\n    string extension\
    \ = file_name_parts[1];\n    if (file_name_part.length == 0 || !file_name_part[0].isAlpha)\n\
    \        return \"No\";\n    if (valid_extensions.count(extension) == 0)\n   \
    \     return \"No\";\n    if (file_name_part.count!(c => c.isDigit) > 3)\n   \
    \     return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    string sub_string_before_dot = \"\
    \";\n    string sub_string_after_dot = \"\";\n    foreach(i, c; file_name)\n \
    \   {\n        if(c == '.')\n        {\n            dot_count++;\n           \
    \ dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n   \
    \         count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n  \
    \  {\n        return \"No\";\n    }\n    sub_string_before_dot = file_name[0..dot_index];\n\
    \    sub_string_after_dot = file_name[dot_index + 1..$];\n    if(sub_string_before_dot\
    \ == \"\" || !(sub_string_before_dot[0] >= 'a' && sub_string_before_dot[0] <=\
    \ 'z') && !(sub_string_before_dot[0] >= 'A' && sub_string_before_dot[0] <= 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(sub_string_after_dot != \"txt\"\
    \ && sub_string_after_dot != \"exe\" && sub_string_after_dot != \"dll\")\n   \
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string sub_str = file_name[0..dot_index];\n    if (sub_str.length == 0)\n\
    \        return \"No\";\n    if (sub_str.length > 3)\n        return \"No\";\n\
    \    if (sub_str[0] < 'a' || sub_str[0] > 'z')\n        return \"No\";\n    sub_str\
    \ = file_name[dot_index+1..$];\n    if (sub_str != \"txt\" && sub_str != \"exe\"\
    \ && sub_str != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find(\".\");\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    import std.algorithm : count;\n  \
    \  import std.conv : to;\n    import std.array : array;\n    import std.range\
    \ : take, drop;\n    import std.string : split;\n    import std.ascii : isAlpha;\n\
    \    import std.range : take, drop;\n    import std.array : array;\n    import\
    \ std.algorithm : count;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.ascii : isAlpha;\n    import std.range : take, drop;\n    import\
    \ std.array : array;\n    import std.algorithm : count;\n    import std.conv :\
    \ to;\n    import std.string : split;\n    import std.ascii : isAlpha;\n    import\
    \ std.range : take, drop;\n    import std.array : array;\n    import std.algorithm\
    \ : count;\n    import std.conv : to;\n    import std.string : split;\n    import\
    \ std.ascii : isAlpha;\n    import std.range : take, drop;\n    import std.array\
    \ : array;\n    import std.algorithm : count;\n    import std.conv : to;\n   \
    \ import std.string : split;\n    import std.ascii : isAlpha;\n    import std.range\
    \ : take, drop;\n    import std.array : array;\n    import std.algorithm : count;\n\
    \    import std.conv : to;\n    import std.string : split;\n    import std.ascii\
    \ : isAlpha;\n    import std.range : take, drop;\n    import std.array : array;\n\
    \    import std.algorithm : count;\n    import std.conv : to;\n    import std.string\
    \ : split;\n    import std.ascii : isAlpha;\n    import std.range : take, drop;\n\
    \    import std.array : array;\n    import std.algorithm : count;\n    import\
    \ std.conv : to;\n    import std.string : split;\n    import std.ascii : isAlpha;\n\
    \    import std.range : take, drop;\n    import std.array : array;\n    import\
    \ std.algorithm : count;", "{\n    // your code here\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1) return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0) return \"No\";\n    if (after_dot.length == 0) return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n\
    \    if (before_dot.length > 3) return \"No\";\n    if (before_dot[0] < 'A' ||\
    \ before_dot[0] > 'z') return \"No\";\n    if (before_dot[0] > 'Z' && before_dot[0]\
    \ < 'a') return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_index = 0;\n    string file_extension = \"\";\n    foreach(i, c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_index = i;\n        \
    \    break;\n        }\n    }\n    file_extension = file_name[dot_index+1..$];\n\
    \    if(file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    foreach(i, c; file_name[0..dot_index-1])\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n    }\n    if(count > 3)\n    {\n        return \"No\";\n    }\n   \
    \ if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}", "{\n    // TODO: implement this function\n  \
    \  auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto dot_pos_next = file_name.find('.', dot_pos + 1);\n    if (dot_pos_next\
    \ != -1)\n        return \"No\";\n    auto dot_pos_prev = file_name.find('.',\
    \ 0, dot_pos);\n    if (dot_pos_prev != -1)\n        return \"No\";\n    auto\
    \ digits_count = 0;\n    foreach (i, c; file_name)\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            digits_count++;\n    }\n    if (digits_count > 3)\n\
    \        return \"No\";\n    auto extension = file_name.slice(dot_pos + 1);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    auto name = file_name.slice(0, dot_pos);\n    if\
    \ (name.empty)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z'\
    \ && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index =\
    \ file_name.find('.');\n    string extension = file_name.substr(dot_index + 1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n    foreach(char\
    \ c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n \
    \   }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n    string\
    \ file_name_without_ext = file_name.substr(0, dot_pos);\n    string ext = file_name.substr(dot_pos\
    \ + 1);\n    int digits_count = 0;\n    foreach(c; file_name_without_ext)\n  \
    \  {\n        if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n \
    \   if(digits_count > 3)\n        return \"No\";\n    if(!(file_name_without_ext[0]\
    \ >= 'a' && file_name_without_ext[0] <= 'z') &&\n       !(file_name_without_ext[0]\
    \ >= 'A' && file_name_without_ext[0] <= 'Z'))\n        return \"No\";\n    if(ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || !isalpha(before_dot[0]))\n        return \"No\";\n    if (after_dot.length\
    \ == 0 || after_dot.length > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (isdigit(c))\n            num_digits++;\n    }\n    if (num_digits > 3)\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(!name.length)\n        return \"No\";\n    if(!name[0].isLetter)\n\
    \        return \"No\";\n    if(!valid_extensions.canFind(extension))\n      \
    \  return \"No\";\n    return \"Yes\";\n}", "{\n    if (file_name.count('.') !=\
    \ 1)\n        return \"No\";\n    string[] parts = file_name.split('.');\n   \
    \ if (parts[0].length == 0 || parts[1].length == 0)\n        return \"No\";\n\
    \    if (parts[0].count('0', '9') > 3)\n        return \"No\";\n    if (parts[1]\
    \ != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n        return \"\
    No\";\n    if (parts[0].count('a', 'z') == 0 && parts[0].count('A', 'Z') == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    string sub_str;\n    string\
    \ sub_str2;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n  \
    \  foreach(i; 0..file_name.length)\n    {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    sub_str = file_name[0..dot_index];\n    sub_str2 = file_name[dot_index+1..$];\n\
    \    if(sub_str.length == 0 || (sub_str[0] < 'a' || sub_str[0] > 'z') && (sub_str[0]\
    \ < 'A' || sub_str[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(valid_extensions.canFind(sub_str2)\
    \ == false)\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].count(\"0123456789\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string\
    \ representing a file's name, and returns\n    the file's extension.\n    A file's\
    \ extension is the substring after the last dot '.' in the file's name.\n    Examples:\n\
    \    >>> file_extension(\"example.txt\")\n    \"txt\"\n    >>> file_extension(\"\
    example.exe\")\n    \"exe\"\n*/\nstring file_extension(string file_name) \n{\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    return file_name_parts[file_name_parts.length\
    \ - 1];\n}\n/*\nCreate a function which takes a string representing a file's name,\
    \ and returns\n    the file's name without its extension.\n    The file's name\
    \ without its extension is the substring before the last dot '.' \n    in the\
    \ file's name.\n    Examples:\n    >>> file_name_without_extension(\"example.txt\"\
    )\n    \"example\"\n    >>> file_name_without_extension(\"example.exe\")\n   \
    \ \"example\"\n*/\nstring file_name_without_extension(string file_name) \n{\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    return file_name_parts[file_name_parts.length\
    \ - 2];\n}\n/*\nCreate a function which takes a string representing a file's name,\
    \ and returns\n    the file's", "{\n    int count = 0;\n    int dot_index = 0;\n\
    \    int dot_count = 0;\n    string extension = \"\";\n    string name = \"\"\
    ;\n    foreach(i, c; file_name)\n    {\n        if(isDigit(c))\n        {\n  \
    \          count++;\n        }\n        if(c == '.')\n        {\n            dot_index\
    \ = i;\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n        extension\
    \ = file_name[dot_index+1..$];\n        name = file_name[0..dot_index-1];\n  \
    \      if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        {\n            return \"No\";\n        }\n        else if(name == \"\
    \")\n        {\n            return \"No\";\n        }\n        else if(!isAlpha(name[0]))\n\
    \        {\n            return \"No\";\n        }\n        else\n        {\n \
    \           return \"Yes\";\n        }\n    }\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    auto dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    auto name = file_name[0 .. dot_index];\n    if (name.length\
    \ == 0 || !name[0].isAlpha)\n        return \"No\";\n    if (name.count!(c =>\
    \ c.isDigit) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int\
    \ dot_count = 0;\n    int digit_count = 0;\n    int index = 0;\n    int dot_index\
    \ = 0;\n    string extension = \"\";\n    string result = \"\";\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = index;\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            digit_count++;\n        }\n        index++;\n    }\n \
    \   if(dot_count != 1)\n    {\n        return \"No\";\n    }\n    if(digit_count\
    \ > 3)\n    {\n        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z')\n    {\n        if(file_name[0] < 'A' || file_name[0] > 'Z')\n      \
    \  {\n            return \"No\";\n        }\n    }\n    extension = file_name[dot_index+1..$];\n\
    \    if(extension == \"txt\" || extension == \"exe\" || extension == \"dll\")\n\
    \    {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0\") + file_name_parts[0].count(\"1\") + file_name_parts[0].count(\"\
    2\") + file_name_parts[0].count(\"3\") + file_name_parts[0].count(\"4\") + file_name_parts[0].count(\"\
    5\") + file_name_parts[0].count(\"6\") + file_name_parts[0].count(\"7\") + file_name_parts[0].count(\"\
    8\") + file_name_parts[0].count(\"9\") > 3)\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z')\n        return \"No\";\n    if (file_name_parts[1]\
    \ != valid_extensions[0] && file_name_parts[1] != valid_extensions[1] && file_name_parts[1]\
    \ != valid_extensions[2])\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int count = 0;\n    int dot = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_2 = 0;\n    int dot_index_3 = 0;\n    int dot_index_4\
    \ = 0;\n    int dot_index_5 = 0;\n    int dot_index_6 = 0;\n    int dot_index_7\
    \ = 0;\n    int dot_index_8 = 0;\n    int dot_index_9 = 0;\n    int dot_index_10\
    \ = 0;\n    int dot_index_11 = 0;\n    int dot_index_12 = 0;\n    int dot_index_13\
    \ = 0;\n    int dot_index_14 = 0;\n    int dot_index_15 = 0;\n    int dot_index_16\
    \ = 0;\n    int dot_index_17 = 0;\n    int dot_index_18 = 0;\n    int dot_index_19\
    \ = 0;\n    int dot_index_20 = 0;\n    int dot_index_21 = 0;\n    int dot_index_22\
    \ = 0;\n    int dot_index_23 = 0;\n    int dot_index_24 = 0;\n    int dot_index_25\
    \ = 0;\n    int dot_index_26 = 0;\n    int dot_index_27 = 0;\n    int dot_index_28\
    \ = 0;\n    int dot_index_29 = 0;\n    int dot_index_30 = 0;\n    int dot_index_31\
    \ = 0;\n    int dot_index_32 = 0;\n    int dot_index_33 = 0;\n    int dot_index_34\
    \ = 0;\n    int dot_index_35 = 0;\n    int dot_index_36 = 0;\n    int dot_index_37\
    \ = 0;\n    int dot_index_38 = 0;\n    int dot_index_39 = 0;\n    int dot_index_40\
    \ = 0;\n    int dot_index_41 = 0;\n    int dot_index_42 = 0;\n    int dot_index_43\
    \ = 0;\n    int dot_index_44 = 0;\n    int dot_index_45 = 0;\n    int", "{\n \
    \   int dot_index = file_name.find(\".\");\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.canFind(extension))\n    \
    \    return \"No\";\n    auto name = file_name[0..dot_index];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    if (name.count!(c =>\
    \ isDigit(c)) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digit_count\
    \ = 0;\n    foreach (c; name)\n        if (isDigit(c))\n            digit_count++;\n\
    \    if (digit_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0\", \"9\") > 3)\n        return \"No\";\n\
    \    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n       \
    \ return \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length == dot_pos)\n        return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot)\n    {\n     \
    \   if (c >= '0' && c <= '9')\n            num_digits++;\n    }\n    if (num_digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   if (dot_index == 0)\n        return \"No\";\n    if (dot_index == file_name.length\
    \ - 1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    string name = file_name[0..dot_index-1];\n    if\
    \ (name.length == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n   \
    \     return \"No\";\n    int num_digits = 0;\n    foreach (c; name)\n    {\n\
    \        if (isDigit(c))\n            num_digits++;\n    }\n    if (num_digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    string sub1 = \"\";\n    string sub2 = \"\";\n    string[] valid_ext = [\"\
    txt\", \"exe\", \"dll\"];\n    foreach(i; 0..len)\n    {\n        if(file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n\
    \            count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    sub1 = file_name[0..dot_index];\n \
    \   sub2 = file_name[dot_index+1..len];\n    if(sub1.length == 0 || sub1[0] <\
    \ 'a' || sub1[0] > 'z' || sub1[0] < 'A' || sub1[0] > 'Z')\n    {\n        return\
    \ \"No\";\n    }\n    if(sub2 != valid_ext[0] && sub2 != valid_ext[1] && sub2\
    \ != valid_ext[2])\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n     \
    \   return \"No\";\n    string ext = file_name.substr(dot_pos + 1);\n    if (ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  string name = file_name.substr(0, dot_pos);\n    if (name.length == 0)\n  \
    \      return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    int num_digits = 0;\n    foreach\
    \ (char c; name)\n    {\n        if (c >= '0' && c <= '9')\n            num_digits++;\n\
    \    }\n    if (num_digits > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2) return \"No\";\n    if (file_name_parts[0].length == 0) return \"No\";\n\
    \    if (file_name_parts[0].count(\"0-9\") > 3) return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    // TODO: Implement me\n   \
    \ int dot_count = 0;\n    int digit_count = 0;\n    int i = 0;\n    int len =\
    \ file_name.length;\n    if (len <= 0)\n        return \"No\";\n    for (i = 0;\
    \ i < len; i++)\n    {\n        if (file_name[i] == '.')\n        {\n        \
    \    dot_count++;\n            if (dot_count > 1)\n                return \"No\"\
    ;\n        }\n        else if (file_name[i] >= '0' && file_name[i] <= '9')\n \
    \       {\n            digit_count++;\n            if (digit_count > 3)\n    \
    \            return \"No\";\n        }\n    }\n    if (dot_count != 1)\n     \
    \   return \"No\";\n    string[] str_arr = file_name.split(\".\");\n    if (str_arr.length\
    \ != 2)\n        return \"No\";\n    if (str_arr[0].length <= 0)\n        return\
    \ \"No\";\n    if (str_arr[0][0] < 'a' || str_arr[0][0] > 'z')\n        return\
    \ \"No\";\n    if (str_arr[1] != \"txt\" && str_arr[1] != \"exe\" && str_arr[1]\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split\
    \ = file_name.split(\".\");\n    if (file_name_split.length != 2)\n        return\
    \ \"No\";\n    if (file_name_split[0].length == 0)\n        return \"No\";\n \
    \   if (!(file_name_split[0][0] >= 'a' && file_name_split[0][0] <= 'z') &&\n \
    \       !(file_name_split[0][0] >= 'A' && file_name_split[0][0] <= 'Z'))\n   \
    \     return \"No\";\n    if (file_name_split[0].count(\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\") > 3)\n        return \"No\";\n\
    \    if (!valid_extensions.contains(file_name_split[1]))\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot = 0;\n    int\
    \ dot_index = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l =\
    \ 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n\
    \    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n\
    \    int K = 0;\n    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n\
    \    int P = 0;\n    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n\
    \    int U = 0;\n    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n\
    \    int Z = 0;\n    int zero = 0;\n    int one = 0;\n    int two = 0;\n    int\
    \ three = 0;\n    int four = 0;\n    int five = 0;\n    int six = 0;\n    int\
    \ seven = 0;\n    int eight = 0;\n    int nine = 0;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot++;\n            dot_index\
    \ = i;\n        }\n        if(c == '0')\n        {\n            zero++;\n    \
    \    }\n        if(c == '1')\n        {\n            one++;\n        }\n     \
    \   if(c == '2')\n        {\n            two++;\n        }\n        if(c == '3')\n",
  "{\n    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index+1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n    foreach(c;\
    \ name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n\
    \    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int letter_count\
    \ = 0;\n    string extension = \"\";\n    string name = \"\";\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            extension = file_name[$-3..$];\n        }\n        else if(c >= '0'\
    \ && c <= '9')\n        {\n            digit_count++;\n        }\n        else\
    \ if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n        {\n          \
    \  letter_count++;\n        }\n    }\n    if(dot_count != 1 || digit_count > 3\
    \ || letter_count == 0)\n    {\n        return \"No\";\n    }\n    else if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n       \
    \ return \"No\";\n    }\n    else\n    {\n        return \"Yes\";\n    }\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_2 = 0;\n    int dot_index_3\
    \ = 0;\n    int dot_index_4 = 0;\n    int dot_index_5 = 0;\n    int dot_index_6\
    \ = 0;\n    int dot_index_7 = 0;\n    int dot_index_8 = 0;\n    int dot_index_9\
    \ = 0;\n    int dot_index_10 = 0;\n    int dot_index_11 = 0;\n    int dot_index_12\
    \ = 0;\n    int dot_index_13 = 0;\n    int dot_index_14 = 0;\n    int dot_index_15\
    \ = 0;\n    int dot_index_16 = 0;\n    int dot_index_17 = 0;\n    int dot_index_18\
    \ = 0;\n    int dot_index_19 = 0;\n    int dot_index_20 = 0;\n    int dot_index_21\
    \ = 0;\n    int dot_index_22 = 0;\n    int dot_index_23 = 0;\n    int dot_index_24\
    \ = 0;\n    int dot_index_25 = 0;\n    int dot_index_26 = 0;\n    int dot_index_27\
    \ = 0;\n    int dot_index_28 = 0;\n    int dot_index_29 = 0;\n    int dot_index_30\
    \ = 0;\n    int dot_index_31 = 0;\n    int dot_index_32 = 0;\n    int dot_index_33\
    \ = 0;\n    int dot_index_34 = 0;\n    int dot_index_35 = 0;\n    int dot_index_36\
    \ = 0;\n    int dot_index_37 = 0;\n    int dot_index_38 = 0;\n    int dot_index_39\
    \ = 0;\n    int dot_index_40 = 0;\n    int dot_index_41 = 0;\n    int dot_index_42\
    \ = 0;\n    int dot_index_43 = 0;\n    int dot_index_44 = 0;\n    int dot_index_45\
    \ = 0;\n", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    string extension = file_name[dot_index + 1 .. $];\n   \
    \ if (extension.length == 0 || !valid_extensions.canFind(extension))\n       \
    \ return \"No\";\n    string file_name_without_extension = file_name[0 .. dot_index\
    \ - 1];\n    if (file_name_without_extension.length == 0)\n        return \"No\"\
    ;\n    if (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z')\n        return \"No\";\n    int digit_count = 0;\n    foreach (i, c;\
    \ file_name_without_extension)\n    {\n        if (c >= '0' && c <= '9')\n   \
    \         digit_count++;\n    }\n    if (digit_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension =\
    \ file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3 || dot_index\
    \ == -1 || name.length == 0 || name[0] < 'A' || name[0] > 'z' || !valid_extensions.contains(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find(\"\
    .\");\n    if (dot_pos == -1)\n        return \"No\";\n    string prefix = file_name[0..dot_pos];\n\
    \    string suffix = file_name[dot_pos+1..$];\n    if (prefix.length == 0)\n \
    \       return \"No\";\n    if (prefix.count(\"0123456789\") > 3)\n        return\
    \ \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    )\n        return \"No\";\n    if (!isAlpha(prefix[0]))\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension =\
    \ file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3 || dot_index\
    \ == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >=\
    \ 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext; valid_extensions)\n\
    \    {\n        if(ext == extension)\n            return \"Yes\";\n    }\n   \
    \ return \"No\";\n}", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot != \"\
    txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\"\
    ;\n    if (before_dot.count!(c => c >= '0' && c <= '9') > 3)\n        return \"\
    No\";\n    if (!(before_dot[0] >= 'a' && before_dot[0] <= 'z' || before_dot[0]\
    \ >= 'A' && before_dot[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    string extension = file_name[dot_index + 1 .. $];\n    if (extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0 .. dot_index];\n    if (name.length == 0 || !isAlpha(name[0]))\n\
    \        return \"No\";\n    int digit_count = 0;\n    foreach (c; name)\n   \
    \     if (isDigit(c))\n            digit_count++;\n    if (digit_count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot != \"\
    txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\"\
    ;\n    if (before_dot.count!(a => a.isDigit) > 3)\n        return \"No\";\n  \
    \  if (!before_dot[0].isLetter)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.range;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.regex;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.regex;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.regex;\n    import\
    \ std.stdio;\n    import std.typecons;\n    import std.math;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.regex;\n    import std.stdio;\n    import std.typecons;\n    import std.math;\n\
    \    import std.regex;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.regex;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.regex;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.regex;\n    import\
    \ std.stdio;\n    import std.typecons;\n    import std.math;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.regex;\n    import std.stdio;\n    import std.typecons;\n    import std.math;\n\
    \    import std.regex;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.regex;\n    import std.stdio;\n    import std.typecons;\n",
  "{\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n       \
    \ return \"No\";\n    string before_dot = file_name[0..dot_index];\n    string\
    \ after_dot = file_name[dot_index+1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ > 8)\n        return \"No\";\n    if (after_dot.length == 0 || after_dot.length\
    \ > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    if (before_dot.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    if (!(before_dot[0]\
    \ >= 'a' && before_dot[0] <= 'z') && !(before_dot[0] >= 'A' && before_dot[0] <=\
    \ 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_count = 0;\n    int i = 0;\n    string extension = \"\";\n \
    \   string name = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"\
    dll\"];\n    foreach(char c; file_name)\n    {\n        if(isDigit(c))\n     \
    \   {\n            count++;\n        }\n        if(c == '.')\n        {\n    \
    \        dot_count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    foreach(char c; file_name)\n    {\n\
    \        if(c == '.')\n        {\n            break;\n        }\n        name\
    \ ~= c;\n        i++;\n    }\n    if(name.length == 0 || !isAlpha(name[0]))\n\
    \    {\n        return \"No\";\n    }\n    for(int j = i + 1; j < file_name.length;\
    \ j++)\n    {\n        extension ~= file_name[j];\n    }\n    if(!valid_extensions.contains(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is\
    \ considered to be valid if and only if all the following conditions \n    are\
    \ met:\n    - There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    - The file's name contains exactly one dot '.'\n    - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file", "{\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n        if (isDigit(c))\n            digits_count++;\n\
    \    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] splitted_file_name\
    \ = file_name.split(\".\");\n    if (splitted_file_name.length != 2)\n       \
    \ return \"No\";\n    if (splitted_file_name[0].length == 0)\n        return \"\
    No\";\n    if (splitted_file_name[0].count(\"0\", \"9\") > 3)\n        return\
    \ \"No\";\n    if (!valid_extensions.canFind(splitted_file_name[1]))\n       \
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string file_name_without_ext = file_name.substr(0, dot_pos);\n    string\
    \ file_ext = file_name.substr(dot_pos + 1);\n    if (file_name_without_ext.length\
    \ == 0)\n        return \"No\";\n    if (file_name_without_ext.length > 3)\n \
    \       return \"No\";\n    if (file_ext != \"txt\" && file_ext != \"exe\" &&\
    \ file_ext != \"dll\")\n        return \"No\";\n    if (file_name_without_ext.find('0')\
    \ != -1 ||\n        file_name_without_ext.find('1') != -1 ||\n        file_name_without_ext.find('2')\
    \ != -1 ||\n        file_name_without_ext.find('3') != -1 ||\n        file_name_without_ext.find('4')\
    \ != -1 ||\n        file_name_without_ext.find('5') != -1 ||\n        file_name_without_ext.find('6')\
    \ != -1 ||\n        file_name_without_ext.find('7') != -1 ||\n        file_name_without_ext.find('8')\
    \ != -1 ||\n        file_name_without_ext.find('9') != -1)\n        return \"\
    No\";\n    if (file_name_without_ext.find('a') == -1 &&\n        file_name_without_ext.find('b')\
    \ == -1 &&\n        file_name_without_ext.find('c') == -1 &&\n        file_name_without_ext.find('d')\
    \ == -1 &&\n        file_name_without_ext.find('e') == -1 &&\n        file_name_without_ext.find('f')\
    \ == -1 &&\n        file_name_without_ext.find('g') == -1 &&\n        file_name_without_ext.find('h')\
    \ == -1 &&\n        file_name_without_ext.find('i') == -1 &&\n        file_name_without_ext.find('j')\
    \ == -1 &&\n        file_", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (valid_extensions.indexOf(extension) == -1)\n        return \"\
    No\";\n    string name = file_name.substr(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digit_count = 0;\n\
    \    foreach (c; name)\n        if (c >= '0' && c <= '9')\n            digit_count++;\n\
    \    if (digit_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(name[0] <\
    \ 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int extension_index = 0;\n \
    \   string extension = \"\";\n    string file_name_without_extension = \"\";\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    extension_index = dot_index\
    \ + 1;\n    extension = file_name[extension_index..$];\n    if(extension !in valid_extensions)\n\
    \    {\n        return \"No\";\n    }\n    file_name_without_extension = file_name[0..dot_index-1];\n\
    \    if(file_name_without_extension.length == 0)\n    {\n        return \"No\"\
    ;\n    }\n    if(!isAlpha(file_name_without_extension[0]))\n    {\n        return\
    \ \"No\";\n    }\n    foreach(char c; file_name_without_extension)\n    {\n  \
    \      if(isDigit(c))\n        {\n            return \"No\";\n        }\n    }\n\
    \    return \"Yes\";\n}", "{\n    int dot_position = file_name.find('.');\n  \
    \  string extension = file_name.substr(dot_position+1);\n    string name = file_name.substr(0,\
    \ dot_position);\n    int digit_count = 0;\n    foreach(char c; name)\n    {\n\
    \        if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(digit_count\
    \ > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_index = file_name.find('.');\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    string file_name_extension = file_name.substr(dot_index\
    \ + 1);\n    int digits_count = 0;\n    foreach(char c; file_name_without_extension)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n\
    \        }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n \
    \   }\n    if(file_name_without_extension.length == 0)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z') &&\n        !(file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(file_name_extension !=\
    \ \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2) return \"No\"\
    ;\n    if (file_name_parts[0].length == 0) return \"No\";\n    if (file_name_parts[0].count(\"\
    0-9\") > 3) return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 3)\n        return \"No\";\n    if (file_name_parts[0].length == 3)\n    {\n\
    \        if (file_name_parts[0].count(\"0\") + file_name_parts[0].count(\"1\"\
    ) + \n            file_name_parts[0].count(\"2\") + file_name_parts[0].count(\"\
    3\") + \n            file_name_parts[0].count(\"4\") + file_name_parts[0].count(\"\
    5\") + \n            file_name_parts[0].count(\"6\") + file_name_parts[0].count(\"\
    7\") + \n            file_name_parts[0].count(\"8\") + file_name_parts[0].count(\"\
    9\") != 3)\n            return \"No\";\n    }\n    if (file_name_parts[0].length\
    \ == 2)\n    {\n        if (file_name_parts[0].count(\"0\") + file_name_parts[0].count(\"\
    1\") + \n            file_name_parts[0].count(\"2\") + file_name_parts[0].count(\"\
    3\") + \n            file_name_parts[0].count(\"4\") + file_name_parts[0].count(\"\
    5\") + \n            file_name_parts[0].count(\"6\") + file_name_parts[0].count(\"\
    7\") + \n            file_name_parts[0].count(\"8\") + file_name_parts[0].count(\"\
    9\") != 2)\n            return \"No\";\n    }\n    if (file_name_parts[0].length\
    \ == 1)\n    {\n        if (file_name_parts[0].count(\"0\") + file_name_parts[0].count(\"\
    1\") + \n            file_name_", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length == dot_pos)\n        return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return\
    \ \"No\";\n    if (before_dot.count('0','9') > 3)\n        return \"No\";\n  \
    \  if (before_dot[0] < 'a' || before_dot[0] > 'z' || before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(!name.length)\n        return \"No\";\n    if(!name[0].isLetter)\n\
    \        return \"No\";\n    if(!valid_extensions.canFind(extension))\n      \
    \  return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find(\"\
    .\");\n    if (dot_index == -1)\n        return \"No\";\n    string before_dot\
    \ = file_name[0..dot_index];\n    string after_dot = file_name[dot_index+1..$];\n\
    \    if (before_dot.length == 0 || before_dot.length > 8)\n        return \"No\"\
    ;\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"\
    )\n        return \"No\";\n    int digit_count = 0;\n    foreach (c; before_dot)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            digit_count++;\n      \
    \  else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n            return\
    \ \"No\";\n    }\n    if (digit_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    string extension = \"\";\n    string name = \"\";\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    extension = file_name[dot_index+1..$];\n\
    \    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n\
    \    {\n        return \"No\";\n    }\n    name = file_name[0..dot_index-1];\n\
    \    if(name.length == 0)\n    {\n        return \"No\";\n    }\n    if(name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n    {\n        return\
    \ \"No\";\n    }\n    foreach(char c; name)\n    {\n        if(c < '0' || c >\
    \ '9')\n        {\n            return \"No\";\n        }\n    }\n    return \"\
    Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n\
    \        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n    if\
    \ (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\"\
    ;\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n\
    \    if (name.count!(a => a >= '0' && a <= '9') > 3)\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n    string\
    \ extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int count = 0;\n    int dot_index = 0;\n    string extension = \"\";\n \
    \   string name = \"\";\n    foreach(i, c; file_name)\n    {\n        if(c ==\
    \ '.')\n        {\n            dot_index = i;\n            break;\n        }\n\
    \    }\n    name = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n        {\n  \
    \          count++;\n        }\n    }\n    if(count > 3)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A'\
    \ && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n       \
    \ return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    string extension = file_name.substr(dot_index+1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digit_count = 0;\n    foreach(char c; name)\n    {\n  \
    \      if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(digit_count\
    \ > 3)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (!valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0..dot_index-1];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digits_count++;\n        else if (!(c >=\
    \ 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n            return \"No\";\n \
    \   }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    string file_name_part = file_name_parts[0];\n\
    \    string file_extension = file_name_parts[1];\n    if (file_name_part.length\
    \ == 0 || file_name_part.count(\"0-9\") > 3)\n        return \"No\";\n    if (file_name_part[0]\
    \ < 'a' || file_name_part[0] > 'z' && file_name_part[0] < 'A' || file_name_part[0]\
    \ > 'Z')\n        return \"No\";\n    if (valid_extensions.count(file_extension)\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto prefix = file_name[0..dot_pos];\n    auto suffix = file_name[dot_pos +\
    \ 1..$];\n    if (prefix.length == 0 || !prefix.canFind(\"[a-zA-Z]\"))\n     \
    \   return \"No\";\n    if (prefix.count(\"[0-9]\") > 3)\n        return \"No\"\
    ;\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\")\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.uni;\n    import std.utf;\n    import std.variant;\n    import std.datetime;\n\
    \    import std.format;\n    import std.math;\n    import std.numeric;\n    import\
    \ std.range;\n    import std.regex;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.ascii;\n    import std.bigint;\n    import std.bitmanip;\n   \
    \ import std.complex;\n    import std.conv;\n    import std.cstream;\n    import\
    \ std.datetime;\n    import std.exception;\n    import std.file;\n    import std.getopt;\n\
    \    import std.internal.math.mathspecial;\n    import std.math;\n    import std.numeric;\n\
    \    import std.range;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.string;\n    import std.traits;\n    import std.typecons;\n    import std.uni;\n\
    \    import std.utf;\n    import std.variant;\n    import std.algorithm;\n   \
    \ import std.array;\n    import std.ascii;\n    import std.bigint;\n    import\
    \ std.bitmanip;\n    import std.complex;\n    import std.conv;\n    import std.cstream;\n\
    \    import std.datetime;\n    import std.exception;\n    import std.file;\n \
    \   import std.getopt;\n    import std.internal.math.mathspecial;\n    import\
    \ std.math;\n    import std.numeric;\n    import std.range;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.string;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std", "{\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    string extension = \"\";\n    string name =\
    \ \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c.isDigit)\n        {\n            count++;\n\
    \        }\n        if(c == '.')\n        {\n            dot_count++;\n      \
    \      dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    extension = file_name[dot_index+1..$];\n\
    \    name = file_name[0..dot_index-1];\n    if(name.length == 0 || !name[0].isLetter\
    \ || !valid_extensions.contains(extension))\n    {\n        return \"No\";\n \
    \   }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    string\
    \ file_name_without_extension = file_name_parts[0];\n    string file_extension\
    \ = file_name_parts[1];\n    if (file_name_without_extension.length == 0)\n  \
    \      return \"No\";\n    if (file_name_without_extension.count(\"0\") + file_name_without_extension.count(\"\
    1\") + file_name_without_extension.count(\"2\") + file_name_without_extension.count(\"\
    3\") + file_name_without_extension.count(\"4\") + file_name_without_extension.count(\"\
    5\") + file_name_without_extension.count(\"6\") + file_name_without_extension.count(\"\
    7\") + file_name_without_extension.count(\"8\") + file_name_without_extension.count(\"\
    9\") > 3)\n        return \"No\";\n    if (file_name_without_extension[0] < 'a'\
    \ || file_name_without_extension[0] > 'z')\n        return \"No\";\n    if (file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z')\n        return \"No\";\n   \
    \ if (valid_extensions.count(file_extension) == 0)\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    the file's\
    \ extension.\n    A file's extension is the substring after the last dot '.' in\
    \ the file's name.\n    If the file's name does not contain a dot, return an empty\
    \ string.\n    Examples:\n    >>> file_extension(\"example.txt\")\n    \"txt\"\
    \n    >>> file_extension(\"example\")\n    \"\"\n*/\nstring file_extension(string\
    \ file_name) \n{\n    string[] file_name_parts = file_name.split(\".\");\n   \
    \ if (file_name_parts.length == 1)\n        return \"\";\n    return file_name_parts[$-1];\n\
    }\n/*\nCreate a function which takes a string representing a file's name, and\
    \ returns\n    the file's name without its extension.\n    A file's extension\
    \ is the substring after the last dot '.' in the file's name.\n    If the file's\
    \ name does not contain a dot, return the file's name.\n    Examples:\n    >>>\
    \ file_name_without_extension(\"example.txt\")\n    \"example\"\n    >>> file_name_without_extension(\"\
    example\")\n    \"example\"\n*/\nstring file_name_without_extension(string file_name)\
    \ \n{\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts",
  "{\n    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index+1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n    foreach(char\
    \ c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n \
    \   }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>>\
    \ file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
    \ file_name) \n{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index+1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    foreach(char c; name)\n    {", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(c; name)\n    {\n      \
    \  if(c.isDigit)\n            digits_count++;\n    }\n    if(digits_count > 3\
    \ || dot_index == -1 || name.empty || !name[0].isLetter || !valid_extensions.count(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    for (int i = 0; i < name.length; i++)\n    {\n        if (name[i] >= '0'\
    \ && name[i] <= '9')\n            digits++;\n    }\n    if (digits > 3)\n    \
    \    return \"No\";\n    if (name.length == 0)\n        return \"No\";\n    if\
    \ (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n       \
    \ return \"No\";\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(c; name)\n    {\n      \
    \  if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count\
    \ > 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext;\
    \ valid_extensions)\n    {\n        if(ext == extension)\n            return \"\
    Yes\";\n    }\n    return \"No\";\n}", "{\n    import std.algorithm : count;\n\
    \    import std.array : array;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : toLower;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name, \".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].length == 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name_parts[0][0]))\n\
    \        return \"No\";\n    if (file_name_parts[0].length > 1 && !isalpha(file_name",
  "{\n    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    int digits_count = 0;\n    foreach(char\
    \ c; file_name_without_extension)\n    {\n        if(c >= '0' && c <= '9')\n \
    \       {\n            digits_count++;\n        }\n    }\n    if(digits_count\
    \ > 3)\n    {\n        return \"No\";\n    }\n    if(!(extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\"))\n    {\n        return \"No\"\
    ;\n    }\n    if(file_name_without_extension.length == 0)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z' ||\n        file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    if (dot_index == -1)\n        return \"No\";\n\
    \    string extension = file_name[dot_index+1..$];\n    if (extension.length ==\
    \ 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0..dot_index-1];\n    if (name.length == 0 || !isAlpha(name[0]))\n\
    \        return \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n  \
    \  {\n        if (isDigit(c))\n            digits_count++;\n    }\n    if (digits_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    if (!file_name_parts[0][0].isLetter)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot_pos);\n    if (name.empty\
    \ || !isAlpha(name[0]))\n        return \"No\";\n    if (count(name, (c) => isDigit(c))\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (!file_name_parts[0][0].isLetter)\n  \
    \      return \"No\";\n    if (file_name_parts[0].count!(a => a.isDigit) > 3)\n\
    \        return \"No\";\n    if (valid_extensions.count!(a => a == file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    string\
    \ file_name_part = file_name_parts[0];\n    string file_extension = file_name_parts[1];\n\
    \    if (file_name_part.length == 0)\n        return \"No\";\n    if (file_name_part.count(\"\
    0\") + file_name_part.count(\"1\") + file_name_part.count(\"2\") + file_name_part.count(\"\
    3\") + file_name_part.count(\"4\") + file_name_part.count(\"5\") + file_name_part.count(\"\
    6\") + file_name_part.count(\"7\") + file_name_part.count(\"8\") + file_name_part.count(\"\
    9\") > 3)\n        return \"No\";\n    if (file_name_part[0] < 'a' || file_name_part[0]\
    \ > 'z')\n        return \"No\";\n    if (file_extension != valid_extensions[0]\
    \ && file_extension != valid_extensions[1] && file_extension != valid_extensions[2])\n\
    \        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes\
    \ a string representing a file's name, and returns\n    the file's extension.\n\
    \    A file's extension is the substring after the last dot '.' in the file's\
    \ name.\n    Examples:\n    >>> file_extension(\"example.txt\")\n    \"txt\"\n\
    \    >>> file_extension(\"1example.dll\")\n    \"dll\"\n*/\nstring file_extension(string\
    \ file_name)\n{\n    string[] file_name_parts = file_name.split(\".\");\n    return\
    \ file_name_parts[file_name_parts.length - 1];\n}\n/*\nCreate a function which\
    \ takes a string representing a file's name, and returns\n    the file's name\
    \ without the extension.\n    The file's name without the extension is the substring\
    \ before the last dot '", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    if(extension.length == 0 || !valid_extensions.canFind(extension))\n     \
    \   return \"No\";\n    if(name.length == 0 || !isAlpha(name[0]))\n        return\
    \ \"No\";\n    if(name.count(\"0\") + name.count(\"1\") + name.count(\"2\") +\
    \ name.count(\"3\") + name.count(\"4\") + name.count(\"5\") + name.count(\"6\"\
    ) + name.count(\"7\") + name.count(\"8\") + name.count(\"9\") > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    bool is_valid = true;\n    foreach(char c; file_name)\n    {\n   \
    \     if(c == '.')\n        {\n            dot_count++;\n        }\n        else\
    \ if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n        }\n\
    \    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid = false;\n\
    \    }\n    else\n    {\n        string[] parts = file_name.split(\".\");\n  \
    \      if(parts.length != 2)\n        {\n            is_valid = false;\n     \
    \   }\n        else\n        {\n            if(parts[0].length == 0 || parts[0][0]\
    \ < 'a' || parts[0][0] > 'z')\n            {\n                is_valid = false;\n\
    \            }\n            else\n            {\n                if(parts[1] !=\
    \ \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n                {\n\
    \                    is_valid = false;\n                }\n            }\n   \
    \     }\n    }\n    return is_valid ? \"Yes\" : \"No\";\n}", "{\n    import std.regex;\n\
    \    import std.string;\n    import std.algorithm;\n    import std.conv;\n   \
    \ import std.array;\n    import std.range;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.file;\n    import std.format;\n\
    \    import std.datetime;\n    import std.conv;\n    import std.exception;\n \
    \   import std.traits;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.regex;\n    import std.string;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split = file_name.split(\"\
    .\");\n    if (file_name_split.length != 2)\n        return \"No\";\n    if (file_name_split[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_split[0].count(\"0\", \"9\"\
    ) > 3)\n        return \"No\";\n    if (!valid_extensions.contains(file_name_split[1]))\n\
    \        return \"No\";\n    if (!file_name_split[0][0].isLetter)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    string\
    \ extension = file_name.substr(dot_index + 1);\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    int digits_count = 0;\n    foreach(c;\
    \ file_name_without_extension)\n    {\n        if(c >= '0' && c <= '9')\n    \
    \    {\n            digits_count++;\n        }\n    }\n    if(digits_count > 3)\n\
    \    {\n        return \"No\";\n    }\n    if(file_name.count('.') != 1)\n   \
    \ {\n        return \"No\";\n    }\n    if(file_name_without_extension.empty()\
    \ || \n        !(file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z' ||\n        file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.canFind(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count('0','9') > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.contains(file_name_parts[1]))\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    auto dot_index = file_name.find(\".\");\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    auto extension = file_name[dot_index + 1 ..\
    \ $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    auto name = file_name[0 .. dot_index];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    if (name.count!(c =>\
    \ isDigit(c)) > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int\
    \ dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\"\
    ;\n    string before_dot = file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    if (before_dot.length == 0 || before_dot.count('0'..'9') > 3)\n        return\
    \ \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.canFind(extension))\n    \
    \    return \"No\";\n    string name = file_name[0..dot_index];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digits_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (isDigit(c))\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int dot_pos = file_name.find('.');\n    string ext = file_name.substr(dot_pos\
    \ + 1);\n    string name = file_name.substr(0, dot_pos);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\")\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int count = 0;\n\
    \    for (int i = 0; i < name.length; i++)\n    {\n        if (name[i] >= '0'\
    \ && name[i] <= '9')\n        {\n            count++;\n        }\n    }\n    if\
    \ (count > 3)\n    {\n        return \"No\";\n    }\n    if (extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n    {\n        return \"No\"\
    ;\n    }\n    if (name.length == 0)\n    {\n        return \"No\";\n    }\n  \
    \  if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n   \
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto sub_str = file_name[0..dot_pos];\n    if (sub_str.length == 0 || !isAlpha(sub_str[0]))\n\
    \        return \"No\";\n    auto digits = 0;\n    foreach (c; sub_str)\n    \
    \    if (isDigit(c))\n            digits++;\n    if (digits > 3)\n        return\
    \ \"No\";\n    sub_str = file_name[dot_pos + 1..$];\n    if (sub_str != \"txt\"\
    \ && sub_str != \"exe\" && sub_str != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1)\n        return \"No\";\n    string ext = file_name.substr(dot_pos + 1);\n\
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"\
    No\";\n    string name = file_name.substr(0, dot_pos);\n    if (name.length ==\
    \ 0)\n        return \"No\";\n    int digits = 0;\n    foreach (c; name)\n   \
    \ {\n        if (c >= '0' && c <= '9')\n            digits++;\n        else if\
    \ (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n            return \"\
    No\";\n    }\n    if (digits > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int dot_pos = file_name.find('.');\n    string extension = file_name.substr(dot_pos\
    \ + 1);\n    string name = file_name.substr(0, dot_pos);\n    int count = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            count++;\n\
    \    }\n    if(count > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    string sub_string_before_dot = \"\";\n    string sub_string_after_dot\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n        sub_string_before_dot\
    \ = file_name[0..dot_index];\n        sub_string_after_dot = file_name[dot_index+1..$];\n\
    \        if(sub_string_before_dot.length == 0 || sub_string_before_dot.length\
    \ > 8)\n        {\n            return \"No\";\n        }\n        else\n     \
    \   {\n            foreach(char c; sub_string_before_dot)\n            {\n   \
    \             if(!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n       \
    \         {\n                    return \"No\";\n                }\n         \
    \   }\n            if(!(sub_string_after_dot in valid_extensions))\n         \
    \   {\n                return \"No\";\n            }\n            else\n     \
    \       {\n                return \"Yes\";\n            }\n        }\n    }\n}",
  "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int i = 0;\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n        i++;\n    }\n    if(dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    if(digit_count > 3)\n    {\n        return \"No\";\n   \
    \ }\n    if(file_name[0] < 'a' || (file_name[0] > 'z' && file_name[0] < 'A') ||\
    \ file_name[0] > 'Z')\n    {\n        return \"No\";\n    }\n    string ext =\
    \ file_name[i-4..i-1];\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0123456789\") > 3)\n        return \"No\";\n\
    \    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n       \
    \ return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) == 0)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string name = file_name[0..dot_pos];\n    string ext = file_name[dot_pos+1..$];\n\
    \    int digits = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <=\
    \ '9')\n            digits++;\n    }\n    if(digits > 3)\n        return \"No\"\
    ;\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ !isAlpha(name[0]))\n        return \"No\";\n    if (extension.length == 0 ||\
    \ !valid_extensions.canFind(extension))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n        if (isDigit(c))\n            digits_count++;\n\
    \    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_pos = file_name.find(\".\");\n    string sub_str = file_name.substr(0,\
    \ dot_pos);\n    string sub_str2 = file_name.substr(dot_pos + 1);\n    if (sub_str.length\
    \ == 0 || sub_str2.length == 0)\n        return \"No\";\n    if (sub_str.length\
    \ > 3)\n        return \"No\";\n    if (sub_str.find(\"0\") != -1 || sub_str.find(\"\
    1\") != -1 || sub_str.find(\"2\") != -1 || sub_str.find(\"3\") != -1 || sub_str.find(\"\
    4\") != -1 || sub_str.find(\"5\") != -1 || sub_str.find(\"6\") != -1 || sub_str.find(\"\
    7\") != -1 || sub_str.find(\"8\") != -1 || sub_str.find(\"9\") != -1)\n      \
    \  return \"No\";\n    if (sub_str2 != \"txt\" && sub_str2 != \"exe\" && sub_str2\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name,\
    \ \".\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (parts[1] !in valid_extensions)\n        return\
    \ \"No\";\n    int digits = 0;\n    foreach (char c; parts[0])\n    {\n      \
    \  if (c >= '0' && c <= '9')\n            digits++;\n    }\n    if (digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(char c; name)\n    {\n \
    \       if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count\
    \ > 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <=\
    \ 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(string\
    \ ext; valid_extensions)\n    {\n        if(ext == extension)\n            return\
    \ \"Yes\";\n    }\n    return \"No\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string name = file_name[0..dot_pos];\n\
    \    string ext = file_name[dot_pos+1..$];\n    if (name.length == 0 || !isAlpha(name[0]))\n\
    \        return \"No\";\n    int count = 0;\n    foreach (c; name)\n        if\
    \ (isDigit(c))\n            count++;\n    if (count > 3)\n        return \"No\"\
    ;\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index +\
    \ 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0)\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n      \
    \      return \"No\";\n    }\n    if (digits_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
