language: d
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float n; lst)\n    {\n        sum +=\
    \ cast(long)ceil(n) * cast(long)ceil(n);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    return lst.map!(a => cast(long)(ceil(a))).map!(a => a * a).sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprfzu6zh9.d(24): Error: no property `map` for type `float[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfzu6zh9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float f; lst)\n    {\n        result\
    \ += cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsmriiw9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)ceil(x) * cast(long)ceil(x);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek06y4jx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ ceil(i) * ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa19vbvzm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)ceil(x) * cast(long)ceil(x);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek06y4jx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ (long)ceil(x) * (long)ceil(x);\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegcoiobf.d(27): Error: C style cast illegal, use cast(long)ceil(x)\n/tmp/tmpegcoiobf.d(27):
    Error: C style cast illegal, use cast(long)ceil(x)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpegcoiobf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ (long)ceil(i) * (long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpft__yh2o.d(27): Error: C style cast illegal, use cast(long)ceil(i)\n/tmp/tmpft__yh2o.d(27):
    Error: C style cast illegal, use cast(long)ceil(i)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpft__yh2o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float i; lst)\n    {\n        result\
    \ += cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yvofwjp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += ceil(e)\
    \ * ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp884_8tf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float x; lst)\n    {\n        result\
    \ += cast(long)ceil(x) * cast(long)ceil(x);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6ydd7lq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(elem; lst)\n    {\n        result\
    \ += cast(long)ceil(elem) * cast(long)ceil(elem);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprg1aab2h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float f; lst)\n    {\n        res +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh6qs460.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float i; lst)\n    {\n        result\
    \ += cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yvofwjp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float f; lst)\n    {\n        res +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh6qs460.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long ret = 0;\n    foreach(float f; lst)\n    {\n        ret +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrk_vtox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    return lst.map!(a => cast(long)(ceil(a))).reduce!((a, b) => a\
    \ * a + b * b)(0L);\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83cbm4mx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long) ceil(f) * cast(long) ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhrfi8k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\n/*\n\
    You are given a list of numbers.\n    You need to return the sum of squared numbers\
    \ in the given list,\n    round each element in the list to the upper int(Ceiling)\
    \ first.\n    Examples:\n    >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0,\
    \ 4.0, 9.0])\n    98L\n    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4,\
    \ 4.2, 0.0])\n    29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp8g_wm2w.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp8g_wm2w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(e; lst)\n    {\n        res += cast(long)(ceil(e))\
    \ * cast(long)(ceil(e));\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oyujd4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long res = 0;\n    foreach(float i; lst)\n    {\n        res +=\
    \ cast(long)i*i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wrngq11.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += ceil(e)\
    \ * ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp884_8tf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float f; lst)\n    {\n        result\
    \ += cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsmriiw9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long result = 0;\n    foreach(float i; lst)\n    {\n        result\
    \ += cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yvofwjp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i; lst)\n    {\n        sum += cast(long)ceil(i)\
    \ * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8wv3ms.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(x * x);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vruo9hm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += ceil(e)\
    \ * ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0,\
    \ 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4,\
    \ 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0,\
    \ 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp884_8tf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f)*cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatgrpq8p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x) * ceil(x));\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuqwmwkt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float item; lst)\n    {\n        sum\
    \ += cast(long)ceil(item) * cast(long)ceil(item);\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdef1myb_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        sum +=\
    \ cast(long)(ceil(x)) * cast(long)(ceil(x));\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(e; lst)\n    {\n        sum += cast(long)ceil(e)\
    \ * cast(long)ceil(e);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n \
    \   assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0,\
    \ 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n \
    \   assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        sum +=\
    \ cast(long)ceil(f) * cast(long)ceil(f);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ cast(long)ceil(i) * cast(long)ceil(i);\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0])\
    \ == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n \
    \   assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0,\
    \ 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n\
    \    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0])\
    \ == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a list of numbers.\n\
    \    You need to return the sum of squared numbers in the given list,\n    round\
    \ each element in the list to the upper int(Ceiling) first.\n    Examples:\n \
    \   >>> lst([1.0, 2.0, 3.0])\n    14L\n    >>> lst([1.0, 4.0, 9.0])\n    98L\n\
    \    >>> lst([1.0, 3.0, 5.0, 7.0])\n    84L\n    >>> lst([1.4, 4.2, 0.0])\n  \
    \  29L\n    >>> lst([-2.4, 1.0, 1.0])\n    6L\n    \n\n    \n*/\nlong sum_squares(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        sum +=\
    \ (long)ceil(i) * (long)ceil(i);\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n\
    \    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4,\
    \ 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n\
    \    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4,\
    \ 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n\
    \    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n \
    \   assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpft__yh2o.d(27): Error: C style cast illegal, use cast(long)ceil(i)\n/tmp/tmpft__yh2o.d(27):
    Error: C style cast illegal, use cast(long)ceil(i)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpft__yh2o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799969
