name: HumanEval_107_even_odd_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
  \ n, return a tuple that has the number of even and odd\n    integer palindromes\
  \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
  \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2, 3.\
  \ one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>> even_odd_palindrome(12L)\n\
  \    tuple(4L, 6L)\n        Explanation:\n        Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n\
  \        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and\
  \ odd integer palindromes respectively.\n    \n*/\nTuple!(long, long) even_odd_palindrome(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L)\
  \ == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
  \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
  \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
  \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
completions: ["{\n    long even = 0;\n    long odd = 0;\n    for (long i = 1; i <=\
    \ n; i++) \n    {\n        if (isPalindrome(i)) \n        {\n            if (i\
    \ % 2 == 0) \n            {\n                even++;\n            } \n       \
    \     else \n            {\n                odd++;\n            }\n        }\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long i = 1;\n    while (i <= n) \n    {\n        if (is_palindrome(i))\
    \ \n        {\n            if (i % 2 == 0) \n            {\n                even++;\n\
    \            } \n            else \n            {\n                odd++;\n  \
    \          }\n        }\n        i++;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    long i = 1;\n    while (i <= n) \n\
    \    {\n        if (isPalindrome(i)) \n        {\n            if (i % 2 == 0)\
    \ \n            {\n                even++;\n            } \n            else \n\
    \            {\n                odd++;\n            }\n        }\n        i++;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long i = 1;\n    while (i <= n) \n    {\n        if (is_palindrome(i))\
    \ \n        {\n            if (i % 2 == 0) \n            {\n                even++;\n\
    \            } \n            else \n            {\n                odd++;\n  \
    \          }\n        }\n        i++;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    for (long i = 1; i <= n; i++) \n\
    \    {\n        if (isPalindrome(i)) \n        {\n            if (i % 2 == 0)\
    \ \n            {\n                even++;\n            } \n            else \n\
    \            {\n                odd++;\n            }\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long i\
    \ = 1;\n    while (i <= n)\n    {\n        if (is_palindrome(i))\n        {\n\
    \            if (i % 2 == 0)\n            {\n                even++;\n       \
    \     }\n            else\n            {\n                odd++;\n           \
    \ }\n        }\n        i++;\n    }\n    return tuple(even, odd);\n}", "{\n  \
    \  long even = 0L;\n    long odd = 0L;\n    for (long i = 1L; i <= n; i++) \n\
    \    {\n        if (is_palindrome(i)) \n        {\n            if (i % 2 == 0)\
    \ \n            {\n                even++;\n            } \n            else \n\
    \            {\n                odd++;\n            }\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long i\
    \ = 1;\n    long j = n;\n    while (i <= j) \n    {\n        if (i == j) \n  \
    \      {\n            odd++;\n            break;\n        }\n        if (i % 2\
    \ == 0) \n        {\n            even++;\n        } \n        else \n        {\n\
    \            odd++;\n        }\n        if (j % 2 == 0) \n        {\n        \
    \    even++;\n        } \n        else \n        {\n            odd++;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return tuple(even, odd);\n}", "{\n\
    \    long even = 0;\n    long odd = 0;\n    foreach(i; 1..n+1)\n    {\n      \
    \  if(i.is_palindrome())\n        {\n            if(i % 2 == 0)\n            {\n\
    \                even++;\n            }\n            else\n            {\n   \
    \             odd++;\n            }\n        }\n    }\n    return tuple(even,\
    \ odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long i = 1;\n    while\
    \ (i <= n) \n    {\n        if (is_palindrome(i)) \n        {\n            if\
    \ (i % 2 == 0) \n            {\n                even++;\n            } \n    \
    \        else \n            {\n                odd++;\n            }\n       \
    \ }\n        i++;\n    }\n    return tuple(even, odd);\n}", "{\n    long even\
    \ = 0;\n    long odd = 0;\n    long i = 1;\n    while (i <= n)\n    {\n      \
    \  if (isPalindrome(i))\n        {\n            if (i % 2 == 0)\n            {\n\
    \                even++;\n            }\n            else\n            {\n   \
    \             odd++;\n            }\n        }\n        i++;\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    long i\
    \ = 1;\n    long j = n;\n    while (i <= j)\n    {\n        if (i == j)\n    \
    \    {\n            if (i % 2 == 0)\n            {\n                even++;\n\
    \            }\n            else\n            {\n                odd++;\n    \
    \        }\n        }\n        else\n        {\n            if (i % 2 == 0)\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                odd++;\n            }\n            if (j % 2 == 0)\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                odd++;\n            }\n        }\n        i++;\n\
    \        j--;\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0L;\n\
    \    long odd = 0L;\n    for (long i = 1L; i <= n; i++) \n    {\n        if (i\
    \ % 2 == 0) \n        {\n            even++;\n        } \n        else \n    \
    \    {\n            odd++;\n        }\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    long i = 1;\n    while (i <= n) \n\
    \    {\n        if (isPalindrome(i)) \n        {\n            if (i % 2 == 0)\
    \ \n            {\n                even++;\n            } \n            else \n\
    \            {\n                odd++;\n            }\n        }\n        i++;\n\
    \    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd\
    \ = 0;\n    long i = 1;\n    while (i <= n)\n    {\n        if (is_palindrome(i))\n\
    \        {\n            if (i % 2 == 0)\n            {\n                even++;\n\
    \            }\n            else\n            {\n                odd++;\n    \
    \        }\n        }\n        i++;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    for (long i = 1; i <= n; i++)\n \
    \   {\n        if (is_palindrome(i))\n        {\n            if (i % 2 == 0)\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                odd++;\n            }\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even = 0;\n    long odd = 0;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        if (i % 10 == 0) \n        {\n        \
    \    continue;\n        }\n        if (is_palindrome(i)) \n        {\n       \
    \     if (i % 2 == 0) \n            {\n                even++;\n            }\
    \ \n            else \n            {\n                odd++;\n            }\n\
    \        }\n    }\n    return tuple(even, odd);\n}", "{\n    long even = 0;\n\
    \    long odd = 0;\n    long i = 1;\n    while (i <= n)\n    {\n        if (is_palindrome(i))\n\
    \        {\n            if (i % 2 == 0)\n            {\n                even++;\n\
    \            }\n            else\n            {\n                odd++;\n    \
    \        }\n        }\n        i++;\n    }\n    return tuple(even, odd);\n}",
  "{\n    long even = 0;\n    long odd = 0;\n    for (long i = 1; i <= n; i++)\n \
    \   {\n        if (is_palindrome(i))\n        {\n            if (i % 2 == 0)\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                odd++;\n            }\n        }\n    }\n    return\
    \ tuple(even, odd);\n}", "{\n    long even_count = 0L;\n    long odd_count = 0L;\n\
    \    for (long i = 1L; i <= n; i++) \n    {\n        if (is_palindrome(i)) \n\
    \        {\n            if (i % 2 == 0) \n            {\n                even_count++;\n\
    \            } \n            else \n            {\n                odd_count++;\n\
    \            }\n        }\n    }\n    return tuple(even_count, odd_count);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
