language: d
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j2ut7ms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long\
    \ first = n / 10;\n            long last = n % 10;\n            if(first % 2 !=\
    \ 0 && last % 2 != 0)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_0ybnq2x.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp_0ybnq2x.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp_0ybnq2x.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpf5q5k8fm.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / (long)pow(10, (int)floor(log10(num)));\n            long\
    \ lastDigit = num % 10;\n            if(firstDigit % 2 == 1 && lastDigit % 2 ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp8x6ggvx.d(21): Error: C style cast illegal, use `cast(int)floor(log10(num))`

    /tmp/tmpp8x6ggvx.d(21): Error: C style cast illegal, use `cast(long)pow(10, cast(int)floor(log10(num)))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8x6ggvx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdh4rg_nh.d(19): Error: no property `to` for type `long`

    /tmp/tmpdh4rg_nh.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh4rg_nh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`

    /tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4h1spxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 == 1 && last % 2 == 1)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp32akbp1i.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282ad]

    ??:? void tmp32akbp1i.__unittest_L31_C1() [0x427ed9]

    ??:? void tmp32akbp1i.__modtest() [0x428030]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c297]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b12a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43076c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430249]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b101]

    ??:? runModuleUnitTests [0x42c06d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long firstDigit = num / 10;\n    \
    \            long lastDigit = num % 10;\n                if(firstDigit % 2 !=\
    \ 0 && lastDigit % 2 != 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4wcy8yh0.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282bd]

    ??:? void tmp4wcy8yh0.__unittest_L34_C1() [0x427ee9]

    ??:? void tmp4wcy8yh0.__modtest() [0x428040]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43077c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]

    ??:? runModuleUnitTests [0x42c07d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42870c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    /tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmttpuhc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long counter = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                counter++;\n      \
    \      }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdhu4agn7.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpdhu4agn7.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpdhu4agn7.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw_wt_270.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpw_wt_270.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpw_wt_270.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0\
    \ && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`

    /tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcy5f40s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8j2rm9et.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8j2rm9et.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`

    /tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpnwemnm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 == 1)\n            {\n                if(n % 10 == 1 || n % 10 == 3 || n\
    \ % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n                {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4uirpa48.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42829d]

    ??:? void tmp4uirpa48.__unittest_L32_C1() [0x427ec5]

    ??:? void tmp4uirpa48.__modtest() [0x42801c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c287]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43075c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430239]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]

    ??:? runModuleUnitTests [0x42c05d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if (num > 10)\n        {\n           \
    \ long firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long\
    \ lastDigit = num % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]

    ??:? void tmpqtyt_gny.__modtest() [0x427ffc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && (num % 10) % 2 == 1 &&\
    \ (num / pow(10, floor(log10(num)))) % 2 == 1)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq4gtvh04.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fcd]

    ??:? void tmpq4gtvh04.__unittest_L26_C1() [0x428272]

    ??:? void tmpq4gtvh04.__modtest() [0x428d50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d18b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c01e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431660]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43113d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bff5]

    ??:? runModuleUnitTests [0x42cf61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42941c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw_wt_270.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpw_wt_270.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpw_wt_270.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]

    ??:? void tmpqtyt_gny.__modtest() [0x427ffc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 == 1)\n            {\n                long lastDigit = n % 10;\n       \
    \         if(lastDigit % 2 == 1)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph5akkqnv.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmph5akkqnv.__unittest_L33_C1() [0x427ebd]

    ??:? void tmph5akkqnv.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c27f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b112]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430754]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430231]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e9]

    ??:? runModuleUnitTests [0x42c055]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    /tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx57tdy5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.abs().to!string().front.to!long()\
    \ % 2 == 1 && num.abs().to!string().back.to!long() % 2 == 1)\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfu1ktfy.d(21): Error: no property `to` for type `long`

    /tmp/tmpqfu1ktfy.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfu1ktfy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15yfziof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]

    ??:? void tmpqtyt_gny.__modtest() [0x427ffc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long firstDigit = num / 10;\n    \
    \            if(firstDigit % 2 != 0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfc0op04o.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42828d]

    ??:? void tmpfc0op04o.__unittest_L33_C1() [0x427eb5]

    ??:? void tmpfc0op04o.__modtest() [0x42800c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c277]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43029d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43074c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430229]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]

    ??:? runModuleUnitTests [0x42c04d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long firstDigit = num;\n         \
    \       long lastDigit = num % 10;\n                while(firstDigit > 10)\n \
    \               {\n                    firstDigit /= 10;\n                }\n\
    \                if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n             \
    \   {\n                    count++;\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp74nuote5.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282dd]

    ??:? void tmp74nuote5.__unittest_L38_C1() [0x427f09]

    ??:? void tmp74nuote5.__modtest() [0x428060]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b15a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43079c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430279]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b131]

    ??:? runModuleUnitTests [0x42c09d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42872c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpf5q5k8fm.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(i; nums)\n    {\n        if(i > 10)\n        {\n            if(i\
    \ % 2 != 0)\n            {\n                if(i / 10 % 2 != 0)\n            \
    \    {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n/*\nWrite a function that takes an array of\
    \ numbers as input and returns \n    the number of elements in the array that\
    \ are greater than 10 and both \n    first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n\
    \    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n\
    */\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(i; nums)\n\
    \    {\n        if(i > 10)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                if(i / 10 % 2 != 0)\n                {\n               \
    \     count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function that takes an array of numbers as input and\
    \ returns \n    the number of elements in the array that are greater than 10 and\
    \ both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For\
    \ example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L,\
    \ -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums)\
    \ \n{\n    long count = 0;\n    foreach(i; nums)\n    {\n        if(i > 10)\n\
    \        {\n            if(i % 2 != 0)\n            {\n                if(i /\
    \ 10 % 2 != 0)\n                {\n                    count++;\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L])\
    \ == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqr_ju46h.d(94): Error: `tmpqr_ju46h.specialFilter` called with
    argument types `(long[])` matches both:

    /tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`

    and:

    /tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`

    /tmp/tmpqr_ju46h.d(95): Error: `tmpqr_ju46h.specialFilter` called with argument
    types `(long[])` matches both:

    /tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`

    and:

    /tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`

    /tmp/tmpqr_ju46h.d(96): Error: `tmpqr_ju46h.specialFilter` called with argument
    types `(long[])` matches both:

    /tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`

    and:

    /tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`

    /tmp/tmpqr_ju46h.d(97): Error: `tmpqr_ju46h.specialFilter` called with argument
    types `(long[])` matches both:

    /tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`

    and:

    /tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`

    /tmp/tmp'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    /tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx57tdy5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 != 0)\n            {\n                long temp = n;\n                long\
    \ lastDigit = temp % 10;\n                temp /= 10;\n                long firstDigit\
    \ = temp % 10;\n                if(lastDigit % 2 != 0 && firstDigit % 2 != 0)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxiikvu1m.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpxiikvu1m.__unittest_L36_C1() [0x427efd]

    ??:? void tmpxiikvu1m.__modtest() [0x428054]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b152]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430794]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430271]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b129]

    ??:? runModuleUnitTests [0x42c095]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428724]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && (num % 10) % 2 == 1 &&\
    \ num / 10 % 2 == 1)\n        {\n            result++;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n   \
    \ assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpopd_ww0d.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42828d]

    ??:? void tmpopd_ww0d.__unittest_L26_C1() [0x427eb9]

    ??:? void tmpopd_ww0d.__modtest() [0x428010]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c277]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43029d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43074c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430229]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]

    ??:? runModuleUnitTests [0x42c04d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15yfziof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] %\
    \ 2 == 1)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ow9_93m.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ow9_93m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpf5q5k8fm.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 != 0 && digits[$-1] %\
    \ 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zvp9hez.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zvp9hez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 != 0)\n            {\n                if(n % 10 != 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppt47iw1w.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmppt47iw1w.__unittest_L32_C1() [0x427ea9]

    ??:? void tmppt47iw1w.__modtest() [0x428000]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0\
    \ && num.digits[$-1] % 2 != 0)\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wwiol7d.d(19): Error: no property `digits` for type `long`

    /tmp/tmp8wwiol7d.d(19): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wwiol7d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    /tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmttpuhc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                if(num % 10 == 1 || num % 10 == 3\
    \ || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)\n                {\n   \
    \                 count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b05f5b6.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42829d]

    ??:? void tmp9b05f5b6.__unittest_L32_C1() [0x427ec5]

    ??:? void tmp9b05f5b6.__modtest() [0x42801c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c287]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43075c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430239]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]

    ??:? runModuleUnitTests [0x42c05d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long first = num / 10;\n         \
    \       long last = num % 10;\n                if(first % 2 != 0 && last % 2 !=\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjqrw_s6k.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282bd]

    ??:? void tmpjqrw_s6k.__unittest_L34_C1() [0x427ee9]

    ??:? void tmpjqrw_s6k.__modtest() [0x428040]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43077c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]

    ??:? runModuleUnitTests [0x42c07d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42870c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto\
    \ first = n / pow(10, floor(log10(n)));\n            auto last = n % 10;\n   \
    \         if(first % 2 != 0 && last % 2 != 0)\n            {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9l42_td8.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fe5]

    ??:? void tmp9l42_td8.__unittest_L31_C1() [0x4282f9]

    ??:? void tmp9l42_td8.__modtest() [0x428d68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c036]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431678]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431155]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c00d]

    ??:? runModuleUnitTests [0x42cf79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429434]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string[0]\
    \ % 2 != 0 && num.to!string[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6h2u6ft.d(21): Error: no property `to` for type `long`

    /tmp/tmpb6h2u6ft.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6h2u6ft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    /tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx57tdy5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15yfziof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb0xrobj7.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmpb0xrobj7.__unittest_L29_C1() [0x427e95]

    ??:? void tmpb0xrobj7.__modtest() [0x427fec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c257]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43027d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43072c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430209]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c1]

    ??:? runModuleUnitTests [0x42c02d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]

    ??:? void tmpqtyt_gny.__modtest() [0x427ffc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto\
    \ digits = to!string(n);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2\
    \ == 1)\n            {\n                result++;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1e5krz4.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1e5krz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl6rqeeja.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmpl6rqeeja.__unittest_L26_C1() [0x42826a]

    ??:? void tmpl6rqeeja.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`

    /tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2qqp5zw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`

    /tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2qqp5zw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j2ut7ms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    /tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmttpuhc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 != 0)\n            {\n                long firstDigit = num / pow(10, floor(log10(num)));\n\
    \                if(firstDigit % 2 != 0)\n                {\n                \
    \    count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwr37frv2.d(23): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwr37frv2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`

    /tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpnwemnm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                if(num / 10 % 2 == 1)\n          \
    \      {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptspknnoq.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42828d]

    ??:? void tmptspknnoq.__unittest_L32_C1() [0x427eb9]

    ??:? void tmptspknnoq.__modtest() [0x428010]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c277]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43029d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43074c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430229]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]

    ??:? runModuleUnitTests [0x42c04d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15yfziof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num;\n            long last = num % 10;\n            while(first > 10)\n\
    \            {\n                first /= 10;\n            }\n            if(first\
    \ % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n     \
    \       }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqco1i8_3.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282bd]

    ??:? void tmpqco1i8_3.__unittest_L35_C1() [0x427ee9]

    ??:? void tmpqco1i8_3.__modtest() [0x428040]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43077c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]

    ??:? runModuleUnitTests [0x42c07d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42870c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = num.to!string.split(\"\");\n            if(digits[0].to!long % 2 ==\
    \ 1 && digits[$-1].to!long % 2 == 1)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdl0n7cqa.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdl0n7cqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`

    /tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9965jd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    /tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmttpuhc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long lastDigit = num % 10;\n     \
    \           long firstDigit = num;\n                while(firstDigit > 10)\n \
    \               {\n                    firstDigit = firstDigit / 10;\n       \
    \         }\n                if(firstDigit % 2 == 1)\n                {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n \
    \   assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb1_k6m3q.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282bd]

    ??:? void tmpb1_k6m3q.__unittest_L38_C1() [0x427ee5]

    ??:? void tmpb1_k6m3q.__modtest() [0x42803c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43077c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]

    ??:? runModuleUnitTests [0x42c07d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42870c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first > 10)\n                {\n  \
    \                  first = first / 10;\n                }\n                last\
    \ = last % 10;\n                if(first % 2 == 1 && last % 2 == 1)\n        \
    \        {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0sedc9mc.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282e5]

    ??:? void tmp0sedc9mc.__unittest_L39_C1() [0x427f0d]

    ??:? void tmp0sedc9mc.__modtest() [0x428064]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b162]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430281]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b139]

    ??:? runModuleUnitTests [0x42c0a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428734]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10\
    \ == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42827d]

    ??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]

    ??:? void tmpqtyt_gny.__modtest() [0x427ffc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c267]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43028d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43073c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430219]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]

    ??:? runModuleUnitTests [0x42c03d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums) \n    {\n        if(num > 10) \n        {\n          \
    \  if(num.toString().length > 1) \n            {\n                if(num.toString()[0]\
    \ % 2 != 0 && num.toString()[$-1] % 2 != 0) \n                {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpld10axb5.d(21): Error: no property `toString` for type `long`

    /tmp/tmpld10axb5.d(23): Error: no property `toString` for type `long`

    /tmp/tmpld10axb5.d(23): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpld10axb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpmwxe7x1c.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if((first\
    \ % 2 != 0) && (last % 2 != 0))\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo2yzvxx_.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmpo2yzvxx_.__unittest_L31_C1() [0x427ed1]

    ??:? void tmpo2yzvxx_.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num % 10;\n            long lastDigit = num / 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphl6uiil4.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmphl6uiil4.__unittest_L31_C1() [0x427ed1]

    ??:? void tmphl6uiil4.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto\
    \ digits = to!string(n);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_6a9npn.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_6a9npn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long\
    \ first = n / pow(10, floor(log10(n)));\n            long last = n % 10;\n   \
    \         if(first % 2 != 0 && last % 2 != 0)\n            {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vh4mpzm.d(21): Error: cannot implicitly convert expression `cast(real)n
    / pow(10, floor(log10(cast(real)n)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vh4mpzm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]

    ??:? void tmp5ltrw1ya.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num;\n            long last = num % 10;\n            while(first > 10)\n\
    \            {\n                first /= 10;\n            }\n            if(first\
    \ % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbd2a64pu.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282bd]

    ??:? void tmpbd2a64pu.__unittest_L35_C1() [0x427ee9]

    ??:? void tmpbd2a64pu.__modtest() [0x428040]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b13a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43077c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]

    ??:? runModuleUnitTests [0x42c07d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42870c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    /tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3c6pcw7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6b826du.d(19): Error: undefined identifier `isOdd`

    /tmp/tmp_6b826du.d(19): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6b826du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2blzh42p.d(21): Error: no property `to` for type `long`

    /tmp/tmp2blzh42p.d(21): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2blzh42p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`

    /tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4h1spxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10,\
    \ floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428fc5]

    ??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]

    ??:? void tmp6ouo_4x1.__modtest() [0x428d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4311a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]

    ??:? runModuleUnitTests [0x42cf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num\
    \ % 2 == 1)\n            {\n                long first = num;\n              \
    \  long last = num;\n                while(first >= 10)\n                {\n \
    \                   first /= 10;\n                }\n                while(last\
    \ % 10 != last)\n                {\n                    last %= 10;\n        \
    \        }\n                if(first % 2 == 1 && last % 2 == 1)\n            \
    \    {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15yfziof.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n\
    \            if(first % 2 != 0 && last % 2 != 0)\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num
    / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j2ut7ms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ first = num / 10;\n            long last = num % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0)\n            {\n                count++;\n        \
    \    }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282a5]

    ??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]

    ??:? void tmp3gm6ju46.__modtest() [0x428028]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b122]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430764]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430241]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]

    ??:? runModuleUnitTests [0x42c065]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10\
    \ % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpojs_1h8l.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0\
    \ && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`

    /tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcy5f40s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]

    ??:? void tmpltxdtwlr.__modtest() [0x428008]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430295]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430744]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430221]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164289
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 !=\
    \ 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    /tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk65b43d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164289
