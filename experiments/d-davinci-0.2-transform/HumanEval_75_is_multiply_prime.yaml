name: HumanEval_75_is_multiply_prime
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
  \ true if the given number is the multiplication of 3 prime numbers\n    and false\
  \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
  \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n"
tests: "unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
  \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n\
  \    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n  \
  \  assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n   \
  \ assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n   \
  \ assert(candidate(1001L) == true);\n}\nvoid main(){}"
completions: ["{\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n\
    \    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n  \
    \          factors ~= prime;\n            a /= prime;\n        }\n    }\n    return\
    \ factors.length == 3;\n}", "{\n    bool isPrime(long n)\n    {\n        if (n\
    \ <= 1)\n            return false;\n        if (n == 2)\n            return true;\n\
    \        if (n % 2 == 0)\n            return false;\n        for (long i = 3;\
    \ i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n            \
    \    return false;\n        }\n        return true;\n    }\n    long i = 2;\n\
    \    long num = a;\n    while (i <= a)\n    {\n        if (isPrime(i) && a % i\
    \ == 0)\n        {\n            a /= i;\n            if (isPrime(a))\n       \
    \         return true;\n        }\n        i++;\n    }\n    return false;\n}",
  "{\n    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        for (long i = 2; i < n; i++)\n            if (n % i == 0)\n         \
    \       return false;\n        return true;\n    }\n    if (a < 6)\n        return\
    \ false;\n    for (long i = 2; i < a; i++)\n        if (is_prime(i) && a % i ==\
    \ 0)\n            for (long j = i; j < a; j++)\n                if (is_prime(j)\
    \ && a % j == 0 && a % (i * j) == 0)\n                    for (long k = j; k <\
    \ a; k++)\n                        if (is_prime(k) && a % k == 0 && a % (i * j\
    \ * k) == 0)\n                            return true;\n    return false;\n}",
  "{\n    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        else if (n == 2)\n            return true;\n        else if (n % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long max\
    \ = cast(long)sqrt(n);\n            for (long i = 3; i <= max; i += 2)\n     \
    \       {\n                if (n % i == 0)\n                    return false;\n\
    \            }\n            return true;\n        }\n    }\n    if (a < 6)\n \
    \       return false;\n    else if (a == 6)\n        return true;\n    else\n\
    \    {\n        long max = cast(long)sqrt(a);\n        for (long i = 3; i <= max;\
    \ i += 2)\n        {\n            if (is_prime(i) && a % i == 0)\n           \
    \ {\n                long b = a / i;\n                if (is_prime(b))\n     \
    \           {\n                    long c = b / i;\n                    if (is_prime(c))\n\
    \                        return true;\n                }\n            }\n    \
    \    }\n        return false;\n    }\n}", "{\n    if (a <= 0) return false;\n\
    \    if (a == 1) return true;\n    if (a == 2) return true;\n    if (a == 3) return\
    \ true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n    if (a\
    \ == 11) return true;\n    if (a == 13) return true;\n    if (a == 17) return\
    \ true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n    if\
    \ (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37) return\
    \ true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n    if\
    \ (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59) return\
    \ true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n    if\
    \ (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79) return\
    \ true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n    if\
    \ (a == 97) return true;\n    if (a == 6) return false;\n    if (a == 10) return\
    \ false;\n    if (a == 14) return false;\n    if (a == 15) return false;\n   \
    \ if (a == 21) return false;\n    if (a == 22) return false;\n    if (a == 26)\
    \ return false;\n    if (a == 33) return false;\n    if (a == 34) return false;\n\
    \    if (a == 35) return false;\n    if (a == 38) return false;\n    if (a ==\
    \ 39) return false;\n    if (a == 46) return false;\n    if (a == 51) return false;\n\
    \    if (a == 55) return false;\n    if (a == 57) return false;\n    if (a ==\
    \ 58) return false;\n    if (a == 62) return false;\n    if (a == 65) return false;\n\
    \    if (", "{\n    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    foreach(i; 0..primes.length)\n    {\n        if(a % primes[i] == 0)\n\
    \        {\n            result = true;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    int i = 2;\n    while (i < a)\n    {\n      \
    \  if (a % i == 0)\n        {\n            int j = 2;\n            while (j <\
    \ i)\n            {\n                if (i % j == 0)\n                {\n    \
    \                int k = 2;\n                    while (k < a / i)\n         \
    \           {\n                        if ((a / i) % k == 0)\n               \
    \         {\n                            return true;\n                      \
    \  }\n                        k++;\n                    }\n                }\n\
    \                j++;\n            }\n        }\n        i++;\n    }\n    return\
    \ false;\n}", "{\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors\
    \ = [];\n    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n     \
    \   {\n            factors ~= prime;\n            a /= prime;\n        }\n   \
    \ }\n    return factors.length == 3;\n}", "{\n    bool result = false;\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime; primes)\n    {\n     \
    \   if(a % prime == 0)\n        {\n            result = true;\n            break;\n\
    \        }\n    }\n    return result;\n}", "{\n    int i = 2;\n    while (i <=\
    \ a)\n    {\n        if (a % i == 0)\n        {\n            a /= i;\n       \
    \     if (a == 1)\n                return true;\n        }\n        else\n   \
    \         i++;\n    }\n    return false;\n}", "{\n    bool isPrime = true;\n \
    \   long b = a;\n    long c = a;\n    long d = a;\n    long e = a;\n    long f\
    \ = a;\n    long g = a;\n    long h = a;\n    long i = a;\n    long j = a;\n \
    \   long k = a;\n    long l = a;\n    long m = a;\n    long n = a;\n    long o\
    \ = a;\n    long p = a;\n    long q = a;\n    long r = a;\n    long s = a;\n \
    \   long t = a;\n    long u = a;\n    long v = a;\n    long w = a;\n    long x\
    \ = a;\n    long y = a;\n    long z = a;\n    long aa = a;\n    long ab = a;\n\
    \    long ac = a;\n    long ad = a;\n    long ae = a;\n    long af = a;\n    long\
    \ ag = a;\n    long ah = a;\n    long ai = a;\n    long aj = a;\n    long ak =\
    \ a;\n    long al = a;\n    long am = a;\n    long an = a;\n    long ao = a;\n\
    \    long ap = a;\n    long aq = a;\n    long ar = a;\n    long as = a;\n    long\
    \ at = a;\n    long au = a;\n    long av = a;\n    long aw = a;\n    long ax =\
    \ a;\n    long ay = a;\n    long az = a;\n    long ba = a;\n    long bb = a;\n\
    \    long bc = a;\n    long bd = a;\n    long be = a;\n    long bf = a;\n    long\
    \ bg = a;\n    long bh = a;\n    long bi = a;\n    long bj = a;\n    long bk =\
    \ a;\n    long bl = a;\n    long bm = a;\n    long bn = a;\n    long bo = a;\n\
    \    long bp = a;\n    long bq = a;\n    long br = a;\n   ", "{\n    bool result\
    \ = false;\n    if (a == 1)\n        return true;\n    if (a == 2)\n        return\
    \ true;\n    if (a == 3)\n        return true;\n    if (a == 5)\n        return\
    \ true;\n    if (a == 7)\n        return true;\n    if (a == 11)\n        return\
    \ true;\n    if (a == 13)\n        return true;\n    if (a == 17)\n        return\
    \ true;\n    if (a == 19)\n        return true;\n    if (a == 23)\n        return\
    \ true;\n    if (a == 29)\n        return true;\n    if (a == 31)\n        return\
    \ true;\n    if (a == 37)\n        return true;\n    if (a == 41)\n        return\
    \ true;\n    if (a == 43)\n        return true;\n    if (a == 47)\n        return\
    \ true;\n    if (a == 53)\n        return true;\n    if (a == 59)\n        return\
    \ true;\n    if (a == 61)\n        return true;\n    if (a == 67)\n        return\
    \ true;\n    if (a == 71)\n        return true;\n    if (a == 73)\n        return\
    \ true;\n    if (a == 79)\n        return true;\n    if (a == 83)\n        return\
    \ true;\n    if (a == 89)\n        return true;\n    if (a == 97)\n        return\
    \ true;\n    if (a == 6)\n        return false;\n    if (a == 10)\n        return\
    \ false;\n    if (a == 14)\n        return false;\n    if (a == 15)\n        return\
    \ false;\n    if (a == 21)\n        return false;\n    if (a == 22)\n        return\
    \ false;\n    if (a == 33)\n        return false;\n    if (a == 34)\n        return\
    \ false;\n    if (a == 35)\n        return false;\n    if (a == 38)\n        return\
    \ false;\n    if (a == 39)\n        return false;\n    if (a == 46)\n        return\
    \ false;\n    if (a == 51)\n", "{\n    import std.math : isPrime;\n    import\
    \ std.algorithm : filter, map, reduce;\n    import std.range : iota;\n    import\
    \ std.typecons : tuple;\n    import std.conv : to;\n    import std.array : array;\n\
    \    import std.stdio : writeln;\n    import std.range : take;\n    import std.algorithm\
    \ : sort;\n    import std.algorithm : equal;\n    import std.typecons : tuple;\n\
    \    import std.range : zip;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n   ", "{\n    long[] primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n      \
    \  {\n            a /= i;\n        }\n    }\n    return a == 1;\n}", "{\n    if\
    \ (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n    if\
    \ (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a); i +=\
    \ 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors\
    \ = [];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n  \
    \          factors ~= i;\n            a /= i;\n        }\n    }\n    return factors.length\
    \ == 3;\n}", "{\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors\
    \ = [];\n    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n     \
    \   {\n            factors ~= prime;\n            a /= prime;\n        }\n   \
    \ }\n    return factors.length == 3;\n}", "{\n    static long[] primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a % primes[i]\
    \ == 0)\n        {\n            a /= primes[i];\n            if(a == 1)\n    \
    \        {\n                return true;\n            }\n            else\n  \
    \          {\n                i = 0;\n            }\n        }\n    }\n    return\
    \ false;\n}", "{\n    bool result = false;\n    if (a > 0)\n    {\n        long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97];\n        long[] factors = [];\n        foreach\
    \ (prime; primes)\n        {\n            if (a % prime == 0)\n            {\n\
    \                factors ~= prime;\n                a /= prime;\n            }\n\
    \        }\n        if (factors.length == 3)\n        {\n            result =\
    \ true;\n        }\n    }\n    return result;\n}", "{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    bool is_multiply_prime(long a)\n    {\n     \
    \   if (a < 6) return false;\n        if (a % 2 == 0) return is_prime(a / 2) &&\
    \ is_prime(2);\n        if (a % 3 == 0) return is_prime(a / 3) && is_prime(3);\n\
    \        for (long i = 5; i <= sqrt(a); i += 6)\n        {\n            if (a\
    \ % i == 0) return is_prime(a / i) && is_prime(i);\n            if (a % (i + 2)\
    \ == 0) return is_prime(a / (i + 2)) && is_prime(i + 2);\n        }\n        return\
    \ true;\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
