language: d
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    auto min1 = lst[0];\n    auto\
    \ min2 = lst[1];\n    if (min1 > min2)\n        swap(min1, min2);\n    foreach\
    \ (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n            min2\
    \ = min1;\n            min1 = e;\n        }\n        else if (e < min2)\n    \
    \    {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppea01h31.d(25): Error: undefined identifier `swap`, did you mean
    template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmppea01h31.d(21): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmppea01h31.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppea01h31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeiryec2r.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeiryec2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            next = min;\n            min = e;\n        }\n        else\
    \ if (e < next)\n        {\n            next = e;\n        }\n    }\n    if (min\
    \ == next)\n        return null;\n    return next;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2vd6_cf.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(38): Error: cannot implicitly convert expression `next` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2vd6_cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bxmls8g.d(38): Error: cannot implicitly convert expression `min2`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bxmls8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bmsudlu.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp5bmsudlu.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmsudlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuy_pyfvd.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuy_pyfvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgpcz1v1.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgpcz1v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, x; lst)\n    {\n        if (x < min)\n     \
    \   {\n            min2 = min;\n            min = x;\n        }\n        else\
    \ if (x < min2)\n        {\n            min2 = x;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjn4yx5ne.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpjn4yx5ne.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpjn4yx5ne.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn4yx5ne.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxoyyrby7.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxoyyrby7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    \n    long min = lst[0];\n \
    \   long second = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (e\
    \ < min)\n        {\n            second = min;\n            min = e;\n       \
    \ }\n        else if (e < second)\n        {\n            second = e;\n      \
    \  }\n    }\n    \n    if (min == second)\n        return null;\n    \n    return\
    \ second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n       \
    \ auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzi5at0z.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzzi5at0z.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzzi5at0z.d(42): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzi5at0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        }\n   \
    \     else if (e < next_min) \n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cn70uk6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3cn70uk6.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cn70uk6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    } \n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptuc_dkv0.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuc_dkv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return Nullable!(long)(min2);\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94hvwfpa.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x455af1]

    ??:? void tmp94hvwfpa.__unittest_L40_C1() [0x4418ba]

    ??:? void tmp94hvwfpa.__modtest() [0x4535fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eaf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x45511e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a335]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]

    ??:? runModuleUnitTests [0x45e8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456a7c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvrbv_8l.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpxvrbv_8l.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvrbv_8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            next = min;\n            min = e;\n        }\n        else\
    \ if (e < next)\n        {\n            next = e;\n        }\n    }\n    if (min\
    \ == next)\n        return null;\n    return next;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2vd6_cf.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(38): Error: cannot implicitly convert expression `next` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2vd6_cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return Nullable!(long)(min2);\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94hvwfpa.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x455af1]

    ??:? void tmp94hvwfpa.__unittest_L40_C1() [0x4418ba]

    ??:? void tmp94hvwfpa.__modtest() [0x4535fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eaf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x45511e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a335]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]

    ??:? runModuleUnitTests [0x45e8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456a7c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    auto min = lst[0];\n    auto\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkpoyem2.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmplkpoyem2.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmplkpoyem2.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkpoyem2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second = long.max;\n    foreach (i; lst) \n    {\n        if (i < min)\
    \ \n        {\n            second = min;\n            min = i;\n        } \n \
    \       else if (i < second) \n        {\n            second = i;\n        }\n\
    \    }\n    if (second == long.max) \n    {\n        return null;\n    }\n   \
    \ return second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaj2fcmir.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpaj2fcmir.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpaj2fcmir.d(42): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaj2fcmir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        } \n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2q3pnon.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpw2q3pnon.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2q3pnon.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min) \n    {\n        min = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n      \
    \  if (x < min) \n        {\n            min2 = min;\n            min = x;\n \
    \       }\n        else if (x < min2) \n        {\n            min2 = x;\n   \
    \     }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dbcvmr3.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp5dbcvmr3.d(43): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dbcvmr3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long next_min\
    \ = lst[1];\n    foreach (i, val; lst)\n    {\n        if (val < min)\n      \
    \  {\n            next_min = min;\n            min = val;\n        }\n       \
    \ else if (val < next_min)\n        {\n            next_min = val;\n        }\n\
    \    }\n    if (min == next_min) return null;\n    return next_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uh0lxfd.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp4uh0lxfd.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp4uh0lxfd.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uh0lxfd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqzxty5xp.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzxty5xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bmsudlu.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp5bmsudlu.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmsudlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, v; lst) \n    {\n        if (v < min) \n        {\n         \
    \   min2 = min;\n            min = v;\n        } \n        else if (v < min2)\
    \ \n        {\n            min2 = v;\n        }\n    }\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpog_qp8o4.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpog_qp8o4.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog_qp8o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3yic9ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl3yic9ii.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3yic9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    \n    long min = lst[0];\n \
    \   long second = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (e\
    \ < min)\n        {\n            second = min;\n            min = e;\n       \
    \ }\n        else if (e < second)\n        {\n            second = e;\n      \
    \  }\n    }\n    \n    if (min == second)\n        return null;\n    \n    return\
    \ second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n       \
    \ auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzi5at0z.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzzi5at0z.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzzi5at0z.d(42): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzi5at0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        swap(min1, min2);\n\
    \    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < min1) \n      \
    \  {\n            min2 = min1;\n            min1 = e;\n        } \n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3itftrlz.d(28): Error: undefined identifier `swap`, did you mean
    template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmp3itftrlz.d(22): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp3itftrlz.d(42): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3itftrlz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min) \n    {\n        min = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n      \
    \  if (e < min) \n        {\n            min2 = min;\n            min = e;\n \
    \       }\n        else if (e < min2) \n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_08sz_z.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_08sz_z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    auto min = lst[0];\n    auto\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkpoyem2.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmplkpoyem2.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmplkpoyem2.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkpoyem2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, x; lst)\n    {\n        if (x < min)\n\
    \        {\n            second_min = min;\n            min = x;\n        }\n \
    \       else if (x < second_min)\n        {\n            second_min = x;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hqo49vk.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp_hqo49vk.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp_hqo49vk.d(38): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hqo49vk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    auto min = lst[0];\n    auto\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpruzt9ffo.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpruzt9ffo.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpruzt9ffo.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruzt9ffo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n \
    \       min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n       \
    \ if (e < min) \n        {\n            min2 = min;\n            min = e;\n  \
    \      }\n        else if (e < min2) \n        {\n            min2 = e;\n    \
    \    }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuwgvstok.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuwgvstok.d(43): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwgvstok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, num; lst[2..$])\n    {\n        if (num\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = num;\n    \
    \    }\n        else if (num < min2)\n        {\n            min2 = num;\n   \
    \     }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp623enpj.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpp623enpj.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp623enpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    if (min > second)\n    {\n        min = second;\n    \
    \    second = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if\
    \ (e < min)\n        {\n            second = min;\n            min = e;\n    \
    \    }\n        else if (e < second)\n        {\n            second = e;\n   \
    \     }\n    }\n    return second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa69bbz6h.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpa69bbz6h.d(41): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa69bbz6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgpcz1v1.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgpcz1v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  }\n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpniuhtkgi.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpniuhtkgi.d(38): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpniuhtkgi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val\
    \ < min) \n        {\n            next_min = min;\n            min = val;\n  \
    \      } \n        else if (val < next_min) \n        {\n            next_min\
    \ = val;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygazxoph.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpygazxoph.d(38): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygazxoph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    else\n    {\n        long min\
    \ = lst[0];\n        long second_min = lst[1];\n        foreach (i, e; lst)\n\
    \        {\n            if (e < min)\n            {\n                second_min\
    \ = min;\n                min = e;\n            }\n            else if (e < second_min)\n\
    \                second_min = e;\n        }\n        return second_min;\n    }\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemgmrciv.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpemgmrciv.d(36): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemgmrciv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min) \n    {\n        min = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n      \
    \  if (e < min) \n        {\n            min2 = min;\n            min = e;\n \
    \       } \n        else if (e < min2) \n        {\n            min2 = e;\n  \
    \      }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0i3xwn4.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp_0i3xwn4.d(43): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0i3xwn4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0) return null;\n    if (lst.length == 1) return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n\
    \        if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    if (min2 == min) return null;\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9z3t80yu.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp9z3t80yu.d(21): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp9z3t80yu.d(36): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp9z3t80yu.d(37): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9z3t80yu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, v; lst) \n    {\n        if (v < min) \n        {\n         \
    \   min2 = min;\n            min = v;\n        } \n        else if (v < min2)\
    \ \n        {\n            min2 = v;\n        }\n    }\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpog_qp8o4.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpog_qp8o4.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog_qp8o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgpcz1v1.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgpcz1v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuy_pyfvd.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuy_pyfvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        long tmp = min1;\n    \
    \    min1 = min2;\n        min2 = tmp;\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < min1)\n        {\n            min2 = min1;\n         \
    \   min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2\
    \ = e;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjkxy722.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpgjkxy722.d(42): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjkxy722.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long next = long.max;\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            next\
    \ = min;\n            min = i;\n        }\n        else if (i < next)\n      \
    \  {\n            next = i;\n        }\n    }\n    if (next == long.max) return\
    \ null;\n    return next;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3ojkh6f.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpq3ojkh6f.d(35): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpq3ojkh6f.d(36): Error: cannot implicitly convert expression `next` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3ojkh6f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min = long.max;\n    long min2 = long.max;\n    foreach(e; lst)\n    {\n\
    \        if(e < min)\n        {\n            min2 = min;\n            min = e;\n\
    \        }\n        else if(e < min2)\n        {\n            min2 = e;\n    \
    \    }\n    }\n    return min2 == long.max ? null : min2;\n}\nunittest\n{\n  \
    \  alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcn7qj0k.d(34): Error: incompatible types for `(null) : (min2)`:
    `typeof(null)` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcn7qj0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n      \
    \  if (x < min1) \n        {\n            min2 = min1;\n            min1 = x;\n\
    \        } \n        else if (x < min2) \n        {\n            min2 = x;\n \
    \       }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyms6xevc.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpyms6xevc.d(43): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyms6xevc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeiryec2r.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeiryec2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp506t9648.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp506t9648.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    if (min > second_min)\n    {\n        min = second_min;\n\
    \        second_min = lst[0];\n    }\n    foreach (i, v; lst[2..$])\n    {\n \
    \       if (v < min)\n        {\n            second_min = min;\n            min\
    \ = v;\n        }\n        else if (v < second_min)\n        {\n            second_min\
    \ = v;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoic1m0ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpoic1m0ii.d(41): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoic1m0ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3yic9ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl3yic9ii.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3yic9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n  \
    \      min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if\
    \ (e < min)\n        {\n            min2 = min;\n            min = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt8yyazem.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x455b09]

    ??:? void tmpt8yyazem.__unittest_L43_C1() [0x4419fa]

    ??:? void tmpt8yyazem.__modtest() [0x453618]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455136]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a34d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]

    ??:? runModuleUnitTests [0x45e8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456a94]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, x; lst)\n    {\n        if (x < min)\n     \
    \   {\n            min2 = min;\n            min = x;\n        }\n        else\
    \ if (x < min2)\n        {\n            min2 = x;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0iv4man_.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp0iv4man_.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0iv4man_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < min)\
    \ \n        {\n            next_min = min;\n            min = val;\n        }\n\
    \        else if (val < next_min) \n        {\n            next_min = val;\n \
    \       }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgwcd5l9.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpcgwcd5l9.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgwcd5l9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztk901tq.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpztk901tq.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztk901tq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp506t9648.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp506t9648.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa725m13d.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(38): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa725m13d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuy_pyfvd.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuy_pyfvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvrbv_8l.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpxvrbv_8l.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvrbv_8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3yic9ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl3yic9ii.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3yic9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgpcz1v1.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgpcz1v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp506t9648.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp506t9648.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp506t9648.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = minElement(lst);\n\
    \    long min2 = long.max;\n    foreach (i; lst)\n    {\n        if (i == min)\n\
    \            continue;\n        if (i < min2)\n            min2 = i;\n    }\n\
    \    if (min2 == long.max)\n        return null;\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2olv89v7.d(22): Error: undefined identifier `minElement`

    /tmp/tmp2olv89v7.d(21): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2olv89v7.d(32): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2olv89v7.d(33): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2olv89v7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min1 = lst[0];\n    long min2 =\
    \ lst[1];\n    if (min1 > min2) {\n        min1 = lst[1];\n        min2 = lst[0];\n\
    \    }\n    foreach (i, e; lst[2..$]) {\n        if (e < min1) {\n           \
    \ min2 = min1;\n            min1 = e;\n        } else if (e < min2) {\n      \
    \      min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ocj046v.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7ocj046v.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ocj046v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$])\n    {\n        if (x\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = x;\n      \
    \  }\n        else if (x < min2)\n        {\n            min2 = x;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtne67mf.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmphtne67mf.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtne67mf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3yic9ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl3yic9ii.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3yic9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxoyyrby7.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxoyyrby7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s6_t_nn.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s6_t_nn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            next = min;\n            min = e;\n        }\n        else\
    \ if (e < next)\n        {\n            next = e;\n        }\n    }\n    if (min\
    \ == next)\n        return null;\n    return next;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2vd6_cf.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(38): Error: cannot implicitly convert expression `next` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2vd6_cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n\
    \        {\n            min2 = min;\n            min = v;\n        }\n       \
    \ else if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return Nullable!(long)(min2);\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk0o5ea4_.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x455af1]

    ??:? void tmpk0o5ea4_.__unittest_L40_C1() [0x4418ba]

    ??:? void tmpk0o5ea4_.__modtest() [0x4535fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eaf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x45511e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a335]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]

    ??:? runModuleUnitTests [0x45e8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456a7c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163095
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, el; lst)\n    {\n        if (el < min)\n \
    \       {\n            second = min;\n            min = el;\n        }\n     \
    \   else if (el < second)\n        {\n            second = el;\n        }\n  \
    \  }\n    if (min == second)\n        return null;\n    return second;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx_iasjn.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpdx_iasjn.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpdx_iasjn.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx_iasjn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\
    \ \n    {\n        if (e < min) \n        {\n            second_min = min;\n \
    \           min = e;\n        }\n        else if (e < second_min) \n        {\n\
    \            second_min = e;\n        }\n    }\n    if (min == second_min) \n\
    \    {\n        return Nullable!(long).init;\n    }\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cxww4j4.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cxww4j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqzxty5xp.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzxty5xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvrbv_8l.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpxvrbv_8l.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvrbv_8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9hm4oi7l.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp9hm4oi7l.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9hm4oi7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3yic9ii.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl3yic9ii.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3yic9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    if (lst.length == 1)\n    \
    \    return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    if (min2 == min)\n        return null;\n\
    \    return min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaweo7m9v.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaweo7m9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bxmls8g.d(38): Error: cannot implicitly convert expression `min2`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bxmls8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length <= 1)\n        return null;\n    long min = lst[0];\n    long\
    \ nmin = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            nmin = min;\n            min = e;\n        }\n        else\
    \ if (e < nmin)\n        {\n            nmin = e;\n        }\n    }\n    if (min\
    \ == nmin)\n        return null;\n    return nmin;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuebgeayt.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuebgeayt.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpuebgeayt.d(38): Error: cannot implicitly convert expression `nmin` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuebgeayt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, v; lst) \n    {\n        if (v < min) \n        {\n         \
    \   min2 = min;\n            min = v;\n        }\n        else if (v < min2) \n\
    \        {\n            min2 = v;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb2s6n_5c.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpb2s6n_5c.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb2s6n_5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bmsudlu.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp5bmsudlu.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmsudlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa725m13d.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(38): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa725m13d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    if (second_min < min) \n    {\n        min\
    \ = second_min;\n        second_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\
    \ \n    {\n        if (lst[i] < min) \n        {\n            second_min = min;\n\
    \            min = lst[i];\n        } \n        else if (lst[i] < second_min)\
    \ \n        {\n            second_min = lst[i];\n        }\n    }\n    return\
    \ second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9d1dmifg.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d1dmifg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuy_pyfvd.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpuy_pyfvd.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuy_pyfvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0) \n    {\n        return Nullable!(long)();\n    }\n  \
    \  else if (lst.length == 1) \n    {\n        return Nullable!(long)();\n    }\n\
    \    else \n    {\n        long min = lst[0];\n        long min2 = lst[1];\n \
    \       foreach (i, e; lst) \n        {\n            if (e < min) \n         \
    \   {\n                min2 = min;\n                min = e;\n            }\n\
    \            else if (e < min2) \n            {\n                min2 = e;\n \
    \           }\n        }\n        if (min2 == min) \n        {\n            return\
    \ Nullable!(long)();\n        }\n        else \n        {\n            return\
    \ Nullable!(long)(min2);\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcvdt6zyt.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x455b29]

    ??:? void tmpcvdt6zyt.__unittest_L54_C1() [0x4418f2]

    ??:? void tmpcvdt6zyt.__modtest() [0x453634]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455156]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a36d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]

    ??:? runModuleUnitTests [0x45e901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456ab4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163095
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    for (long i = 2; i < lst.length; i++)\n    {\n        if\
    \ (lst[i] < min)\n        {\n            min2 = min;\n            min = lst[i];\n\
    \        }\n        else if (lst[i] < min2)\n        {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 == min)\n        return null;\n    return min2;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3cvwuzw.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpd3cvwuzw.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpd3cvwuzw.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3cvwuzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  Nullable!(long) result = null;\n    if (lst.length > 1)\n    {\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        foreach (i, e; lst)\n  \
    \      {\n            if (e < min)\n            {\n                min2 = min;\n\
    \                min = e;\n            }\n            else if (e < min2)\n   \
    \         {\n                min2 = e;\n            }\n        }\n        if (min2\
    \ != min)\n        {\n            result = min2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n       \
    \ auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphs9nxkw4.d(20): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphs9nxkw4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bmsudlu.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp5bmsudlu.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmsudlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n   \
    \     {\n            second_smallest = smallest;\n            smallest = e;\n\
    \        }\n        else if (e < second_smallest) \n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt6c1yfx.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpvt6c1yfx.d(35): Error: cannot implicitly convert expression `second_smallest`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt6c1yfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    if (min > next_min) \n    {\n        min = next_min;\n\
    \        next_min = lst[0];\n    }\n    foreach (i; 2..lst.length) \n    {\n \
    \       if (lst[i] < min) \n        {\n            next_min = min;\n         \
    \   min = lst[i];\n        } \n        else if (lst[i] < next_min) \n        {\n\
    \            next_min = lst[i];\n        }\n    }\n    return next_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckpq1fx8.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpckpq1fx8.d(43): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckpq1fx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgpcz1v1.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpzgpcz1v1.d(38): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgpcz1v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n \
    \       min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n       \
    \ if (e < min) \n        {\n            min2 = min;\n            min = e;\n  \
    \      }\n        else if (e < min2) \n        {\n            min2 = e;\n    \
    \    }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuwgvstok.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpuwgvstok.d(43): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwgvstok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min1 = lst[0];\n    long min2 =\
    \ lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n        min2\
    \ = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n        if (x < min1)\
    \ \n        {\n            min2 = min1;\n            min1 = x;\n        } \n \
    \       else if (x < min2) \n        {\n            min2 = x;\n        }\n   \
    \ }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n\
    {\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1subp1p6.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp1subp1p6.d(40): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1subp1p6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, el; lst)\n    {\n        if (el < min)\n   \
    \     {\n            min2 = min;\n            min = el;\n        }\n        else\
    \ if (el < min2)\n        {\n            min2 = el;\n        }\n    }\n    if\
    \ (min2 == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcv8damol.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpcv8damol.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpcv8damol.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcv8damol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (index, value; lst) \n    {\n    \
    \    if (value < min) \n        {\n            second_min = min;\n           \
    \ min = value;\n        } \n        else if (value < second_min) \n        {\n\
    \            second_min = value;\n        }\n    }\n    if (min == second_min)\
    \ \n    {\n        return null;\n    }\n    return second_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptg2j5jfc.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmptg2j5jfc.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmptg2j5jfc.d(42): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptg2j5jfc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, x; lst)\n    {\n        if (x < min)\n     \
    \   {\n            min2 = min;\n            min = x;\n        }\n        else\
    \ if (x < min2)\n        {\n            min2 = x;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjn4yx5ne.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpjn4yx5ne.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpjn4yx5ne.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn4yx5ne.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        swap(min1, min2);\n\
    \    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < min1) \n      \
    \  {\n            min2 = min1;\n            min1 = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee5tqvrd.d(28): Error: undefined identifier `swap`, did you mean
    template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmpee5tqvrd.d(22): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpee5tqvrd.d(42): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee5tqvrd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztk901tq.d(20): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpztk901tq.d(35): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztk901tq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second = min;\n            min = e;\n        }\n  \
    \      else if (e < second) \n        {\n            second = e;\n        }\n\
    \    }\n    if (min == second) \n    {\n        return null;\n    }\n    return\
    \ second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n       \
    \ auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9q5cln9.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpz9q5cln9.d(40): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpz9q5cln9.d(42): Error: cannot implicitly convert expression `second` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9q5cln9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2) \n   \
    \ {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e;\
    \ lst[2..$]) \n    {\n        if (e < min1) \n        {\n            min2 = min1;\n\
    \            min1 = e;\n        }\n        else if (e < min2) \n        {\n  \
    \          min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsk110vq9.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x455b29]

    ??:? void tmpsk110vq9.__unittest_L45_C1() [0x441a16]

    ??:? void tmpsk110vq9.__modtest() [0x453634]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45eb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455156]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45a36d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45a3fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45a2f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]

    ??:? runModuleUnitTests [0x45e901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x456ab4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163096
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqzxty5xp.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzxty5xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3kvwvmga.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3kvwvmga.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kvwvmga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    if (min > second_min) \n    {\n        min\
    \ = lst[1];\n        second_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\
    \ \n    {\n        if (lst[i] < min) \n        {\n            second_min = min;\n\
    \            min = lst[i];\n        } \n        else if (lst[i] < second_min)\
    \ \n        {\n            second_min = lst[i];\n        }\n    }\n    return\
    \ second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9t2a0p5d.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp9t2a0p5d.d(43): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9t2a0p5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163094
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  }\n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpniuhtkgi.d(22): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpniuhtkgi.d(38): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpniuhtkgi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa725m13d.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpa725m13d.d(38): Error: cannot implicitly convert expression `second_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa725m13d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    if (min > next_min)\n    {\n        min = next_min;\n\
    \        next_min = lst[0];\n    }\n    foreach (i, v; lst[2..$])\n    {\n   \
    \     if (v < min)\n        {\n            next_min = min;\n            min =\
    \ v;\n        }\n        else if (v < next_min)\n        {\n            next_min\
    \ = v;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1quihurs.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp1quihurs.d(41): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1quihurs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163094
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z83rmdl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp6z83rmdl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z83rmdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        }\n   \
    \     else if (e < next_min) \n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cn70uk6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp3cn70uk6.d(36): Error: cannot implicitly convert expression `next_min`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cn70uk6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ if (min2 == min)\n        return Nullable!(long).init;\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bxmls8g.d(38): Error: cannot implicitly convert expression `min2`
    of type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bxmls8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b1n5ekl.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp7b1n5ekl.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b1n5ekl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2n0z7ic.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpu2n0z7ic.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2n0z7ic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1wi3wh6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpe1wi3wh6.d(36): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1wi3wh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  Nullable!(long) result = null;\n    if (lst.length > 1) \n    {\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        if (min > min2) \n     \
    \   {\n            min = min2;\n            min2 = lst[0];\n        }\n      \
    \  foreach (i; 2..lst.length) \n        {\n            if (lst[i] < min) \n  \
    \          {\n                min2 = min;\n                min = lst[i];\n   \
    \         } \n            else if (lst[i] < min2) \n            {\n          \
    \      min2 = lst[i];\n            }\n        }\n        if (min2 != min) \n \
    \       {\n            result = min2;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc38u2lkq.d(20): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc38u2lkq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163094
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            next = min;\n            min = e;\n        }\n        else\
    \ if (e < next)\n        {\n            next = e;\n        }\n    }\n    if (min\
    \ == next)\n        return null;\n    return next;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2vd6_cf.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpl2vd6_cf.d(38): Error: cannot implicitly convert expression `next` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2vd6_cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91b59vm6.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp91b59vm6.d(41): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91b59vm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqzxty5xp.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmpqzxty5xp.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzxty5xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the list.\n    Return None if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ux1a6wq.d(21): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(37): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!long`

    /tmp/tmp2ux1a6wq.d(38): Error: cannot implicitly convert expression `min2` of
    type `long` to `Nullable!long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ux1a6wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163092
