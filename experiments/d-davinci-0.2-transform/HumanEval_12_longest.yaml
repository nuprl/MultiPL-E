name: HumanEval_12_longest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result.isNull || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length)\n            longest = s;\n    }\n    return longest;\n\
    }\n/*\n    Return the sum of all the numbers in the given list.\n    >>> sum([])\n\
    \    0\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 4, 5])\n    15\n\
    */", "{\n    if (strings.length == 0)\n        return null;\n    auto longest\
    \ = strings[0];\n    foreach (s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < str.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(str; strings)\n    {\n        if(result is null || str.length\
    \ > result.length)\n        {\n            result = str;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if (result.isNull)\n        {\n\
    \            result = s;\n        }\n        else if (s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n    {\n \
    \       if(longest.isNull || str.length > longest.get.length) \n        {\n  \
    \          longest = str;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings) \n    {\n        if(result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if(result.isNull ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    int\
    \ maxLength = 0;\n    foreach(string s; strings)\n    {\n        if(s.length >\
    \ maxLength)\n        {\n            maxLength = s.length;\n            result\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings) \n    {\n        if (longest is null\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length)\n           \
    \ longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    auto longest = strings[0];\n    foreach (string s; strings)\n   \
    \ {\n        if (s.length > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        string longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n     \
    \   if(longest.isNull || str.length > longest.get.length)\n        {\n       \
    \     longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || longest.get.length < s.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n            longest = s;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n\
    \        string longest = strings[0];\n        foreach (string s; strings)\n \
    \       {\n            if (s.length > longest.length)\n                longest\
    \ = s;\n        }\n        return longest;\n    }\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(!longest.isNull)\n\
    \        {\n            if(s.length > longest.get.length)\n            {\n   \
    \             longest = s;\n            }\n        }\n        else\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ if (strings.length == 0)\n        return null;\n    else\n    {\n        Nullable!(string)\
    \ longest = strings[0];\n        foreach (string s; strings)\n        {\n    \
    \        if (s.length > longest.get.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest is null || s.length > longest.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n/*\n    Return\
    \ the longest string in the list of strings.\n    >>> longest([\"a\", \"bb\",\
    \ \"ccc\"])\n    \"ccc\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n\
    \    \"dddd\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n\
    \    \"eeeee\"\n*/\nstring longest(string[] strings)\n{\n    string longest =\
    \ \"\";\n    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n    Return the longest string in the list of strings.\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    >>> longest([\"a\", \"bb\", \"ccc\",\
    \ \"dddd\"])\n    \"dddd\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\"])\n    \"eeeee\"\n*/\nstring longest(string[] strings)\n{\n    string\
    \ longest = \"\";\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n    Return the longest string in the list of strings.\n\
    \    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    >>> longest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n    >>> longest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\"])\n    \"eeeee\"\n*/\nstring longest(string[] strings)\n\
    {\n    string longest = \"\";\n    foreach(string s; strings)\n    {\n       \
    \ if(s.", "{\n    if (strings.length == 0)\n        return null;\n    auto longest\
    \ = strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings) \n    {\n    \
    \    if(result.isNull || s.length > result.get.length) \n        {\n         \
    \   result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n        if\
    \ (longest.isNull || s.length > longest.get.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if (longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n \
    \   foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || longest.get.length < s.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    else\n    {\n        string longest = strings[0];\n \
    \       foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result.isNull || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings) \n    {\n        if (result is null || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest;\n    foreach(string\
    \ s; strings)\n    {\n        if(!longest.isNull)\n        {\n            if(s.length\
    \ > longest.get.length)\n            {\n                longest = s;\n       \
    \     }\n        }\n        else\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n    Return the sum of all numbers in the input list.\
    \ Return None in case the input list is empty.\n    >>> sum_numbers([])\n    None\n\
    \    >>> sum_numbers([1, 2, 3])\n    6\n    >>> sum_numbers([1, 2, 3, \"a\"])\n\
    \    None\n*/\nNullable!(int) sum_numbers(int[] numbers) \n{\n    Nullable!(int)\
    \ result = null;\n    foreach(int n; numbers)\n    {\n        if(result is null)\n\
    \        {\n            result = n;\n        }\n        else\n        {\n    \
    \        result.get += n;\n        }\n    }\n    return result;\n}\n/*\n    Return\
    \ the sum of all numbers in the input list. Return None in case the input list\
    \ is empty.\n    >>> sum_numbers([])\n    None\n    >>> sum_numbers([1, 2, 3])\n\
    \    6\n    >>> sum_numbers([1, 2, 3, \"a\"])\n    None\n*/\nNullable!(int) sum_numbers(int[]\
    \ numbers) \n{\n    Nullable!(int) result = null;\n    foreach(int n; numbers)\n\
    \    {\n        if(result is null)\n        {\n            result = n;\n     \
    \   }\n        else\n        {\n            result.get += n;\n        }\n    }\n\
    \    return result;\n}\n/*\n    Return the sum of all numbers in the input list.\
    \ Return None in case the input list is empty.\n    >>> sum_numbers([])\n    None\n\
    \    >>> sum_numbers([1, 2, 3])\n    6\n    >>> sum_numbers([1, 2, 3, \"a\"])\n\
    \    None\n*/\nNullable!(int) sum_numbers(int[] numbers) \n{\n    Nullable!(int)\
    \ result = null;\n", "{\n    if (strings.length == 0)\n        return null;\n\
    \    auto longest = strings[0];\n    foreach (string s; strings)\n    {\n    \
    \    if (s.length > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n     \
    \   return null;\n    else\n    {\n        string longest = strings[0];\n    \
    \    foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(str; strings)\n    {\n        if(result.isNull ||\
    \ str.length > result.get.length)\n        {\n            result = str;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if (result is null || s.length > result.get.length)\n        {\n    \
    \        result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || longest.get.length < s.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n     \
    \   return null;\n    else\n    {\n        auto longest = strings[0];\n      \
    \  foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings) \n    {\n        if(longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result is null || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest;\n    foreach(string s; strings)\n    {\n\
    \        if(!longest.isNull)\n        {\n            if(s.length > longest.get.length)\n\
    \            {\n                longest = s;\n            }\n        }\n     \
    \   else\n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    string longest\
    \ = strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n    Given a list of strings, return a list of tuples, where each tuple contains\
    \ the string and its length.\n    >>> lengths([\"a\", \"bb\", \"ccc\"])\n    [(\"\
    a\", 1), (\"bb\", 2), (\"ccc\", 3)]\n*/\nTuple!(string, size_t)[] lengths(string[]\
    \ strings)\n{\n    Tuple!(string, size_t)[] result;\n    foreach (string s; strings)\n\
    \    {\n        result ~= tuple(s, s.length);\n    }\n    return result;\n}\n\
    /*\n    Given a list of strings, return a list of tuples, where each tuple contains\
    \ the string and its length.\n    >>> lengths([\"a\", \"bb\", \"ccc\"])\n    [(\"\
    a\", 1), (\"bb\", 2), (\"ccc\", 3)]\n*/\nTuple!(string, size_t)[] lengths2(string[]\
    \ strings)\n{\n    return map!(s => tuple(s, s.length))(strings);\n}\n/*\n   \
    \ Given a list of strings, return a list of tuples, where each tuple contains\
    \ the string and its length.\n    >>> lengths([\"a\", \"bb\", \"ccc\"])\n    [(\"\
    a\", 1), (\"bb\", 2), (\"ccc\", 3)]\n*/\nTuple!(string, size_t)[] lengths3(string[]\
    \ strings)\n{\n    return map!(s => tuple(s, s.length))(strings);\n}\n/*\n   \
    \ Given a list of strings, return a list of tuples, where each tuple contains\
    \ the string and its length.\n    >>> lengths([\"a\", \"bb\", \"ccc\"])\n    [(\"\
    a\", 1), (\"bb\", 2), (\"ccc\", 3)]\n*/\nTuple!(string, size_t)[] lengths4(string[]\
    \ strings)\n{\n    return map!(s => tuple(s, s", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    else\n    {\n        string max = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > max.length)\n\
    \                max = s;\n        }\n        return max;\n    }\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings) \n    {\n        if\
    \ (result.isNull || s.length > result.get.length) \n        {\n            result\
    \ = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(str; strings)\n    {\n        if(result.isNull\
    \ || str.length > result.get.length)\n        {\n            result = str;\n \
    \       }\n    }\n    return result;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if(!longest.isNull) \n      \
    \  {\n            if(s.length > longest.get.length) \n            {\n        \
    \        longest = s;\n            }\n        }\n        else \n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings) \n    {\n        if(longest is null ||\
    \ s.length > longest.get.length) \n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest is null || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    auto longest = strings[0];\n    foreach (string s; strings)\n   \
    \ {\n        if (s.length > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        auto longest = strings[0];\n        foreach (i, s; strings)\n\
    \        {\n            if (s.length > longest.length)\n                longest\
    \ = s;\n        }\n        return longest;\n    }\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if(longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(!result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings) \n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length) \n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    string longest = strings[0];\n    foreach (string s;\
    \ strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n  \
    \  foreach(string s; strings) \n    {\n        if(!result.isNull || s.length >\
    \ result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        string longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  Nullable!(string) longest = null;\n    foreach(string s; strings) \n    {\n\
    \        if (longest.isNull || s.length > longest.get.length) \n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0) \n    {\n        return null;\n    }\n    else \n    {\n\
    \        auto longest = strings[0];\n        foreach (string s; strings) \n  \
    \      {\n            if (s.length > longest.length) \n            {\n       \
    \         longest = s;\n            }\n        }\n        return longest;\n  \
    \  }\n}", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n\
    \    {\n        if(result.isNull || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) longest;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings) \n    {\n        if (result.isNull ||\
    \ s.length > result.get.length)\n            result = s;\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n\
    \        if(result.isNull || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest;\n    foreach(string s; strings)\n    {\n    \
    \    if(longest.isNull || longest.get.length < s.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest;\n    foreach(str; strings) \n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length) \n        {\n            longest = str;\n        }\n \
    \   }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    string longest = strings[0];\n    foreach (string s; strings)\n \
    \   {\n        if (s.length > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if (longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest is null || s.length > longest.get.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto result\
    \ = strings[0];\n        foreach (string str; strings)\n        {\n          \
    \  if (str.length > result.length)\n                result = str;\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull)\n        {\n            longest\
    \ = s;\n        }\n        else if(s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(string s; strings)\n    {\n        if(result.isNull ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(string\
    \ s; strings) \n    {\n        if (result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest;\n    foreach(string s; strings) \n    {\n\
    \        if(!longest.isNull) \n        {\n            if(s.length > longest.get.length)\
    \ \n            {\n                longest = s;\n            }\n        }\n  \
    \      else \n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n    else\n\
    \    {\n        auto max = strings[0];\n        foreach (s; strings)\n       \
    \     if (s.length > max.length)\n                max = s;\n        return max;\n\
    \    }\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings) \n    {\n        if(longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest is null || s.length > longest.get.length)\n       \
    \ {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result;\n    foreach(str; strings)\n    {\n        if(!result.isNull || str.length\
    \ > result.get.length)\n        {\n            result = str;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result;\n    foreach(str; strings)\
    \ \n    {\n        if(result.isNull || str.length > result.get.length) \n    \
    \    {\n            result = str;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings) \n    {\n\
    \        if(longest.isNull || s.length > longest.get.length) \n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    auto longest = strings[0];\n\
    \    foreach (s; strings)\n        if (s.length > longest.length)\n          \
    \  longest = s;\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings) \n    {\n        if(result.isNull || s.length\
    \ > result.get.length)\n            result = s;\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest is null || s.length > longest.get.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if (longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = Nullable!(string).init;\n    foreach(string s; strings)\
    \ \n    {\n        if (longest.isNull || s.length > longest.get.length) \n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings) \n    {\n        if (longest is null\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result;\n    foreach(string s; strings)\n    {\n     \
    \   if(result.isNull || s.length > result.get.length)\n        {\n           \
    \ result = s;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
