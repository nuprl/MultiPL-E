name: HumanEval_12_longest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result.isNull || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.get.length)\n            longest = s;\n    }\n    return longest;\n\
    }\n/*\n    Return the sum of all the numbers in the given list.\n    >>> sum([])\n\
    \    0\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 4, 5])\n    15\n\
    */", "{\n    if (strings.length == 0)\n        return null;\n    auto longest\
    \ = strings[0];\n    foreach (s; strings)\n    {\n        if (s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < str.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(str; strings)\n    {\n        if(result is null || str.length\
    \ > result.length)\n        {\n            result = str;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if (result.isNull)\n        {\n\
    \            result = s;\n        }\n        else if (s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n    {\n \
    \       if(longest.isNull || str.length > longest.get.length) \n        {\n  \
    \          longest = str;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
