language: d
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:?
    long[] tmple_ngf2k.intersperse(long[], long) [0x427e4b]\n??:? void tmple_ngf2k.__unittest_L24_C1()
    [0x427f3c]\n??:? void tmple_ngf2k.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0x91e6d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:?
    long[] tmple_ngf2k.intersperse(long[], long) [0x427e4b]\n??:? void tmple_ngf2k.__unittest_L24_C1()
    [0x427f3c]\n??:? void tmple_ngf2k.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0x91e6d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n\
    \    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n\
    \    false\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee_ckoms.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpee_ckoms.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:?
    long[] tmp6yl9uf2c.intersperse(long[], long) [0x427e51]\n??:? void tmp6yl9uf2c.__unittest_L26_C1()
    [0x427f9c]\n??:? void tmp6yl9uf2c.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288b7]\n??:? _d_run_main [0x428822]\n??:? main [0x4281ff]\n??:?
    __libc_start_main [0xaa3f5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> isPrime(1L)\n    false\n    >>> isPrime(2L)\n\
    \    true\n    >>> isPrime(3L)\n    true\n    >>> isPrime(4L)\n    false\n   \
    \ >>> isPrime(5L)\n    true\n    >>> isPrime(6L)\n    false\n    >>> isPrime(7L)\n\
    \    true\n    >>> isPrime(8L)\n    false\n    >>> isPrime(9L)\n    false\n  \
    \  >>> isPrime(10L)\n    false\n    >>> isPrime(11L)\n    true\n    >>> isPrime(12L)\n\
    \    false\n    >>> isPrime(13L)\n    true\n    >>> isPrime(14L)\n    false\n\
    \    >>> isPrime(15L)\n    false\n    >>> isPrime(16L)\n    false\n    >>> isPrime(17L)\n\
    \    true\n    >>> isPrime(18L)\n    false\n    >>> isPrime(19L)\n    true\n \
    \   >>> isPrime(20L)\n    false\n    >>> isPrime(21L)\n    false\n    >>> isPrime(22L)\n\
    \    false\n    >>> isPrime(23L)\n    true\n    >>> isPrime(24L)\n    false\n\
    \    >>> isPrime(25L)\n    false\n    >>> isPrime(26L)\n    false\n    >>> isPrime(27L)\n\
    \    false\n    >>> isPrime(28L)\n    false\n    >>> isPrime(29L)\n    true\n\
    \    >>> isPrime(30L)\n    false\n    >>> isPrime(31L)\n    true\n    >>> isPrime(32L)\n\
    \    false\n    >>> isPrime(33L)\n    false\n    >>> isPrime(34L)\n    false\n\
    \    >>> isPrime(35L)\n    false\n   \nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnddy2r0h.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnddy2r0h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (number; numbers)\n    {\n        result\
    \ ~= number;\n        if (number != numbers[$ - 1L])\n        {\n            result\
    \ ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8mcm9ywz.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x428425]\n??:? void tmp8mcm9ywz.__unittest_L24_C1() [0x4280f8]\n??:?
    void tmp8mcm9ywz.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bd59]\n??:? runModuleUnitTests [0x42ccc5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42886f]\n??:? _d_run_main [0x4287da]\n??:? main [0x4281bb]\n??:?
    __libc_start_main [0xd4445554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    foreach (i, e; numbers)\n    {\n        result[2 * i] = e;\n      \
    \  if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:?
    long[] tmpp_11qfn_.intersperse(long[], long) [0x427e4b]\n??:? void tmpp_11qfn_.__unittest_L22_C1()
    [0x427f3c]\n??:? void tmpp_11qfn_.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0x5e706554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (idx, number; numbers)\n\
    \    {\n        result[idx * 2] = number;\n        if (idx < numbers.length -\
    \ 1)\n            result[idx * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:?
    long[] tmpv2qmwwmh.intersperse(long[], long) [0x427e4b]\n??:? void tmpv2qmwwmh.__unittest_L22_C1()
    [0x427f3c]\n??:? void tmpv2qmwwmh.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0xbecfd554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    else\n        return [numbers[0]] ~ intersperse(numbers[1..$],\
    \ delimeter);\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpme_xj227.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283e5]\n??:? void tmpme_xj227.__unittest_L18_C1() [0x428021]\n??:?
    void tmpme_xj227.__modtest() [0x428168]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b442]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b419]\n??:? runModuleUnitTests [0x42c385]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42882f]\n??:? _d_run_main [0x42879a]\n??:? main [0x42817b]\n??:?
    __libc_start_main [0xef2d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        long[] result = new\
    \ long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach\
    \ (i, n; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n\
    \            result[2 * i + 1] = n;\n        }\n        return result;\n    }\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkr1x_air.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428455]\n??:? void tmpkr1x_air.__unittest_L27_C1() [0x428091]\n??:?
    void tmpkr1x_air.__modtest() [0x4281d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430651]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428918]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42889f]\n??:? _d_run_main [0x42880a]\n??:? main [0x4281eb]\n??:?
    __libc_start_main [0x7274e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da2b]\n??:? _d_newarrayT [0x4297b0]\n??:?
    long[] tmpcxid29sv.intersperse(long[], long) [0x427e4b]\n??:? void tmpcxid29sv.__unittest_L24_C1()
    [0x427f3c]\n??:? void tmpcxid29sv.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b37e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430609]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430595]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b355]\n??:? runModuleUnitTests [0x42c2c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0xe682554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xv8p7eg.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8xv8p7eg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if\
    \ (i != 0L) \n        {\n            result ~= delimeter;\n        }\n       \
    \ result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (index, number; numbers)\
    \ \n    {\n        result[2 * index] = number;\n        if (index < numbers.length\
    \ - 1) \n        {\n            result[2 * index + 1] = delimeter;\n        }\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (index, number; numbers) \n    {\n        result[2 * index]\
    \ = number;\n        if (index < numbers.length - 1) \n        {\n           \
    \ result[2 * index + 1] = delimeter;\n        }\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (index,\
    \ number; numbers) \n    {\n        result[2 * index] = number;\n        if (index\
    \ < numbers.length - 1) \n        {\n            result[2 * index + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n  \
    \  []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (index, number; numbers) \n    {\n\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpubf04szl.d(74): Error: found `unittest` instead of statement\n/tmp/tmpubf04szl.d(82):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubf04szl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i - 1] = delimeter;\n        result[2 * i] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpuksgopti.d(18): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428516]\n??:? long[] tmpuksgopti.intersperse(long[], long)
    [0x427f26]\n??:? void tmpuksgopti.__unittest_L23_C1() [0x42801e]\n??:? void tmpuksgopti.__modtest()
    [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c543]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430661]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3ad]\n??:? runModuleUnitTests [0x42c319]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428928]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288af]\n??:? _d_run_main [0x42881a]\n??:? main [0x4281f7]\n??:?
    __libc_start_main [0xd12b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if\
    \ (i != 0L) \n        {\n            result ~= delimeter;\n        }\n       \
    \ result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation
    failed\n----------------\n??:? _d_newarrayU [0x42da8b]\n??:? _d_newarrayT [0x429810]\n??:?
    long[] tmpjpq75svn.intersperse(long[], long) [0x427e51]\n??:? void tmpjpq75svn.__unittest_L26_C1()
    [0x427f9c]\n??:? void tmpjpq75svn.__modtest() [0x4281ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430669]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b3b5]\n??:? runModuleUnitTests [0x42c321]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288b7]\n??:? _d_run_main [0x428822]\n??:? main [0x4281ff]\n??:?
    __libc_start_main [0x1e7cc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = [];\n    foreach(i, number; numbers) \n    {\n        if (i != 0) \n\
    \        {\n            result ~= delimeter;\n        }\n        result ~= number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input list `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num;\
    \ numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n \
    \   foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers)\
    \ {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n \
    \   return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (num; numbers) {\n\
    \        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num;\
    \ numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpra640aox.d(68): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpra640aox.d", "-I/tmp"]\n'''
  stdout: b''
