name: HumanEval_158_find_max
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
  \ a list of strings.\n    The list contains different words. Return the word with\
  \ maximum number\n    of unique characters. If multiple strings have maximum number\
  \ of unique\n    characters, return the one which comes first in lexicographical\
  \ order.\n\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n \
  \   >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"\
  aaaaaaa\", \"bb\", \"cc\"])\n    \"aaaaaaa\"\n    \n*/\nstring find_max(string[]\
  \ words) \n"
tests: "unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
  , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"])\
  \ == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) ==\
  \ \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n\
  }\nvoid main(){}"
completions: ["{\n    string max = words[0];\n    foreach(string word; words)\n  \
    \  {\n        if(word.length > max.length)\n        {\n            max = word;\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n                unique++;\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max_word)\n                max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}", "{\n    int max_count = 0;\n    string max_word\
    \ = \"\";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word =\
    \ \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n    \
    \    int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = words[0];\n\
    \    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique = 0;\n   \
    \     foreach(char c; word) \n        {\n            if(c !in max_word) \n   \
    \         {\n                max_word ~= c;\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique) \n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c; word)\
    \ \n        {\n            if(word.count(c) == 1) \n            {\n          \
    \      unique++;\n            }\n        }\n        if(unique > max_unique) \n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(string word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n      \
    \      {\n                count = 1;\n            }\n            else\n      \
    \      {\n                if(word[0..count].count(c) == 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > max_count)\n        {\n            max_count = count;\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n \
    \   string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(!max_word.canFind(c))\n            {\n                unique++;\n   \
    \         }\n        }\n        if(unique > max_unique)\n        {\n         \
    \   max_unique = unique;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word =\
    \ \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = words[0];\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n                unique++;\n  \
    \      }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n       \
    \ int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(count(word, c) == 1)\n            {\n                unique++;\n    \
    \        }\n        }\n        if(unique > max_unique)\n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < max_word)\n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(word.count(ch) == 1)\n            {\n     \
    \           unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = words[0];\n\
    \    foreach(string word; words)\n    {\n        if(word.length > max_word.length)\n\
    \        {\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ s; words)\n    {\n        int unique = 0;\n        foreach(char c; s)\n    \
    \    {\n            if(!result.contains(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = s;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n  \
    \              unique++;\n        }\n        if(unique > max_unique)\n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    string max = \"\";\n    foreach(word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c !in max)\n            {\n                unique++;\n         \
    \       max ~= c;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max = word;\n      \
    \  }\n    }\n    return max;\n}", "{\n    string result = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(!result.canFind(ch))\n            {\n     \
    \           unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char; word)\n        {\n            if(word.count(char)\
    \ == 1)\n            {\n                unique_chars++;\n            }\n     \
    \   }\n        if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(!max_word.canFind(c))\n            {\n                count++;\n     \
    \       }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_unique = 0;\n    foreach(string word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(char c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words) \n    {\n        int count = 0;\n        foreach(c;\
    \ word) \n        {\n            if(!max_word.canFind(c)) \n            {\n  \
    \              count++;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(string word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char ch; word)\n        {\n            if(!ch in max_word)\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n       \
    \ int unique = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max = word;\n            max_unique = unique;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    int max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(count(word, c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n       \
    \ else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char; word)\n        {\n            if(!max_word.canFind(char))\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c !in max_word)\n            {\n       \
    \         unique++;\n                max_word ~= c;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n      \
    \      if(!ch in max_word)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(c; word) \n       \
    \ {\n            if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n                unique++;\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max_word)\n                max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!c.isLetter)\n     \
    \           continue;\n            if(word.count(c) == 1)\n                unique_chars++;\n\
    \        }\n        if(unique_chars > max_unique_chars)\n        {\n         \
    \   max_unique_chars = unique_chars;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    int max_unique_chars = 0;\n    string\
    \ max_word = \"\";\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c !in max_word)\n\
    \            {\n                unique_chars++;\n            }\n        }\n  \
    \      if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(char c; word)\n     \
    \   {\n            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = words[0];\n    int max_unique = 0;\n\
    \    foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c != ' ')\n            {\n             \
    \   unique++;\n            }\n        }\n        if(unique > max_unique)\n   \
    \     {\n            max_unique = unique;\n            max_word = word;\n    \
    \    }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n   \
    \     int unique = 0;\n        foreach(char c; word)\n        {\n            if(c\
    \ != ' ')\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}", "{\n  \
    \  string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n\
    \    {\n        int count = 0;\n        foreach(c; word) \n        {\n       \
    \     if(!max_word.canFind(c)) \n            {\n                count++;\n   \
    \         }\n        }\n        if(count > max_count) \n        {\n          \
    \  max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_count = 0;\n    foreach(string word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!contains(max_word, c))\n            {\n              \
    \  unique++;\n                max_word ~= c;\n            }\n        }\n     \
    \   if(unique > max_unique)\n        {\n            max_unique = unique;\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n \
    \   string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(count(word, c) == 1)\n                unique++;\n        }\n   \
    \     if(unique > max_unique)\n        {\n            max_unique = unique;\n \
    \           result = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < result)\n                result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word;\n    int max_count\
    \ = 0;\n    foreach(word; words) \n    {\n        int count = 0;\n        foreach(char\
    \ c; word) \n        {\n            if(count == 0) \n            {\n         \
    \       count = 1;\n            }\n            else \n            {\n        \
    \        if(c != word[count - 1]) \n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max_count) \n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}", "{\n  \
    \  string max = words[0];\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(ch; word)\n        {\n       \
    \     if(!ch.in(max))\n            {\n                count++;\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}", "{\n \
    \   string result = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n\
    \    foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n  \
    \  int max = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n   \
    \     foreach(ch; word)\n        {\n            if(!result.canFind(ch))\n    \
    \        {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(!ch in max_word)\n            {\n         \
    \       unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n  \
    \  int max = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(ch; word)\n        {\n            if(!ch in max_word)\n     \
    \       {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(c in result)\n\
    \                continue;\n            else\n            {\n                result\
    \ ~= c;\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max_word)\n                max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word;\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words)\n    {\n        auto unique_chars = set(word);\n        if(unique_chars.length\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n\
    \    foreach(string word; words) \n    {\n        int unique = 0;\n        foreach(char\
    \ c; word) \n        {\n            if(word.count(c) == 1) \n            {\n \
    \               unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n        else if(unique == max_unique) \n        {\n            max_word\
    \ = min(max_word, word);\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(string word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = words[0];\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words) \n    {\n        int unique = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(c in max_word) \n            {\n               \
    \ continue;\n            }\n            unique++;\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max_unique\
    \ = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n       \
    \ int unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = words[0];\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(c != ' ')\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = words[0];\n\
    \    int max_unique = 0;\n    foreach(string word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(word.count(c) == 1)\n                unique++;\n      \
    \  }\n        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(string word; words) \n    {\n        int\
    \ unique = 0;\n        foreach(char c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(char ch; word)\n        {\n  \
    \          if(!ch in max_word)\n            {\n                count++;\n    \
    \        }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n\
    \            if(!ch in max_word)\n            {\n                unique++;\n \
    \           }\n        }\n        if(unique > max_unique)\n        {\n       \
    \     max_unique = unique;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string max_word = \"\";\n    foreach(word; words)\n    {\n        if(word.length\
    \ > max)\n        {\n            max = word.length;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int\
    \ max_unique_chars = 0;\n    foreach(string word; words) \n    {\n        int\
    \ unique_chars = 0;\n        foreach(char c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique_chars++;\n            }\n    \
    \    }\n        if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars) \n        {\n            max_word = min(max_word, word);\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(string word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    int max = 0;\n    string max_word\
    \ = \"\";\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n  \
    \      foreach(char c; word)\n        {\n            if(c !in max_word)\n    \
    \        {\n                unique_chars++;\n                max_word ~= c;\n\
    \            }\n        }\n        if(unique_chars > max)\n        {\n       \
    \     max = unique_chars;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n      \
    \  foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n  \
    \          {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique =\
    \ 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(ch; word)\n        {\n            if(!ch in max_word)\n\
    \            {\n                count++;\n                max_word ~= ch;\n  \
    \          }\n        }\n        if(count > max_count)\n        {\n          \
    \  max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c !in word[0..$-1])\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            max_word = min(max_word, word);\n      \
    \  }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if (word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if (unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string result = \"\";\n    int max_unique =\
    \ 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!result.canFind(c))\n            {\n      \
    \          unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string max_word = \"\";\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count == 0)\n\
    \            {\n                count++;\n            }\n            else\n  \
    \          {\n                bool found = false;\n                foreach(char\
    \ c2; word[0..$-1])\n                {\n                    if(c == c2)\n    \
    \                {\n                        found = true;\n                  \
    \      break;\n                    }\n                }\n                if(!found)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            max_word = word;\n        }\n        else if(count == max)\n    \
    \    {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(count(word, c) == 1)\n            {\n                unique++;\n    \
    \        }\n        }\n        if(unique > max_unique)\n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = words[0];\n    int max_unique = 0;\n\
    \    foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c != ' ')\n            {\n             \
    \   unique++;\n            }\n        }\n        if(unique > max_unique)\n   \
    \     {\n            max_unique = unique;\n            max_word = word;\n    \
    \    }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max_word\
    \ = words[0];\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n\
    \        int unique = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(word.count(c) == 1)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(count(word, c) == 1)\n            {\n                unique++;\n    \
    \        }\n        }\n        if(unique > max_unique)\n        {\n          \
    \  max = word;\n            max_unique = unique;\n        }\n        else if(unique\
    \ == max_unique)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(count(word, c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n       \
    \ else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    int max_unique_chars = 0;\n    string\
    \ max_word = \"\";\n    foreach(word; words)\n    {\n        int unique_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c != ' ')\n \
    \           {\n                unique_chars++;\n            }\n        }\n   \
    \     if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_unique_chars = 0;\n   \
    \ foreach(word; words)\n    {\n        int unique_chars = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(word.count(c) == 1)\n            {\n   \
    \             unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c;\
    \ word) \n        {\n            if(count(word, c) == 1) \n            {\n   \
    \             unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n        else if(unique == max_unique) \n        {\n            max_word\
    \ = min(max_word, word);\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string result = \"\";\n    int max_count = 0;\n    foreach(word; words)\n  \
    \  {\n        int count = 0;\n        foreach(ch; word)\n        {\n         \
    \   if(!result.canFind(ch))\n            {\n                count++;\n       \
    \     }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            result = word;\n        }\n    }\n    return result;\n\
    }", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(word; words)\
    \ \n    {\n        int count = 0;\n        foreach(c; word) \n        {\n    \
    \        if(count == 0) \n            {\n                count++;\n          \
    \  }\n            else \n            {\n                if(word[0..count].count(c)\
    \ == 0) \n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max = word;\n        }\n        else if(count\
    \ == max_count) \n        {\n            if(word < max) \n            {\n    \
    \            max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(c !in max_word)\n            {\n                unique++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(unique >\
    \ max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n                unique++;\n  \
    \      }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = words[0];\n\
    \    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(c !in\
    \ result)\n            {\n                unique++;\n                result ~=\
    \ c;\n            }\n        }\n        if(unique > max_unique)\n        {\n \
    \           max_unique = unique;\n            result = word;\n        }\n    }\n\
    \    return result;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = words[0];\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(ch; word)\n        {\n            if(!ch in max_word)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(c !in max)\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n\
    \        foreach(ch; word) \n        {\n            if(word.count(ch) == 1) \n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique) \n        {\n    \
    \        if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n    {\n\
    \        int unique = 0;\n        foreach(char c; word) \n        {\n        \
    \    if(!max_word.canFind(c)) \n            {\n                unique++;\n   \
    \         }\n        }\n        if(unique > max_unique) \n        {\n        \
    \    max_unique = unique;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;\n}", "{\n    string result = \"\";\n    int max_unique = 0;\n\
    \    foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(word.count(c) == 1)\n            {\n   \
    \             unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string max_word = \"\";\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(c; word) \n        {\n            if(word.count(c) ==\
    \ 1) \n            {\n                unique++;\n            }\n        }\n  \
    \      if(unique > max) \n        {\n            max = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max) \n        {\n           \
    \ if(word < max_word) \n            {\n                max_word = word;\n    \
    \        }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(ch; word)\n        {\n            if(count == 0)\n\
    \            {\n                count = 1;\n            }\n            else\n\
    \            {\n                if(word[0..$-1].canFind(ch))\n               \
    \ {\n                    count = count;\n                }\n                else\n\
    \                {\n                    count += 1;\n                }\n     \
    \       }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(c !in word[0..$-1])\n                unique++;\n  \
    \      }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max_word;\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = words[0];\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(char c; word)\n        {\n            if(c\
    \ !in max_word)\n            {\n                unique++;\n            }\n   \
    \     }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(count(word, c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(c !in max_word)\n      \
    \      {\n                unique++;\n                max_word ~= c;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string result = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n\
    \            if(!result.canFind(ch))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            result = word;\n        }\n    }\n  \
    \  return result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n\
    \    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count(word, c) == 1)\n            {\n     \
    \           unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(string word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c != ' ')\n \
    \           {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int count\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(ch; word)\n        {\n            if(!ch in max_word)\n     \
    \       {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n \
    \       int unique = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max = words[0];\n    foreach(string word; words)\n    {\n \
    \       if(word.length > max.length)\n        {\n            max = word;\n   \
    \     }\n    }\n    return max;\n}", "{\n    string max_word = words[0];\n   \
    \ int max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n        else if(word.length\
    \ == max.length)\n        {\n            if(word < max)\n            {\n     \
    \           max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = words[0];\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(count == 0)\n            {\n                count++;\n            }\n\
    \            else\n            {\n                if(c != word[count-1])\n   \
    \             {\n                    count++;\n                }\n           \
    \ }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(word.count(ch) == 1)\n            {\n     \
    \           unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!(c in max_word))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n       \
    \ int unique = 0;\n        foreach(c; word) \n        {\n            if(c !in\
    \ word[0..$-1]) \n            {\n                unique++;\n            }\n  \
    \      }\n        if(unique > max_unique) \n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max = words[0];\n    foreach(string word; words)\n    {\n \
    \       if(word.length > max.length)\n        {\n            max = word;\n   \
    \     }\n    }\n    return max;\n}", "{\n    string max_word;\n    int max_count\
    \ = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(!(c in max_word))\n     \
    \       {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = words[0];\n\
    \    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word;\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word)\n       \
    \ {\n            if(count(word, c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max = words[0];\n\
    \    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\
    \ \n    {\n        int unique = 0;\n        foreach(c; word) \n        {\n   \
    \         if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            if(word < max_word)\
    \ \n            {\n                max_word = word;\n            }\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(c !in word[0..$-1])\n  \
    \              unique++;\n        }\n        if(unique > max_unique)\n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if (word.count(c) == 1)\n                unique++;\n\
    \        }\n        if (unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if (unique\
    \ == max_unique)\n        {\n            if (word < max_word)\n              \
    \  max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c !in word[0..$-1])\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_uniq_chars = 0;\n    foreach(word; words)\n    {\n        int uniq_chars\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(count(word, c)\
    \ == 1)\n            {\n                uniq_chars++;\n            }\n       \
    \ }\n        if(uniq_chars > max_uniq_chars)\n        {\n            max_uniq_chars\
    \ = uniq_chars;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count == max_count)\n            {\n              \
    \  if(word < max_word)\n                {\n                    max_word = word;\n\
    \                }\n            }\n            else if(count > max_count)\n  \
    \          {\n                max_word = word;\n                max_count = count;\n\
    \            }\n            count++;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!std.algorithm.any!(a\
    \ => a == c)(max_word))\n            {\n                unique++;\n          \
    \  }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = words[0];\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!contains(max_word, c))\n            {\n          \
    \      unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(string word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n    \
    \    {\n            if(word.count(c) == 1)\n                unique++;\n      \
    \  }\n        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n  \
    \      int count = 0;\n        foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    int max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(count(word, c) == 1)\n  \
    \          {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(string word;\
    \ words)\n    {\n        int count = 0;\n        foreach(char c; word)\n     \
    \   {\n            if(count == 0)\n            {\n                count++;\n \
    \           }\n            else if(word[0..count].find(c) == -1)\n           \
    \ {\n                count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n\
    \        foreach(c; word) \n        {\n            if(!result.canFind(c)) \n \
    \           {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    string max = \"\"\
    ;\n    int max_count = 0;\n    foreach(string word; words) \n    {\n        int\
    \ count = 0;\n        foreach(char c; word) \n        {\n            if(c !in\
    \ max) \n            {\n                count++;\n                max ~= c;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    foreach(string\
    \ word; words)\n    {\n        if(word.length > max.length)\n        {\n     \
    \       max = word;\n        }\n        else if(word.length == max.length)\n \
    \       {\n            if(word < max)\n            {\n                max = word;\n\
    \            }\n        }\n    }\n    return max;\n}", "{\n    string max = \"\
    \";\n    foreach(string word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n        else if(word.length ==\
    \ max.length)\n        {\n            if(word < max)\n            {\n        \
    \        max = word;\n            }\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(count(word, c) == 1)\n            {\n                unique++;\n    \
    \        }\n        }\n        if(unique > max_unique)\n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
