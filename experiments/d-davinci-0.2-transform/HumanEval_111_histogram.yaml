name: HumanEval_111_histogram
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
  a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a\
  \ b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
  )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"\
  b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n    \n*/\nNullable!(long[string])\
  \ histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    long[string] result;\n    foreach(c; test.split)\n    {\n  \
    \      if(result.count(c) == 0)\n        {\n            result[c] = 1;\n     \
    \   }\n        else\n        {\n            result[c] += 1;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; result)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if(max == 0)\n \
    \   {\n        return null;\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(c.value == max)\n        {\n            result2[c.key]\
    \ = c.value;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ dict = [words[0]: 1L];\n        foreach (word; words[1..$])\n        {\n   \
    \         if (word in dict)\n            {\n                dict[word] += 1L;\n\
    \            }\n            else\n            {\n                dict[word] =\
    \ 1L;\n            }\n        }\n        long max = dict.values.max;\n       \
    \ long[string] maxDict = [word: dict[word] for word in dict.keys if dict[word]\
    \ == max];\n        result = maxDict;\n        return result;\n    }\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    string[] words = test.split;\n    long[string] counts;\n\
    \    foreach(word; words)\n    {\n        if(counts.count(word) == 0)\n      \
    \  {\n            counts[word] = 1;\n        }\n        else\n        {\n    \
    \        counts[word] += 1;\n        }\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach(word; words)\n    {\n        if(counts[word] == max)\n        {\n\
    \            result[word] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    auto dict = test.split(\" \").map!(a => a[0]).groupBy!(a\
    \ => a).map!(a => a[0], a => a[1].length);\n    auto max = dict.values.max;\n\
    \    result = dict.filter!(a => a[1] == max).map!(a => a[0], a => a[1]).nullable;\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split;\n\
    \    long[string] counts;\n    foreach (word; words)\n    {\n        counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] max_counts;\n\
    \    foreach (word; counts.keys)\n    {\n        if (counts[word] == max)\n  \
    \      {\n            max_counts[word] = max;\n        }\n    }\n    result =\
    \ max_counts;\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n\
    \    {\n        if (dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word]++;\n      \
    \  }\n    }\n    long max = dict.values.max;\n    long[string] max_dict;\n   \
    \ foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n  \
    \          max_dict[key] = value;\n        }\n    }\n    result = max_dict;\n\
    \    return result;\n}", "{\n    long[string] result;\n    foreach(i, c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        result[c]++;\n  \
    \  }\n    long max = 0;\n    foreach(i, v; result)\n    {\n        if(v > max)\n\
    \            max = v;\n    }\n    if(max == 0)\n        return null;\n    long[string]\
    \ res;\n    foreach(i, v; result)\n    {\n        if(v == max)\n            res[i]\
    \ = v;\n    }\n    return res;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict = [:];\n    foreach(c; test.split)\n    {\n        if(c\
    \ in dict)\n        {\n            dict[c]++;\n        }\n        else\n     \
    \   {\n            dict[c] = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach(k, v; dict)\n    {\n        if(v == max)\n        {\n           \
    \ result = dict;\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] letters = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         letters[c]++;\n        }\n    }\n    long max = 0;\n    foreach(l; letters)\n\
    \    {\n        if(l.value > max)\n        {\n            max = l.value;\n   \
    \     }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n \
    \       foreach(l; letters)\n        {\n            if(l.value == max)\n     \
    \       {\n                result[l.key] = l.value;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n \
    \       {\n            histogram[c]++;\n        }\n    }\n    if(histogram.length\
    \ > 0)\n    {\n        long max = histogram.values.max;\n        foreach(c; histogram.keys)\n\
    \        {\n            if(histogram[c] == max)\n            {\n             \
    \   result.insert(c, histogram[c]);\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] histogram;\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            histogram[c]++;\n   \
    \     }\n    }\n    long max = maxElement(histogram.values);\n    long[string]\
    \ result;\n    foreach(k, v; histogram)\n    {\n        if(v == max)\n       \
    \ {\n            result[k] = v;\n        }\n    }\n    return result.length >\
    \ 0 ? result : null;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; result)\n    {\n        if(c.value >\
    \ max)\n        {\n            max = c.value;\n        }\n    }\n    long[string]\
    \ result2;\n    foreach(c; result)\n    {\n        if(c.value == max)\n      \
    \  {\n            result2[c.key] = c.value;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = null;\n    foreach(letter; test.split())\n    {\n        if(dict.find(letter)\
    \ == dict.end)\n        {\n            dict[letter] = 1;\n        }\n        else\n\
    \        {\n            dict[letter] += 1;\n        }\n        if(dict[letter]\
    \ > max)\n        {\n            max = dict[letter];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(letter; test.split())\n\
    \        {\n            if(dict[letter] == max)\n            {\n             \
    \   result[letter] = max;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return null;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] dict;\n        foreach(word; words)\n        {\n\
    \            if(word in dict)\n            {\n                dict[word] += 1;\n\
    \            }\n            else\n            {\n                dict[word] =\
    \ 1;\n            }\n        }\n        long max = maxElement(dict.values);\n\
    \        long[string] maxDict;\n        foreach(key, value; dict)\n        {\n\
    \            if(value == max)\n            {\n                maxDict[key] = value;\n\
    \            }\n        }\n        result = maxDict;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto words = test.split(\" \");\n    long[string]\
    \ histogram;\n    foreach (word; words)\n    {\n        histogram[word]++;\n \
    \   }\n    long max = histogram.values.max;\n    foreach (key, value; histogram)\n\
    \    {\n        if (value == max)\n        {\n            result.insert(key, value);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto words\
    \ = test.split(\" \");\n    auto counts = words.map!(a => 1L).array;\n    auto\
    \ letters = words.array;\n    foreach (i, letter; letters)\n    {\n        foreach\
    \ (j, other; letters[i + 1 .. $])\n        {\n            if (letter == other)\n\
    \            {\n                counts[i]++;\n                counts[i + 1 + j]++;\n\
    \            }\n        }\n    }\n    long max = counts.max;\n    auto maxes =\
    \ counts.filter!(a => a == max).array;\n    if (maxes.length == 1)\n    {\n  \
    \      result = [letters[counts.indexOf(max)] : max];\n    }\n    else\n    {\n\
    \        result = maxes.map!(a => letters[counts.indexOf(a)]).array.assocArray;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long max = 0;\n    long[string] dict = [:];\n    foreach(c; test.split())\n\
    \    {\n        if(dict.find(c) is null)\n        {\n            dict[c] = 1;\n\
    \        }\n        else\n        {\n            dict[c]++;\n        }\n     \
    \   if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            if (counts.count(word)\
    \ == 0)\n            {\n                counts[word] = 1;\n            }\n   \
    \         else\n            {\n                counts[word] += 1;\n          \
    \  }\n        }\n        long max = maxElement(counts.values);\n        foreach(key,\
    \ value; counts)\n        {\n            if (value == max)\n            {\n  \
    \              result.insert(key, value);\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach(word; words)\n    {\n        if(dict.count(word)\
    \ == 0)\n        {\n            dict[word] = 1;\n        }\n        else\n   \
    \     {\n            dict[word] += 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           result.set(dict);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long max =\
    \ 0;\n    long[string] dict = [:];\n    foreach(char c; test)\n    {\n       \
    \ if(c == ' ')\n            continue;\n        if(dict.count(c.to!string) == 0)\n\
    \            dict[c.to!string] = 1;\n        else\n            dict[c.to!string]++;\n\
    \        if(dict[c.to!string] > max)\n            max = dict[c.to!string];\n \
    \   }\n    foreach(string key; dict.keys)\n    {\n        if(dict[key] == max)\n\
    \            result[key] = dict[key];\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
