name: HumanEval_111_histogram
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
  a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a\
  \ b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
  )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"\
  b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n    \n*/\nNullable!(long[string])\
  \ histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    long[string] result;\n    foreach(c; test.split)\n    {\n  \
    \      if(result.count(c) == 0)\n        {\n            result[c] = 1;\n     \
    \   }\n        else\n        {\n            result[c] += 1;\n        }\n    }\n\
    \    long max = 0;\n    foreach(c; result)\n    {\n        if(c.value > max)\n\
    \        {\n            max = c.value;\n        }\n    }\n    if(max == 0)\n \
    \   {\n        return null;\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(c.value == max)\n        {\n            result2[c.key]\
    \ = c.value;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ dict = [words[0]: 1L];\n        foreach (word; words[1..$])\n        {\n   \
    \         if (word in dict)\n            {\n                dict[word] += 1L;\n\
    \            }\n            else\n            {\n                dict[word] =\
    \ 1L;\n            }\n        }\n        long max = dict.values.max;\n       \
    \ long[string] maxDict = [word: dict[word] for word in dict.keys if dict[word]\
    \ == max];\n        result = maxDict;\n        return result;\n    }\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    string[] words = test.split;\n    long[string] counts;\n\
    \    foreach(word; words)\n    {\n        if(counts.count(word) == 0)\n      \
    \  {\n            counts[word] = 1;\n        }\n        else\n        {\n    \
    \        counts[word] += 1;\n        }\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach(word; words)\n    {\n        if(counts[word] == max)\n        {\n\
    \            result[word] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    auto dict = test.split(\" \").map!(a => a[0]).groupBy!(a\
    \ => a).map!(a => a[0], a => a[1].length);\n    auto max = dict.values.max;\n\
    \    result = dict.filter!(a => a[1] == max).map!(a => a[0], a => a[1]).nullable;\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split;\n\
    \    long[string] counts;\n    foreach (word; words)\n    {\n        counts[word]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] max_counts;\n\
    \    foreach (word; counts.keys)\n    {\n        if (counts[word] == max)\n  \
    \      {\n            max_counts[word] = max;\n        }\n    }\n    result =\
    \ max_counts;\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n\
    \    {\n        if (dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word]++;\n      \
    \  }\n    }\n    long max = dict.values.max;\n    long[string] max_dict;\n   \
    \ foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n  \
    \          max_dict[key] = value;\n        }\n    }\n    result = max_dict;\n\
    \    return result;\n}", "{\n    long[string] result;\n    foreach(i, c; test)\n\
    \    {\n        if(c == ' ')\n            continue;\n        result[c]++;\n  \
    \  }\n    long max = 0;\n    foreach(i, v; result)\n    {\n        if(v > max)\n\
    \            max = v;\n    }\n    if(max == 0)\n        return null;\n    long[string]\
    \ res;\n    foreach(i, v; result)\n    {\n        if(v == max)\n            res[i]\
    \ = v;\n    }\n    return res;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict = [:];\n    foreach(c; test.split)\n    {\n        if(c\
    \ in dict)\n        {\n            dict[c]++;\n        }\n        else\n     \
    \   {\n            dict[c] = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach(k, v; dict)\n    {\n        if(v == max)\n        {\n           \
    \ result = dict;\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long[string] letters = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         letters[c]++;\n        }\n    }\n    long max = 0;\n    foreach(l; letters)\n\
    \    {\n        if(l.value > max)\n        {\n            max = l.value;\n   \
    \     }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n \
    \       foreach(l; letters)\n        {\n            if(l.value == max)\n     \
    \       {\n                result[l.key] = l.value;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    long[string]\
    \ histogram;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n \
    \       {\n            histogram[c]++;\n        }\n    }\n    if(histogram.length\
    \ > 0)\n    {\n        long max = histogram.values.max;\n        foreach(c; histogram.keys)\n\
    \        {\n            if(histogram[c] == max)\n            {\n             \
    \   result.insert(c, histogram[c]);\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] histogram;\n    foreach(c; test.split)\n \
    \   {\n        if(c.length == 1)\n        {\n            histogram[c]++;\n   \
    \     }\n    }\n    long max = maxElement(histogram.values);\n    long[string]\
    \ result;\n    foreach(k, v; histogram)\n    {\n        if(v == max)\n       \
    \ {\n            result[k] = v;\n        }\n    }\n    return result.length >\
    \ 0 ? result : null;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(result.count(c) == 0)\n        {\n            result[c] = 1;\n\
    \        }\n        else\n        {\n            result[c] += 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach(c; result)\n    {\n        if(c.value >\
    \ max)\n        {\n            max = c.value;\n        }\n    }\n    long[string]\
    \ result2;\n    foreach(c; result)\n    {\n        if(c.value == max)\n      \
    \  {\n            result2[c.key] = c.value;\n        }\n    }\n    if(result2.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result2;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = null;\n    foreach(letter; test.split())\n    {\n        if(dict.find(letter)\
    \ == dict.end)\n        {\n            dict[letter] = 1;\n        }\n        else\n\
    \        {\n            dict[letter] += 1;\n        }\n        if(dict[letter]\
    \ > max)\n        {\n            max = dict[letter];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(letter; test.split())\n\
    \        {\n            if(dict[letter] == max)\n            {\n             \
    \   result[letter] = max;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return null;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] dict;\n        foreach(word; words)\n        {\n\
    \            if(word in dict)\n            {\n                dict[word] += 1;\n\
    \            }\n            else\n            {\n                dict[word] =\
    \ 1;\n            }\n        }\n        long max = maxElement(dict.values);\n\
    \        long[string] maxDict;\n        foreach(key, value; dict)\n        {\n\
    \            if(value == max)\n            {\n                maxDict[key] = value;\n\
    \            }\n        }\n        result = maxDict;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto words = test.split(\" \");\n    long[string]\
    \ histogram;\n    foreach (word; words)\n    {\n        histogram[word]++;\n \
    \   }\n    long max = histogram.values.max;\n    foreach (key, value; histogram)\n\
    \    {\n        if (value == max)\n        {\n            result.insert(key, value);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto words\
    \ = test.split(\" \");\n    auto counts = words.map!(a => 1L).array;\n    auto\
    \ letters = words.array;\n    foreach (i, letter; letters)\n    {\n        foreach\
    \ (j, other; letters[i + 1 .. $])\n        {\n            if (letter == other)\n\
    \            {\n                counts[i]++;\n                counts[i + 1 + j]++;\n\
    \            }\n        }\n    }\n    long max = counts.max;\n    auto maxes =\
    \ counts.filter!(a => a == max).array;\n    if (maxes.length == 1)\n    {\n  \
    \      result = [letters[counts.indexOf(max)] : max];\n    }\n    else\n    {\n\
    \        result = maxes.map!(a => letters[counts.indexOf(a)]).array.assocArray;\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long max = 0;\n    long[string] dict = [:];\n    foreach(c; test.split())\n\
    \    {\n        if(dict.find(c) is null)\n        {\n            dict[c] = 1;\n\
    \        }\n        else\n        {\n            dict[c]++;\n        }\n     \
    \   if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n    }\n\
    \    if(max > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        string[] words = test.split(\" \");\n        long[string]\
    \ counts;\n        foreach(word; words)\n        {\n            if (counts.count(word)\
    \ == 0)\n            {\n                counts[word] = 1;\n            }\n   \
    \         else\n            {\n                counts[word] += 1;\n          \
    \  }\n        }\n        long max = maxElement(counts.values);\n        foreach(key,\
    \ value; counts)\n        {\n            if (value == max)\n            {\n  \
    \              result.insert(key, value);\n            }\n        }\n        return\
    \ result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    long[string] dict;\n    foreach(word; words)\n    {\n        if(dict.count(word)\
    \ == 0)\n        {\n            dict[word] = 1;\n        }\n        else\n   \
    \     {\n            dict[word] += 1;\n        }\n    }\n    long max = dict.values.max;\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           result.set(dict);\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long max =\
    \ 0;\n    long[string] dict = [:];\n    foreach(char c; test)\n    {\n       \
    \ if(c == ' ')\n            continue;\n        if(dict.count(c.to!string) == 0)\n\
    \            dict[c.to!string] = 1;\n        else\n            dict[c.to!string]++;\n\
    \        if(dict[c.to!string] > max)\n            max = dict[c.to!string];\n \
    \   }\n    foreach(string key; dict.keys)\n    {\n        if(dict[key] == max)\n\
    \            result[key] = dict[key];\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long[string] temp;\n    long max\
    \ = 0;\n    foreach(c; test.split)\n    {\n        if(temp.count(c) == 0)\n  \
    \      {\n            temp[c] = 1;\n        }\n        else\n        {\n     \
    \       temp[c] += 1;\n        }\n        if(temp[c] > max)\n        {\n     \
    \       max = temp[c];\n        }\n    }\n    if(max > 0)\n    {\n        result\
    \ = temp;\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n\
    \        }\n    }\n    if(result.length == 0)\n    {\n        return null;\n \
    \   }\n    long max = maxElement(result.values);\n    long[string] max_result;\n\
    \    foreach(c; result)\n    {\n        if(c.value == max)\n        {\n      \
    \      max_result[c.key] = c.value;\n        }\n    }\n    return max_result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] counts;\n        foreach(word; words)\n        {\n\
    \            if (counts.count(word) == 0)\n            {\n                counts[word]\
    \ = 1;\n            }\n            else\n            {\n                counts[word]\
    \ += 1;\n            }\n        }\n        long max = max(counts.values);\n  \
    \      foreach(key, value; counts)\n        {\n            if (value == max)\n\
    \            {\n                result.insert(key, value);\n            }\n  \
    \      }\n        return result;\n    }\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] dict = [:];\n    string[] words = test.split;\n  \
    \  foreach(word; words)\n    {\n        if(dict.count(word) == 0)\n        {\n\
    \            dict[word] = 1;\n        }\n        else\n        {\n           \
    \ dict[word] += 1;\n        }\n    }\n    long max = max(dict.values);\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            result\
    \ = [key: value];\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ 0;\n    foreach(k, v; result)\n    {\n        if(v > max)\n        {\n     \
    \       max = v;\n        }\n    }\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    auto ret = new long[string];\n    foreach(k, v; result)\n    {\n \
    \       if(v == max)\n        {\n            ret[k] = v;\n        }\n    }\n \
    \   return ret;\n}", "{\n    Nullable!(long[string]) result;\n    auto letters\
    \ = test.split(\" \");\n    auto letterCounts = [string: long]();\n    foreach(letter;\
    \ letters)\n    {\n        if(letterCounts.contains(letter))\n        {\n    \
    \        letterCounts[letter]++;\n        }\n        else\n        {\n       \
    \     letterCounts[letter] = 1;\n        }\n    }\n    long maxCount = max(letterCounts.values);\n\
    \    if(maxCount > 0)\n    {\n        result = [string: long]();\n        foreach(letter;\
    \ letterCounts.keys)\n        {\n            if(letterCounts[letter] == maxCount)\n\
    \            {\n                result[letter] = maxCount;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if(test.length == 0)\n    {\n        return result;\n    }\n    else\n  \
    \  {\n        auto words = test.split(\" \");\n        auto hist = words.histogram;\n\
    \        auto max = hist.values.max;\n        auto keys = hist.keys.filter!(a\
    \ => hist[a] == max);\n        result = keys.map!(a => [a: hist[a]]).array.join;\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] dict;\n    foreach(c; test.split)\n    {\n        if(c in dict)\n\
    \        {\n            dict[c] += 1L;\n        }\n        else\n        {\n \
    \           dict[c] = 1L;\n        }\n    }\n    long max = dict.values.max;\n\
    \    if(max == 0L)\n    {\n        return result;\n    }\n    else\n    {\n  \
    \      result = dict.filter!(a => a.value == max);\n        return result;\n \
    \   }\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string] dict\
    \ = new long[string];\n    foreach(char c; test)\n    {\n        if(c == ' ')\n\
    \            continue;\n        if(dict.count(c.toString()) == 0)\n          \
    \  dict[c.toString()] = 1;\n        else\n            dict[c.toString()]++;\n\
    \    }\n    long max = max(dict.values);\n    foreach(string key; dict.keys)\n\
    \    {\n        if(dict[key] == max)\n        {\n            if(result.isNull)\n\
    \                result = new long[string];\n            result[key] = dict[key];\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    long\
    \ max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c] += 1;\n        }\n        max = max(max, result[c]);\n \
    \   }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n\
    \        return result.filter!(a => a.value == max);\n    }\n}", "{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split())\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n\
    \        return result.filter!(a => a.value == max);\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    auto\
    \ letters = test.split;\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n        {\n            counts[letter]\
    \ = 1;\n        }\n        else\n        {\n            counts[letter] += 1;\n\
    \        }\n    }\n    long max = maxElement(counts.values);\n    foreach (letter;\
    \ letters)\n    {\n        if (counts[letter] == max)\n        {\n           \
    \ result = counts;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return result;\n    }\n    string[] words = test.split;\n    long[string]\
    \ histo = new long[string];\n    foreach(word; words)\n    {\n        histo[word]++;\n\
    \    }\n    long max = maxElement(histo.values);\n    foreach(key, value; histo)\n\
    \    {\n        if(value == max)\n        {\n            result.insert(key, value);\n\
    \        }\n    }\n    return result;\n}", "{\n    if (test.length == 0)\n   \
    \     return null;\n    auto letters = test.split;\n    long[string] counts;\n\
    \    foreach (letter; letters)\n    {\n        if (counts.count(letter) == 0)\n\
    \            counts[letter] = 1;\n        else\n            counts[letter]++;\n\
    \    }\n    long max = maxElement(counts.values);\n    long[string] result;\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == max)\n\
    \            result[letter] = max;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(c; test.split) \n\
    \    {\n        if(dict.count(c) == 0) \n        {\n            dict[c] = 1;\n\
    \        }\n        else \n        {\n            dict[c]++;\n        }\n    }\n\
    \    long max = dict.values.max;\n    foreach(k, v; dict) \n    {\n        if(v\
    \ == max) \n        {\n            result = dict;\n            break;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(k, v; result)\n    {\n     \
    \   if(v > max)\n        {\n            max = v;\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    foreach(k, v; result)\n    {\n\
    \        if(v != max)\n        {\n            result.remove(k);\n        }\n \
    \   }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length == 1)\n        {\n            result[c]++;\n     \
    \   }\n    }\n    long max = maxElement(result.values);\n    long[string] finalResult;\n\
    \    foreach(key, value; result)\n    {\n        if(value == max)\n        {\n\
    \            finalResult[key] = value;\n        }\n    }\n    return finalResult;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    long max = 0;\n   \
    \ foreach(c; result)\n    {\n        if(c.value > max)\n        {\n          \
    \  max = c.value;\n        }\n    }\n    long[string] result2;\n    foreach(c;\
    \ result)\n    {\n        if(c.value == max)\n        {\n            result2[c.key]\
    \ = c.value;\n        }\n    }\n    if(result2.length == 0)\n    {\n        return\
    \ null;\n    }\n    return result2;\n}", "{\n    long[string] dict;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            if(dict.contains(c))\n\
    \            {\n                dict[c]++;\n            }\n            else\n\
    \            {\n                dict[c] = 1;\n            }\n        }\n    }\n\
    \    if(dict.length == 0)\n    {\n        return null;\n    }\n    long max =\
    \ dict.values.max;\n    long[string] result;\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            result[key] = value;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    long[string]\
    \ dict;\n    foreach (letter; test.split(\" \"))\n    {\n        if (dict.count(letter)\
    \ == 0)\n        {\n            dict[letter] = 1;\n        }\n        else\n \
    \       {\n            dict[letter]++;\n        }\n    }\n    long max = dict.values.max();\n\
    \    foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n\
    \            result[key] = value;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c in\
    \ result)\n        {\n            result[c]++;\n        }\n        else\n    \
    \    {\n            result[c] = 1;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    return result.filter!(a\
    \ => a.value == max);\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    else\n    {\n        string[]\
    \ words = test.split(\" \");\n        long[string] counts;\n        foreach(word;\
    \ words)\n        {\n            counts[word]++;\n        }\n        long max\
    \ = maxElement(counts.values);\n        foreach(key; counts.keys)\n        {\n\
    \            if (counts[key] == max)\n            {\n                result[key]\
    \ = max;\n            }\n        }\n        return result;\n    }\n}", "{\n  \
    \  if (test.empty) \n    {\n        return null;\n    }\n    else \n    {\n  \
    \      auto words = test.split(\" \");\n        auto hist = words.histogram;\n\
    \        auto max = hist.values.max;\n        auto result = hist.byKeyValue!(v\
    \ => v == max);\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   string[] splitted = test.split(\" \");\n    long[string] dict;\n    foreach\
    \ (letter; splitted)\n    {\n        if (dict.contains(letter))\n        {\n \
    \           dict[letter] += 1;\n        }\n        else\n        {\n         \
    \   dict[letter] = 1;\n        }\n    }\n    long max = max(dict.values);\n  \
    \  foreach (key, value; dict)\n    {\n        if (value == max)\n        {\n \
    \           result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    if (test.empty)\n        return null;\n    long[string] result;\n\
    \    foreach (c; test.split)\n    {\n        if (c.length == 1)\n            result[c]++;\n\
    \    }\n    if (result.empty)\n        return null;\n    long max = result.values.max;\n\
    \    return result.filter!(a => a.value == max);\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] histogram;\n    foreach\
    \ (letter; letters)\n    {\n        histogram[letter]++;\n    }\n    long max\
    \ = maxElement(histogram.values);\n    foreach (letter; histogram.keys)\n    {\n\
    \        if (histogram[letter] == max)\n        {\n            result.insert(letter,\
    \ histogram[letter]);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(char c; test)\n    {\n        if(c == ' ')\n          \
    \  continue;\n        if(result.count(c) == 0)\n            result[c] = 1;\n \
    \       else\n            result[c]++;\n    }\n    if(result.length == 0)\n  \
    \      return null;\n    long max = result.values.max;\n    foreach(key, value;\
    \ result)\n    {\n        if(value != max)\n            result.remove(key);\n\
    \    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n    {\n        return result;\n    }\n    long[string] dict;\n\
    \    foreach (c; test.split())\n    {\n        if (dict.count(c) == 0)\n     \
    \   {\n            dict[c] = 1;\n        }\n        else\n        {\n        \
    \    dict[c] += 1;\n        }\n    }\n    long max = dict.values.max;\n    foreach\
    \ (c; dict.keys)\n    {\n        if (dict[c] == max)\n        {\n            result.insert(dict);\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        auto words = test.split(\" \");\n        auto wordCounts\
    \ = words.map!(a => a.length).array;\n        auto maxCount = max(wordCounts);\n\
    \        auto maxCountIndexes = wordCounts.indexOfAll(maxCount);\n        result\
    \ = new long[string]();\n        foreach (index; maxCountIndexes)\n        {\n\
    \            result[words[index]] = maxCount;\n        }\n        return result;\n\
    \    }\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n\
    \    {\n        return result;\n    }\n    auto words = test.split(\" \");\n \
    \   auto hist = words.histogram;\n    auto max = hist.values.max;\n    foreach\
    \ (key, value; hist)\n    {\n        if (value == max)\n        {\n          \
    \  result.insert(key, value);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ 0;\n    foreach(c; result)\n    {\n        if(c.value > max)\n        {\n  \
    \          max = c.value;\n        }\n    }\n    if(max == 0)\n    {\n       \
    \ return null;\n    }\n    foreach(c; result)\n    {\n        if(c.value != max)\n\
    \        {\n            result.remove(c.key);\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(letter; test.split)\n    {\n   \
    \     if(result.contains(letter))\n        {\n            result[letter]++;\n\
    \        }\n        else\n        {\n            result[letter] = 1;\n       \
    \ }\n    }\n    if(result.length == 0)\n    {\n        return null;\n    }\n \
    \   long max = result.values.max;\n    long[string] result2;\n    foreach(key,\
    \ value; result)\n    {\n        if(value == max)\n        {\n            result2[key]\
    \ = value;\n        }\n    }\n    return result2;\n}", "{\n    long[string] result;\n\
    \    if (test.length == 0)\n        return null;\n    foreach (char c; test.split())\n\
    \    {\n        if (result.count(c) == 0)\n            result[c] = 1;\n      \
    \  else\n            result[c]++;\n    }\n    long max = 0;\n    foreach (key,\
    \ value; result)\n    {\n        if (value > max)\n            max = value;\n\
    \    }\n    long[string] max_result;\n    foreach (key, value; result)\n    {\n\
    \        if (value == max)\n            max_result[key] = value;\n    }\n    return\
    \ max_result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ dict = [:];\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(c\
    \ in dict)\n        {\n            dict[c]++;\n        }\n        else\n     \
    \   {\n            dict[c] = 1;\n        }\n        if(dict[c] > max)\n      \
    \  {\n            max = dict[c];\n        }\n    }\n    if(max > 0)\n    {\n \
    \       result = [:];\n        foreach(k, v; dict)\n        {\n            if(v\
    \ == max)\n            {\n                result[k] = v;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] dict = [:];\n    string[] words = test.split;\n  \
    \  foreach(word; words)\n    {\n        if(word in dict)\n        {\n        \
    \    dict[word] += 1;\n        }\n        else\n        {\n            dict[word]\
    \ = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            result\
    \ = dict;\n            break;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n     \
    \   return result;\n    }\n    long[string] dict;\n    foreach (c; test.split)\n\
    \    {\n        if (c in dict)\n        {\n            dict[c]++;\n        }\n\
    \        else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = dict.values.max;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ == max)\n        {\n            result.set(dict);\n            break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long max = 0;\n    long[string] temp = [:];\n    foreach(char c;\
    \ test.split)\n    {\n        if(temp.count(c.toString) == 0)\n        {\n   \
    \         temp[c.toString] = 1;\n        }\n        else\n        {\n        \
    \    temp[c.toString]++;\n        }\n        if(temp[c.toString] > max)\n    \
    \    {\n            max = temp[c.toString];\n        }\n    }\n    foreach(k,\
    \ v; temp)\n    {\n        if(v == max)\n        {\n            result = temp;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            result[c]++;\n        }\n    }\n    if(result.length)\n    {\n  \
    \      long max = result.values.max;\n        return result.filter!(a => a.value\
    \ == max);\n    }\n    return null;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    long[string] hist;\n    foreach(c; test.split)\n    {\n        if(c in hist)\n\
    \        {\n            hist[c]++;\n        }\n        else\n        {\n     \
    \       hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    foreach(c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n        {\n            result.insert(c, hist[c]);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    long\
    \ max = 0;\n    foreach(c; test.split)\n    {\n        if(c.length == 0) continue;\n\
    \        if(!result.contains(c))\n        {\n            result[c] = 1;\n    \
    \    }\n        else\n        {\n            result[c]++;\n        }\n       \
    \ max = max(max, result[c]);\n    }\n    if(max == 0) return null;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 0) continue;\n        if(result[c]\
    \ != max)\n        {\n            result.remove(c);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    string[] words = test.split(\"\
    \ \");\n    long[string] hist = new long[string];\n    foreach (word; words)\n\
    \    {\n        hist[word]++;\n    }\n    long max = max(hist.values);\n    long[string]\
    \ max_dict = new long[string];\n    foreach (key, value; hist)\n    {\n      \
    \  if (value == max)\n        {\n            max_dict[key] = value;\n        }\n\
    \    }\n    result = max_dict;\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(!dict.contains(c))\n        {\n            dict[c]\
    \ = 1;\n        }\n        else\n        {\n            dict[c] += 1;\n      \
    \  }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n     \
    \   }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c;\
    \ dict.keys)\n        {\n            if(dict[c] == max)\n            {\n     \
    \           result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c] += 1;\n        }\n    }\n    if(result.length ==\
    \ 0)\n    {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] finalResult;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            finalResult[c] = max;\n        }\n    }\n  \
    \  return finalResult;\n}", "{\n    long[string] dict;\n    foreach(c; test.split)\n\
    \    {\n        if(c.length > 0)\n        {\n            if(dict.contains(c))\n\
    \            {\n                dict[c] += 1;\n            }\n            else\n\
    \            {\n                dict[c] = 1;\n            }\n        }\n    }\n\
    \    if(dict.length == 0)\n    {\n        return null;\n    }\n    long max =\
    \ dict.values.max;\n    long[string] result;\n    foreach(k, v; dict)\n    {\n\
    \        if(v == max)\n        {\n            result[k] = v;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[string] result = new long[string];\n   \
    \ foreach(c; test.split)\n    {\n        result[c]++;\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n     \
    \   long[string] result2 = new long[string];\n        foreach(k, v; result)\n\
    \        {\n            if(v == max)\n            {\n                result2[k]\
    \ = v;\n            }\n        }\n        return result2;\n    }\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = [:];\n    foreach(letter; test.split)\n    {\n        if(!dict.containsKey(letter))\n\
    \        {\n            dict[letter] = 1;\n        }\n        else\n        {\n\
    \            dict[letter]++;\n        }\n        if(dict[letter] > max)\n    \
    \    {\n            max = dict[letter];\n        }\n    }\n    if(max > 0)\n \
    \   {\n        result = [:];\n        foreach(key, value; dict)\n        {\n \
    \           if(value == max)\n            {\n                result[key] = value;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length)\n        {\n\
    \            result[c]++;\n        }\n    }\n    if(result.length)\n    {\n  \
    \      long max = result.values.max;\n        return result.filter!(a => a.value\
    \ == max);\n    }\n    return null;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n    {\n \
    \       hist[c]++;\n    }\n    long max = maxElement(hist.values);\n    foreach(k,\
    \ v; hist)\n    {\n        if(v == max)\n        {\n            result.insert(k,\
    \ v);\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n       \
    \ {\n            result[c] = 1;\n        }\n        else\n        {\n        \
    \    result[c]++;\n        }\n    }\n    if(result.length == 0)\n    {\n     \
    \   return null;\n    }\n    long max = result.values.max;\n    return result.filter!(a\
    \ => a.value == max);\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    else\n    {\n        string[]\
    \ words = test.split(\" \");\n        long[] counts = new long[words.length];\n\
    \        foreach (i, word; words)\n        {\n            counts[i] = 0;\n   \
    \         foreach (j, word2; words)\n            {\n                if (word ==\
    \ word2)\n                {\n                    counts[i]++;\n              \
    \  }\n            }\n        }\n        long max = maxElement(counts);\n     \
    \   long[] indices = new long[words.length];\n        long index = 0;\n      \
    \  foreach (i, count; counts)\n        {\n            if (count == max)\n    \
    \        {\n                indices[index] = i;\n                index++;\n  \
    \          }\n        }\n        indices = indices[0..index];\n        long[string]\
    \ dict = new long[string];\n        foreach (i, index; indices)\n        {\n \
    \           dict[words[index]] = max;\n        }\n        result = dict;\n   \
    \     return result;\n    }\n}", "{\n    if (test.length == 0) \n    {\n     \
    \   return null;\n    }\n    auto words = test.split(\" \");\n    long[string]\
    \ histogram;\n    foreach (word; words) \n    {\n        if (word in histogram)\
    \ \n        {\n            histogram[word] += 1;\n        }\n        else \n \
    \       {\n            histogram[word] = 1;\n        }\n    }\n    long max =\
    \ maxElement(histogram.values);\n    long[string] result;\n    foreach (word;\
    \ words) \n    {\n        if (histogram[word] == max) \n        {\n          \
    \  result[word] = max;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(dict.count(c) == 0)\n        {\n            dict[c] = 1;\n        }\n   \
    \     else\n        {\n            dict[c] += 1;\n        }\n    }\n    if(dict.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = dict.values.max;\n\
    \    foreach(k, v; dict)\n    {\n        if(v == max)\n        {\n           \
    \ result.insert(k, v);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 1;\n        }\n        else\n        {\n \
    \           result[c]++;\n        }\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            max_result[c] = max;\n        }\n    }\n   \
    \ return max_result.nullable;\n}", "{\n    Nullable!(long[string]) result;\n \
    \   if(test.length == 0)\n    {\n        return result;\n    }\n    else\n   \
    \ {\n        auto words = test.split(\" \");\n        long[string] histogram;\n\
    \        foreach(word; words)\n        {\n            if(histogram.count(word)\
    \ == 0)\n            {\n                histogram[word] = 1;\n            }\n\
    \            else\n            {\n                histogram[word] += 1;\n    \
    \        }\n        }\n        long max = maxElement(histogram.values);\n    \
    \    foreach(key, value; histogram)\n        {\n            if(value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.typecons;\n  \
    \  import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n\
    \    import std.typecons;\n    import std.typecons;\n    import", "{\n    long[string]\
    \ result;\n    foreach(c; test.split())\n    {\n        result[c]++;\n    }\n\
    \    long max = max(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    foreach(k,v; result)\n    {\n        if(v != max)\n        {\n   \
    \         result.remove(k);\n        }\n    }\n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result;\n    long[string] dict;\n    foreach(c; test.split)\n\
    \    {\n        if(dict.count(c) == 0)\n        {\n            dict[c] = 1;\n\
    \        }\n        else\n        {\n            dict[c] += 1;\n        }\n  \
    \  }\n    if(dict.length == 0)\n    {\n        return null;\n    }\n    else\n\
    \    {\n        long max = dict.values.max;\n        foreach(c; dict.keys)\n \
    \       {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n        return result;\n    }\n}", "{\n  \
    \  Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            hist[c]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach(c; hist)\n    {\n        if(c.value\
    \ > max)\n        {\n            max = c.value;\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = [:];\n        foreach(c; hist)\n        {\n  \
    \          if(c.value == max)\n            {\n                result[c.key] =\
    \ c.value;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n  \
    \  foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = [k: v];\n            }\n            else\n\
    \            {\n                result[k] = v;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    import std.algorithm.comparison : max;\n\
    \    import std.algorithm.iteration : map, filter, count;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.typecons : Nullable;\n\
    \    import std.conv : to;\n    import std.math : max;\n    import std.range :\
    \ takeExactly;\n    import std.algorithm.searching : countUntil;\n    import std.algorithm.mutation\
    \ : move;\n    import std.range : retro;\n    import std.range : retro;\n    import\
    \ std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range :", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] letterCounts;\n    foreach (letter; letters)\n\
    \    {\n        if (letterCounts.count(letter) == 0)\n        {\n            letterCounts[letter]\
    \ = 1;\n        }\n        else\n        {\n            letterCounts[letter] +=\
    \ 1;\n        }\n    }\n    long maxCount = max(letterCounts.values);\n    foreach\
    \ (letter; letterCounts.keys)\n    {\n        if (letterCounts[letter] == maxCount)\n\
    \        {\n            result.insert(letter, letterCounts[letter]);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[string] result = new long[string];\n\
    \    foreach(c; test.split())\n    {\n        result[c]++;\n    }\n    long max\
    \ = maxElement(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    return result.filter!(a => a.value == max);\n}", "{\n    auto result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ 0;\n    foreach(c; result)\n    {\n        if(c.value > max)\n        {\n  \
    \          max = c.value;\n        }\n    }\n    if(max == 0)\n    {\n       \
    \ return null;\n    }\n    auto result2 = new long[string];\n    foreach(c; result)\n\
    \    {\n        if(c.value == max)\n        {\n            result2[c.key] = c.value;\n\
    \        }\n    }\n    return result2;\n}", "{\n    long[string] histogram = [:];\n\
    \    foreach(c; test.split)\n    {\n        histogram[c]++;\n    }\n    long max\
    \ = maxElement(histogram.values);\n    long[string] result = [:];\n    foreach(c;\
    \ histogram.keys)\n    {\n        if(histogram[c] == max)\n        {\n       \
    \     result[c] = max;\n        }\n    }\n    return result.length == 0 ? null\
    \ : result;\n}", "{\n    long[string] histogram;\n    foreach(letter; test.split)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = max(histogram.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    return histogram.filter!(a\
    \ => a.value == max);\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(result.count(c) == 0)\n        {\n        \
    \    result[c] = 1;\n        }\n        else\n        {\n            result[c]\
    \ += 1;\n        }\n    }\n    if(result.length == 0)\n    {\n        return null;\n\
    \    }\n    else\n    {\n        return result;\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] letters;\n    foreach(c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(letters.count(c) == 0)\n        \
    \    letters[c] = 1;\n        else\n            letters[c] += 1;\n    }\n    if(letters.length\
    \ == 0)\n        return null;\n    long max = 0;\n    foreach(l; letters)\n  \
    \  {\n        if(l.value > max)\n            max = l.value;\n    }\n    foreach(l;\
    \ letters)\n    {\n        if(l.value == max)\n            result.insert(l.key,\
    \ l.value);\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return null;\n    }\n    auto words\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (word; words)\n\
    \    {\n        if (counts.count(word) == 0)\n        {\n            counts[word]\
    \ = 1;\n        }\n        else\n        {\n            counts[word]++;\n    \
    \    }\n    }\n    long max = maxElement(counts.values);\n    foreach (key, value;\
    \ counts)\n    {\n        if (value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         result[c]++;\n        }\n    }\n    long max = result.values.max;\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    foreach(k, v; result)\n\
    \    {\n        if(v != max)\n        {\n            result.remove(k);\n     \
    \   }\n    }\n    return result;\n}", "{\n    auto hist = test.split(\" \");\n\
    \    auto hist_dict = new long[string];\n    foreach(i; hist)\n    {\n       \
    \ if(hist_dict.count(i) == 0)\n        {\n            hist_dict[i] = 1;\n    \
    \    }\n        else\n        {\n            hist_dict[i]++;\n        }\n    }\n\
    \    auto max_val = max(hist_dict.values);\n    auto max_dict = new long[string];\n\
    \    foreach(i; hist_dict)\n    {\n        if(i.value == max_val)\n        {\n\
    \            max_dict[i.key] = i.value;\n        }\n    }\n    return max_dict.nullable;\n\
    }", "{\n    // TODO: implement\n    return null;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] temp = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        if(temp.count(c) == 0)\n        {\n            temp[c] = 1;\n\
    \        }\n        else\n        {\n            temp[c] += 1;\n        }\n  \
    \  }\n    long max = temp.values.max;\n    foreach(k, v; temp)\n    {\n      \
    \  if(v == max)\n        {\n            result = temp;\n        }\n    }\n   \
    \ return result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ dict = [:];\n    foreach(c; test.split)\n    {\n        if(c.length > 0)\n \
    \       {\n            if(dict.count(c) == 0)\n            {\n               \
    \ dict[c] = 1;\n            }\n            else\n            {\n             \
    \   dict[c] += 1;\n            }\n        }\n    }\n    if(dict.length > 0)\n\
    \    {\n        long max = dict.values.max;\n        foreach(k, v; dict)\n   \
    \     {\n            if(v == max)\n            {\n                if(result is\
    \ null)\n                {\n                    result = [k: v];\n           \
    \     }\n                else\n                {\n                    result[k]\
    \ = v;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] dict;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            dict[c]++;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    long[string] result;\n    foreach(k, v; dict)\n    {\n        if(v == max)\n\
    \        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto letters = test.split(\"\
    \ \");\n    long[string] counts;\n    foreach (letter; letters) \n    {\n    \
    \    if (counts.count(letter) == 0) \n        {\n            counts[letter] =\
    \ 1;\n        }\n        else \n        {\n            counts[letter] += 1;\n\
    \        }\n    }\n    long max = maxElement(counts.values);\n    foreach (key,\
    \ value; counts) \n    {\n        if (value == max) \n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   auto letters = test.split(\" \");\n    long[string] counts;\n    foreach (letter;\
    \ letters)\n    {\n        counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (key, value; counts)\n    {\n        if (value == max)\n        {\n\
    \            result[key] = value;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = [:];\n    foreach(letter; test.split)\n    {\n        if(dict.count(letter)\
    \ == 0)\n        {\n            dict[letter] = 1;\n        }\n        else\n \
    \       {\n            dict[letter]++;\n        }\n        if(dict[letter] > max)\n\
    \        {\n            max = dict[letter];\n        }\n    }\n    if(max > 0)\n\
    \    {\n        result = [:];\n        foreach(key, value; dict)\n        {\n\
    \            if(value == max)\n            {\n                result[key] = value;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    if (test.empty)\n\
    \        return null;\n    auto result = test.split(\" \");\n    auto dict = new\
    \ long[string];\n    foreach (letter; result)\n    {\n        if (dict.count(letter)\
    \ == 0)\n            dict[letter] = 1;\n        else\n            dict[letter]\
    \ += 1;\n    }\n    auto max = dict.values.max;\n    auto keys = dict.keys.filter!(a\
    \ => dict[a] == max);\n    return keys.length > 1 ? keys : null;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long[string] dict;\n    long max\
    \ = 0;\n    foreach(c; test.split(\" \"))\n    {\n        if(!dict.contains(c))\n\
    \        {\n            dict[c] = 1;\n        }\n        else\n        {\n   \
    \         dict[c] += 1;\n        }\n        if(dict[c] > max)\n        {\n   \
    \         max = dict[c];\n        }\n    }\n    foreach(key, value; dict)\n  \
    \  {\n        if(value == max)\n        {\n            if(result.isNull)\n   \
    \         {\n                result = new long[string];\n            }\n     \
    \       result[key] = value;\n        }\n    }\n    return result;\n}", "{\n \
    \   long[string] histogram;\n    foreach(letter; test.split)\n    {\n        histogram[letter]++;\n\
    \    }\n    long max = max(histogram.values);\n    if(max == 0)\n    {\n     \
    \   return null;\n    }\n    Nullable!(long[string]) result;\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    long[string] result\
    \ = new long[string];\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    long max =\
    \ maxElement(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    long[string] max_result = new long[string];\n    foreach(k, v; result)\n\
    \    {\n        if(v == max)\n        {\n            max_result[k] = v;\n    \
    \    }\n    }\n    return max_result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char c;\
    \ test.split)\n    {\n        if(c in dict)\n        {\n            dict[c]++;\n\
    \        }\n        else\n        {\n            dict[c] = 1;\n        }\n   \
    \     if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n  \
    \  }\n    foreach(char c; dict.keys)\n    {\n        if(dict[c] == max)\n    \
    \    {\n            if(result.isNull)\n            {\n                result =\
    \ [c: max];\n            }\n            else\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n \
    \   {\n        if(c.length)\n        {\n            hist[c]++;\n        }\n  \
    \  }\n    if(hist.length)\n    {\n        long max = maxElement(hist.values);\n\
    \        foreach(k, v; hist)\n        {\n            if(v == max)\n          \
    \  {\n                result.insert(k, v);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    else\n    {\n        string[]\
    \ words = test.split(\" \");\n        long[string] histogram;\n        foreach(word;\
    \ words)\n        {\n            if (histogram.count(word) == 0)\n           \
    \ {\n                histogram[word] = 1;\n            }\n            else\n \
    \           {\n                histogram[word] += 1;\n            }\n        }\n\
    \        long max = max(histogram.values);\n        long[string] max_histogram;\n\
    \        foreach(word; words)\n        {\n            if (histogram[word] == max)\n\
    \            {\n                max_histogram[word] = max;\n            }\n  \
    \      }\n        result = max_histogram;\n        return result;\n    }\n}",
  "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n    \
    \    return result;\n    }\n    long[string] histogram;\n    foreach (letter;\
    \ test.split)\n    {\n        if (histogram.count(letter) == 0)\n        {\n \
    \           histogram[letter] = 1;\n        }\n        else\n        {\n     \
    \       histogram[letter] += 1;\n        }\n    }\n    long max = maxElement(histogram.values);\n\
    \    foreach (key, value; histogram)\n    {\n        if (value == max)\n     \
    \   {\n            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n\
    \        return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] counts;\n        foreach(word; words)\n        {\n\
    \            counts[word]++;\n        }\n        long max = maxElement(counts.values);\n\
    \        foreach(key, value; counts)\n        {\n            if (value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long max = 0;\n    long[string] dict = new long[string];\n    foreach(c;\
    \ test.split())\n    {\n        if(dict.count(c) == 0)\n        {\n          \
    \  dict[c] = 1;\n        }\n        else\n        {\n            dict[c] += 1;\n\
    \        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n\
    \        foreach(c; test.split())\n        {\n            if(dict[c] == max)\n\
    \            {\n                result[c] = max;\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.empty)\n    {\n        return result;\n    }\n    auto letters = test.split;\n\
    \    long[string] counts;\n    foreach (letter; letters)\n    {\n        counts[letter]++;\n\
    \    }\n    long maxCount = max(counts.values);\n    foreach (letter; counts.keys)\n\
    \    {\n        if (counts[letter] == maxCount)\n        {\n            result.insert(letter,\
    \ counts[letter]);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    long max = 0;\n    foreach(char\
    \ c; test.split())\n    {\n        if(!dict.contains(c))\n        {\n        \
    \    dict[c] = 1;\n        }\n        else\n        {\n            dict[c] +=\
    \ 1;\n        }\n        if(dict[c] > max)\n        {\n            max = dict[c];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(string\
    \ key; dict.keys)\n        {\n            if(dict[key] == max)\n            {\n\
    \                result[key] = max;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    long[string]\
    \ dict = new long[string];\n    foreach(letter; test.split)\n    {\n        dict[letter]++;\n\
    \    }\n    long max = maxElement(dict.values);\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            result = dict;\n    \
    \        break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return result;\n    }\n  \
    \  auto words = test.split(\" \");\n    long[string] dict;\n    foreach(word;\
    \ words)\n    {\n        if(dict.count(word) == 0)\n        {\n            dict[word]\
    \ = 1;\n        }\n        else\n        {\n            dict[word] += 1;\n   \
    \     }\n    }\n    long max = dict.values.max;\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            result.set(dict);\n \
    \           break;\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(letter; test.split())\n    {\n        result[letter]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    long[string] result2;\n    foreach(letter; test.split())\n\
    \    {\n        if(result[letter] == max)\n        {\n            result2[letter]\
    \ = max;\n        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        if(result.isNull)\n                result = [:];\n            result[c]\
    \ = max;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict;\n    foreach(char c; test)\n    {\n \
    \       if(c == ' ') continue;\n        if(dict.count(c.toString()) == 0) dict[c.toString()]\
    \ = 1;\n        else dict[c.toString()]++;\n    }\n    long max = 0;\n    foreach(key,\
    \ value; dict)\n    {\n        if(value > max) max = value;\n    }\n    foreach(key,\
    \ value; dict)\n    {\n        if(value == max)\n        {\n            if(result.isNull)\
    \ result = new long[string];\n            result.get.put(key, value);\n      \
    \  }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    long[string] hist = [:];\n    foreach(c; test.split)\n    {\n   \
    \     if(c in hist)\n        {\n            hist[c]++;\n        }\n        else\n\
    \        {\n            hist[c] = 1;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ if(result is null)\n            {\n                result = [k: v];\n      \
    \      }\n            else\n            {\n                result[k] = v;\n  \
    \          }\n        }\n    }\n    return result;\n}", "{\n    long[string] dict;\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         dict[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; dict)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ result;\n    foreach(c; dict)\n    {\n        if(c.value == max)\n        {\n\
    \            result[c.key] = c.value;\n        }\n    }\n    return result;\n}",
  "{\n    long[string] dict;\n    foreach(char c; test)\n    {\n        if(c == '\
    \ ')\n            continue;\n        if(dict.count(c.to!string) == 0)\n      \
    \      dict[c.to!string] = 1;\n        else\n            dict[c.to!string]++;\n\
    \    }\n    long max = dict.values.max;\n    if(max == 0)\n        return null;\n\
    \    long[string] result;\n    foreach(string key; dict.keys)\n    {\n       \
    \ if(dict[key] == max)\n            result[key] = max;\n    }\n    return result;\n\
    }", "{\n    if (test.empty)\n        return null;\n    auto letters = test.split(\"\
    \ \");\n    auto letterCounts = new long[string];\n    foreach (letter; letters)\n\
    \    {\n        if (letterCounts.contains(letter))\n            letterCounts[letter]++;\n\
    \        else\n            letterCounts[letter] = 1;\n    }\n    long maxCount\
    \ = max(letterCounts.values);\n    auto maxLetters = new long[string];\n    foreach\
    \ (letter; letterCounts.keys)\n    {\n        if (letterCounts[letter] == maxCount)\n\
    \            maxLetters[letter] = maxCount;\n    }\n    return maxLetters;\n}",
  "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ > 0)\n        {\n            result[c]++;\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = maxElement(result.values);\n\
    \    long[string] result2;\n    foreach(k, v; result)\n    {\n        if(v ==\
    \ max)\n        {\n            result2[k] = v;\n        }\n    }\n    return result2;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto letters = test.split(\" \");\n    auto\
    \ letterCount = new long[string];\n    foreach(letter; letters)\n    {\n     \
    \   if(letterCount.contains(letter))\n        {\n            letterCount[letter]++;\n\
    \        }\n        else\n        {\n            letterCount[letter] = 1;\n  \
    \      }\n    }\n    long maxCount = max(letterCount.values);\n    foreach(letter;\
    \ letterCount.keys)\n    {\n        if(letterCount[letter] == maxCount)\n    \
    \    {\n            result.insert(letter, letterCount[letter]);\n        }\n \
    \   }\n    return result;\n}", "{\n    Nullable!(long[string]) result = new Nullable!(long[string])();\n\
    \    long[string] hist = new long[string]();\n    foreach(c; test.split)\n   \
    \ {\n        hist[c]++;\n    }\n    long max = max(hist.values);\n    foreach(k,\
    \ v; hist)\n    {\n        if(v == max)\n        {\n            result.value[k]\
    \ = v;\n        }\n    }\n    return result;\n}", "{\n    long[string] hist =\
    \ [:];\n    foreach(c; test.split)\n    {\n        hist[c]++;\n    }\n    long\
    \ max = hist.values.max;\n    if(max == 0)\n    {\n        return null;\n    }\n\
    \    long[string] result = [:];\n    foreach(c; hist.keys)\n    {\n        if(hist[c]\
    \ == max)\n        {\n            result[c] = max;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[string] result;\n    long max = 0;\n    foreach(c;\
    \ test.split)\n    {\n        if(result.contains(c))\n        {\n            result[c]++;\n\
    \        }\n        else\n        {\n            result[c] = 1;\n        }\n \
    \       max = max(max, result[c]);\n    }\n    if(max == 0)\n    {\n        return\
    \ null;\n    }\n    else\n    {\n        return result.filter!(a => a.value ==\
    \ max);\n    }\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0)\n    {\n        return result;\n    }\n    auto letters = test.split(\"\
    \ \");\n    long[string] letterCount;\n    foreach (letter; letters)\n    {\n\
    \        if (letterCount.contains(letter))\n        {\n            letterCount[letter]++;\n\
    \        }\n        else\n        {\n            letterCount[letter] = 1;\n  \
    \      }\n    }\n    long max = maxElement(letterCount.values);\n    foreach (key,\
    \ value; letterCount)\n    {\n        if (value == max)\n        {\n         \
    \   result.insert(key, value);\n        }\n    }\n    return result;\n}", "{\n\
    \    auto test_array = test.split;\n    long[string] histogram_dict;\n    foreach(letter;\
    \ test_array)\n    {\n        histogram_dict[letter]++;\n    }\n    long max_value\
    \ = max(histogram_dict.values);\n    long[string] max_dict;\n    foreach(key,\
    \ value; histogram_dict)\n    {\n        if(value == max_value)\n        {\n \
    \           max_dict[key] = value;\n        }\n    }\n    return max_dict.nullable;\n\
    }", "{\n    long[string] histo;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(histo.count(c) == 0)\n            {\n     \
    \           histo[c] = 1;\n            }\n            else\n            {\n  \
    \              histo[c]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(c; histo)\n    {\n        if(c.value > max)\n        {\n        \
    \    max = c.value;\n        }\n    }\n    long[string] result;\n    foreach(c;\
    \ histo)\n    {\n        if(c.value == max)\n        {\n            result[c.key]\
    \ = c.value;\n        }\n    }\n    return result.nullable;\n}", "{\n    long[string]\
    \ result;\n    foreach(letter; test.split)\n    {\n        if(result.count(letter)\
    \ == 0)\n        {\n            result[letter] = 1;\n        }\n        else\n\
    \        {\n            result[letter] += 1;\n        }\n    }\n    long max =\
    \ maxElement(result.values);\n    long[string] max_result;\n    foreach(key, value;\
    \ result)\n    {\n        if(value == max)\n        {\n            max_result[key]\
    \ = value;\n        }\n    }\n    return max_result.nullable;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.length == 0)\n    {\n        return result;\n    }\n \
    \   else\n    {\n        long[string] histo;\n        foreach(word; test.split)\n\
    \        {\n            if (histo.count(word) == 0)\n            {\n         \
    \       histo[word] = 1;\n            }\n            else\n            {\n   \
    \             histo[word]++;\n            }\n        }\n        long max = max(histo.values);\n\
    \        foreach(key, value; histo)\n        {\n            if (value == max)\n\
    \            {\n                result.set(key, value);\n            }\n     \
    \   }\n        return result;\n    }\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] histogram;\n    foreach (letter; letters)\n\
    \    {\n        if (histogram.count(letter) == 0)\n        {\n            histogram[letter]\
    \ = 1;\n        }\n        else\n        {\n            histogram[letter]++;\n\
    \        }\n    }\n    long max = 0;\n    foreach (letter; histogram.keys)\n \
    \   {\n        if (histogram[letter] > max)\n        {\n            max = histogram[letter];\n\
    \        }\n    }\n    foreach (letter; histogram.keys)\n    {\n        if (histogram[letter]\
    \ == max)\n        {\n            result[letter] = max;\n        }\n    }\n  \
    \  return result;\n}", "{\n    auto result = new long[string];\n    foreach(c;\
    \ test.split()) \n    {\n        result[c]++;\n    }\n    auto max = result.values.max;\n\
    \    if(max == 0) \n    {\n        return null;\n    }\n    auto keys = result.keys.filter!(k\
    \ => result[k] == max);\n    return keys.map!(k => tuple(k, result[k])).array;\n\
    }", "{\n    long[string] result;\n    foreach(c; test.split())\n    {\n      \
    \  if(result.count(c) == 0)\n        {\n            result[c] = 1;\n        }\n\
    \        else\n        {\n            result[c] += 1;\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    long max = result.values.max;\n\
    \    long[string] max_result;\n    foreach(c; result.keys)\n    {\n        if(result[c]\
    \ == max)\n        {\n            max_result[c] = max;\n        }\n    }\n   \
    \ return max_result;\n}", "{\n    Nullable!(long[string]) result;\n    if (test.length\
    \ == 0) \n    {\n        return result;\n    }\n    auto letters = test.split;\n\
    \    auto letterCounts = new long[string];\n    foreach (letter; letters) \n \
    \   {\n        letterCounts[letter]++;\n    }\n    auto maxCount = max(letterCounts.values);\n\
    \    foreach (letter; letterCounts.keys) \n    {\n        if (letterCounts[letter]\
    \ == maxCount) \n        {\n            result.insert(letter, maxCount);\n   \
    \     }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        if (counts.count(letter) == 0)\n        {\n            counts[letter]\
    \ = 1;\n        }\n        else\n        {\n            counts[letter]++;\n  \
    \      }\n    }\n    long max = counts.values.max;\n    foreach (key, value; counts)\n\
    \    {\n        if (value == max)\n        {\n            result.set(key, value);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] dict = new long[string];\n    foreach(letter; test.split)\n\
    \    {\n        if(dict.contains(letter))\n        {\n            dict[letter]++;\n\
    \        }\n        else\n        {\n            dict[letter] = 1;\n        }\n\
    \    }\n    long max = maxElement(dict.values);\n    foreach(key, value; dict)\n\
    \    {\n        if(value == max)\n        {\n            if(result is null)\n\
    \            {\n                result = new long[string];\n            }\n  \
    \          result[key] = value;\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new long[string];\n    foreach(c; test.split)\n    {\n    \
    \    if(c.length)\n        {\n            result[c]++;\n        }\n    }\n   \
    \ if(result.length)\n    {\n        auto max = maxElement(result.values);\n  \
    \      auto max_keys = result.byValue.keys(max);\n        return max_keys;\n \
    \   }\n    return null;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict;\n    long max = 0;\n    foreach(letter; test.split())\n\
    \    {\n        if(!dict.contains(letter))\n        {\n            dict[letter]\
    \ = 1;\n        }\n        else\n        {\n            dict[letter]++;\n    \
    \    }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    foreach(key, value; dict)\n    {\n        if(value == max)\n\
    \        {\n            if(result.isNull)\n            {\n                result\
    \ = new long[string];\n            }\n            result[key] = value;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length == 1)\n        {\n            result[c]++;\n\
    \        }\n    }\n    long max = max(result.values);\n    if(max == 0)\n    {\n\
    \        return null;\n    }\n    auto keys = result.keys.filter!(a => result[a]\
    \ == max);\n    return keys.map!(a => result[a]).array;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[] hist = new long[256];\n    foreach(c; test)\n   \
    \ {\n        ++hist[c];\n    }\n    long max = 0;\n    foreach(c; test)\n    {\n\
    \        if(hist[c] > max)\n        {\n            max = hist[c];\n        }\n\
    \    }\n    if(max > 0)\n    {\n        result = new long[string];\n        foreach(c;\
    \ test)\n        {\n            if(hist[c] == max)\n            {\n          \
    \      result[c] = max;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    if (test.empty)\n        return null;\n    auto letters = test.split;\n\
    \    auto letterCounts = new long[string];\n    foreach (letter; letters)\n  \
    \  {\n        if (letterCounts.contains(letter))\n            letterCounts[letter]\
    \ += 1;\n        else\n            letterCounts[letter] = 1;\n    }\n    long\
    \ maxCount = max(letterCounts.values);\n    auto result = new long[string];\n\
    \    foreach (letter; letterCounts.keys)\n    {\n        if (letterCounts[letter]\
    \ == maxCount)\n            result[letter] = maxCount;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] dict = new\
    \ long[string];\n    foreach(letter; test.split)\n    {\n        if(!dict.contains(letter))\n\
    \        {\n            dict[letter] = 1;\n        }\n        else\n        {\n\
    \            dict[letter]++;\n        }\n    }\n    long max = 0;\n    foreach(key,\
    \ value; dict)\n    {\n        if(value > max)\n        {\n            max = value;\n\
    \        }\n    }\n    foreach(key, value; dict)\n    {\n        if(value == max)\n\
    \        {\n            result[key] = value;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n\
    \        return result;\n    }\n    auto words = test.split(\" \");\n    auto\
    \ hist = words.histogram;\n    long max = hist.values.max;\n    foreach(word;\
    \ hist.byValue(max))\n    {\n        result[word] = max;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(c; test.split())\n    {\n        if(hist.count(c) == 0)\n       \
    \ {\n            hist[c] = 1;\n        }\n        else\n        {\n          \
    \  hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n   \
    \ foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n      \
    \      result.insert(c, hist[c]);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] result;\n    foreach(c; test.split())\n    {\n        result[c]++;\n\
    \    }\n    long max = maxElement(result.values);\n    if(max == 0)\n    {\n \
    \       return null;\n    }\n    else\n    {\n        return result.filter!(a\
    \ => a.value == max);\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict = [:];\n    foreach(c; test.split)\n    {\n        if(c\
    \ in dict)\n        {\n            dict[c]++;\n        }\n        else\n     \
    \   {\n            dict[c] = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    if(max > 0)\n    {\n        result = [:];\n        foreach(key, value; dict)\n\
    \        {\n            if(value == max)\n            {\n                result[key]\
    \ = value;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n    \
    \    {\n            result[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c;\
    \ result)\n    {\n        max = max(max, c[1]);\n    }\n    if(max == 0)\n   \
    \ {\n        return null;\n    }\n    long[string] result2;\n    foreach(c; result)\n\
    \    {\n        if(c[1] == max)\n        {\n            result2[c[0]] = c[1];\n\
    \        }\n    }\n    return result2;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        string[] words = test.split(\" \");\n        long[] counts = new\
    \ long[words.length];\n        foreach (i, word; words)\n        {\n         \
    \   counts[i] = words.count(word);\n        }\n        long max = maxElement(counts);\n\
    \        long[] maxIndexes = counts.indicesOf(max);\n        long[] maxWords =\
    \ new long[maxIndexes.length];\n        foreach (i, index; maxIndexes)\n     \
    \   {\n            maxWords[i] = words[index];\n        }\n        result = new\
    \ long[string](maxWords, max);\n        return result;\n    }\n}", "{\n    long[string]\
    \ result;\n    long max = 0;\n    foreach(c; test.split)\n    {\n        if(result.count(c)\
    \ == 0)\n        {\n            result[c] = 1;\n        }\n        else\n    \
    \    {\n            result[c]++;\n        }\n        max = max(max, result[c]);\n\
    \    }\n    return result.filter!(a => a.value == max).nullable;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = [:];\n    foreach(t; test.split)\n    {\n        if(dict.count(t) ==\
    \ 0)\n        {\n            dict[t] = 1;\n        }\n        else\n        {\n\
    \            dict[t]++;\n        }\n        if(dict[t] > max)\n        {\n   \
    \         max = dict[t];\n        }\n    }\n    if(max > 0)\n    {\n        result\
    \ = [:];\n        foreach(t; dict.keys)\n        {\n            if(dict[t] ==\
    \ max)\n            {\n                result[t] = max;\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char c;\
    \ test)\n    {\n        if(c != ' ')\n        {\n            if(!dict.contains(c))\n\
    \            {\n                dict[c] = 1;\n            }\n            else\n\
    \            {\n                dict[c]++;\n            }\n            if(dict[c]\
    \ > max)\n            {\n                max = dict[c];\n            }\n     \
    \   }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(char\
    \ c; test)\n        {\n            if(c != ' ')\n            {\n             \
    \   if(dict[c] == max)\n                {\n                    result[c] = max;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[string] result = new long[string];\n    foreach(c; test.split) \n  \
    \  {\n        if(c.length) \n        {\n            result[c]++;\n        }\n\
    \    }\n    if(result.length) \n    {\n        long max = maxElement(result.values);\n\
    \        long[string] max_result = new long[string];\n        foreach(c; result.keys)\
    \ \n        {\n            if(result[c] == max) \n            {\n            \
    \    max_result[c] = max;\n            }\n        }\n        return max_result;\n\
    \    }\n    return null;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n    {\n        return result;\n    }\n    auto words = test.split(\"\
    \ \");\n    auto dict = new long[string];\n    foreach (word; words)\n    {\n\
    \        if (word.length == 0)\n        {\n            continue;\n        }\n\
    \        if (dict.count(word) == 0)\n        {\n            dict[word] = 1;\n\
    \        }\n        else\n        {\n            dict[word] += 1;\n        }\n\
    \    }\n    long max = 0;\n    foreach (key, value; dict)\n    {\n        if (value\
    \ > max)\n        {\n            max = value;\n        }\n    }\n    foreach (key,\
    \ value; dict)\n    {\n        if (value == max)\n        {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}", "{\n    long[string] result;\n\
    \    foreach(c; test.split())\n    {\n        if(!result.contains(c))\n      \
    \  {\n            result[c] = 0;\n        }\n        result[c]++;\n    }\n   \
    \ long max = maxElement(result.values);\n    long[string] max_result;\n    foreach(c;\
    \ result.keys)\n    {\n        if(result[c] == max)\n        {\n            max_result[c]\
    \ = max;\n        }\n    }\n    return max_result.nullable;\n}", "{\n    long[string]\
    \ histogram;\n    foreach(char c; test)\n    {\n        if(c == ' ')\n       \
    \     continue;\n        histogram[c]++;\n    }\n    long max = 0;\n    foreach(key,\
    \ value; histogram)\n    {\n        if(value > max)\n            max = value;\n\
    \    }\n    long[string] result;\n    foreach(key, value; histogram)\n    {\n\
    \        if(value == max)\n            result[key] = value;\n    }\n    return\
    \ result.length == 0 ? null : result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    else\n \
    \   {\n        string[] words = test.split(\" \");\n        long[] count = new\
    \ long[words.length];\n        foreach (i, word; words)\n        {\n         \
    \   foreach (j, word2; words)\n            {\n                if (word == word2)\n\
    \                {\n                    count[i]++;\n                }\n     \
    \       }\n        }\n        long max = maxElement(count);\n        string[]\
    \ maxWords = new string[words.length];\n        int index = 0;\n        foreach\
    \ (i, word; words)\n        {\n            if (count[i] == max)\n            {\n\
    \                maxWords[index] = word;\n                index++;\n         \
    \   }\n        }\n        maxWords = maxWords[0..index];\n        result = new\
    \ Nullable!(long[string])(maxWords);\n        return result;\n    }\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if(test.length == 0)\n    {\n      \
    \  return result;\n    }\n    else\n    {\n        string[] words = test.split(\"\
    \ \");\n        long[string] count;\n        foreach(word; words)\n        {\n\
    \            count[word]++;\n        }\n        long max = max(count.values);\n\
    \        foreach(key, value; count)\n        {\n            if(value == max)\n\
    \            {\n                result[key] = value;\n            }\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict = [:];\n    foreach(letter; test.split())\n    {\n    \
    \    if(letter in dict)\n        {\n            dict[letter] += 1;\n        }\n\
    \        else\n        {\n            dict[letter] = 1;\n        }\n    }\n  \
    \  long max = 0;\n    foreach(key, value; dict)\n    {\n        if(value > max)\n\
    \        {\n            max = value;\n        }\n    }\n    foreach(key, value;\
    \ dict)\n    {\n        if(value == max)\n        {\n            result.insert(key,\
    \ value);\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[] counts = new long[256];\n    foreach(c; test)\n \
    \   {\n        counts[c]++;\n    }\n    long max = maxElement(counts);\n    if(max\
    \ > 0)\n    {\n        result = new long[string];\n        foreach(c; test)\n\
    \        {\n            if(counts[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    if\
    \ (test.length == 0)\n        return null;\n    auto letters = test.split(\" \"\
    );\n    auto letterCounts = new long[string];\n    foreach (letter; letters)\n\
    \    {\n        if (letterCounts.contains(letter))\n            letterCounts[letter]++;\n\
    \        else\n            letterCounts[letter] = 1;\n    }\n    auto maxCount\
    \ = max(letterCounts.values);\n    auto result = new long[string];\n    foreach\
    \ (letter; letters)\n    {\n        if (letterCounts[letter] == maxCount)\n  \
    \          result[letter] = maxCount;\n    }\n    return result;\n}", "{\n   \
    \ long[string] result = new long[string];\n    foreach(c; test.split())\n    {\n\
    \        result[c]++;\n    }\n    long max = max(result.values);\n    if(max ==\
    \ 0)\n    {\n        return null;\n    }\n    else\n    {\n        return result.filter!(a\
    \ => a.value == max);\n    }\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long max = 0;\n    long[string] dict = [:];\n    foreach(letter; test.split)\n\
    \    {\n        if(dict.count(letter) == 0)\n        {\n            dict[letter]\
    \ = 1;\n        }\n        else\n        {\n            dict[letter]++;\n    \
    \    }\n        if(dict[letter] > max)\n        {\n            max = dict[letter];\n\
    \        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(key,\
    \ value; dict)\n        {\n            if(value == max)\n            {\n     \
    \           result[key] = value;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length ==\
    \ 0) return result;\n    auto letters = test.split(\" \");\n    long[string] count;\n\
    \    foreach(letter; letters)\n    {\n        count[letter]++;\n    }\n    long\
    \ max = maxElement(count.values);\n    foreach(letter; count.keys)\n    {\n  \
    \      if(count[letter] == max)\n        {\n            result.insert(letter,\
    \ count[letter]);\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ dict;\n    foreach(c; test.split)\n    {\n        if(c.length == 1)\n      \
    \  {\n            if(dict.count(c) == 0)\n            {\n                dict[c]\
    \ = 1;\n            }\n            else\n            {\n                dict[c]\
    \ += 1;\n            }\n        }\n    }\n    long max = dict.values.max;\n  \
    \  long[string] result;\n    foreach(k, v; dict)\n    {\n        if(v == max)\n\
    \        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}", "{\n    long[string] result;\n    long max = 0;\n\
    \    foreach(c; test.split)\n    {\n        if(result.count(c) == 0)\n       \
    \ {\n            result[c] = 1;\n        }\n        else\n        {\n        \
    \    result[c]++;\n        }\n        max = max(max, result[c]);\n    }\n    if(max\
    \ == 0)\n    {\n        return null;\n    }\n    long[string] final;\n    foreach(c;\
    \ result.keys)\n    {\n        if(result[c] == max)\n        {\n            final[c]\
    \ = max;\n        }\n    }\n    return final;\n}", "{\n    long[string] result;\n\
    \    long max = 0;\n    foreach(c; test.split())\n    {\n        if(!result.contains(c))\n\
    \        {\n            result[c] = 0;\n        }\n        result[c]++;\n    \
    \    if(result[c] > max)\n        {\n            max = result[c];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return null;\n    }\n    long[string]\
    \ final;\n    foreach(c; result.keys)\n    {\n        if(result[c] == max)\n \
    \       {\n            final[c] = max;\n        }\n    }\n    return final;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = new long[string];\n    foreach(c; test.split)\n    {\n        if(dict.count(c)\
    \ == 0)\n        {\n            dict[c] = 1;\n        }\n        else\n      \
    \  {\n            dict[c]++;\n        }\n        if(dict[c] > max)\n        {\n\
    \            max = dict[c];\n        }\n    }\n    if(max > 0)\n    {\n      \
    \  result = new long[string];\n        foreach(c; test.split)\n        {\n   \
    \         if(dict[c] == max)\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result;\n    if (test.length == 0)\n        return null;\n    foreach (letter;\
    \ test.split)\n    {\n        if (letter.length == 0)\n            continue;\n\
    \        if (result.count(letter) == 0)\n            result[letter] = 1;\n   \
    \     else\n            result[letter]++;\n    }\n    long max = result.values.max;\n\
    \    long[string] max_letters;\n    foreach (letter; result.keys)\n    {\n   \
    \     if (result[letter] == max)\n            max_letters[letter] = max;\n   \
    \ }\n    return max_letters;\n}", "{\n    Nullable!(long[string]) result;\n  \
    \  long[string] dict;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(dict.contains(c))\n            {\n        \
    \        dict[c] += 1;\n            }\n            else\n            {\n     \
    \           dict[c] = 1;\n            }\n        }\n    }\n    if(dict.length\
    \ > 0)\n    {\n        long max = dict.values.max;\n        foreach(key, value;\
    \ dict)\n        {\n            if(value == max)\n            {\n            \
    \    result.insert(key, value);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = [:];\n    foreach(char c; test.split())\n    {\n        if(!dict.contains(c))\n\
    \        {\n            dict[c] = 1;\n        }\n        else\n        {\n   \
    \         dict[c]++;\n        }\n        if(dict[c] > max)\n        {\n      \
    \      max = dict[c];\n        }\n    }\n    foreach(string key; dict.keys)\n\
    \    {\n        if(dict[key] == max)\n        {\n            if(result.isNull)\n\
    \            {\n                result = [key: dict[key]];\n            }\n  \
    \          else\n            {\n                result[key] = dict[key];\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if (test.empty)\n    {\n        return result;\n    }\n    auto\
    \ words = test.split;\n    auto counts = words.map!(a => 1L).reduce!((a, b) =>\
    \ a + b);\n    auto max = counts.values.max;\n    result = counts.filter!(a =>\
    \ a.value == max).map!(a => a.key).array;\n    return result;\n}", "{\n    long[string]\
    \ result;\n    foreach(c; test.split)\n    {\n        result[c]++;\n    }\n  \
    \  long max = max(result.values);\n    if(max == 0)\n    {\n        return null;\n\
    \    }\n    else\n    {\n        long[string] result2;\n        foreach(k, v;\
    \ result)\n        {\n            if(v == max)\n            {\n              \
    \  result2[k] = v;\n            }\n        }\n        return result2;\n    }\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    foreach(k, v; hist)\n    {\n        if(v == max)\n        {\n           \
    \ if(result.isNull)\n            {\n                result = [k: v];\n       \
    \     }\n            else\n            {\n                result[k] = v;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] dict = [:];\n    foreach(char c; test.split)\n\
    \    {\n        if(c in dict)\n        {\n            dict[c] += 1;\n        }\n\
    \        else\n        {\n            dict[c] = 1;\n        }\n    }\n    long\
    \ max = maxElement(dict.values);\n    foreach(string key; dict.keys)\n    {\n\
    \        if(dict[key] == max)\n        {\n            result.insert(key, dict[key]);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c; test.split)\n\
    \    {\n        if(c in dict)\n        {\n            dict[c]++;\n        }\n\
    \        else\n        {\n            dict[c] = 1;\n        }\n        if(dict[c]\
    \ > max)\n        {\n            max = dict[c];\n        }\n    }\n    if(max\
    \ > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n        {\n\
    \            if(dict[c] == max)\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] histogram = [:];\n    foreach(letter; test.split)\n\
    \    {\n        histogram[letter]++;\n    }\n    long max = 0;\n    foreach(letter,\
    \ count; histogram)\n    {\n        if(count > max)\n        {\n            max\
    \ = count;\n        }\n    }\n    if(max > 0)\n    {\n        result = [:];\n\
    \        foreach(letter, count; histogram)\n        {\n            if(count ==\
    \ max)\n            {\n                result[letter] = count;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char c;\
    \ test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        result = dict;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long max = 0;\n    long[string]\
    \ dict = new long[string];\n    foreach(c; test.split)\n    {\n        if(dict.count(c)\
    \ == 0)\n        {\n            dict[c] = 1;\n        }\n        else\n      \
    \  {\n            dict[c]++;\n        }\n        if(dict[c] > max)\n        {\n\
    \            max = dict[c];\n        }\n    }\n    if(max > 0)\n    {\n      \
    \  result = new long[string];\n        foreach(c; dict.keys)\n        {\n    \
    \        if(dict[c] == max)\n            {\n                result[c] = max;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[string]\
    \ result = [].assumeUnique;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            if(result.count(c) == 0)\n            {\n    \
    \            result[c] = 1;\n            }\n            else\n            {\n\
    \                result[c] += 1;\n            }\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return null;\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result;\n    long[string] dict;\n    foreach(c; test.split)\n    {\n       \
    \ if(c.length == 1)\n        {\n            if(dict.contains(c))\n           \
    \ {\n                dict[c]++;\n            }\n            else\n           \
    \ {\n                dict[c] = 1;\n            }\n        }\n    }\n    if(dict.length\
    \ == 0)\n    {\n        result = null;\n    }\n    else\n    {\n        long max\
    \ = dict.values.max;\n        foreach(k, v; dict)\n        {\n            if(v\
    \ == max)\n            {\n                result = dict;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n\
    \    if (test.length == 0)\n    {\n        return result;\n    }\n    auto letters\
    \ = test.split(\" \");\n    long[string] counts;\n    foreach (letter; letters)\n\
    \    {\n        counts[letter]++;\n    }\n    long max = maxElement(counts.values);\n\
    \    foreach (letter; counts.keys)\n    {\n        if (counts[letter] == max)\n\
    \        {\n            result.insert(letter, counts[letter]);\n        }\n  \
    \  }\n    return result;\n}", "{\n    Nullable!(long[string]) result;\n    if\
    \ (test.length == 0)\n    {\n        return result;\n    }\n    string[] words\
    \ = test.split(\" \");\n    long[string] dict;\n    foreach (word; words)\n  \
    \  {\n        if (dict.contains(word))\n        {\n            dict[word] += 1;\n\
    \        }\n        else\n        {\n            dict[word] = 1;\n        }\n\
    \    }\n    long max = dict.values.max;\n    foreach (key, value; dict)\n    {\n\
    \        if (value == max)\n        {\n            result.set(dict);\n       \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(char\
    \ c; test)\n    {\n        if(c == ' ')\n            continue;\n        if(!dict.contains(c))\n\
    \            dict[c] = 0;\n        dict[c]++;\n        if(dict[c] > max)\n   \
    \         max = dict[c];\n    }\n    foreach(char c; test)\n    {\n        if(c\
    \ == ' ')\n            continue;\n        if(dict[c] == max)\n        {\n    \
    \        result = dict;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] histogram;\n    foreach(c; test.split)\n    {\n     \
    \   histogram[c]++;\n    }\n    long max = maxElement(histogram.values);\n   \
    \ long[string] result;\n    foreach(k, v; histogram)\n    {\n        if(v == max)\n\
    \        {\n            result[k] = v;\n        }\n    }\n    return result.length\
    \ == 0 ? null : result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    long[string] dict = [:];\n    foreach(c; test.split)\n    {\n        if(c\
    \ in dict)\n        {\n            dict[c]++;\n        }\n        else\n     \
    \   {\n            dict[c] = 1;\n        }\n    }\n    long max = maxElement(dict.values);\n\
    \    foreach(key, value; dict)\n    {\n        if(value == max)\n        {\n \
    \           if(result.isNull)\n            {\n                result = [key: value];\n\
    \            }\n            else\n            {\n                result[key] =\
    \ value;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = new long[string];\n    foreach(c; test.split)\n\
    \    {\n        hist[c]++;\n    }\n    long max = maxElement(hist.values);\n \
    \   if(max == 0)\n    {\n        return result;\n    }\n    result = new long[string];\n\
    \    foreach(c; hist.keys)\n    {\n        if(hist[c] == max)\n        {\n   \
    \         result[c] = max;\n        }\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    long[string] hist = new long[string];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length > 0)\n        {\n    \
    \        hist[c]++;\n        }\n    }\n    long max = 0;\n    foreach(c; hist)\n\
    \    {\n        if(c.value > max)\n        {\n            max = c.value;\n   \
    \     }\n    }\n    if(max > 0)\n    {\n        result = new long[string];\n \
    \       foreach(c; hist)\n        {\n            if(c.value == max)\n        \
    \    {\n                result.get!(true)[c.key] = c.value;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    auto result = new long[string];\n\
    \    foreach(ch; test.split)\n    {\n        if(ch.length == 1)\n        {\n \
    \           result[ch]++;\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return null;\n    }\n    else\n    {\n        return result;\n    }\n\
    }", "{\n    Nullable!(long[string]) result;\n    if (test.empty)\n    {\n    \
    \    return result;\n    }\n    long[string] letters;\n    foreach (letter; test.split)\n\
    \    {\n        if (letters.contains(letter))\n        {\n            letters[letter]++;\n\
    \        }\n        else\n        {\n            letters[letter] = 1;\n      \
    \  }\n    }\n    long max = maxElement(letters.values);\n    foreach (letter;\
    \ letters.keys)\n    {\n        if (letters[letter] == max)\n        {\n     \
    \       result[letter] = max;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result;\n    if (test.length == 0)\n    {\n     \
    \   return result;\n    }\n    else\n    {\n        auto words = test.split(\"\
    \ \");\n        auto dict = new long[string];\n        foreach (word; words)\n\
    \        {\n            if (dict.count(word) == 0)\n            {\n          \
    \      dict[word] = 1;\n            }\n            else\n            {\n     \
    \           dict[word] += 1;\n            }\n        }\n        long max = dict.values.max;\n\
    \        foreach (key, value; dict)\n        {\n            if (value == max)\n\
    \            {\n                result.insert(key, value);\n            }\n  \
    \      }\n        return result;\n    }\n}", "{\n    if (test.length == 0)\n \
    \       return null;\n    long[string] result;\n    string[] words = test.split(\"\
    \ \");\n    foreach (word; words)\n    {\n        if (result.length == 0)\n  \
    \      {\n            result[word] = 1;\n        }\n        else\n        {\n\
    \            if (result.contains(word))\n            {\n                result[word]\
    \ += 1;\n            }\n            else\n            {\n                result[word]\
    \ = 1;\n            }\n        }\n    }\n    long max = result.values.max;\n \
    \   long[string] max_result;\n    foreach (key, value; result)\n    {\n      \
    \  if (value == max)\n        {\n            max_result[key] = value;\n      \
    \  }\n    }\n    return max_result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    long[string] dict = [:];\n    foreach(c; test.split)\n    {\n \
    \       if(c.length == 1)\n        {\n            dict[c]++;\n        }\n    }\n\
    \    long max = maxElement(dict.values);\n    foreach(c; dict.keys)\n    {\n \
    \       if(dict[c] == max)\n        {\n            result.insert(dict);\n    \
    \        break;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long max = 0;\n    long[string] dict = [:];\n    foreach(c;\
    \ test.split)\n    {\n        if(!dict.contains(c))\n        {\n            dict[c]\
    \ = 1;\n        }\n        else\n        {\n            dict[c]++;\n        }\n\
    \        if(dict[c] > max)\n        {\n            max = dict[c];\n        }\n\
    \    }\n    if(max > 0)\n    {\n        result = [:];\n        foreach(c; dict.keys)\n\
    \        {\n            if(dict[c] == max)\n            {\n                result[c]\
    \ = max;\n            }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    long[string] hist = [:];\n    foreach(char c; test)\n  \
    \  {\n        if(c == ' ')\n            continue;\n        hist[c]++;\n    }\n\
    \    long max = 0;\n    foreach(char c; hist.keys)\n    {\n        if(hist[c]\
    \ > max)\n            max = hist[c];\n    }\n    foreach(char c; hist.keys)\n\
    \    {\n        if(hist[c] == max)\n            result[c] = max;\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result;\n    if(test.length ==\
    \ 0)\n    {\n        return result;\n    }\n    else\n    {\n        long[string]\
    \ dict;\n        string[] words = test.split(\" \");\n        foreach(word; words)\n\
    \        {\n            if(dict.count(word) == 0)\n            {\n           \
    \     dict[word] = 1;\n            }\n            else\n            {\n      \
    \          dict[word] += 1;\n            }\n        }\n        long max = dict.values.max;\n\
    \        foreach(key, value; dict)\n        {\n            if(value == max)\n\
    \            {\n                result = dict;\n            }\n        }\n   \
    \     return result;\n    }\n}", "{\n    long[string] result;\n    foreach(letter;\
    \ test.split)\n    {\n        result[letter]++;\n    }\n    long max = maxElement(result.values);\n\
    \    if(max == 0)\n    {\n        return null;\n    }\n    long[string] result2;\n\
    \    foreach(key, value; result)\n    {\n        if(value == max)\n        {\n\
    \            result2[key] = value;\n        }\n    }\n    return result2;\n}",
  "{\n    long[string] result;\n    foreach(c; test.split)\n    {\n        if(c.length\
    \ == 1)\n        {\n            result[c]++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[string] result;\n    foreach(letter; test.split)\n    {\n   \
    \     result[letter]++;\n    }\n    long max = maxElement(result.values);\n  \
    \  if(max == 0)\n    {\n        return null;\n    }\n    else\n    {\n       \
    \ return result.filter!(a => a.value == max);\n    }\n}", "{\n    Nullable!(long[string])\
    \ result;\n    if(test.length == 0)\n    {\n        return null;\n    }\n    string[]\
    \ words = test.split(\" \");\n    long[string] counts;\n    foreach(word; words)\n\
    \    {\n        counts[word]++;\n    }\n    long max = max(counts.values);\n \
    \   foreach(key, value; counts)\n    {\n        if(value == max)\n        {\n\
    \            result.insert(key, value);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result;\n    long[string] histo;\n    foreach(c;\
    \ test.split())\n    {\n        if(histo.count(c) == 0)\n        {\n         \
    \   histo[c] = 1;\n        }\n        else\n        {\n            histo[c] +=\
    \ 1;\n        }\n    }\n    if(histo.length == 0)\n    {\n        return result;\n\
    \    }\n    long max = histo.values.max;\n    foreach(k, v; histo)\n    {\n  \
    \      if(v == max)\n        {\n            result.set(histo);\n            break;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[string] result;\n    foreach(c;\
    \ test.split)\n    {\n        if(c.length)\n        {\n            result[c]++;\n\
    \        }\n    }\n    if(result.length)\n    {\n        long max = result.values.max;\n\
    \        return result.filter!(a => a.value == max);\n    }\n    return null;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    long[string] hist = [:];\n\
    \    foreach(c; test.split)\n    {\n        if(c.length == 1)\n        {\n   \
    \         hist[c]++;\n        }\n    }\n    long max = maxElement(hist.values);\n\
    \    if(max > 0)\n    {\n        result = [:];\n        foreach(k, v; hist)\n\
    \        {\n            if(v == max)\n            {\n                result[k]\
    \ = v;\n            }\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
