name: HumanEval_16_count_distinct_characters
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
  xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
  */\nlong count_distinct_characters(string string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(char c; string)\n    {\n      \
    \  if(c.isAlpha)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n \
    \       if(c.isAlpha)\n        {\n            result++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    return string.toLower().chars.distinct.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return string.toLower().toSet().length;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    auto char_set = set!char();\n\
    \    foreach(char c; string)\n    {\n        char_set.insert(c);\n    }\n    return\
    \ char_set.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return string.toLower().toHashSet().length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (", "{\n    auto result = new HashSet!char;\n\
    \    foreach(c; string)\n    {\n        result.insert(c);\n    }\n    return result.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n\
    \            c = c.toLower;\n        }\n        if(!c.isAlpha)\n        {\n  \
    \          continue;\n        }\n        if(!count)\n        {\n            count++;\n\
    \        }\n        else\n        {\n            bool found = false;\n       \
    \     foreach(char d; string[0..count])\n            {\n                if(c ==\
    \ d)\n                {\n                    found = true;\n                 \
    \   break;\n                }\n            }\n            if(!found)\n       \
    \     {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters_2(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n        {\n            c = c.toLower;\n\
    \        }\n        if(!c.isAlpha)\n        {\n            continue;\n       \
    \ }\n        if(!count)\n        {\n            count++;\n        }\n        else\n\
    \        {\n            bool found = false;\n            foreach(char d; string[0..count])\n\
    \            {\n                if(c == d)\n                {\n              \
    \      found = true;\n                    break;\n                }\n        \
    \    }\n            if(!found)\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string string) \n\
    {\n    long count = 0;\n", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!string(string.tolower).distinct.length;\n}", "{\n    return\
    \ to!string(string.toLower()).unique.length;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_2(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.isAlpha)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters_3(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isAlpha)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_4(string string) \n{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
