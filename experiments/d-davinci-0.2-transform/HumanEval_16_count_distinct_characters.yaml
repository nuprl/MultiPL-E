name: HumanEval_16_count_distinct_characters
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
  xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
  */\nlong count_distinct_characters(string string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(char c; string)\n    {\n      \
    \  if(c.isAlpha)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n \
    \       if(c.isAlpha)\n        {\n            result++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    return string.toLower().chars.distinct.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return string.toLower().toSet().length;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    auto char_set = set!char();\n\
    \    foreach(char c; string)\n    {\n        char_set.insert(c);\n    }\n    return\
    \ char_set.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return string.toLower().toHashSet().length;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (", "{\n    auto result = new HashSet!char;\n\
    \    foreach(c; string)\n    {\n        result.insert(c);\n    }\n    return result.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n\
    \            c = c.toLower;\n        }\n        if(!c.isAlpha)\n        {\n  \
    \          continue;\n        }\n        if(!count)\n        {\n            count++;\n\
    \        }\n        else\n        {\n            bool found = false;\n       \
    \     foreach(char d; string[0..count])\n            {\n                if(c ==\
    \ d)\n                {\n                    found = true;\n                 \
    \   break;\n                }\n            }\n            if(!found)\n       \
    \     {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters_2(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isUpper)\n        {\n            c = c.toLower;\n\
    \        }\n        if(!c.isAlpha)\n        {\n            continue;\n       \
    \ }\n        if(!count)\n        {\n            count++;\n        }\n        else\n\
    \        {\n            bool found = false;\n            foreach(char d; string[0..count])\n\
    \            {\n                if(c == d)\n                {\n              \
    \      found = true;\n                    break;\n                }\n        \
    \    }\n            if(!found)\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string string) \n\
    {\n    long count = 0;\n", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!string(string.tolower).distinct.length;\n}", "{\n    return\
    \ to!string(string.toLower()).unique.length;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_2(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.isAlpha)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters_3(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isAlpha)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_4(string string) \n{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_", "{\n    auto char_set = set!char();\n\
    \    foreach(char c; string)\n    {\n        char_set.insert(c);\n    }\n    return\
    \ char_set.length;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.tolower() in count)\n            continue;\n        count++;\n\
    \    }\n    return count;\n}", "{\n    return to!string(string.toLower()).distinct.length;\n\
    }", "{\n    return to!string(string.toLower()).distinct.length;\n}", "{\n    return\
    \ set(string.toLowerCase).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    auto set\
    \ = new Set!char();\n    foreach(c; string)\n    {\n        set.insert(c);\n \
    \   }\n    return set.length;\n}", "{\n    return set!(char)(string).length;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in result)\n        {\n            continue;\n        }\n        result ~= c.tolower();\n\
    \    }\n    return result.length;\n}", "{\n    return set!(char)(string).length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    auto result\
    \ = new HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            c = c.toLower;\n        }\n        if(!count.counts.contains(c))\n\
    \        {\n            count.counts[c] = 1;\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return std.algorithm.uniq(string.toLower()).length;\n}", "{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!string(string.toLower).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return to!Set(string.toLower()).length;\n}", "{\n    return string.toLower().unique.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n\
    \        {\n            count++;\n        }\n        else if(c.isLower)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  auto result = new HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    return uniq(string.toLower()).length;\n\
    }", "{\n    return to!string(std.algorithm.uniq(string.toLower()));\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in result)\n        {\n            result ~= c.tolower();\n        }\n    }\n\
    \    return result.length;\n}", "{\n    long count = 0;\n    foreach(char c; string)\
    \ \n    {\n        if(c.isAlpha) \n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.tolower() != c.toupper())\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    auto result = set!char();\n\
    \    foreach(c; string)\n    {\n        result.insert(toLower(c));\n    }\n  \
    \  return result.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return string.toLower().length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    auto set = new Set!char();\n    foreach(c; string)\n    {\n      \
    \  set.insert(c);\n    }\n    return set.length;\n}", "{\n    return string.toLower().chars.distinct.length;\n\
    }", "{\n    return to!string(string.toLower()).unique.length;\n}", "{\n    return\
    \ string.toLower().toHashSet().length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n}", "{\n\
    \    auto result = 0L;\n    auto chars = new HashSet!char();\n    foreach(c; string)\n\
    \    {\n        chars.insert(c);\n    }\n    return chars.length;\n}", "{\n  \
    \  auto result = set!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.isLetter)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(", "{\n    auto char_set = set!char();\n    foreach(char\
    \ c; string)\n    {\n        char_set.insert(c);\n    }\n    return char_set.length;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in result)\n        {\n            result ~= c.tolower();\n        }\n    }\n\
    \    return result.length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if (c.isLetter)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    return set(string.toLowerCase).length;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if(!count)\
    \ \n        {\n            count++;\n        }\n        else \n        {\n   \
    \         bool found = false;\n            foreach(char c2; string[0..count])\
    \ \n            {\n                if(c == c2) \n                {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \         }\n            if(!found) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n \
    \           c = c.toLower;\n        }\n        if(!count.in(c))\n        {\n \
    \           count[c] = 1;\n        }\n    }\n    return count.length;\n}", "{\n\
    \    auto result = new HashSet!(char)();\n    foreach(c; string) \n    {\n   \
    \     result.insert(toLower(c));\n    }\n    return result.length;\n}", "{\n \
    \   long count = 0;\n    foreach(char c; string)\n    {\n        if(c == ' ')\n\
    \            continue;\n        if(c >= 'A' && c <= 'Z')\n            c = tolower(c);\n\
    \        if(!count)\n            count++;\n        else\n        {\n         \
    \   bool found = false;\n            foreach(char c2; string)\n            {\n\
    \                if(c2 == ' ')\n                    continue;\n              \
    \  if(c2 >= 'A' && c2 <= 'Z')\n                    c2 = tolower(c2);\n       \
    \         if(c == c2)\n                {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if(!found)\n\
    \                count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ string.toLower().toHashSet().length;\n}", "{\n    return to!string(string.toLower()).unique.length;\n\
    }", "{\n    return set(string.toLower()).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n        {\n  \
    \          count++;\n        }\n        else\n        {\n            bool found\
    \ = false;\n            foreach(char c2; string[0..$-1])\n            {\n    \
    \            if(tolower(c) == tolower(c2))\n                {\n              \
    \      found = true;\n                    break;\n                }\n        \
    \    }\n            if(!found)\n            {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}", "{\n    return string.toLower().chars.distinct.length;\n\
    }", "{\n    // TODO: implement\n    return 0;\n}", "{\n    auto char_count = long[char.max];\n\
    \    foreach(char c; string) \n    {\n        char_count[c]++;\n    }\n    return\
    \ countUntil!(x => x > 0)(char_count);\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    auto char_set\
    \ = new Set!char;\n    foreach(char c; string)\n    {\n        char_set.insert(c);\n\
    \    }\n    return char_set.length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool found = false;\n            foreach(char c2; string[0..count])\n  \
    \          {\n                if(c == c2)\n                {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n            if(!found)\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return set!(char)(string).length;\n}", "{\n    long count = 0;\n \
    \   foreach(char c; string)\n    {\n        if(!count)\n        {\n          \
    \  count++;\n        }\n        else\n        {\n            bool found = false;\n\
    \            foreach(char c2; string[0..count])\n            {\n             \
    \   if(c == c2)\n                {\n                    found = true;\n      \
    \              break;\n                }\n            }\n            if(!found)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n \
    \   {\n        if(!count)\n        {\n            count++;\n        }\n      \
    \  else\n        {\n            bool found = false;\n            foreach(char\
    \ d; string[0..count])\n            {\n                if(c == d)\n          \
    \      {\n                    found = true;\n                    break;\n    \
    \            }\n            }\n            if(!found)\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    auto result = new HashSet!char;\n    foreach(char c; string)\n    {\n   \
    \     result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_2(string string) \n\
    {\n    auto result = new HashSet!char;\n    foreach(char c; string)\n    {\n \
    \       result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string string) \n\
    {\n    auto result = new HashSet!char;\n    foreach(char c; string)\n    {\n \
    \       result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_4(string string) \n\
    {\n    auto result = new HashSet!char;\n    foreach(char c; string)\n    {\n \
    \       result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_5(string string) \n\
    {\n    auto result = new", "{\n    return string.toLower().toSet().length;\n}",
  "{\n    return to!(long)(reduce!((a, b) => a + b, map!((c) => 1, string.toLower())));\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return to!string(string.toLower).length;\n}", "{\n    auto chars =\
    \ string.toLower();\n    return chars.length - chars.count(' ');\n}", "{\n   \
    \ return string.toLower().toHashSet().length;\n}", "{\n    auto result = new Set!char;\n\
    \    foreach(c; string)\n    {\n        result.insert(c);\n    }\n    return result.length;\n\
    }", "{\n    auto chars = array(string.toLower());\n    return chars.length - chars.dup.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    // TODO:\
    \ implement\n    return 0;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    auto result = SortedRange!(char)(string);\n\
    \    return result.length;\n}", "{\n    // TODO: implement\n    return 0;\n}",
  "{\n    return set(string.toLowerCase).length;\n}", "{\n    auto char_set = set!char();\n\
    \    foreach(c; string)\n    {\n        char_set.insert(toLower(c));\n    }\n\
    \    return char_set.length;\n}", "{\n    long count = 0;\n    foreach(char c;\
    \ string)\n    {\n        if(c.isAlpha)\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    auto char_set = set!char();\n \
    \   foreach(c; string)\n    {\n        char_set.insert(c);\n    }\n    return\
    \ char_set.length;\n}", "{\n    long result = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c.isLetter)\n        {\n            result++;\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if (c.tolower() == c)\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return set(string.toLower).length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() == c.toupper())\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters2(string string) \n\
    {\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ == c.toupper())\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters3(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() == c.toupper())\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters4(string string) \n\
    {\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ == c.toupper())\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")",
  "{\n    return string.toLower().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does", "{\n    return string.toLower().chars.uniq.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return string.toLower().chars.uniq.length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().chars.uniq.length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().chars.uniq.length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().chars.uniq.length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().chars.uniq.length;\n}\n/*", "{\n    auto distinct_characters\
    \ = new HashSet!char;\n    foreach(character; string)\n    {\n        distinct_characters.insert(character);\n\
    \    }\n    return distinct_characters.length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return to!string(string.toLower()).distinct.length;\n}", "{\n    return\
    \ to!string(string.toLower).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return uniq(string.toLower).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().toHashSet().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool flag = true;\n            foreach(char d; string[0..count])\n     \
    \       {\n                if(c == d)\n                {\n                   \
    \ flag = false;\n                    break;\n                }\n            }\n\
    \            if(flag)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    auto char_set = set!char();\n    foreach(char c;\
    \ string)\n    {\n        char_set.insert(c);\n    }\n    return char_set.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(!(c\
    \ in count))\n        {\n            count[c] = 1;\n        }\n    }\n    return\
    \ count.length;\n}", "{\n    auto result = new HashSet!char;\n    foreach(char\
    \ c; string)\n    {\n        result.insert(c);\n    }\n    return result.length;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in result)\n        {\n            result ~= c.tolower();\n        }\n    }\n\
    \    return result.length;\n}", "{\n    return string.toLower().length;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return string.toLower().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    return string.toLower().length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return string.toLower().length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return string.toLower().length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n       \
    \ if(c.tolower() in count)\n            continue;\n        count++;\n    }\n \
    \   return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c; string)\n    {\n        if(c.tolower() in count)\n       \
    \     continue;\n        count++;\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() in count)\n            continue;\n        count++;\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong", "{\n    return string.toLower().distinct.length;\n}", "{\n    long\
    \ count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n\
    \        {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string) \n    {\n        if(c.isLetter)\
    \ \n        {\n            result += 1;\n        }\n    }\n    return result;\n\
    }", "{\n    return set!(char)(string).length;\n}", "{\n    auto char_set = set!char();\n\
    \    foreach(char c; string)\n    {\n        char_set.insert(c);\n    }\n    return\
    \ char_set.length;\n}", "{\n    return string.toLower().toHashSet().length;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    auto chars = string.toLower().chars;\n    auto set = chars.array.uniq;\n\
    \    return set.length;\n}", "{\n    return set(string.toLower()).length;\n}",
  "{\n    return to!(long)(set(string.toLower()).length);\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return string.toLower().toSet().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n\
    \        result.insert(c);\n    }\n    return result.length;\n}", "{\n    return\
    \ to!string(string.toLower()).unique().length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isUpper)\n        {\n      \
    \      count++;\n        }\n        else if(c.isLower)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    return set!(char)(string).length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    auto set = new Set!(char)();\n    foreach(c; string)\n    {\n    \
    \    set.insert(c);\n    }\n    return set.length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(!count)\n        {\n         \
    \   count++;\n        }\n        else\n        {\n            bool flag = true;\n\
    \            foreach(char c2; string[0..count])\n            {\n             \
    \   if(c2 == c)\n                {\n                    flag = false;\n      \
    \              break;\n                }\n            }\n            if(flag)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n \
    \   {\n        if(c.isLetter)\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_2(string string) \n{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string string) \n\
    {\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_4(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.isLetter)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return\
    \ string.toLower().length;\n}", "{\n    return string.toLower().length;\n}", "{\n\
    \    return to!string(string.toLower()).distinct.length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().unique.length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return std.algorithm.uniq(string.toLower).length;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return set(string.toLower()).length;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
